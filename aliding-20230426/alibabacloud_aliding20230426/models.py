# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class AddAttendeeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAttendeeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class AddAttendeeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: AddAttendeeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(AddAttendeeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = AddAttendeeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class AddAttendeeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAttendeeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class AddAttendeeRequestAttendeesToAdd(TeaModel):
    def __init__(self, id=None, is_optional=None):
        self.id = id  # type: str
        self.is_optional = is_optional  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAttendeeRequestAttendeesToAdd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        return self


class AddAttendeeRequest(TeaModel):
    def __init__(self, attendees_to_add=None, calendar_id=None, event_id=None, chat_notification=None,
                 push_notification=None):
        self.attendees_to_add = attendees_to_add  # type: list[AddAttendeeRequestAttendeesToAdd]
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.chat_notification = chat_notification  # type: bool
        self.push_notification = push_notification  # type: bool

    def validate(self):
        if self.attendees_to_add:
            for k in self.attendees_to_add:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AddAttendeeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttendeesToAdd'] = []
        if self.attendees_to_add is not None:
            for k in self.attendees_to_add:
                result['AttendeesToAdd'].append(k.to_map() if k else None)
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.chat_notification is not None:
            result['chatNotification'] = self.chat_notification
        if self.push_notification is not None:
            result['pushNotification'] = self.push_notification
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees_to_add = []
        if m.get('AttendeesToAdd') is not None:
            for k in m.get('AttendeesToAdd'):
                temp_model = AddAttendeeRequestAttendeesToAdd()
                self.attendees_to_add.append(temp_model.from_map(k))
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('chatNotification') is not None:
            self.chat_notification = m.get('chatNotification')
        if m.get('pushNotification') is not None:
            self.push_notification = m.get('pushNotification')
        return self


class AddAttendeeShrinkRequest(TeaModel):
    def __init__(self, attendees_to_add_shrink=None, calendar_id=None, event_id=None, chat_notification=None,
                 push_notification=None):
        self.attendees_to_add_shrink = attendees_to_add_shrink  # type: str
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.chat_notification = chat_notification  # type: bool
        self.push_notification = push_notification  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAttendeeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attendees_to_add_shrink is not None:
            result['AttendeesToAdd'] = self.attendees_to_add_shrink
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.chat_notification is not None:
            result['chatNotification'] = self.chat_notification
        if self.push_notification is not None:
            result['pushNotification'] = self.push_notification
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttendeesToAdd') is not None:
            self.attendees_to_add_shrink = m.get('AttendeesToAdd')
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('chatNotification') is not None:
            self.chat_notification = m.get('chatNotification')
        if m.get('pushNotification') is not None:
            self.push_notification = m.get('pushNotification')
        return self


class AddAttendeeResponseBodyContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: any

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAttendeeResponseBodyContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        return self


class AddAttendeeResponseBody(TeaModel):
    def __init__(self, content=None, error_code=None, error_ctx=None, error_msg=None, http_status_code=None,
                 request_id=None, success=None):
        self.content = content  # type: AddAttendeeResponseBodyContent
        self.error_code = error_code  # type: str
        self.error_ctx = error_ctx  # type: dict[str, any]
        self.error_msg = error_msg  # type: str
        self.http_status_code = http_status_code  # type: int
        # RequestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(AddAttendeeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_ctx is not None:
            result['ErrorCtx'] = self.error_ctx
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = AddAttendeeResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorCtx') is not None:
            self.error_ctx = m.get('ErrorCtx')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddAttendeeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddAttendeeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddAttendeeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAttendeeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddMeetingRoomsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddMeetingRoomsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class AddMeetingRoomsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: AddMeetingRoomsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(AddMeetingRoomsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = AddMeetingRoomsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class AddMeetingRoomsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddMeetingRoomsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class AddMeetingRoomsRequestMeetingRoomsToAdd(TeaModel):
    def __init__(self, room_id=None):
        self.room_id = room_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddMeetingRoomsRequestMeetingRoomsToAdd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        return self


class AddMeetingRoomsRequest(TeaModel):
    def __init__(self, calendar_id=None, event_id=None, meeting_rooms_to_add=None):
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.meeting_rooms_to_add = meeting_rooms_to_add  # type: list[AddMeetingRoomsRequestMeetingRoomsToAdd]

    def validate(self):
        if self.meeting_rooms_to_add:
            for k in self.meeting_rooms_to_add:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AddMeetingRoomsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        result['MeetingRoomsToAdd'] = []
        if self.meeting_rooms_to_add is not None:
            for k in self.meeting_rooms_to_add:
                result['MeetingRoomsToAdd'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        self.meeting_rooms_to_add = []
        if m.get('MeetingRoomsToAdd') is not None:
            for k in m.get('MeetingRoomsToAdd'):
                temp_model = AddMeetingRoomsRequestMeetingRoomsToAdd()
                self.meeting_rooms_to_add.append(temp_model.from_map(k))
        return self


class AddMeetingRoomsShrinkRequest(TeaModel):
    def __init__(self, calendar_id=None, event_id=None, meeting_rooms_to_add_shrink=None):
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.meeting_rooms_to_add_shrink = meeting_rooms_to_add_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddMeetingRoomsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.meeting_rooms_to_add_shrink is not None:
            result['MeetingRoomsToAdd'] = self.meeting_rooms_to_add_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('MeetingRoomsToAdd') is not None:
            self.meeting_rooms_to_add_shrink = m.get('MeetingRoomsToAdd')
        return self


class AddMeetingRoomsResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddMeetingRoomsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class AddMeetingRoomsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddMeetingRoomsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddMeetingRoomsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddMeetingRoomsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddScenegroupMemberHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScenegroupMemberHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class AddScenegroupMemberHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: AddScenegroupMemberHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(AddScenegroupMemberHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = AddScenegroupMemberHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class AddScenegroupMemberShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScenegroupMemberShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class AddScenegroupMemberRequest(TeaModel):
    def __init__(self, open_conversation_id=None, user_ids=None):
        self.open_conversation_id = open_conversation_id  # type: str
        self.user_ids = user_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScenegroupMemberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['OpenConversationId'] = self.open_conversation_id
        if self.user_ids is not None:
            result['UserIds'] = self.user_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OpenConversationId') is not None:
            self.open_conversation_id = m.get('OpenConversationId')
        if m.get('UserIds') is not None:
            self.user_ids = m.get('UserIds')
        return self


class AddScenegroupMemberResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScenegroupMemberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class AddScenegroupMemberResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddScenegroupMemberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddScenegroupMemberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddScenegroupMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddWorkspaceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class AddWorkspaceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: AddWorkspaceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(AddWorkspaceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = AddWorkspaceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class AddWorkspaceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class AddWorkspaceRequestOption(TeaModel):
    def __init__(self, description=None, team_id=None):
        self.description = description  # type: str
        self.team_id = team_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceRequestOption, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        return self


class AddWorkspaceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class AddWorkspaceRequest(TeaModel):
    def __init__(self, name=None, option=None, tenant_context=None):
        self.name = name  # type: str
        self.option = option  # type: AddWorkspaceRequestOption
        self.tenant_context = tenant_context  # type: AddWorkspaceRequestTenantContext

    def validate(self):
        if self.option:
            self.option.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(AddWorkspaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.option is not None:
            result['Option'] = self.option.to_map()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Option') is not None:
            temp_model = AddWorkspaceRequestOption()
            self.option = temp_model.from_map(m['Option'])
        if m.get('TenantContext') is not None:
            temp_model = AddWorkspaceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class AddWorkspaceShrinkRequest(TeaModel):
    def __init__(self, name=None, option_shrink=None, tenant_context_shrink=None):
        self.name = name  # type: str
        self.option_shrink = option_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.option_shrink is not None:
            result['Option'] = self.option_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Option') is not None:
            self.option_shrink = m.get('Option')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class AddWorkspaceResponseBodyWorkspaceIcon(TeaModel):
    def __init__(self, type=None, value=None):
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceResponseBodyWorkspaceIcon, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AddWorkspaceResponseBodyWorkspace(TeaModel):
    def __init__(self, corp_id=None, cover=None, create_time=None, creator_id=None, description=None, icon=None,
                 modified_time=None, modifier_id=None, name=None, permission_role=None, root_node_id=None, team_id=None, type=None,
                 url=None, workspace_id=None):
        self.corp_id = corp_id  # type: str
        self.cover = cover  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.icon = icon  # type: AddWorkspaceResponseBodyWorkspaceIcon
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.permission_role = permission_role  # type: str
        self.root_node_id = root_node_id  # type: str
        self.team_id = team_id  # type: str
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.icon:
            self.icon.validate()

    def to_map(self):
        _map = super(AddWorkspaceResponseBodyWorkspace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.cover is not None:
            result['Cover'] = self.cover
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.description is not None:
            result['Description'] = self.description
        if self.icon is not None:
            result['Icon'] = self.icon.to_map()
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.root_node_id is not None:
            result['RootNodeId'] = self.root_node_id
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Cover') is not None:
            self.cover = m.get('Cover')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Icon') is not None:
            temp_model = AddWorkspaceResponseBodyWorkspaceIcon()
            self.icon = temp_model.from_map(m['Icon'])
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('RootNodeId') is not None:
            self.root_node_id = m.get('RootNodeId')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class AddWorkspaceResponseBody(TeaModel):
    def __init__(self, request_id=None, workspace=None):
        # requestId
        self.request_id = request_id  # type: str
        self.workspace = workspace  # type: AddWorkspaceResponseBodyWorkspace

    def validate(self):
        if self.workspace:
            self.workspace.validate()

    def to_map(self):
        _map = super(AddWorkspaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.workspace is not None:
            result['workspace'] = self.workspace.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('workspace') is not None:
            temp_model = AddWorkspaceResponseBodyWorkspace()
            self.workspace = temp_model.from_map(m['workspace'])
        return self


class AddWorkspaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddWorkspaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddWorkspaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddWorkspaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddWorkspaceDocMembersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceDocMembersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class AddWorkspaceDocMembersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: AddWorkspaceDocMembersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(AddWorkspaceDocMembersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = AddWorkspaceDocMembersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class AddWorkspaceDocMembersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceDocMembersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class AddWorkspaceDocMembersRequestMembers(TeaModel):
    def __init__(self, member_id=None, member_type=None, role_type=None):
        self.member_id = member_id  # type: str
        self.member_type = member_type  # type: str
        self.role_type = role_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceDocMembersRequestMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        if self.role_type is not None:
            result['RoleType'] = self.role_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        if m.get('RoleType') is not None:
            self.role_type = m.get('RoleType')
        return self


class AddWorkspaceDocMembersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceDocMembersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class AddWorkspaceDocMembersRequest(TeaModel):
    def __init__(self, members=None, node_id=None, tenant_context=None, workspace_id=None):
        self.members = members  # type: list[AddWorkspaceDocMembersRequestMembers]
        self.node_id = node_id  # type: str
        self.tenant_context = tenant_context  # type: AddWorkspaceDocMembersRequestTenantContext
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(AddWorkspaceDocMembersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = AddWorkspaceDocMembersRequestMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            temp_model = AddWorkspaceDocMembersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class AddWorkspaceDocMembersShrinkRequest(TeaModel):
    def __init__(self, members_shrink=None, node_id=None, tenant_context_shrink=None, workspace_id=None):
        self.members_shrink = members_shrink  # type: str
        self.node_id = node_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceDocMembersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.members_shrink is not None:
            result['Members'] = self.members_shrink
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Members') is not None:
            self.members_shrink = m.get('Members')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class AddWorkspaceDocMembersResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceDocMembersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class AddWorkspaceDocMembersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddWorkspaceDocMembersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddWorkspaceDocMembersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddWorkspaceDocMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddWorkspaceMembersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceMembersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class AddWorkspaceMembersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: AddWorkspaceMembersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(AddWorkspaceMembersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = AddWorkspaceMembersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class AddWorkspaceMembersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceMembersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class AddWorkspaceMembersRequestMembers(TeaModel):
    def __init__(self, member_id=None, member_type=None, role_type=None):
        self.member_id = member_id  # type: str
        self.member_type = member_type  # type: str
        self.role_type = role_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceMembersRequestMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        if self.role_type is not None:
            result['RoleType'] = self.role_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        if m.get('RoleType') is not None:
            self.role_type = m.get('RoleType')
        return self


class AddWorkspaceMembersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceMembersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class AddWorkspaceMembersRequest(TeaModel):
    def __init__(self, members=None, tenant_context=None, workspace_id=None):
        self.members = members  # type: list[AddWorkspaceMembersRequestMembers]
        self.tenant_context = tenant_context  # type: AddWorkspaceMembersRequestTenantContext
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(AddWorkspaceMembersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = AddWorkspaceMembersRequestMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('TenantContext') is not None:
            temp_model = AddWorkspaceMembersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class AddWorkspaceMembersShrinkRequest(TeaModel):
    def __init__(self, members_shrink=None, tenant_context_shrink=None, workspace_id=None):
        self.members_shrink = members_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceMembersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.members_shrink is not None:
            result['Members'] = self.members_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Members') is not None:
            self.members_shrink = m.get('Members')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class AddWorkspaceMembersResponseBody(TeaModel):
    def __init__(self, not_in_org_list=None, request_id=None):
        self.not_in_org_list = not_in_org_list  # type: list[str]
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddWorkspaceMembersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.not_in_org_list is not None:
            result['NotInOrgList'] = self.not_in_org_list
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NotInOrgList') is not None:
            self.not_in_org_list = m.get('NotInOrgList')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class AddWorkspaceMembersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddWorkspaceMembersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddWorkspaceMembersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddWorkspaceMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchGetFormDataByIdListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchGetFormDataByIdListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class BatchGetFormDataByIdListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: BatchGetFormDataByIdListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(BatchGetFormDataByIdListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = BatchGetFormDataByIdListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class BatchGetFormDataByIdListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchGetFormDataByIdListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class BatchGetFormDataByIdListRequest(TeaModel):
    def __init__(self, app_type=None, form_instance_id_list=None, form_uuid=None, need_form_instance_value=None,
                 system_token=None):
        self.app_type = app_type  # type: str
        self.form_instance_id_list = form_instance_id_list  # type: list[str]
        self.form_uuid = form_uuid  # type: str
        self.need_form_instance_value = need_form_instance_value  # type: bool
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchGetFormDataByIdListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_instance_id_list is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.need_form_instance_value is not None:
            result['NeedFormInstanceValue'] = self.need_form_instance_value
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('NeedFormInstanceValue') is not None:
            self.need_form_instance_value = m.get('NeedFormInstanceValue')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class BatchGetFormDataByIdListShrinkRequest(TeaModel):
    def __init__(self, app_type=None, form_instance_id_list_shrink=None, form_uuid=None,
                 need_form_instance_value=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_instance_id_list_shrink = form_instance_id_list_shrink  # type: str
        self.form_uuid = form_uuid  # type: str
        self.need_form_instance_value = need_form_instance_value  # type: bool
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchGetFormDataByIdListShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_instance_id_list_shrink is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list_shrink
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.need_form_instance_value is not None:
            result['NeedFormInstanceValue'] = self.need_form_instance_value
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list_shrink = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('NeedFormInstanceValue') is not None:
            self.need_form_instance_value = m.get('NeedFormInstanceValue')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class BatchGetFormDataByIdListResponseBodyResultModifyUserName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchGetFormDataByIdListResponseBodyResultModifyUserName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        return self


class BatchGetFormDataByIdListResponseBodyResultModifyUser(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: BatchGetFormDataByIdListResponseBodyResultModifyUserName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(BatchGetFormDataByIdListResponseBodyResultModifyUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            temp_model = BatchGetFormDataByIdListResponseBodyResultModifyUserName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class BatchGetFormDataByIdListResponseBodyResultOriginatorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchGetFormDataByIdListResponseBodyResultOriginatorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        return self


class BatchGetFormDataByIdListResponseBodyResultOriginator(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: BatchGetFormDataByIdListResponseBodyResultOriginatorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(BatchGetFormDataByIdListResponseBodyResultOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            temp_model = BatchGetFormDataByIdListResponseBodyResultOriginatorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class BatchGetFormDataByIdListResponseBodyResult(TeaModel):
    def __init__(self, create_time_gmt=None, creator_user_id=None, form_data=None, form_instance_id=None,
                 form_uuid=None, id=None, instance_value=None, modified_time_gmt=None, modifier=None, modify_user=None,
                 originator=None, sequence=None, serial_number=None, title=None, version=None):
        self.create_time_gmt = create_time_gmt  # type: str
        self.creator_user_id = creator_user_id  # type: str
        self.form_data = form_data  # type: dict[str, any]
        self.form_instance_id = form_instance_id  # type: str
        self.form_uuid = form_uuid  # type: str
        self.id = id  # type: long
        self.instance_value = instance_value  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.modifier = modifier  # type: str
        self.modify_user = modify_user  # type: BatchGetFormDataByIdListResponseBodyResultModifyUser
        self.originator = originator  # type: BatchGetFormDataByIdListResponseBodyResultOriginator
        self.sequence = sequence  # type: str
        self.serial_number = serial_number  # type: str
        self.title = title  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.modify_user:
            self.modify_user.validate()
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(BatchGetFormDataByIdListResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time_gmt is not None:
            result['CreateTimeGMT'] = self.create_time_gmt
        if self.creator_user_id is not None:
            result['CreatorUserId'] = self.creator_user_id
        if self.form_data is not None:
            result['FormData'] = self.form_data
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_value is not None:
            result['InstanceValue'] = self.instance_value
        if self.modified_time_gmt is not None:
            result['ModifiedTimeGMT'] = self.modified_time_gmt
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.modify_user is not None:
            result['ModifyUser'] = self.modify_user.to_map()
        if self.originator is not None:
            result['Originator'] = self.originator.to_map()
        if self.sequence is not None:
            result['Sequence'] = self.sequence
        if self.serial_number is not None:
            result['SerialNumber'] = self.serial_number
        if self.title is not None:
            result['Title'] = self.title
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTimeGMT') is not None:
            self.create_time_gmt = m.get('CreateTimeGMT')
        if m.get('CreatorUserId') is not None:
            self.creator_user_id = m.get('CreatorUserId')
        if m.get('FormData') is not None:
            self.form_data = m.get('FormData')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceValue') is not None:
            self.instance_value = m.get('InstanceValue')
        if m.get('ModifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('ModifiedTimeGMT')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('ModifyUser') is not None:
            temp_model = BatchGetFormDataByIdListResponseBodyResultModifyUser()
            self.modify_user = temp_model.from_map(m['ModifyUser'])
        if m.get('Originator') is not None:
            temp_model = BatchGetFormDataByIdListResponseBodyResultOriginator()
            self.originator = temp_model.from_map(m['Originator'])
        if m.get('Sequence') is not None:
            self.sequence = m.get('Sequence')
        if m.get('SerialNumber') is not None:
            self.serial_number = m.get('SerialNumber')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class BatchGetFormDataByIdListResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[BatchGetFormDataByIdListResponseBodyResult]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(BatchGetFormDataByIdListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = BatchGetFormDataByIdListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class BatchGetFormDataByIdListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: BatchGetFormDataByIdListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(BatchGetFormDataByIdListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchGetFormDataByIdListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchRemovalByFormInstanceIdListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchRemovalByFormInstanceIdListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class BatchRemovalByFormInstanceIdListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: BatchRemovalByFormInstanceIdListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(BatchRemovalByFormInstanceIdListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = BatchRemovalByFormInstanceIdListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class BatchRemovalByFormInstanceIdListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchRemovalByFormInstanceIdListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class BatchRemovalByFormInstanceIdListRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, execute_expression=None,
                 form_instance_id_list=None, form_uuid=None, system_token=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.execute_expression = execute_expression  # type: bool
        self.form_instance_id_list = form_instance_id_list  # type: list[str]
        self.form_uuid = form_uuid  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchRemovalByFormInstanceIdListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.execute_expression is not None:
            result['ExecuteExpression'] = self.execute_expression
        if self.form_instance_id_list is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('ExecuteExpression') is not None:
            self.execute_expression = m.get('ExecuteExpression')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class BatchRemovalByFormInstanceIdListShrinkRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, execute_expression=None,
                 form_instance_id_list_shrink=None, form_uuid=None, system_token=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.execute_expression = execute_expression  # type: bool
        self.form_instance_id_list_shrink = form_instance_id_list_shrink  # type: str
        self.form_uuid = form_uuid  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchRemovalByFormInstanceIdListShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.execute_expression is not None:
            result['ExecuteExpression'] = self.execute_expression
        if self.form_instance_id_list_shrink is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list_shrink
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('ExecuteExpression') is not None:
            self.execute_expression = m.get('ExecuteExpression')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list_shrink = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class BatchRemovalByFormInstanceIdListResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchRemovalByFormInstanceIdListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class BatchRemovalByFormInstanceIdListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: BatchRemovalByFormInstanceIdListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(BatchRemovalByFormInstanceIdListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchRemovalByFormInstanceIdListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchSaveFormDataHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchSaveFormDataHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class BatchSaveFormDataHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: BatchSaveFormDataHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(BatchSaveFormDataHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = BatchSaveFormDataHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class BatchSaveFormDataShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchSaveFormDataShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class BatchSaveFormDataRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, form_data_json_list=None, form_uuid=None,
                 keep_running_after_exception=None, no_execute_expression=None, system_token=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.form_data_json_list = form_data_json_list  # type: list[str]
        self.form_uuid = form_uuid  # type: str
        self.keep_running_after_exception = keep_running_after_exception  # type: bool
        self.no_execute_expression = no_execute_expression  # type: bool
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchSaveFormDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.form_data_json_list is not None:
            result['FormDataJsonList'] = self.form_data_json_list
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.keep_running_after_exception is not None:
            result['KeepRunningAfterException'] = self.keep_running_after_exception
        if self.no_execute_expression is not None:
            result['NoExecuteExpression'] = self.no_execute_expression
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('FormDataJsonList') is not None:
            self.form_data_json_list = m.get('FormDataJsonList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('KeepRunningAfterException') is not None:
            self.keep_running_after_exception = m.get('KeepRunningAfterException')
        if m.get('NoExecuteExpression') is not None:
            self.no_execute_expression = m.get('NoExecuteExpression')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class BatchSaveFormDataShrinkRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, form_data_json_list_shrink=None, form_uuid=None,
                 keep_running_after_exception=None, no_execute_expression=None, system_token=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.form_data_json_list_shrink = form_data_json_list_shrink  # type: str
        self.form_uuid = form_uuid  # type: str
        self.keep_running_after_exception = keep_running_after_exception  # type: bool
        self.no_execute_expression = no_execute_expression  # type: bool
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchSaveFormDataShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.form_data_json_list_shrink is not None:
            result['FormDataJsonList'] = self.form_data_json_list_shrink
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.keep_running_after_exception is not None:
            result['KeepRunningAfterException'] = self.keep_running_after_exception
        if self.no_execute_expression is not None:
            result['NoExecuteExpression'] = self.no_execute_expression
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('FormDataJsonList') is not None:
            self.form_data_json_list_shrink = m.get('FormDataJsonList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('KeepRunningAfterException') is not None:
            self.keep_running_after_exception = m.get('KeepRunningAfterException')
        if m.get('NoExecuteExpression') is not None:
            self.no_execute_expression = m.get('NoExecuteExpression')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class BatchSaveFormDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[str]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchSaveFormDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class BatchSaveFormDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: BatchSaveFormDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(BatchSaveFormDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchSaveFormDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchUpdateFormDataByInstanceIdHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceIdHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class BatchUpdateFormDataByInstanceIdHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: BatchUpdateFormDataByInstanceIdHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceIdHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = BatchUpdateFormDataByInstanceIdHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class BatchUpdateFormDataByInstanceIdShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceIdShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class BatchUpdateFormDataByInstanceIdRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, form_instance_id_list=None, form_uuid=None,
                 ignore_empty=None, no_execute_expression=None, system_token=None, update_form_data_json=None,
                 use_latest_form_schema_version=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.form_instance_id_list = form_instance_id_list  # type: list[str]
        self.form_uuid = form_uuid  # type: str
        self.ignore_empty = ignore_empty  # type: bool
        self.no_execute_expression = no_execute_expression  # type: bool
        self.system_token = system_token  # type: str
        self.update_form_data_json = update_form_data_json  # type: str
        self.use_latest_form_schema_version = use_latest_form_schema_version  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.form_instance_id_list is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.ignore_empty is not None:
            result['IgnoreEmpty'] = self.ignore_empty
        if self.no_execute_expression is not None:
            result['NoExecuteExpression'] = self.no_execute_expression
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.update_form_data_json is not None:
            result['UpdateFormDataJson'] = self.update_form_data_json
        if self.use_latest_form_schema_version is not None:
            result['UseLatestFormSchemaVersion'] = self.use_latest_form_schema_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('IgnoreEmpty') is not None:
            self.ignore_empty = m.get('IgnoreEmpty')
        if m.get('NoExecuteExpression') is not None:
            self.no_execute_expression = m.get('NoExecuteExpression')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('UpdateFormDataJson') is not None:
            self.update_form_data_json = m.get('UpdateFormDataJson')
        if m.get('UseLatestFormSchemaVersion') is not None:
            self.use_latest_form_schema_version = m.get('UseLatestFormSchemaVersion')
        return self


class BatchUpdateFormDataByInstanceIdShrinkRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, form_instance_id_list_shrink=None,
                 form_uuid=None, ignore_empty=None, no_execute_expression=None, system_token=None,
                 update_form_data_json=None, use_latest_form_schema_version=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.form_instance_id_list_shrink = form_instance_id_list_shrink  # type: str
        self.form_uuid = form_uuid  # type: str
        self.ignore_empty = ignore_empty  # type: bool
        self.no_execute_expression = no_execute_expression  # type: bool
        self.system_token = system_token  # type: str
        self.update_form_data_json = update_form_data_json  # type: str
        self.use_latest_form_schema_version = use_latest_form_schema_version  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceIdShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.form_instance_id_list_shrink is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list_shrink
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.ignore_empty is not None:
            result['IgnoreEmpty'] = self.ignore_empty
        if self.no_execute_expression is not None:
            result['NoExecuteExpression'] = self.no_execute_expression
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.update_form_data_json is not None:
            result['UpdateFormDataJson'] = self.update_form_data_json
        if self.use_latest_form_schema_version is not None:
            result['UseLatestFormSchemaVersion'] = self.use_latest_form_schema_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list_shrink = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('IgnoreEmpty') is not None:
            self.ignore_empty = m.get('IgnoreEmpty')
        if m.get('NoExecuteExpression') is not None:
            self.no_execute_expression = m.get('NoExecuteExpression')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('UpdateFormDataJson') is not None:
            self.update_form_data_json = m.get('UpdateFormDataJson')
        if m.get('UseLatestFormSchemaVersion') is not None:
            self.use_latest_form_schema_version = m.get('UseLatestFormSchemaVersion')
        return self


class BatchUpdateFormDataByInstanceIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[str]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class BatchUpdateFormDataByInstanceIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: BatchUpdateFormDataByInstanceIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchUpdateFormDataByInstanceIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchUpdateFormDataByInstanceMapHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceMapHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class BatchUpdateFormDataByInstanceMapHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: BatchUpdateFormDataByInstanceMapHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceMapHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = BatchUpdateFormDataByInstanceMapHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class BatchUpdateFormDataByInstanceMapShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceMapShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class BatchUpdateFormDataByInstanceMapRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, form_uuid=None, ignore_empty=None,
                 no_execute_expression=None, system_token=None, update_form_data_json_map=None, use_latest_form_schema_version=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.form_uuid = form_uuid  # type: str
        self.ignore_empty = ignore_empty  # type: bool
        self.no_execute_expression = no_execute_expression  # type: bool
        self.system_token = system_token  # type: str
        self.update_form_data_json_map = update_form_data_json_map  # type: dict[str, any]
        self.use_latest_form_schema_version = use_latest_form_schema_version  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceMapRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.ignore_empty is not None:
            result['IgnoreEmpty'] = self.ignore_empty
        if self.no_execute_expression is not None:
            result['NoExecuteExpression'] = self.no_execute_expression
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.update_form_data_json_map is not None:
            result['UpdateFormDataJsonMap'] = self.update_form_data_json_map
        if self.use_latest_form_schema_version is not None:
            result['UseLatestFormSchemaVersion'] = self.use_latest_form_schema_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('IgnoreEmpty') is not None:
            self.ignore_empty = m.get('IgnoreEmpty')
        if m.get('NoExecuteExpression') is not None:
            self.no_execute_expression = m.get('NoExecuteExpression')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('UpdateFormDataJsonMap') is not None:
            self.update_form_data_json_map = m.get('UpdateFormDataJsonMap')
        if m.get('UseLatestFormSchemaVersion') is not None:
            self.use_latest_form_schema_version = m.get('UseLatestFormSchemaVersion')
        return self


class BatchUpdateFormDataByInstanceMapShrinkRequest(TeaModel):
    def __init__(self, app_type=None, asynchronous_execution=None, form_uuid=None, ignore_empty=None,
                 no_execute_expression=None, system_token=None, update_form_data_json_map_shrink=None,
                 use_latest_form_schema_version=None):
        self.app_type = app_type  # type: str
        self.asynchronous_execution = asynchronous_execution  # type: bool
        self.form_uuid = form_uuid  # type: str
        self.ignore_empty = ignore_empty  # type: bool
        self.no_execute_expression = no_execute_expression  # type: bool
        self.system_token = system_token  # type: str
        self.update_form_data_json_map_shrink = update_form_data_json_map_shrink  # type: str
        self.use_latest_form_schema_version = use_latest_form_schema_version  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceMapShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.asynchronous_execution is not None:
            result['AsynchronousExecution'] = self.asynchronous_execution
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.ignore_empty is not None:
            result['IgnoreEmpty'] = self.ignore_empty
        if self.no_execute_expression is not None:
            result['NoExecuteExpression'] = self.no_execute_expression
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.update_form_data_json_map_shrink is not None:
            result['UpdateFormDataJsonMap'] = self.update_form_data_json_map_shrink
        if self.use_latest_form_schema_version is not None:
            result['UseLatestFormSchemaVersion'] = self.use_latest_form_schema_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('AsynchronousExecution') is not None:
            self.asynchronous_execution = m.get('AsynchronousExecution')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('IgnoreEmpty') is not None:
            self.ignore_empty = m.get('IgnoreEmpty')
        if m.get('NoExecuteExpression') is not None:
            self.no_execute_expression = m.get('NoExecuteExpression')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('UpdateFormDataJsonMap') is not None:
            self.update_form_data_json_map_shrink = m.get('UpdateFormDataJsonMap')
        if m.get('UseLatestFormSchemaVersion') is not None:
            self.use_latest_form_schema_version = m.get('UseLatestFormSchemaVersion')
        return self


class BatchUpdateFormDataByInstanceMapResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[str]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceMapResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class BatchUpdateFormDataByInstanceMapResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: BatchUpdateFormDataByInstanceMapResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(BatchUpdateFormDataByInstanceMapResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchUpdateFormDataByInstanceMapResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelScheduleConferenceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelScheduleConferenceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CancelScheduleConferenceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CancelScheduleConferenceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CancelScheduleConferenceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CancelScheduleConferenceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CancelScheduleConferenceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelScheduleConferenceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CancelScheduleConferenceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelScheduleConferenceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CancelScheduleConferenceRequest(TeaModel):
    def __init__(self, schedule_conference_id=None, tenant_context=None):
        self.schedule_conference_id = schedule_conference_id  # type: str
        self.tenant_context = tenant_context  # type: CancelScheduleConferenceRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CancelScheduleConferenceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.schedule_conference_id is not None:
            result['ScheduleConferenceId'] = self.schedule_conference_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ScheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('ScheduleConferenceId')
        if m.get('TenantContext') is not None:
            temp_model = CancelScheduleConferenceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class CancelScheduleConferenceShrinkRequest(TeaModel):
    def __init__(self, schedule_conference_id=None, tenant_context_shrink=None):
        self.schedule_conference_id = schedule_conference_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelScheduleConferenceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.schedule_conference_id is not None:
            result['ScheduleConferenceId'] = self.schedule_conference_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ScheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('ScheduleConferenceId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class CancelScheduleConferenceResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelScheduleConferenceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class CancelScheduleConferenceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CancelScheduleConferenceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CancelScheduleConferenceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CancelScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ClearHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ClearHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ClearHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ClearHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ClearHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ClearShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ClearRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class ClearRequest(TeaModel):
    def __init__(self, range_address=None, sheet_id=None, tenant_context=None, workbook_id=None):
        self.range_address = range_address  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: ClearRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(ClearRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = ClearRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class ClearShrinkRequest(TeaModel):
    def __init__(self, range_address=None, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.range_address = range_address  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class ClearResponseBody(TeaModel):
    def __init__(self, a_1notation=None, request_id=None):
        self.a_1notation = a_1notation  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.a_1notation is not None:
            result['a1Notation'] = self.a_1notation
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('a1Notation') is not None:
            self.a_1notation = m.get('a1Notation')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class ClearResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ClearResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ClearResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ClearResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ClearDataHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearDataHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ClearDataHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ClearDataHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ClearDataHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ClearDataHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ClearDataShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearDataShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ClearDataRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearDataRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class ClearDataRequest(TeaModel):
    def __init__(self, range_address=None, sheet_id=None, tenant_context=None, workbook_id=None):
        self.range_address = range_address  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: ClearDataRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(ClearDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = ClearDataRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class ClearDataShrinkRequest(TeaModel):
    def __init__(self, range_address=None, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.range_address = range_address  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearDataShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class ClearDataResponseBody(TeaModel):
    def __init__(self, a_1notation=None, request_id=None):
        self.a_1notation = a_1notation  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.a_1notation is not None:
            result['a1Notation'] = self.a_1notation
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('a1Notation') is not None:
            self.a_1notation = m.get('a1Notation')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class ClearDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ClearDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ClearDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ClearDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommentListReportHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommentListReportHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CommentListReportHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CommentListReportHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CommentListReportHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CommentListReportHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CommentListReportShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommentListReportShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CommentListReportRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommentListReportRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CommentListReportRequest(TeaModel):
    def __init__(self, offset=None, report_id=None, size=None, tenant_context=None):
        self.offset = offset  # type: long
        self.report_id = report_id  # type: str
        self.size = size  # type: long
        self.tenant_context = tenant_context  # type: CommentListReportRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CommentListReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            temp_model = CommentListReportRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class CommentListReportShrinkRequest(TeaModel):
    def __init__(self, offset=None, report_id=None, size=None, tenant_context_shrink=None):
        self.offset = offset  # type: long
        self.report_id = report_id  # type: str
        self.size = size  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommentListReportShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class CommentListReportResponseBodyComments(TeaModel):
    def __init__(self, content=None, create_time=None, userid=None):
        self.content = content  # type: str
        self.create_time = create_time  # type: str
        self.userid = userid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommentListReportResponseBodyComments, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.userid is not None:
            result['Userid'] = self.userid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Userid') is not None:
            self.userid = m.get('Userid')
        return self


class CommentListReportResponseBody(TeaModel):
    def __init__(self, comments=None, has_more=None, next_cursor=None, request_id=None):
        self.comments = comments  # type: list[CommentListReportResponseBodyComments]
        self.has_more = has_more  # type: bool
        self.next_cursor = next_cursor  # type: long
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.comments:
            for k in self.comments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CommentListReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['comments'] = []
        if self.comments is not None:
            for k in self.comments:
                result['comments'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.comments = []
        if m.get('comments') is not None:
            for k in m.get('comments'):
                temp_model = CommentListReportResponseBodyComments()
                self.comments.append(temp_model.from_map(k))
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class CommentListReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CommentListReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CommentListReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CommentListReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDeliveryPlanHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeliveryPlanHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateDeliveryPlanHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateDeliveryPlanHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateDeliveryPlanHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateDeliveryPlanHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateDeliveryPlanShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeliveryPlanShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateDeliveryPlanRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeliveryPlanRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateDeliveryPlanRequest(TeaModel):
    def __init__(self, content=None, end_time=None, res_id=None, start_time=None, tenant_context=None,
                 user_id_list=None):
        self.content = content  # type: dict[str, any]
        self.end_time = end_time  # type: long
        self.res_id = res_id  # type: str
        self.start_time = start_time  # type: long
        self.tenant_context = tenant_context  # type: CreateDeliveryPlanRequestTenantContext
        self.user_id_list = user_id_list  # type: list[str]

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateDeliveryPlanRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.res_id is not None:
            result['ResId'] = self.res_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.user_id_list is not None:
            result['UserIdList'] = self.user_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ResId') is not None:
            self.res_id = m.get('ResId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            temp_model = CreateDeliveryPlanRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('UserIdList') is not None:
            self.user_id_list = m.get('UserIdList')
        return self


class CreateDeliveryPlanShrinkRequest(TeaModel):
    def __init__(self, content_shrink=None, end_time=None, res_id=None, start_time=None, tenant_context_shrink=None,
                 user_id_list_shrink=None):
        self.content_shrink = content_shrink  # type: str
        self.end_time = end_time  # type: long
        self.res_id = res_id  # type: str
        self.start_time = start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.user_id_list_shrink = user_id_list_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeliveryPlanShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_shrink is not None:
            result['Content'] = self.content_shrink
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.res_id is not None:
            result['ResId'] = self.res_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.user_id_list_shrink is not None:
            result['UserIdList'] = self.user_id_list_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content_shrink = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ResId') is not None:
            self.res_id = m.get('ResId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('UserIdList') is not None:
            self.user_id_list_shrink = m.get('UserIdList')
        return self


class CreateDeliveryPlanResponseBody(TeaModel):
    def __init__(self, arguments=None, request_id=None, success=None, vendor_request_id=None, vendor_type=None):
        self.arguments = arguments  # type: list[any]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeliveryPlanResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arguments is not None:
            result['arguments'] = self.arguments
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arguments') is not None:
            self.arguments = m.get('arguments')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class CreateDeliveryPlanResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDeliveryPlanResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDeliveryPlanResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDeliveryPlanResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEventHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateEventHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateEventHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateEventHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateEventHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateEventShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateEventRequestAttendees(TeaModel):
    def __init__(self, id=None, is_optional=None):
        self.id = id  # type: str
        self.is_optional = is_optional  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestAttendees, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        return self


class CreateEventRequestEnd(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class CreateEventRequestLocation(TeaModel):
    def __init__(self, display_name=None):
        self.display_name = display_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class CreateEventRequestOnlineMeetingInfo(TeaModel):
    def __init__(self, type=None):
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestOnlineMeetingInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventRequestRecurrencePattern(TeaModel):
    def __init__(self, day_of_month=None, days_of_week=None, index=None, interval=None, type=None):
        self.day_of_month = day_of_month  # type: int
        self.days_of_week = days_of_week  # type: str
        self.index = index  # type: str
        self.interval = interval  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestRecurrencePattern, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventRequestRecurrenceRange(TeaModel):
    def __init__(self, end_date=None, number_of_occurrences=None, type=None):
        self.end_date = end_date  # type: str
        self.number_of_occurrences = number_of_occurrences  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestRecurrenceRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateEventRequestRecurrence(TeaModel):
    def __init__(self, pattern=None, range=None):
        self.pattern = pattern  # type: CreateEventRequestRecurrencePattern
        self.range = range  # type: CreateEventRequestRecurrenceRange

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super(CreateEventRequestRecurrence, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = CreateEventRequestRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = CreateEventRequestRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class CreateEventRequestReminders(TeaModel):
    def __init__(self, method=None, minutes=None):
        self.method = method  # type: str
        self.minutes = minutes  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestReminders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class CreateEventRequestUiConfigs(TeaModel):
    def __init__(self, ui_name=None, ui_status=None):
        self.ui_name = ui_name  # type: str
        self.ui_status = ui_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestUiConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ui_name is not None:
            result['uiName'] = self.ui_name
        if self.ui_status is not None:
            result['uiStatus'] = self.ui_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('uiName') is not None:
            self.ui_name = m.get('uiName')
        if m.get('uiStatus') is not None:
            self.ui_status = m.get('uiStatus')
        return self


class CreateEventRequestStart(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequestStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class CreateEventRequest(TeaModel):
    def __init__(self, attendees=None, description=None, end=None, extra=None, is_all_day=None, location=None,
                 online_meeting_info=None, recurrence=None, reminders=None, summary=None, ui_configs=None, calendar_id=None, start=None):
        self.attendees = attendees  # type: list[CreateEventRequestAttendees]
        self.description = description  # type: str
        self.end = end  # type: CreateEventRequestEnd
        self.extra = extra  # type: dict[str, str]
        self.is_all_day = is_all_day  # type: bool
        self.location = location  # type: CreateEventRequestLocation
        self.online_meeting_info = online_meeting_info  # type: CreateEventRequestOnlineMeetingInfo
        self.recurrence = recurrence  # type: CreateEventRequestRecurrence
        self.reminders = reminders  # type: list[CreateEventRequestReminders]
        self.summary = summary  # type: str
        self.ui_configs = ui_configs  # type: list[CreateEventRequestUiConfigs]
        self.calendar_id = calendar_id  # type: str
        self.start = start  # type: CreateEventRequestStart

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.ui_configs:
            for k in self.ui_configs:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super(CreateEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['Attendees'].append(k.to_map() if k else None)
        if self.description is not None:
            result['Description'] = self.description
        if self.end is not None:
            result['End'] = self.end.to_map()
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.is_all_day is not None:
            result['IsAllDay'] = self.is_all_day
        if self.location is not None:
            result['Location'] = self.location.to_map()
        if self.online_meeting_info is not None:
            result['OnlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.recurrence is not None:
            result['Recurrence'] = self.recurrence.to_map()
        result['Reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['Reminders'].append(k.to_map() if k else None)
        if self.summary is not None:
            result['Summary'] = self.summary
        result['UiConfigs'] = []
        if self.ui_configs is not None:
            for k in self.ui_configs:
                result['UiConfigs'].append(k.to_map() if k else None)
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.start is not None:
            result['start'] = self.start.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees = []
        if m.get('Attendees') is not None:
            for k in m.get('Attendees'):
                temp_model = CreateEventRequestAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('End') is not None:
            temp_model = CreateEventRequestEnd()
            self.end = temp_model.from_map(m['End'])
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('IsAllDay') is not None:
            self.is_all_day = m.get('IsAllDay')
        if m.get('Location') is not None:
            temp_model = CreateEventRequestLocation()
            self.location = temp_model.from_map(m['Location'])
        if m.get('OnlineMeetingInfo') is not None:
            temp_model = CreateEventRequestOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['OnlineMeetingInfo'])
        if m.get('Recurrence') is not None:
            temp_model = CreateEventRequestRecurrence()
            self.recurrence = temp_model.from_map(m['Recurrence'])
        self.reminders = []
        if m.get('Reminders') is not None:
            for k in m.get('Reminders'):
                temp_model = CreateEventRequestReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        self.ui_configs = []
        if m.get('UiConfigs') is not None:
            for k in m.get('UiConfigs'):
                temp_model = CreateEventRequestUiConfigs()
                self.ui_configs.append(temp_model.from_map(k))
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('start') is not None:
            temp_model = CreateEventRequestStart()
            self.start = temp_model.from_map(m['start'])
        return self


class CreateEventShrinkRequest(TeaModel):
    def __init__(self, attendees_shrink=None, description=None, end_shrink=None, extra_shrink=None, is_all_day=None,
                 location_shrink=None, online_meeting_info_shrink=None, recurrence_shrink=None, reminders_shrink=None,
                 summary=None, ui_configs_shrink=None, calendar_id=None, start_shrink=None):
        self.attendees_shrink = attendees_shrink  # type: str
        self.description = description  # type: str
        self.end_shrink = end_shrink  # type: str
        self.extra_shrink = extra_shrink  # type: str
        self.is_all_day = is_all_day  # type: bool
        self.location_shrink = location_shrink  # type: str
        self.online_meeting_info_shrink = online_meeting_info_shrink  # type: str
        self.recurrence_shrink = recurrence_shrink  # type: str
        self.reminders_shrink = reminders_shrink  # type: str
        self.summary = summary  # type: str
        self.ui_configs_shrink = ui_configs_shrink  # type: str
        self.calendar_id = calendar_id  # type: str
        self.start_shrink = start_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attendees_shrink is not None:
            result['Attendees'] = self.attendees_shrink
        if self.description is not None:
            result['Description'] = self.description
        if self.end_shrink is not None:
            result['End'] = self.end_shrink
        if self.extra_shrink is not None:
            result['Extra'] = self.extra_shrink
        if self.is_all_day is not None:
            result['IsAllDay'] = self.is_all_day
        if self.location_shrink is not None:
            result['Location'] = self.location_shrink
        if self.online_meeting_info_shrink is not None:
            result['OnlineMeetingInfo'] = self.online_meeting_info_shrink
        if self.recurrence_shrink is not None:
            result['Recurrence'] = self.recurrence_shrink
        if self.reminders_shrink is not None:
            result['Reminders'] = self.reminders_shrink
        if self.summary is not None:
            result['Summary'] = self.summary
        if self.ui_configs_shrink is not None:
            result['UiConfigs'] = self.ui_configs_shrink
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.start_shrink is not None:
            result['start'] = self.start_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Attendees') is not None:
            self.attendees_shrink = m.get('Attendees')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('End') is not None:
            self.end_shrink = m.get('End')
        if m.get('Extra') is not None:
            self.extra_shrink = m.get('Extra')
        if m.get('IsAllDay') is not None:
            self.is_all_day = m.get('IsAllDay')
        if m.get('Location') is not None:
            self.location_shrink = m.get('Location')
        if m.get('OnlineMeetingInfo') is not None:
            self.online_meeting_info_shrink = m.get('OnlineMeetingInfo')
        if m.get('Recurrence') is not None:
            self.recurrence_shrink = m.get('Recurrence')
        if m.get('Reminders') is not None:
            self.reminders_shrink = m.get('Reminders')
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        if m.get('UiConfigs') is not None:
            self.ui_configs_shrink = m.get('UiConfigs')
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('start') is not None:
            self.start_shrink = m.get('start')
        return self


class CreateEventResponseBodyAttendees(TeaModel):
    def __init__(self, display_name=None, is_optional=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.is_optional = is_optional  # type: bool
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyAttendees, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.is_optional is not None:
            result['IsOptional'] = self.is_optional
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('IsOptional') is not None:
            self.is_optional = m.get('IsOptional')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class CreateEventResponseBodyEnd(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class CreateEventResponseBodyLocation(TeaModel):
    def __init__(self, display_name=None):
        self.display_name = display_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        return self


class CreateEventResponseBodyOnlineMeetingInfo(TeaModel):
    def __init__(self, conference_id=None, extra_info=None, type=None, url=None):
        self.conference_id = conference_id  # type: str
        self.extra_info = extra_info  # type: dict[str, any]
        self.type = type  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyOnlineMeetingInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('ExtraInfo') is not None:
            self.extra_info = m.get('ExtraInfo')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class CreateEventResponseBodyOrganizer(TeaModel):
    def __init__(self, display_name=None, id=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyOrganizer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class CreateEventResponseBodyRecurrencePattern(TeaModel):
    def __init__(self, day_of_month=None, days_of_week=None, index=None, interval=None, type=None):
        self.day_of_month = day_of_month  # type: int
        self.days_of_week = days_of_week  # type: str
        self.index = index  # type: str
        self.interval = interval  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyRecurrencePattern, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['DayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['DaysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['Index'] = self.index
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DayOfMonth') is not None:
            self.day_of_month = m.get('DayOfMonth')
        if m.get('DaysOfWeek') is not None:
            self.days_of_week = m.get('DaysOfWeek')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateEventResponseBodyRecurrenceRange(TeaModel):
    def __init__(self, end_date=None, number_of_occurrences=None, type=None):
        self.end_date = end_date  # type: str
        self.number_of_occurrences = number_of_occurrences  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyRecurrenceRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['NumberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('NumberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('NumberOfOccurrences')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateEventResponseBodyRecurrence(TeaModel):
    def __init__(self, pattern=None, range=None):
        self.pattern = pattern  # type: CreateEventResponseBodyRecurrencePattern
        self.range = range  # type: CreateEventResponseBodyRecurrenceRange

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super(CreateEventResponseBodyRecurrence, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['Pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['Range'] = self.range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Pattern') is not None:
            temp_model = CreateEventResponseBodyRecurrencePattern()
            self.pattern = temp_model.from_map(m['Pattern'])
        if m.get('Range') is not None:
            temp_model = CreateEventResponseBodyRecurrenceRange()
            self.range = temp_model.from_map(m['Range'])
        return self


class CreateEventResponseBodyReminders(TeaModel):
    def __init__(self, method=None, minutes=None):
        self.method = method  # type: str
        self.minutes = minutes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyReminders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['Method'] = self.method
        if self.minutes is not None:
            result['Minutes'] = self.minutes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('Minutes') is not None:
            self.minutes = m.get('Minutes')
        return self


class CreateEventResponseBodyStart(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class CreateEventResponseBodyUiConfigs(TeaModel):
    def __init__(self, ui_name=None, ui_status=None):
        self.ui_name = ui_name  # type: str
        self.ui_status = ui_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBodyUiConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ui_name is not None:
            result['UiName'] = self.ui_name
        if self.ui_status is not None:
            result['UiStatus'] = self.ui_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UiName') is not None:
            self.ui_name = m.get('UiName')
        if m.get('UiStatus') is not None:
            self.ui_status = m.get('UiStatus')
        return self


class CreateEventResponseBody(TeaModel):
    def __init__(self, attendees=None, create_time=None, description=None, end=None, id=None, is_all_day=None,
                 location=None, online_meeting_info=None, organizer=None, recurrence=None, reminders=None, request_id=None,
                 start=None, summary=None, ui_configs=None, update_time=None):
        self.attendees = attendees  # type: list[CreateEventResponseBodyAttendees]
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.end = end  # type: CreateEventResponseBodyEnd
        self.id = id  # type: str
        self.is_all_day = is_all_day  # type: bool
        self.location = location  # type: CreateEventResponseBodyLocation
        self.online_meeting_info = online_meeting_info  # type: CreateEventResponseBodyOnlineMeetingInfo
        self.organizer = organizer  # type: CreateEventResponseBodyOrganizer
        self.recurrence = recurrence  # type: CreateEventResponseBodyRecurrence
        self.reminders = reminders  # type: list[CreateEventResponseBodyReminders]
        # requestId
        self.request_id = request_id  # type: str
        self.start = start  # type: CreateEventResponseBodyStart
        self.summary = summary  # type: str
        self.ui_configs = ui_configs  # type: list[CreateEventResponseBodyUiConfigs]
        self.update_time = update_time  # type: str

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()
        if self.ui_configs:
            for k in self.ui_configs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.online_meeting_info is not None:
            result['onlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.summary is not None:
            result['summary'] = self.summary
        result['uiConfigs'] = []
        if self.ui_configs is not None:
            for k in self.ui_configs:
                result['uiConfigs'].append(k.to_map() if k else None)
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = CreateEventResponseBodyAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = CreateEventResponseBodyEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = CreateEventResponseBodyLocation()
            self.location = temp_model.from_map(m['location'])
        if m.get('onlineMeetingInfo') is not None:
            temp_model = CreateEventResponseBodyOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['onlineMeetingInfo'])
        if m.get('organizer') is not None:
            temp_model = CreateEventResponseBodyOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('recurrence') is not None:
            temp_model = CreateEventResponseBodyRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = CreateEventResponseBodyReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('start') is not None:
            temp_model = CreateEventResponseBodyStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        self.ui_configs = []
        if m.get('uiConfigs') is not None:
            for k in m.get('uiConfigs'):
                temp_model = CreateEventResponseBodyUiConfigs()
                self.ui_configs.append(temp_model.from_map(k))
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class CreateEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateEventResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateLiveHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateLiveHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateLiveHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateLiveHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateLiveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateLiveHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateLiveShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateLiveShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateLiveRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateLiveRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateLiveRequest(TeaModel):
    def __init__(self, cover_url=None, introduction=None, pre_end_time=None, pre_start_time=None, public_type=None,
                 tenant_context=None, title=None):
        self.cover_url = cover_url  # type: str
        self.introduction = introduction  # type: str
        self.pre_end_time = pre_end_time  # type: long
        self.pre_start_time = pre_start_time  # type: long
        self.public_type = public_type  # type: long
        self.tenant_context = tenant_context  # type: CreateLiveRequestTenantContext
        self.title = title  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateLiveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover_url is not None:
            result['CoverUrl'] = self.cover_url
        if self.introduction is not None:
            result['Introduction'] = self.introduction
        if self.pre_end_time is not None:
            result['PreEndTime'] = self.pre_end_time
        if self.pre_start_time is not None:
            result['PreStartTime'] = self.pre_start_time
        if self.public_type is not None:
            result['PublicType'] = self.public_type
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CoverUrl') is not None:
            self.cover_url = m.get('CoverUrl')
        if m.get('Introduction') is not None:
            self.introduction = m.get('Introduction')
        if m.get('PreEndTime') is not None:
            self.pre_end_time = m.get('PreEndTime')
        if m.get('PreStartTime') is not None:
            self.pre_start_time = m.get('PreStartTime')
        if m.get('PublicType') is not None:
            self.public_type = m.get('PublicType')
        if m.get('TenantContext') is not None:
            temp_model = CreateLiveRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class CreateLiveShrinkRequest(TeaModel):
    def __init__(self, cover_url=None, introduction=None, pre_end_time=None, pre_start_time=None, public_type=None,
                 tenant_context_shrink=None, title=None):
        self.cover_url = cover_url  # type: str
        self.introduction = introduction  # type: str
        self.pre_end_time = pre_end_time  # type: long
        self.pre_start_time = pre_start_time  # type: long
        self.public_type = public_type  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateLiveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover_url is not None:
            result['CoverUrl'] = self.cover_url
        if self.introduction is not None:
            result['Introduction'] = self.introduction
        if self.pre_end_time is not None:
            result['PreEndTime'] = self.pre_end_time
        if self.pre_start_time is not None:
            result['PreStartTime'] = self.pre_start_time
        if self.public_type is not None:
            result['PublicType'] = self.public_type
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CoverUrl') is not None:
            self.cover_url = m.get('CoverUrl')
        if m.get('Introduction') is not None:
            self.introduction = m.get('Introduction')
        if m.get('PreEndTime') is not None:
            self.pre_end_time = m.get('PreEndTime')
        if m.get('PreStartTime') is not None:
            self.pre_start_time = m.get('PreStartTime')
        if m.get('PublicType') is not None:
            self.public_type = m.get('PublicType')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class CreateLiveResponseBody(TeaModel):
    def __init__(self, live_id=None, request_id=None):
        self.live_id = live_id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateLiveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['liveId'] = self.live_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class CreateLiveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateLiveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateLiveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateLiveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMeetingRoomHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateMeetingRoomHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateMeetingRoomHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateMeetingRoomHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateMeetingRoomHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateMeetingRoomShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers(TeaModel):
    def __init__(self, member_id=None, member_name=None, member_type=None):
        self.member_id = member_id  # type: str
        self.member_name = member_name  # type: str
        self.member_type = member_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        return self


class CreateMeetingRoomRequestReservationAuthority(TeaModel):
    def __init__(self, authorized_members=None):
        self.authorized_members = authorized_members  # type: list[CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers]

    def validate(self):
        if self.authorized_members:
            for k in self.authorized_members:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateMeetingRoomRequestReservationAuthority, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AuthorizedMembers'] = []
        if self.authorized_members is not None:
            for k in self.authorized_members:
                result['AuthorizedMembers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.authorized_members = []
        if m.get('AuthorizedMembers') is not None:
            for k in m.get('AuthorizedMembers'):
                temp_model = CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers()
                self.authorized_members.append(temp_model.from_map(k))
        return self


class CreateMeetingRoomRequestRoomLocation(TeaModel):
    def __init__(self, desc=None, title=None):
        self.desc = desc  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomRequestRoomLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class CreateMeetingRoomRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateMeetingRoomRequest(TeaModel):
    def __init__(self, enable_cycle_reservation=None, group_id=None, isv_room_id=None, reservation_authority=None,
                 room_capacity=None, room_label_ids=None, room_location=None, room_name=None, room_picture=None, room_status=None,
                 tenant_context=None):
        self.enable_cycle_reservation = enable_cycle_reservation  # type: bool
        self.group_id = group_id  # type: long
        self.isv_room_id = isv_room_id  # type: str
        self.reservation_authority = reservation_authority  # type: CreateMeetingRoomRequestReservationAuthority
        self.room_capacity = room_capacity  # type: int
        self.room_label_ids = room_label_ids  # type: list[long]
        self.room_location = room_location  # type: CreateMeetingRoomRequestRoomLocation
        self.room_name = room_name  # type: str
        self.room_picture = room_picture  # type: str
        self.room_status = room_status  # type: int
        self.tenant_context = tenant_context  # type: CreateMeetingRoomRequestTenantContext

    def validate(self):
        if self.reservation_authority:
            self.reservation_authority.validate()
        if self.room_location:
            self.room_location.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateMeetingRoomRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_cycle_reservation is not None:
            result['EnableCycleReservation'] = self.enable_cycle_reservation
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.isv_room_id is not None:
            result['IsvRoomId'] = self.isv_room_id
        if self.reservation_authority is not None:
            result['ReservationAuthority'] = self.reservation_authority.to_map()
        if self.room_capacity is not None:
            result['RoomCapacity'] = self.room_capacity
        if self.room_label_ids is not None:
            result['RoomLabelIds'] = self.room_label_ids
        if self.room_location is not None:
            result['RoomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['RoomName'] = self.room_name
        if self.room_picture is not None:
            result['RoomPicture'] = self.room_picture
        if self.room_status is not None:
            result['RoomStatus'] = self.room_status
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EnableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('EnableCycleReservation')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsvRoomId') is not None:
            self.isv_room_id = m.get('IsvRoomId')
        if m.get('ReservationAuthority') is not None:
            temp_model = CreateMeetingRoomRequestReservationAuthority()
            self.reservation_authority = temp_model.from_map(m['ReservationAuthority'])
        if m.get('RoomCapacity') is not None:
            self.room_capacity = m.get('RoomCapacity')
        if m.get('RoomLabelIds') is not None:
            self.room_label_ids = m.get('RoomLabelIds')
        if m.get('RoomLocation') is not None:
            temp_model = CreateMeetingRoomRequestRoomLocation()
            self.room_location = temp_model.from_map(m['RoomLocation'])
        if m.get('RoomName') is not None:
            self.room_name = m.get('RoomName')
        if m.get('RoomPicture') is not None:
            self.room_picture = m.get('RoomPicture')
        if m.get('RoomStatus') is not None:
            self.room_status = m.get('RoomStatus')
        if m.get('TenantContext') is not None:
            temp_model = CreateMeetingRoomRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class CreateMeetingRoomShrinkRequest(TeaModel):
    def __init__(self, enable_cycle_reservation=None, group_id=None, isv_room_id=None,
                 reservation_authority_shrink=None, room_capacity=None, room_label_ids_shrink=None, room_location_shrink=None, room_name=None,
                 room_picture=None, room_status=None, tenant_context_shrink=None):
        self.enable_cycle_reservation = enable_cycle_reservation  # type: bool
        self.group_id = group_id  # type: long
        self.isv_room_id = isv_room_id  # type: str
        self.reservation_authority_shrink = reservation_authority_shrink  # type: str
        self.room_capacity = room_capacity  # type: int
        self.room_label_ids_shrink = room_label_ids_shrink  # type: str
        self.room_location_shrink = room_location_shrink  # type: str
        self.room_name = room_name  # type: str
        self.room_picture = room_picture  # type: str
        self.room_status = room_status  # type: int
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_cycle_reservation is not None:
            result['EnableCycleReservation'] = self.enable_cycle_reservation
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.isv_room_id is not None:
            result['IsvRoomId'] = self.isv_room_id
        if self.reservation_authority_shrink is not None:
            result['ReservationAuthority'] = self.reservation_authority_shrink
        if self.room_capacity is not None:
            result['RoomCapacity'] = self.room_capacity
        if self.room_label_ids_shrink is not None:
            result['RoomLabelIds'] = self.room_label_ids_shrink
        if self.room_location_shrink is not None:
            result['RoomLocation'] = self.room_location_shrink
        if self.room_name is not None:
            result['RoomName'] = self.room_name
        if self.room_picture is not None:
            result['RoomPicture'] = self.room_picture
        if self.room_status is not None:
            result['RoomStatus'] = self.room_status
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EnableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('EnableCycleReservation')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsvRoomId') is not None:
            self.isv_room_id = m.get('IsvRoomId')
        if m.get('ReservationAuthority') is not None:
            self.reservation_authority_shrink = m.get('ReservationAuthority')
        if m.get('RoomCapacity') is not None:
            self.room_capacity = m.get('RoomCapacity')
        if m.get('RoomLabelIds') is not None:
            self.room_label_ids_shrink = m.get('RoomLabelIds')
        if m.get('RoomLocation') is not None:
            self.room_location_shrink = m.get('RoomLocation')
        if m.get('RoomName') is not None:
            self.room_name = m.get('RoomName')
        if m.get('RoomPicture') is not None:
            self.room_picture = m.get('RoomPicture')
        if m.get('RoomStatus') is not None:
            self.room_status = m.get('RoomStatus')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class CreateMeetingRoomResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class CreateMeetingRoomResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMeetingRoomResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMeetingRoomResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMeetingRoomGroupHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomGroupHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateMeetingRoomGroupHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateMeetingRoomGroupHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateMeetingRoomGroupHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateMeetingRoomGroupHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateMeetingRoomGroupShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomGroupShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateMeetingRoomGroupRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomGroupRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateMeetingRoomGroupRequest(TeaModel):
    def __init__(self, group_name=None, parent_group_id=None, tenant_context=None):
        self.group_name = group_name  # type: str
        self.parent_group_id = parent_group_id  # type: long
        self.tenant_context = tenant_context  # type: CreateMeetingRoomGroupRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateMeetingRoomGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_name is not None:
            result['GroupName'] = self.group_name
        if self.parent_group_id is not None:
            result['ParentGroupId'] = self.parent_group_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupName') is not None:
            self.group_name = m.get('GroupName')
        if m.get('ParentGroupId') is not None:
            self.parent_group_id = m.get('ParentGroupId')
        if m.get('TenantContext') is not None:
            temp_model = CreateMeetingRoomGroupRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class CreateMeetingRoomGroupShrinkRequest(TeaModel):
    def __init__(self, group_name=None, parent_group_id=None, tenant_context_shrink=None):
        self.group_name = group_name  # type: str
        self.parent_group_id = parent_group_id  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomGroupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_name is not None:
            result['GroupName'] = self.group_name
        if self.parent_group_id is not None:
            result['ParentGroupId'] = self.parent_group_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupName') is not None:
            self.group_name = m.get('GroupName')
        if m.get('ParentGroupId') is not None:
            self.parent_group_id = m.get('ParentGroupId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class CreateMeetingRoomGroupResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMeetingRoomGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class CreateMeetingRoomGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMeetingRoomGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMeetingRoomGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOrUpdateFormDataHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrUpdateFormDataHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateOrUpdateFormDataHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateOrUpdateFormDataHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateOrUpdateFormDataHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateOrUpdateFormDataHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateOrUpdateFormDataShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrUpdateFormDataShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateOrUpdateFormDataRequest(TeaModel):
    def __init__(self, app_type=None, form_data_json=None, form_uuid=None, no_execute_expression=None,
                 search_condition=None, system_token=None, user_id=None):
        self.app_type = app_type  # type: str
        self.form_data_json = form_data_json  # type: str
        self.form_uuid = form_uuid  # type: str
        self.no_execute_expression = no_execute_expression  # type: bool
        self.search_condition = search_condition  # type: str
        self.system_token = system_token  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrUpdateFormDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_data_json is not None:
            result['FormDataJson'] = self.form_data_json
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.no_execute_expression is not None:
            result['NoExecuteExpression'] = self.no_execute_expression
        if self.search_condition is not None:
            result['SearchCondition'] = self.search_condition
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormDataJson') is not None:
            self.form_data_json = m.get('FormDataJson')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('NoExecuteExpression') is not None:
            self.no_execute_expression = m.get('NoExecuteExpression')
        if m.get('SearchCondition') is not None:
            self.search_condition = m.get('SearchCondition')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class CreateOrUpdateFormDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[str]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrUpdateFormDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class CreateOrUpdateFormDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateOrUpdateFormDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateOrUpdateFormDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOrUpdateFormDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOrgHonorTemplateHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrgHonorTemplateHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateOrgHonorTemplateHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateOrgHonorTemplateHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateOrgHonorTemplateHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateOrgHonorTemplateHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateOrgHonorTemplateShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrgHonorTemplateShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateOrgHonorTemplateRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrgHonorTemplateRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateOrgHonorTemplateRequest(TeaModel):
    def __init__(self, tenant_context=None, avatar_frame_media_id=None, default_bg_color=None, medal_desc=None,
                 medal_media_id=None, medal_name=None, org_id=None, user_id=None):
        self.tenant_context = tenant_context  # type: CreateOrgHonorTemplateRequestTenantContext
        self.avatar_frame_media_id = avatar_frame_media_id  # type: str
        self.default_bg_color = default_bg_color  # type: str
        self.medal_desc = medal_desc  # type: str
        self.medal_media_id = medal_media_id  # type: str
        self.medal_name = medal_name  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateOrgHonorTemplateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.avatar_frame_media_id is not None:
            result['avatarFrameMediaId'] = self.avatar_frame_media_id
        if self.default_bg_color is not None:
            result['defaultBgColor'] = self.default_bg_color
        if self.medal_desc is not None:
            result['medalDesc'] = self.medal_desc
        if self.medal_media_id is not None:
            result['medalMediaId'] = self.medal_media_id
        if self.medal_name is not None:
            result['medalName'] = self.medal_name
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = CreateOrgHonorTemplateRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('avatarFrameMediaId') is not None:
            self.avatar_frame_media_id = m.get('avatarFrameMediaId')
        if m.get('defaultBgColor') is not None:
            self.default_bg_color = m.get('defaultBgColor')
        if m.get('medalDesc') is not None:
            self.medal_desc = m.get('medalDesc')
        if m.get('medalMediaId') is not None:
            self.medal_media_id = m.get('medalMediaId')
        if m.get('medalName') is not None:
            self.medal_name = m.get('medalName')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class CreateOrgHonorTemplateShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, avatar_frame_media_id=None, default_bg_color=None,
                 medal_desc=None, medal_media_id=None, medal_name=None, org_id=None, user_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.avatar_frame_media_id = avatar_frame_media_id  # type: str
        self.default_bg_color = default_bg_color  # type: str
        self.medal_desc = medal_desc  # type: str
        self.medal_media_id = medal_media_id  # type: str
        self.medal_name = medal_name  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrgHonorTemplateShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.avatar_frame_media_id is not None:
            result['avatarFrameMediaId'] = self.avatar_frame_media_id
        if self.default_bg_color is not None:
            result['defaultBgColor'] = self.default_bg_color
        if self.medal_desc is not None:
            result['medalDesc'] = self.medal_desc
        if self.medal_media_id is not None:
            result['medalMediaId'] = self.medal_media_id
        if self.medal_name is not None:
            result['medalName'] = self.medal_name
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('avatarFrameMediaId') is not None:
            self.avatar_frame_media_id = m.get('avatarFrameMediaId')
        if m.get('defaultBgColor') is not None:
            self.default_bg_color = m.get('defaultBgColor')
        if m.get('medalDesc') is not None:
            self.medal_desc = m.get('medalDesc')
        if m.get('medalMediaId') is not None:
            self.medal_media_id = m.get('medalMediaId')
        if m.get('medalName') is not None:
            self.medal_name = m.get('medalName')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class CreateOrgHonorTemplateResponseBody(TeaModel):
    def __init__(self, honor_id=None, request_id=None):
        self.honor_id = honor_id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOrgHonorTemplateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class CreateOrgHonorTemplateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateOrgHonorTemplateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateOrgHonorTemplateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOrgHonorTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateReportHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReportHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateReportHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateReportHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateReportHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateReportHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateReportShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReportShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateReportRequestContents(TeaModel):
    def __init__(self, content=None, content_type=None, key=None, sort=None, type=None):
        self.content = content  # type: str
        self.content_type = content_type  # type: str
        self.key = key  # type: str
        self.sort = sort  # type: long
        self.type = type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReportRequestContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.key is not None:
            result['Key'] = self.key
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateReportRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReportRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateReportRequest(TeaModel):
    def __init__(self, contents=None, dd_from=None, template_id=None, tenant_context=None, to_chat=None,
                 to_cids=None, to_userids=None):
        self.contents = contents  # type: list[CreateReportRequestContents]
        self.dd_from = dd_from  # type: str
        self.template_id = template_id  # type: str
        self.tenant_context = tenant_context  # type: CreateReportRequestTenantContext
        self.to_chat = to_chat  # type: bool
        self.to_cids = to_cids  # type: list[str]
        self.to_userids = to_userids  # type: list[str]

    def validate(self):
        if self.contents:
            for k in self.contents:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Contents'] = []
        if self.contents is not None:
            for k in self.contents:
                result['Contents'].append(k.to_map() if k else None)
        if self.dd_from is not None:
            result['DdFrom'] = self.dd_from
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.to_chat is not None:
            result['ToChat'] = self.to_chat
        if self.to_cids is not None:
            result['ToCids'] = self.to_cids
        if self.to_userids is not None:
            result['ToUserids'] = self.to_userids
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contents = []
        if m.get('Contents') is not None:
            for k in m.get('Contents'):
                temp_model = CreateReportRequestContents()
                self.contents.append(temp_model.from_map(k))
        if m.get('DdFrom') is not None:
            self.dd_from = m.get('DdFrom')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TenantContext') is not None:
            temp_model = CreateReportRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('ToChat') is not None:
            self.to_chat = m.get('ToChat')
        if m.get('ToCids') is not None:
            self.to_cids = m.get('ToCids')
        if m.get('ToUserids') is not None:
            self.to_userids = m.get('ToUserids')
        return self


class CreateReportShrinkRequest(TeaModel):
    def __init__(self, contents_shrink=None, dd_from=None, template_id=None, tenant_context_shrink=None,
                 to_chat=None, to_cids_shrink=None, to_userids_shrink=None):
        self.contents_shrink = contents_shrink  # type: str
        self.dd_from = dd_from  # type: str
        self.template_id = template_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.to_chat = to_chat  # type: bool
        self.to_cids_shrink = to_cids_shrink  # type: str
        self.to_userids_shrink = to_userids_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReportShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contents_shrink is not None:
            result['Contents'] = self.contents_shrink
        if self.dd_from is not None:
            result['DdFrom'] = self.dd_from
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.to_chat is not None:
            result['ToChat'] = self.to_chat
        if self.to_cids_shrink is not None:
            result['ToCids'] = self.to_cids_shrink
        if self.to_userids_shrink is not None:
            result['ToUserids'] = self.to_userids_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Contents') is not None:
            self.contents_shrink = m.get('Contents')
        if m.get('DdFrom') is not None:
            self.dd_from = m.get('DdFrom')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('ToChat') is not None:
            self.to_chat = m.get('ToChat')
        if m.get('ToCids') is not None:
            self.to_cids_shrink = m.get('ToCids')
        if m.get('ToUserids') is not None:
            self.to_userids_shrink = m.get('ToUserids')
        return self


class CreateReportResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class CreateReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScenegroupHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenegroupHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateScenegroupHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateScenegroupHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateScenegroupHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateScenegroupHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateScenegroupShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenegroupShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateScenegroupRequest(TeaModel):
    def __init__(self, add_friend_forbidden=None, all_members_can_create_calendar=None,
                 all_members_can_create_mcs_conf=None, chat_banned_type=None, group_email_disabled=None, group_live_switch=None, icon=None,
                 management_type=None, members_to_admin_chat=None, mention_all_authority=None, only_admin_can_ding=None,
                 only_admin_can_set_msg_top=None, searchable=None, show_history_type=None, subadmin_ids=None, template_id=None, title=None,
                 user_ids=None, uuid=None, validation_type=None):
        self.add_friend_forbidden = add_friend_forbidden  # type: long
        self.all_members_can_create_calendar = all_members_can_create_calendar  # type: long
        self.all_members_can_create_mcs_conf = all_members_can_create_mcs_conf  # type: long
        self.chat_banned_type = chat_banned_type  # type: long
        self.group_email_disabled = group_email_disabled  # type: long
        self.group_live_switch = group_live_switch  # type: long
        self.icon = icon  # type: str
        self.management_type = management_type  # type: long
        self.members_to_admin_chat = members_to_admin_chat  # type: long
        self.mention_all_authority = mention_all_authority  # type: long
        self.only_admin_can_ding = only_admin_can_ding  # type: long
        self.only_admin_can_set_msg_top = only_admin_can_set_msg_top  # type: long
        self.searchable = searchable  # type: long
        self.show_history_type = show_history_type  # type: long
        self.subadmin_ids = subadmin_ids  # type: str
        self.template_id = template_id  # type: str
        self.title = title  # type: str
        self.user_ids = user_ids  # type: str
        self.uuid = uuid  # type: str
        self.validation_type = validation_type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenegroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_friend_forbidden is not None:
            result['AddFriendForbidden'] = self.add_friend_forbidden
        if self.all_members_can_create_calendar is not None:
            result['AllMembersCanCreateCalendar'] = self.all_members_can_create_calendar
        if self.all_members_can_create_mcs_conf is not None:
            result['AllMembersCanCreateMcsConf'] = self.all_members_can_create_mcs_conf
        if self.chat_banned_type is not None:
            result['ChatBannedType'] = self.chat_banned_type
        if self.group_email_disabled is not None:
            result['GroupEmailDisabled'] = self.group_email_disabled
        if self.group_live_switch is not None:
            result['GroupLiveSwitch'] = self.group_live_switch
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.management_type is not None:
            result['ManagementType'] = self.management_type
        if self.members_to_admin_chat is not None:
            result['MembersToAdminChat'] = self.members_to_admin_chat
        if self.mention_all_authority is not None:
            result['MentionAllAuthority'] = self.mention_all_authority
        if self.only_admin_can_ding is not None:
            result['OnlyAdminCanDing'] = self.only_admin_can_ding
        if self.only_admin_can_set_msg_top is not None:
            result['OnlyAdminCanSetMsgTop'] = self.only_admin_can_set_msg_top
        if self.searchable is not None:
            result['Searchable'] = self.searchable
        if self.show_history_type is not None:
            result['ShowHistoryType'] = self.show_history_type
        if self.subadmin_ids is not None:
            result['SubadminIds'] = self.subadmin_ids
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.title is not None:
            result['Title'] = self.title
        if self.user_ids is not None:
            result['UserIds'] = self.user_ids
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        if self.validation_type is not None:
            result['ValidationType'] = self.validation_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AddFriendForbidden') is not None:
            self.add_friend_forbidden = m.get('AddFriendForbidden')
        if m.get('AllMembersCanCreateCalendar') is not None:
            self.all_members_can_create_calendar = m.get('AllMembersCanCreateCalendar')
        if m.get('AllMembersCanCreateMcsConf') is not None:
            self.all_members_can_create_mcs_conf = m.get('AllMembersCanCreateMcsConf')
        if m.get('ChatBannedType') is not None:
            self.chat_banned_type = m.get('ChatBannedType')
        if m.get('GroupEmailDisabled') is not None:
            self.group_email_disabled = m.get('GroupEmailDisabled')
        if m.get('GroupLiveSwitch') is not None:
            self.group_live_switch = m.get('GroupLiveSwitch')
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('ManagementType') is not None:
            self.management_type = m.get('ManagementType')
        if m.get('MembersToAdminChat') is not None:
            self.members_to_admin_chat = m.get('MembersToAdminChat')
        if m.get('MentionAllAuthority') is not None:
            self.mention_all_authority = m.get('MentionAllAuthority')
        if m.get('OnlyAdminCanDing') is not None:
            self.only_admin_can_ding = m.get('OnlyAdminCanDing')
        if m.get('OnlyAdminCanSetMsgTop') is not None:
            self.only_admin_can_set_msg_top = m.get('OnlyAdminCanSetMsgTop')
        if m.get('Searchable') is not None:
            self.searchable = m.get('Searchable')
        if m.get('ShowHistoryType') is not None:
            self.show_history_type = m.get('ShowHistoryType')
        if m.get('SubadminIds') is not None:
            self.subadmin_ids = m.get('SubadminIds')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('UserIds') is not None:
            self.user_ids = m.get('UserIds')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        if m.get('ValidationType') is not None:
            self.validation_type = m.get('ValidationType')
        return self


class CreateScenegroupResponseBody(TeaModel):
    def __init__(self, open_conversation_id=None, request_id=None):
        self.open_conversation_id = open_conversation_id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenegroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['openConversationId'] = self.open_conversation_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('openConversationId') is not None:
            self.open_conversation_id = m.get('openConversationId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class CreateScenegroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateScenegroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateScenegroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateScenegroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScheduleConferenceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScheduleConferenceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateScheduleConferenceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateScheduleConferenceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateScheduleConferenceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateScheduleConferenceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateScheduleConferenceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScheduleConferenceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateScheduleConferenceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScheduleConferenceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateScheduleConferenceRequest(TeaModel):
    def __init__(self, end_time=None, start_time=None, tenant_context=None, title=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context = tenant_context  # type: CreateScheduleConferenceRequestTenantContext
        self.title = title  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateScheduleConferenceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            temp_model = CreateScheduleConferenceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class CreateScheduleConferenceShrinkRequest(TeaModel):
    def __init__(self, end_time=None, start_time=None, tenant_context_shrink=None, title=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScheduleConferenceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class CreateScheduleConferenceResponseBody(TeaModel):
    def __init__(self, phones=None, request_id=None, room_code=None, schedule_conference_id=None, url=None):
        self.phones = phones  # type: list[str]
        # requestId
        self.request_id = request_id  # type: str
        self.room_code = room_code  # type: str
        self.schedule_conference_id = schedule_conference_id  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScheduleConferenceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.phones is not None:
            result['phones'] = self.phones
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.room_code is not None:
            result['roomCode'] = self.room_code
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('phones') is not None:
            self.phones = m.get('phones')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('roomCode') is not None:
            self.room_code = m.get('roomCode')
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class CreateScheduleConferenceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateScheduleConferenceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateScheduleConferenceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSheetHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSheetHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateSheetHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateSheetHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateSheetHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateSheetHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateSheetShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSheetShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateSheetRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSheetRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateSheetRequest(TeaModel):
    def __init__(self, name=None, tenant_context=None, workbook_id=None):
        self.name = name  # type: str
        self.tenant_context = tenant_context  # type: CreateSheetRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateSheetRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TenantContext') is not None:
            temp_model = CreateSheetRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class CreateSheetShrinkRequest(TeaModel):
    def __init__(self, name=None, tenant_context_shrink=None, workbook_id=None):
        self.name = name  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSheetShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class CreateSheetResponseBody(TeaModel):
    def __init__(self, id=None, name=None, request_id=None, visibility=None):
        self.id = id  # type: str
        self.name = name  # type: str
        self.request_id = request_id  # type: str
        self.visibility = visibility  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSheetResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.visibility is not None:
            result['visibility'] = self.visibility
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('visibility') is not None:
            self.visibility = m.get('visibility')
        return self


class CreateSheetResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSheetResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSheetResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSheetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSubscribedCalendarHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubscribedCalendarHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateSubscribedCalendarHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateSubscribedCalendarHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateSubscribedCalendarHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateSubscribedCalendarHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateSubscribedCalendarShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubscribedCalendarShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateSubscribedCalendarRequestSubscribeScope(TeaModel):
    def __init__(self, user_ids=None):
        self.user_ids = user_ids  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubscribedCalendarRequestSubscribeScope, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_ids is not None:
            result['UserIds'] = self.user_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserIds') is not None:
            self.user_ids = m.get('UserIds')
        return self


class CreateSubscribedCalendarRequest(TeaModel):
    def __init__(self, description=None, managers=None, name=None, subscribe_scope=None):
        self.description = description  # type: str
        self.managers = managers  # type: list[str]
        self.name = name  # type: str
        self.subscribe_scope = subscribe_scope  # type: CreateSubscribedCalendarRequestSubscribeScope

    def validate(self):
        if self.subscribe_scope:
            self.subscribe_scope.validate()

    def to_map(self):
        _map = super(CreateSubscribedCalendarRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.managers is not None:
            result['Managers'] = self.managers
        if self.name is not None:
            result['Name'] = self.name
        if self.subscribe_scope is not None:
            result['SubscribeScope'] = self.subscribe_scope.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Managers') is not None:
            self.managers = m.get('Managers')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SubscribeScope') is not None:
            temp_model = CreateSubscribedCalendarRequestSubscribeScope()
            self.subscribe_scope = temp_model.from_map(m['SubscribeScope'])
        return self


class CreateSubscribedCalendarShrinkRequest(TeaModel):
    def __init__(self, description=None, managers_shrink=None, name=None, subscribe_scope_shrink=None):
        self.description = description  # type: str
        self.managers_shrink = managers_shrink  # type: str
        self.name = name  # type: str
        self.subscribe_scope_shrink = subscribe_scope_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubscribedCalendarShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.managers_shrink is not None:
            result['Managers'] = self.managers_shrink
        if self.name is not None:
            result['Name'] = self.name
        if self.subscribe_scope_shrink is not None:
            result['SubscribeScope'] = self.subscribe_scope_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Managers') is not None:
            self.managers_shrink = m.get('Managers')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SubscribeScope') is not None:
            self.subscribe_scope_shrink = m.get('SubscribeScope')
        return self


class CreateSubscribedCalendarResponseBody(TeaModel):
    def __init__(self, calendar_id=None, request_id=None):
        self.calendar_id = calendar_id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubscribedCalendarResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class CreateSubscribedCalendarResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSubscribedCalendarResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSubscribedCalendarResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSubscribedCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTodoTaskHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateTodoTaskHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateTodoTaskHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateTodoTaskHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateTodoTaskHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateTodoTaskShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateTodoTaskRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateTodoTaskRequestContentFieldList(TeaModel):
    def __init__(self, field_key=None, field_value=None):
        # fieldKey
        self.field_key = field_key  # type: str
        # fieldValue
        self.field_value = field_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskRequestContentFieldList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_key is not None:
            result['fieldKey'] = self.field_key
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldKey') is not None:
            self.field_key = m.get('fieldKey')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        return self


class CreateTodoTaskRequestDetailUrl(TeaModel):
    def __init__(self, app_url=None, pc_url=None):
        self.app_url = app_url  # type: str
        self.pc_url = pc_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskRequestDetailUrl, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_url is not None:
            result['appUrl'] = self.app_url
        if self.pc_url is not None:
            result['pcUrl'] = self.pc_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('appUrl') is not None:
            self.app_url = m.get('appUrl')
        if m.get('pcUrl') is not None:
            self.pc_url = m.get('pcUrl')
        return self


class CreateTodoTaskRequestNotifyConfigs(TeaModel):
    def __init__(self, ding_notify=None):
        self.ding_notify = ding_notify  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskRequestNotifyConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ding_notify is not None:
            result['dingNotify'] = self.ding_notify
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dingNotify') is not None:
            self.ding_notify = m.get('dingNotify')
        return self


class CreateTodoTaskRequest(TeaModel):
    def __init__(self, tenant_context=None, content_field_list=None, creator_id=None, description=None,
                 detail_url=None, due_time=None, executor_ids=None, is_only_show_executor=None, notify_configs=None,
                 operator_id=None, participant_ids=None, priority=None, source_id=None, subject=None):
        self.tenant_context = tenant_context  # type: CreateTodoTaskRequestTenantContext
        self.content_field_list = content_field_list  # type: list[CreateTodoTaskRequestContentFieldList]
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.detail_url = detail_url  # type: CreateTodoTaskRequestDetailUrl
        self.due_time = due_time  # type: long
        self.executor_ids = executor_ids  # type: list[str]
        self.is_only_show_executor = is_only_show_executor  # type: bool
        self.notify_configs = notify_configs  # type: CreateTodoTaskRequestNotifyConfigs
        self.operator_id = operator_id  # type: str
        self.participant_ids = participant_ids  # type: list[str]
        self.priority = priority  # type: int
        self.source_id = source_id  # type: str
        self.subject = subject  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()
        if self.content_field_list:
            for k in self.content_field_list:
                if k:
                    k.validate()
        if self.detail_url:
            self.detail_url.validate()
        if self.notify_configs:
            self.notify_configs.validate()

    def to_map(self):
        _map = super(CreateTodoTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        result['contentFieldList'] = []
        if self.content_field_list is not None:
            for k in self.content_field_list:
                result['contentFieldList'].append(k.to_map() if k else None)
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.description is not None:
            result['description'] = self.description
        if self.detail_url is not None:
            result['detailUrl'] = self.detail_url.to_map()
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids is not None:
            result['executorIds'] = self.executor_ids
        if self.is_only_show_executor is not None:
            result['isOnlyShowExecutor'] = self.is_only_show_executor
        if self.notify_configs is not None:
            result['notifyConfigs'] = self.notify_configs.to_map()
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        if self.participant_ids is not None:
            result['participantIds'] = self.participant_ids
        if self.priority is not None:
            result['priority'] = self.priority
        if self.source_id is not None:
            result['sourceId'] = self.source_id
        if self.subject is not None:
            result['subject'] = self.subject
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = CreateTodoTaskRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        self.content_field_list = []
        if m.get('contentFieldList') is not None:
            for k in m.get('contentFieldList'):
                temp_model = CreateTodoTaskRequestContentFieldList()
                self.content_field_list.append(temp_model.from_map(k))
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('detailUrl') is not None:
            temp_model = CreateTodoTaskRequestDetailUrl()
            self.detail_url = temp_model.from_map(m['detailUrl'])
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids = m.get('executorIds')
        if m.get('isOnlyShowExecutor') is not None:
            self.is_only_show_executor = m.get('isOnlyShowExecutor')
        if m.get('notifyConfigs') is not None:
            temp_model = CreateTodoTaskRequestNotifyConfigs()
            self.notify_configs = temp_model.from_map(m['notifyConfigs'])
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        if m.get('participantIds') is not None:
            self.participant_ids = m.get('participantIds')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('sourceId') is not None:
            self.source_id = m.get('sourceId')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        return self


class CreateTodoTaskShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, content_field_list_shrink=None, creator_id=None,
                 description=None, detail_url_shrink=None, due_time=None, executor_ids_shrink=None, is_only_show_executor=None,
                 notify_configs_shrink=None, operator_id=None, participant_ids_shrink=None, priority=None, source_id=None, subject=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.content_field_list_shrink = content_field_list_shrink  # type: str
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.detail_url_shrink = detail_url_shrink  # type: str
        self.due_time = due_time  # type: long
        self.executor_ids_shrink = executor_ids_shrink  # type: str
        self.is_only_show_executor = is_only_show_executor  # type: bool
        self.notify_configs_shrink = notify_configs_shrink  # type: str
        self.operator_id = operator_id  # type: str
        self.participant_ids_shrink = participant_ids_shrink  # type: str
        self.priority = priority  # type: int
        self.source_id = source_id  # type: str
        self.subject = subject  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.content_field_list_shrink is not None:
            result['contentFieldList'] = self.content_field_list_shrink
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.description is not None:
            result['description'] = self.description
        if self.detail_url_shrink is not None:
            result['detailUrl'] = self.detail_url_shrink
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids_shrink is not None:
            result['executorIds'] = self.executor_ids_shrink
        if self.is_only_show_executor is not None:
            result['isOnlyShowExecutor'] = self.is_only_show_executor
        if self.notify_configs_shrink is not None:
            result['notifyConfigs'] = self.notify_configs_shrink
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        if self.participant_ids_shrink is not None:
            result['participantIds'] = self.participant_ids_shrink
        if self.priority is not None:
            result['priority'] = self.priority
        if self.source_id is not None:
            result['sourceId'] = self.source_id
        if self.subject is not None:
            result['subject'] = self.subject
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('contentFieldList') is not None:
            self.content_field_list_shrink = m.get('contentFieldList')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('detailUrl') is not None:
            self.detail_url_shrink = m.get('detailUrl')
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids_shrink = m.get('executorIds')
        if m.get('isOnlyShowExecutor') is not None:
            self.is_only_show_executor = m.get('isOnlyShowExecutor')
        if m.get('notifyConfigs') is not None:
            self.notify_configs_shrink = m.get('notifyConfigs')
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        if m.get('participantIds') is not None:
            self.participant_ids_shrink = m.get('participantIds')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('sourceId') is not None:
            self.source_id = m.get('sourceId')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        return self


class CreateTodoTaskResponseBodyContentFieldList(TeaModel):
    def __init__(self, field_key=None, field_value=None):
        # fieldKey
        self.field_key = field_key  # type: str
        # fieldValue
        self.field_value = field_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskResponseBodyContentFieldList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_key is not None:
            result['fieldKey'] = self.field_key
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldKey') is not None:
            self.field_key = m.get('fieldKey')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        return self


class CreateTodoTaskResponseBodyDetailUrl(TeaModel):
    def __init__(self, app_url=None, pc_url=None):
        self.app_url = app_url  # type: str
        self.pc_url = pc_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskResponseBodyDetailUrl, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_url is not None:
            result['appUrl'] = self.app_url
        if self.pc_url is not None:
            result['pcUrl'] = self.pc_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('appUrl') is not None:
            self.app_url = m.get('appUrl')
        if m.get('pcUrl') is not None:
            self.pc_url = m.get('pcUrl')
        return self


class CreateTodoTaskResponseBodyNotifyConfigs(TeaModel):
    def __init__(self, ding_notify=None):
        self.ding_notify = ding_notify  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTodoTaskResponseBodyNotifyConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ding_notify is not None:
            result['dingNotify'] = self.ding_notify
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dingNotify') is not None:
            self.ding_notify = m.get('dingNotify')
        return self


class CreateTodoTaskResponseBody(TeaModel):
    def __init__(self, biz_tag=None, content_field_list=None, created_time=None, creator_id=None, description=None,
                 detail_url=None, done=None, due_time=None, executor_ids=None, finish_time=None, id=None,
                 is_only_show_executor=None, modified_time=None, modifier_id=None, notify_configs=None, participant_ids=None,
                 priority=None, request_id=None, source=None, source_id=None, start_time=None, subject=None):
        self.biz_tag = biz_tag  # type: str
        self.content_field_list = content_field_list  # type: list[CreateTodoTaskResponseBodyContentFieldList]
        self.created_time = created_time  # type: long
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.detail_url = detail_url  # type: CreateTodoTaskResponseBodyDetailUrl
        self.done = done  # type: bool
        self.due_time = due_time  # type: long
        self.executor_ids = executor_ids  # type: list[str]
        self.finish_time = finish_time  # type: long
        self.id = id  # type: str
        self.is_only_show_executor = is_only_show_executor  # type: bool
        self.modified_time = modified_time  # type: long
        self.modifier_id = modifier_id  # type: str
        self.notify_configs = notify_configs  # type: CreateTodoTaskResponseBodyNotifyConfigs
        self.participant_ids = participant_ids  # type: list[str]
        self.priority = priority  # type: int
        # requestId
        self.request_id = request_id  # type: str
        self.source = source  # type: str
        self.source_id = source_id  # type: str
        self.start_time = start_time  # type: long
        self.subject = subject  # type: str

    def validate(self):
        if self.content_field_list:
            for k in self.content_field_list:
                if k:
                    k.validate()
        if self.detail_url:
            self.detail_url.validate()
        if self.notify_configs:
            self.notify_configs.validate()

    def to_map(self):
        _map = super(CreateTodoTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_tag is not None:
            result['bizTag'] = self.biz_tag
        result['contentFieldList'] = []
        if self.content_field_list is not None:
            for k in self.content_field_list:
                result['contentFieldList'].append(k.to_map() if k else None)
        if self.created_time is not None:
            result['createdTime'] = self.created_time
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.description is not None:
            result['description'] = self.description
        if self.detail_url is not None:
            result['detailUrl'] = self.detail_url.to_map()
        if self.done is not None:
            result['done'] = self.done
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids is not None:
            result['executorIds'] = self.executor_ids
        if self.finish_time is not None:
            result['finishTime'] = self.finish_time
        if self.id is not None:
            result['id'] = self.id
        if self.is_only_show_executor is not None:
            result['isOnlyShowExecutor'] = self.is_only_show_executor
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['modifierId'] = self.modifier_id
        if self.notify_configs is not None:
            result['notifyConfigs'] = self.notify_configs.to_map()
        if self.participant_ids is not None:
            result['participantIds'] = self.participant_ids
        if self.priority is not None:
            result['priority'] = self.priority
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.source is not None:
            result['source'] = self.source
        if self.source_id is not None:
            result['sourceId'] = self.source_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.subject is not None:
            result['subject'] = self.subject
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bizTag') is not None:
            self.biz_tag = m.get('bizTag')
        self.content_field_list = []
        if m.get('contentFieldList') is not None:
            for k in m.get('contentFieldList'):
                temp_model = CreateTodoTaskResponseBodyContentFieldList()
                self.content_field_list.append(temp_model.from_map(k))
        if m.get('createdTime') is not None:
            self.created_time = m.get('createdTime')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('detailUrl') is not None:
            temp_model = CreateTodoTaskResponseBodyDetailUrl()
            self.detail_url = temp_model.from_map(m['detailUrl'])
        if m.get('done') is not None:
            self.done = m.get('done')
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids = m.get('executorIds')
        if m.get('finishTime') is not None:
            self.finish_time = m.get('finishTime')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOnlyShowExecutor') is not None:
            self.is_only_show_executor = m.get('isOnlyShowExecutor')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('modifierId') is not None:
            self.modifier_id = m.get('modifierId')
        if m.get('notifyConfigs') is not None:
            temp_model = CreateTodoTaskResponseBodyNotifyConfigs()
            self.notify_configs = temp_model.from_map(m['notifyConfigs'])
        if m.get('participantIds') is not None:
            self.participant_ids = m.get('participantIds')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('sourceId') is not None:
            self.source_id = m.get('sourceId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        return self


class CreateTodoTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateTodoTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateTodoTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTodoTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateVideoConferenceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateVideoConferenceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateVideoConferenceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateVideoConferenceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateVideoConferenceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateVideoConferenceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateVideoConferenceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateVideoConferenceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateVideoConferenceRequest(TeaModel):
    def __init__(self, conf_title=None, invite_caller=None, invite_user_ids=None):
        self.conf_title = conf_title  # type: str
        self.invite_caller = invite_caller  # type: bool
        self.invite_user_ids = invite_user_ids  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateVideoConferenceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conf_title is not None:
            result['ConfTitle'] = self.conf_title
        if self.invite_caller is not None:
            result['InviteCaller'] = self.invite_caller
        if self.invite_user_ids is not None:
            result['InviteUserIds'] = self.invite_user_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfTitle') is not None:
            self.conf_title = m.get('ConfTitle')
        if m.get('InviteCaller') is not None:
            self.invite_caller = m.get('InviteCaller')
        if m.get('InviteUserIds') is not None:
            self.invite_user_ids = m.get('InviteUserIds')
        return self


class CreateVideoConferenceShrinkRequest(TeaModel):
    def __init__(self, conf_title=None, invite_caller=None, invite_user_ids_shrink=None):
        self.conf_title = conf_title  # type: str
        self.invite_caller = invite_caller  # type: bool
        self.invite_user_ids_shrink = invite_user_ids_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateVideoConferenceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conf_title is not None:
            result['ConfTitle'] = self.conf_title
        if self.invite_caller is not None:
            result['InviteCaller'] = self.invite_caller
        if self.invite_user_ids_shrink is not None:
            result['InviteUserIds'] = self.invite_user_ids_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfTitle') is not None:
            self.conf_title = m.get('ConfTitle')
        if m.get('InviteCaller') is not None:
            self.invite_caller = m.get('InviteCaller')
        if m.get('InviteUserIds') is not None:
            self.invite_user_ids_shrink = m.get('InviteUserIds')
        return self


class CreateVideoConferenceResponseBody(TeaModel):
    def __init__(self, conference_id=None, conference_password=None, external_link_url=None, host_password=None,
                 phone_numbers=None, request_id=None, room_code=None):
        self.conference_id = conference_id  # type: str
        self.conference_password = conference_password  # type: str
        self.external_link_url = external_link_url  # type: str
        self.host_password = host_password  # type: str
        self.phone_numbers = phone_numbers  # type: list[str]
        # requestId
        self.request_id = request_id  # type: str
        self.room_code = room_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateVideoConferenceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        if self.conference_password is not None:
            result['conferencePassword'] = self.conference_password
        if self.external_link_url is not None:
            result['externalLinkUrl'] = self.external_link_url
        if self.host_password is not None:
            result['hostPassword'] = self.host_password
        if self.phone_numbers is not None:
            result['phoneNumbers'] = self.phone_numbers
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.room_code is not None:
            result['roomCode'] = self.room_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        if m.get('conferencePassword') is not None:
            self.conference_password = m.get('conferencePassword')
        if m.get('externalLinkUrl') is not None:
            self.external_link_url = m.get('externalLinkUrl')
        if m.get('hostPassword') is not None:
            self.host_password = m.get('hostPassword')
        if m.get('phoneNumbers') is not None:
            self.phone_numbers = m.get('phoneNumbers')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('roomCode') is not None:
            self.room_code = m.get('roomCode')
        return self


class CreateVideoConferenceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateVideoConferenceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateVideoConferenceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateVideoConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateWorkspaceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateWorkspaceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateWorkspaceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateWorkspaceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateWorkspaceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateWorkspaceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateWorkspaceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateWorkspaceRequest(TeaModel):
    def __init__(self, description=None, name=None, tenant_context=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.tenant_context = tenant_context  # type: CreateWorkspaceRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateWorkspaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TenantContext') is not None:
            temp_model = CreateWorkspaceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class CreateWorkspaceShrinkRequest(TeaModel):
    def __init__(self, description=None, name=None, tenant_context_shrink=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class CreateWorkspaceResponseBody(TeaModel):
    def __init__(self, description=None, name=None, request_id=None, url=None, workspace_id=None):
        self.description = description  # type: str
        self.name = name  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.url is not None:
            result['url'] = self.url
        if self.workspace_id is not None:
            result['workspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('url') is not None:
            self.url = m.get('url')
        if m.get('workspaceId') is not None:
            self.workspace_id = m.get('workspaceId')
        return self


class CreateWorkspaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateWorkspaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateWorkspaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateWorkspaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateWorkspaceDocHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceDocHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class CreateWorkspaceDocHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: CreateWorkspaceDocHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(CreateWorkspaceDocHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = CreateWorkspaceDocHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class CreateWorkspaceDocShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceDocShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class CreateWorkspaceDocRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceDocRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class CreateWorkspaceDocRequest(TeaModel):
    def __init__(self, doc_type=None, name=None, parent_node_id=None, template_id=None, template_type=None,
                 tenant_context=None, workspace_id=None):
        self.doc_type = doc_type  # type: str
        self.name = name  # type: str
        self.parent_node_id = parent_node_id  # type: str
        self.template_id = template_id  # type: str
        self.template_type = template_type  # type: str
        self.tenant_context = tenant_context  # type: CreateWorkspaceDocRequestTenantContext
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(CreateWorkspaceDocRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.doc_type is not None:
            result['DocType'] = self.doc_type
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_node_id is not None:
            result['ParentNodeId'] = self.parent_node_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_type is not None:
            result['TemplateType'] = self.template_type
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DocType') is not None:
            self.doc_type = m.get('DocType')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentNodeId') is not None:
            self.parent_node_id = m.get('ParentNodeId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateType') is not None:
            self.template_type = m.get('TemplateType')
        if m.get('TenantContext') is not None:
            temp_model = CreateWorkspaceDocRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateWorkspaceDocShrinkRequest(TeaModel):
    def __init__(self, doc_type=None, name=None, parent_node_id=None, template_id=None, template_type=None,
                 tenant_context_shrink=None, workspace_id=None):
        self.doc_type = doc_type  # type: str
        self.name = name  # type: str
        self.parent_node_id = parent_node_id  # type: str
        self.template_id = template_id  # type: str
        self.template_type = template_type  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceDocShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.doc_type is not None:
            result['DocType'] = self.doc_type
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_node_id is not None:
            result['ParentNodeId'] = self.parent_node_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_type is not None:
            result['TemplateType'] = self.template_type
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DocType') is not None:
            self.doc_type = m.get('DocType')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentNodeId') is not None:
            self.parent_node_id = m.get('ParentNodeId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateType') is not None:
            self.template_type = m.get('TemplateType')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateWorkspaceDocResponseBody(TeaModel):
    def __init__(self, doc_key=None, node_id=None, request_id=None, url=None, workspace_id=None):
        self.doc_key = doc_key  # type: str
        self.node_id = node_id  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateWorkspaceDocResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.doc_key is not None:
            result['docKey'] = self.doc_key
        if self.node_id is not None:
            result['nodeId'] = self.node_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.url is not None:
            result['url'] = self.url
        if self.workspace_id is not None:
            result['workspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('docKey') is not None:
            self.doc_key = m.get('docKey')
        if m.get('nodeId') is not None:
            self.node_id = m.get('nodeId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('url') is not None:
            self.url = m.get('url')
        if m.get('workspaceId') is not None:
            self.workspace_id = m.get('workspaceId')
        return self


class CreateWorkspaceDocResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateWorkspaceDocResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateWorkspaceDocResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateWorkspaceDocResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteColumnsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteColumnsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteColumnsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteColumnsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteColumnsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteColumnsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteColumnsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteColumnsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteColumnsRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteColumnsRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteColumnsRequest(TeaModel):
    def __init__(self, column=None, column_count=None, sheet_id=None, tenant_context=None, workbook_id=None):
        self.column = column  # type: long
        self.column_count = column_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: DeleteColumnsRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteColumnsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column is not None:
            result['Column'] = self.column
        if self.column_count is not None:
            result['ColumnCount'] = self.column_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Column') is not None:
            self.column = m.get('Column')
        if m.get('ColumnCount') is not None:
            self.column_count = m.get('ColumnCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = DeleteColumnsRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class DeleteColumnsShrinkRequest(TeaModel):
    def __init__(self, column=None, column_count=None, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.column = column  # type: long
        self.column_count = column_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteColumnsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column is not None:
            result['Column'] = self.column
        if self.column_count is not None:
            result['ColumnCount'] = self.column_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Column') is not None:
            self.column = m.get('Column')
        if m.get('ColumnCount') is not None:
            self.column_count = m.get('ColumnCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class DeleteColumnsResponseBody(TeaModel):
    def __init__(self, id=None, request_id=None):
        self.id = id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteColumnsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class DeleteColumnsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteColumnsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteColumnsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteColumnsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEventHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteEventHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteEventHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteEventHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteEventHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteEventHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteEventShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteEventShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteEventRequest(TeaModel):
    def __init__(self, calendar_id=None, event_id=None, push_notification=None):
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.push_notification = push_notification  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.push_notification is not None:
            result['pushNotification'] = self.push_notification
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('pushNotification') is not None:
            self.push_notification = m.get('pushNotification')
        return self


class DeleteEventResponseBodyContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: any

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteEventResponseBodyContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteEventResponseBody(TeaModel):
    def __init__(self, content=None, error_code=None, error_ctx=None, error_msg=None, http_status_code=None,
                 request_id=None, success=None):
        self.content = content  # type: DeleteEventResponseBodyContent
        self.error_code = error_code  # type: str
        self.error_ctx = error_ctx  # type: dict[str, any]
        self.error_msg = error_msg  # type: str
        self.http_status_code = http_status_code  # type: int
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(DeleteEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            temp_model = DeleteEventResponseBodyContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DeleteEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteEventResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteFormDataHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteFormDataHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteFormDataHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteFormDataHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteFormDataHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteFormDataHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteFormDataShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteFormDataShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteFormDataRequest(TeaModel):
    def __init__(self, app_type=None, form_instance_id=None, language=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_instance_id = form_instance_id  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteFormDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class DeleteFormDataResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteFormDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class DeleteFormDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteFormDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteFormDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteFormDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInstanceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteInstanceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteInstanceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteInstanceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteInstanceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteInstanceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteInstanceRequest(TeaModel):
    def __init__(self, app_type=None, language=None, process_instance_id=None, system_token=None):
        self.app_type = app_type  # type: str
        self.language = language  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.language is not None:
            result['Language'] = self.language
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class DeleteInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class DeleteInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteLiveHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteLiveHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteLiveHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteLiveHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteLiveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteLiveHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteLiveShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteLiveShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteLiveRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteLiveRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteLiveRequest(TeaModel):
    def __init__(self, live_id=None, tenant_context=None):
        self.live_id = live_id  # type: str
        self.tenant_context = tenant_context  # type: DeleteLiveRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteLiveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('TenantContext') is not None:
            temp_model = DeleteLiveRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class DeleteLiveShrinkRequest(TeaModel):
    def __init__(self, live_id=None, tenant_context_shrink=None):
        self.live_id = live_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteLiveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class DeleteLiveResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteLiveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DeleteLiveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteLiveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteLiveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteLiveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMeetingRoomHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteMeetingRoomHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteMeetingRoomHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteMeetingRoomHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteMeetingRoomHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteMeetingRoomShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteMeetingRoomRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteMeetingRoomRequest(TeaModel):
    def __init__(self, room_id=None, tenant_context=None):
        self.room_id = room_id  # type: str
        self.tenant_context = tenant_context  # type: DeleteMeetingRoomRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteMeetingRoomRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        if m.get('TenantContext') is not None:
            temp_model = DeleteMeetingRoomRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class DeleteMeetingRoomShrinkRequest(TeaModel):
    def __init__(self, room_id=None, tenant_context_shrink=None):
        self.room_id = room_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class DeleteMeetingRoomResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class DeleteMeetingRoomResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMeetingRoomResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMeetingRoomResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMeetingRoomGroupHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteMeetingRoomGroupHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteMeetingRoomGroupHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteMeetingRoomGroupHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteMeetingRoomGroupShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteMeetingRoomGroupRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteMeetingRoomGroupRequest(TeaModel):
    def __init__(self, group_id=None, tenant_context=None):
        self.group_id = group_id  # type: str
        self.tenant_context = tenant_context  # type: DeleteMeetingRoomGroupRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('TenantContext') is not None:
            temp_model = DeleteMeetingRoomGroupRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class DeleteMeetingRoomGroupShrinkRequest(TeaModel):
    def __init__(self, group_id=None, tenant_context_shrink=None):
        self.group_id = group_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class DeleteMeetingRoomGroupResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class DeleteMeetingRoomGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMeetingRoomGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMeetingRoomGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteRowsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRowsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteRowsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteRowsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteRowsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteRowsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteRowsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRowsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteRowsRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRowsRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteRowsRequest(TeaModel):
    def __init__(self, row=None, row_count=None, sheet_id=None, tenant_context=None, workbook_id=None):
        self.row = row  # type: long
        self.row_count = row_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: DeleteRowsRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteRowsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.row is not None:
            result['Row'] = self.row
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Row') is not None:
            self.row = m.get('Row')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = DeleteRowsRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class DeleteRowsShrinkRequest(TeaModel):
    def __init__(self, row=None, row_count=None, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.row = row  # type: long
        self.row_count = row_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRowsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.row is not None:
            result['Row'] = self.row
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Row') is not None:
            self.row = m.get('Row')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class DeleteRowsResponseBody(TeaModel):
    def __init__(self, id=None, request_id=None):
        self.id = id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRowsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class DeleteRowsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteRowsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteRowsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteRowsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScenegroupMemberHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScenegroupMemberHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteScenegroupMemberHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteScenegroupMemberHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteScenegroupMemberHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteScenegroupMemberHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteScenegroupMemberShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScenegroupMemberShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteScenegroupMemberRequest(TeaModel):
    def __init__(self, open_conversation_id=None, user_ids=None):
        self.open_conversation_id = open_conversation_id  # type: str
        self.user_ids = user_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScenegroupMemberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_conversation_id is not None:
            result['OpenConversationId'] = self.open_conversation_id
        if self.user_ids is not None:
            result['UserIds'] = self.user_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OpenConversationId') is not None:
            self.open_conversation_id = m.get('OpenConversationId')
        if m.get('UserIds') is not None:
            self.user_ids = m.get('UserIds')
        return self


class DeleteScenegroupMemberResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScenegroupMemberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DeleteScenegroupMemberResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteScenegroupMemberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteScenegroupMemberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScenegroupMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSheetHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSheetHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteSheetHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteSheetHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteSheetHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteSheetHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteSheetShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSheetShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteSheetRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSheetRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteSheetRequest(TeaModel):
    def __init__(self, sheet_id=None, tenant_context=None, workbook_id=None):
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: DeleteSheetRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteSheetRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = DeleteSheetRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class DeleteSheetShrinkRequest(TeaModel):
    def __init__(self, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSheetShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class DeleteSheetResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSheetResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DeleteSheetResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSheetResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSheetResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSheetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSubscribedCalendarHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSubscribedCalendarHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteSubscribedCalendarHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteSubscribedCalendarHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteSubscribedCalendarHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteSubscribedCalendarHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteSubscribedCalendarShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSubscribedCalendarShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteSubscribedCalendarRequest(TeaModel):
    def __init__(self, calendar_id=None):
        self.calendar_id = calendar_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSubscribedCalendarRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        return self


class DeleteSubscribedCalendarResponseBody(TeaModel):
    def __init__(self, result=None, request_id=None):
        self.result = result  # type: bool
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSubscribedCalendarResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.result is not None:
            result['Result'] = self.result
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class DeleteSubscribedCalendarResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSubscribedCalendarResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSubscribedCalendarResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSubscribedCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteTodoTaskHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTodoTaskHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteTodoTaskHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteTodoTaskHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteTodoTaskHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteTodoTaskHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteTodoTaskShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTodoTaskShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteTodoTaskRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTodoTaskRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteTodoTaskRequest(TeaModel):
    def __init__(self, tenant_context=None, operator_id=None, task_id=None):
        self.tenant_context = tenant_context  # type: DeleteTodoTaskRequestTenantContext
        self.operator_id = operator_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteTodoTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = DeleteTodoTaskRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class DeleteTodoTaskShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, operator_id=None, task_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.operator_id = operator_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTodoTaskShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class DeleteTodoTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTodoTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class DeleteTodoTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteTodoTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteTodoTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteTodoTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteWorkspaceDocMembersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteWorkspaceDocMembersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteWorkspaceDocMembersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteWorkspaceDocMembersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteWorkspaceDocMembersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteWorkspaceDocMembersRequestMembers(TeaModel):
    def __init__(self, member_id=None, member_type=None):
        self.member_id = member_id  # type: str
        self.member_type = member_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersRequestMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        return self


class DeleteWorkspaceDocMembersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteWorkspaceDocMembersRequest(TeaModel):
    def __init__(self, members=None, node_id=None, tenant_context=None, workspace_id=None):
        self.members = members  # type: list[DeleteWorkspaceDocMembersRequestMembers]
        self.node_id = node_id  # type: str
        self.tenant_context = tenant_context  # type: DeleteWorkspaceDocMembersRequestTenantContext
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = DeleteWorkspaceDocMembersRequestMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            temp_model = DeleteWorkspaceDocMembersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteWorkspaceDocMembersShrinkRequest(TeaModel):
    def __init__(self, members_shrink=None, node_id=None, tenant_context_shrink=None, workspace_id=None):
        self.members_shrink = members_shrink  # type: str
        self.node_id = node_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.members_shrink is not None:
            result['Members'] = self.members_shrink
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Members') is not None:
            self.members_shrink = m.get('Members')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteWorkspaceDocMembersResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class DeleteWorkspaceDocMembersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteWorkspaceDocMembersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteWorkspaceDocMembersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteWorkspaceDocMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteWorkspaceMembersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceMembersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class DeleteWorkspaceMembersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: DeleteWorkspaceMembersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(DeleteWorkspaceMembersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = DeleteWorkspaceMembersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class DeleteWorkspaceMembersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceMembersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class DeleteWorkspaceMembersRequestMembers(TeaModel):
    def __init__(self, member_id=None, member_type=None):
        self.member_id = member_id  # type: str
        self.member_type = member_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceMembersRequestMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        return self


class DeleteWorkspaceMembersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceMembersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class DeleteWorkspaceMembersRequest(TeaModel):
    def __init__(self, members=None, tenant_context=None, workspace_id=None):
        self.members = members  # type: list[DeleteWorkspaceMembersRequestMembers]
        self.tenant_context = tenant_context  # type: DeleteWorkspaceMembersRequestTenantContext
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(DeleteWorkspaceMembersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = DeleteWorkspaceMembersRequestMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('TenantContext') is not None:
            temp_model = DeleteWorkspaceMembersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteWorkspaceMembersShrinkRequest(TeaModel):
    def __init__(self, members_shrink=None, tenant_context_shrink=None, workspace_id=None):
        self.members_shrink = members_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceMembersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.members_shrink is not None:
            result['Members'] = self.members_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Members') is not None:
            self.members_shrink = m.get('Members')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteWorkspaceMembersResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteWorkspaceMembersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class DeleteWorkspaceMembersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteWorkspaceMembersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteWorkspaceMembersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteWorkspaceMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExecutePlatformTaskHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecutePlatformTaskHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ExecutePlatformTaskHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ExecutePlatformTaskHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ExecutePlatformTaskHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ExecutePlatformTaskHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ExecutePlatformTaskShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecutePlatformTaskShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ExecutePlatformTaskRequest(TeaModel):
    def __init__(self, app_type=None, form_data_json=None, language=None, no_execute_expressions=None,
                 out_result=None, process_instance_id=None, remark=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_data_json = form_data_json  # type: str
        self.language = language  # type: str
        self.no_execute_expressions = no_execute_expressions  # type: str
        self.out_result = out_result  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.remark = remark  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecutePlatformTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_data_json is not None:
            result['FormDataJson'] = self.form_data_json
        if self.language is not None:
            result['Language'] = self.language
        if self.no_execute_expressions is not None:
            result['NoExecuteExpressions'] = self.no_execute_expressions
        if self.out_result is not None:
            result['OutResult'] = self.out_result
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormDataJson') is not None:
            self.form_data_json = m.get('FormDataJson')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('NoExecuteExpressions') is not None:
            self.no_execute_expressions = m.get('NoExecuteExpressions')
        if m.get('OutResult') is not None:
            self.out_result = m.get('OutResult')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class ExecutePlatformTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecutePlatformTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class ExecutePlatformTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ExecutePlatformTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ExecutePlatformTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExecutePlatformTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExecuteTaskHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecuteTaskHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ExecuteTaskHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ExecuteTaskHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ExecuteTaskHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ExecuteTaskHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ExecuteTaskShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecuteTaskShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ExecuteTaskRequest(TeaModel):
    def __init__(self, app_type=None, digital_sign_url=None, form_data_json=None, language=None,
                 no_execute_expressions=None, out_result=None, process_instance_id=None, remark=None, system_token=None, task_id=None):
        self.app_type = app_type  # type: str
        self.digital_sign_url = digital_sign_url  # type: str
        self.form_data_json = form_data_json  # type: str
        self.language = language  # type: str
        self.no_execute_expressions = no_execute_expressions  # type: str
        self.out_result = out_result  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.remark = remark  # type: str
        self.system_token = system_token  # type: str
        self.task_id = task_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecuteTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.digital_sign_url is not None:
            result['DigitalSignUrl'] = self.digital_sign_url
        if self.form_data_json is not None:
            result['FormDataJson'] = self.form_data_json
        if self.language is not None:
            result['Language'] = self.language
        if self.no_execute_expressions is not None:
            result['NoExecuteExpressions'] = self.no_execute_expressions
        if self.out_result is not None:
            result['OutResult'] = self.out_result
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('DigitalSignUrl') is not None:
            self.digital_sign_url = m.get('DigitalSignUrl')
        if m.get('FormDataJson') is not None:
            self.form_data_json = m.get('FormDataJson')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('NoExecuteExpressions') is not None:
            self.no_execute_expressions = m.get('NoExecuteExpressions')
        if m.get('OutResult') is not None:
            self.out_result = m.get('OutResult')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ExecuteTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExecuteTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class ExecuteTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ExecuteTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ExecuteTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExecuteTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetActivityListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetActivityListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetActivityListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetActivityListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetActivityListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetActivityListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetActivityListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetActivityListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetActivityListRequest(TeaModel):
    def __init__(self, app_type=None, language=None, process_code=None, system_token=None):
        self.app_type = app_type  # type: str
        self.language = language  # type: str
        self.process_code = process_code  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetActivityListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.language is not None:
            result['Language'] = self.language
        if self.process_code is not None:
            result['ProcessCode'] = self.process_code
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ProcessCode') is not None:
            self.process_code = m.get('ProcessCode')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetActivityListResponseBodyResult(TeaModel):
    def __init__(self, activity_id=None, activity_name=None, activity_name_in_english=None):
        self.activity_id = activity_id  # type: str
        self.activity_name = activity_name  # type: str
        self.activity_name_in_english = activity_name_in_english  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetActivityListResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_id is not None:
            result['ActivityId'] = self.activity_id
        if self.activity_name is not None:
            result['ActivityName'] = self.activity_name
        if self.activity_name_in_english is not None:
            result['ActivityNameInEnglish'] = self.activity_name_in_english
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityId') is not None:
            self.activity_id = m.get('ActivityId')
        if m.get('ActivityName') is not None:
            self.activity_name = m.get('ActivityName')
        if m.get('ActivityNameInEnglish') is not None:
            self.activity_name_in_english = m.get('ActivityNameInEnglish')
        return self


class GetActivityListResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[GetActivityListResponseBodyResult]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetActivityListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = GetActivityListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetActivityListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetActivityListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetActivityListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetActivityListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAllSheetsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllSheetsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetAllSheetsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetAllSheetsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetAllSheetsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetAllSheetsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetAllSheetsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllSheetsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetAllSheetsRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllSheetsRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetAllSheetsRequest(TeaModel):
    def __init__(self, tenant_context=None, workbook_id=None):
        self.tenant_context = tenant_context  # type: GetAllSheetsRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetAllSheetsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = GetAllSheetsRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class GetAllSheetsShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, workbook_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllSheetsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class GetAllSheetsResponseBodyValue(TeaModel):
    def __init__(self, id=None, name=None):
        self.id = id  # type: str
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllSheetsResponseBodyValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetAllSheetsResponseBody(TeaModel):
    def __init__(self, request_id=None, value=None):
        # requestId
        self.request_id = request_id  # type: str
        self.value = value  # type: list[GetAllSheetsResponseBodyValue]

    def validate(self):
        if self.value:
            for k in self.value:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetAllSheetsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['value'] = []
        if self.value is not None:
            for k in self.value:
                result['value'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.value = []
        if m.get('value') is not None:
            for k in m.get('value'):
                temp_model = GetAllSheetsResponseBodyValue()
                self.value.append(temp_model.from_map(k))
        return self


class GetAllSheetsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAllSheetsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAllSheetsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAllSheetsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetEventHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetEventHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetEventHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetEventHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetEventShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetEventRequest(TeaModel):
    def __init__(self, calendar_id=None, event_id=None, max_attendees=None):
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.max_attendees = max_attendees  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.max_attendees is not None:
            result['MaxAttendees'] = self.max_attendees
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('MaxAttendees') is not None:
            self.max_attendees = m.get('MaxAttendees')
        return self


class GetEventResponseBodyAttendees(TeaModel):
    def __init__(self, display_name=None, id=None, is_optional=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.is_optional = is_optional  # type: bool
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyAttendees, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.is_optional is not None:
            result['IsOptional'] = self.is_optional
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsOptional') is not None:
            self.is_optional = m.get('IsOptional')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class GetEventResponseBodyCategories(TeaModel):
    def __init__(self, display_name=None):
        self.display_name = display_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyCategories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        return self


class GetEventResponseBodyEnd(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class GetEventResponseBodyExtendedPropertiesSharedProperties(TeaModel):
    def __init__(self, belong_corp_id=None, source_open_cid=None):
        self.belong_corp_id = belong_corp_id  # type: str
        self.source_open_cid = source_open_cid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyExtendedPropertiesSharedProperties, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.belong_corp_id is not None:
            result['BelongCorpId'] = self.belong_corp_id
        if self.source_open_cid is not None:
            result['SourceOpenCid'] = self.source_open_cid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BelongCorpId') is not None:
            self.belong_corp_id = m.get('BelongCorpId')
        if m.get('SourceOpenCid') is not None:
            self.source_open_cid = m.get('SourceOpenCid')
        return self


class GetEventResponseBodyExtendedProperties(TeaModel):
    def __init__(self, shared_properties=None):
        self.shared_properties = shared_properties  # type: GetEventResponseBodyExtendedPropertiesSharedProperties

    def validate(self):
        if self.shared_properties:
            self.shared_properties.validate()

    def to_map(self):
        _map = super(GetEventResponseBodyExtendedProperties, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.shared_properties is not None:
            result['SharedProperties'] = self.shared_properties.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SharedProperties') is not None:
            temp_model = GetEventResponseBodyExtendedPropertiesSharedProperties()
            self.shared_properties = temp_model.from_map(m['SharedProperties'])
        return self


class GetEventResponseBodyLocation(TeaModel):
    def __init__(self, display_name=None, meeting_rooms=None):
        self.display_name = display_name  # type: str
        # --\
        self.meeting_rooms = meeting_rooms  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['MeetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('MeetingRooms') is not None:
            self.meeting_rooms = m.get('MeetingRooms')
        return self


class GetEventResponseBodyMeetingRooms(TeaModel):
    def __init__(self, display_name=None, response_status=None, room_id=None):
        self.display_name = display_name  # type: str
        self.response_status = response_status  # type: str
        self.room_id = room_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyMeetingRooms, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        return self


class GetEventResponseBodyOnlineMeetingInfo(TeaModel):
    def __init__(self, conference_id=None, extra_info=None, type=None, url=None):
        self.conference_id = conference_id  # type: str
        self.extra_info = extra_info  # type: dict[str, any]
        self.type = type  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyOnlineMeetingInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('ExtraInfo') is not None:
            self.extra_info = m.get('ExtraInfo')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetEventResponseBodyOrganizer(TeaModel):
    def __init__(self, display_name=None, id=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyOrganizer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class GetEventResponseBodyOriginStart(TeaModel):
    def __init__(self, date_time=None):
        self.date_time = date_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyOriginStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        return self


class GetEventResponseBodyRecurrencePattern(TeaModel):
    def __init__(self, day_of_month=None, days_of_week=None, index=None, interval=None, type=None):
        self.day_of_month = day_of_month  # type: int
        self.days_of_week = days_of_week  # type: str
        self.index = index  # type: str
        self.interval = interval  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyRecurrencePattern, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['DayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['DaysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['Index'] = self.index
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DayOfMonth') is not None:
            self.day_of_month = m.get('DayOfMonth')
        if m.get('DaysOfWeek') is not None:
            self.days_of_week = m.get('DaysOfWeek')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetEventResponseBodyRecurrenceRange(TeaModel):
    def __init__(self, end_date=None, number_of_occurrences=None, type=None):
        self.end_date = end_date  # type: str
        self.number_of_occurrences = number_of_occurrences  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyRecurrenceRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['NumberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('NumberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('NumberOfOccurrences')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetEventResponseBodyRecurrence(TeaModel):
    def __init__(self, pattern=None, range=None):
        self.pattern = pattern  # type: GetEventResponseBodyRecurrencePattern
        self.range = range  # type: GetEventResponseBodyRecurrenceRange

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super(GetEventResponseBodyRecurrence, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['Pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['Range'] = self.range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Pattern') is not None:
            temp_model = GetEventResponseBodyRecurrencePattern()
            self.pattern = temp_model.from_map(m['Pattern'])
        if m.get('Range') is not None:
            temp_model = GetEventResponseBodyRecurrenceRange()
            self.range = temp_model.from_map(m['Range'])
        return self


class GetEventResponseBodyReminders(TeaModel):
    def __init__(self, method=None, minutes=None):
        self.method = method  # type: str
        self.minutes = minutes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyReminders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['Method'] = self.method
        if self.minutes is not None:
            result['Minutes'] = self.minutes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('Minutes') is not None:
            self.minutes = m.get('Minutes')
        return self


class GetEventResponseBodyRichTextDescription(TeaModel):
    def __init__(self, text=None):
        self.text = text  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyRichTextDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.text is not None:
            result['Text'] = self.text
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Text') is not None:
            self.text = m.get('Text')
        return self


class GetEventResponseBodyStart(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventResponseBodyStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class GetEventResponseBody(TeaModel):
    def __init__(self, attendees=None, categories=None, create_time=None, description=None, end=None,
                 extended_properties=None, id=None, is_all_day=None, location=None, meeting_rooms=None, online_meeting_info=None,
                 organizer=None, origin_start=None, recurrence=None, reminders=None, request_id=None,
                 rich_text_description=None, series_master_id=None, start=None, status=None, summary=None, update_time=None):
        self.attendees = attendees  # type: list[GetEventResponseBodyAttendees]
        self.categories = categories  # type: list[GetEventResponseBodyCategories]
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.end = end  # type: GetEventResponseBodyEnd
        self.extended_properties = extended_properties  # type: GetEventResponseBodyExtendedProperties
        self.id = id  # type: str
        self.is_all_day = is_all_day  # type: bool
        self.location = location  # type: GetEventResponseBodyLocation
        self.meeting_rooms = meeting_rooms  # type: list[GetEventResponseBodyMeetingRooms]
        self.online_meeting_info = online_meeting_info  # type: GetEventResponseBodyOnlineMeetingInfo
        self.organizer = organizer  # type: GetEventResponseBodyOrganizer
        self.origin_start = origin_start  # type: GetEventResponseBodyOriginStart
        self.recurrence = recurrence  # type: GetEventResponseBodyRecurrence
        self.reminders = reminders  # type: list[GetEventResponseBodyReminders]
        # requestId
        self.request_id = request_id  # type: str
        self.rich_text_description = rich_text_description  # type: GetEventResponseBodyRichTextDescription
        self.series_master_id = series_master_id  # type: str
        self.start = start  # type: GetEventResponseBodyStart
        self.status = status  # type: str
        self.summary = summary  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.extended_properties:
            self.extended_properties.validate()
        if self.location:
            self.location.validate()
        if self.meeting_rooms:
            for k in self.meeting_rooms:
                if k:
                    k.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.origin_start:
            self.origin_start.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.rich_text_description:
            self.rich_text_description.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super(GetEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        result['categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['categories'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.extended_properties is not None:
            result['extendedProperties'] = self.extended_properties.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        result['meetingRooms'] = []
        if self.meeting_rooms is not None:
            for k in self.meeting_rooms:
                result['meetingRooms'].append(k.to_map() if k else None)
        if self.online_meeting_info is not None:
            result['onlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.origin_start is not None:
            result['originStart'] = self.origin_start.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.rich_text_description is not None:
            result['richTextDescription'] = self.rich_text_description.to_map()
        if self.series_master_id is not None:
            result['seriesMasterId'] = self.series_master_id
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.status is not None:
            result['status'] = self.status
        if self.summary is not None:
            result['summary'] = self.summary
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = GetEventResponseBodyAttendees()
                self.attendees.append(temp_model.from_map(k))
        self.categories = []
        if m.get('categories') is not None:
            for k in m.get('categories'):
                temp_model = GetEventResponseBodyCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = GetEventResponseBodyEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('extendedProperties') is not None:
            temp_model = GetEventResponseBodyExtendedProperties()
            self.extended_properties = temp_model.from_map(m['extendedProperties'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = GetEventResponseBodyLocation()
            self.location = temp_model.from_map(m['location'])
        self.meeting_rooms = []
        if m.get('meetingRooms') is not None:
            for k in m.get('meetingRooms'):
                temp_model = GetEventResponseBodyMeetingRooms()
                self.meeting_rooms.append(temp_model.from_map(k))
        if m.get('onlineMeetingInfo') is not None:
            temp_model = GetEventResponseBodyOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['onlineMeetingInfo'])
        if m.get('organizer') is not None:
            temp_model = GetEventResponseBodyOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('originStart') is not None:
            temp_model = GetEventResponseBodyOriginStart()
            self.origin_start = temp_model.from_map(m['originStart'])
        if m.get('recurrence') is not None:
            temp_model = GetEventResponseBodyRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = GetEventResponseBodyReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('richTextDescription') is not None:
            temp_model = GetEventResponseBodyRichTextDescription()
            self.rich_text_description = temp_model.from_map(m['richTextDescription'])
        if m.get('seriesMasterId') is not None:
            self.series_master_id = m.get('seriesMasterId')
        if m.get('start') is not None:
            temp_model = GetEventResponseBodyStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class GetEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFieldDefByUuidHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFieldDefByUuidHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetFieldDefByUuidHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetFieldDefByUuidHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetFieldDefByUuidHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetFieldDefByUuidHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetFieldDefByUuidShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFieldDefByUuidShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetFieldDefByUuidRequest(TeaModel):
    def __init__(self, app_type=None, form_uuid=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_uuid = form_uuid  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFieldDefByUuidRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetFieldDefByUuidResponseBodyResult(TeaModel):
    def __init__(self, behavior=None, children=None, component_name=None, field_id=None, label=None, props=None,
                 success=None):
        self.behavior = behavior  # type: str
        self.children = children  # type: str
        self.component_name = component_name  # type: str
        self.field_id = field_id  # type: str
        self.label = label  # type: any
        self.props = props  # type: any
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFieldDefByUuidResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.behavior is not None:
            result['Behavior'] = self.behavior
        if self.children is not None:
            result['Children'] = self.children
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        if self.field_id is not None:
            result['FieldId'] = self.field_id
        if self.label is not None:
            result['Label'] = self.label
        if self.props is not None:
            result['Props'] = self.props
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Behavior') is not None:
            self.behavior = m.get('Behavior')
        if m.get('Children') is not None:
            self.children = m.get('Children')
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        if m.get('FieldId') is not None:
            self.field_id = m.get('FieldId')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Props') is not None:
            self.props = m.get('Props')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetFieldDefByUuidResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, success=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[GetFieldDefByUuidResponseBodyResult]
        self.success = success  # type: bool
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetFieldDefByUuidResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = GetFieldDefByUuidResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetFieldDefByUuidResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetFieldDefByUuidResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetFieldDefByUuidResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFieldDefByUuidResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFormComponentDefinitionListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormComponentDefinitionListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetFormComponentDefinitionListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetFormComponentDefinitionListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetFormComponentDefinitionListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetFormComponentDefinitionListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetFormComponentDefinitionListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormComponentDefinitionListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetFormComponentDefinitionListRequest(TeaModel):
    def __init__(self, app_type=None, form_uuid=None, language=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_uuid = form_uuid  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormComponentDefinitionListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetFormComponentDefinitionListResponseBodyResult(TeaModel):
    def __init__(self, component_name=None, field_id=None, label=None, parent_id=None):
        self.component_name = component_name  # type: str
        self.field_id = field_id  # type: str
        self.label = label  # type: str
        self.parent_id = parent_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormComponentDefinitionListResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        if self.field_id is not None:
            result['FieldId'] = self.field_id
        if self.label is not None:
            result['Label'] = self.label
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        if m.get('FieldId') is not None:
            self.field_id = m.get('FieldId')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        return self


class GetFormComponentDefinitionListResponseBody(TeaModel):
    def __init__(self, result=None, request_id=None, vendor_request_id=None, vendor_type=None):
        self.result = result  # type: list[GetFormComponentDefinitionListResponseBodyResult]
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetFormComponentDefinitionListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = GetFormComponentDefinitionListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetFormComponentDefinitionListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetFormComponentDefinitionListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetFormComponentDefinitionListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFormComponentDefinitionListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFormDataByIDHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormDataByIDHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetFormDataByIDHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetFormDataByIDHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetFormDataByIDHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetFormDataByIDHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetFormDataByIDShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormDataByIDShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetFormDataByIDRequest(TeaModel):
    def __init__(self, app_type=None, id=None, language=None, system_token=None):
        self.app_type = app_type  # type: str
        self.id = id  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormDataByIDRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.id is not None:
            result['Id'] = self.id
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetFormDataByIDResponseBodyOriginatorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormDataByIDResponseBodyOriginatorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetFormDataByIDResponseBodyOriginator(TeaModel):
    def __init__(self, department_name=None, email=None, name=None, user_id=None):
        self.department_name = department_name  # type: str
        self.email = email  # type: str
        self.name = name  # type: GetFormDataByIDResponseBodyOriginatorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(GetFormDataByIDResponseBodyOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department_name is not None:
            result['DepartmentName'] = self.department_name
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DepartmentName') is not None:
            self.department_name = m.get('DepartmentName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            temp_model = GetFormDataByIDResponseBodyOriginatorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetFormDataByIDResponseBody(TeaModel):
    def __init__(self, form_data=None, form_inst_id=None, modified_time_gmt=None, originator=None, request_id=None,
                 vendor_request_id=None, vendor_type=None):
        self.form_data = form_data  # type: dict[str, any]
        self.form_inst_id = form_inst_id  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.originator = originator  # type: GetFormDataByIDResponseBodyOriginator
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(GetFormDataByIDResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.form_data is not None:
            result['formData'] = self.form_data
        if self.form_inst_id is not None:
            result['formInstId'] = self.form_inst_id
        if self.modified_time_gmt is not None:
            result['modifiedTimeGMT'] = self.modified_time_gmt
        if self.originator is not None:
            result['originator'] = self.originator.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('formData') is not None:
            self.form_data = m.get('formData')
        if m.get('formInstId') is not None:
            self.form_inst_id = m.get('formInstId')
        if m.get('modifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('modifiedTimeGMT')
        if m.get('originator') is not None:
            temp_model = GetFormDataByIDResponseBodyOriginator()
            self.originator = temp_model.from_map(m['originator'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetFormDataByIDResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetFormDataByIDResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetFormDataByIDResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFormDataByIDResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFormListInAppHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormListInAppHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetFormListInAppHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetFormListInAppHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetFormListInAppHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetFormListInAppHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetFormListInAppShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormListInAppShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetFormListInAppRequest(TeaModel):
    def __init__(self, app_type=None, form_types=None, page_number=None, page_size=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_types = form_types  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormListInAppRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_types is not None:
            result['FormTypes'] = self.form_types
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormTypes') is not None:
            self.form_types = m.get('FormTypes')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetFormListInAppResponseBodyDataTitle(TeaModel):
    def __init__(self, en_us=None, zh_cn=None):
        self.en_us = en_us  # type: str
        self.zh_cn = zh_cn  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFormListInAppResponseBodyDataTitle, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.en_us is not None:
            result['EnUS'] = self.en_us
        if self.zh_cn is not None:
            result['ZhCN'] = self.zh_cn
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EnUS') is not None:
            self.en_us = m.get('EnUS')
        if m.get('ZhCN') is not None:
            self.zh_cn = m.get('ZhCN')
        return self


class GetFormListInAppResponseBodyData(TeaModel):
    def __init__(self, creator=None, form_type=None, form_uuid=None, gmt_create=None, title=None):
        self.creator = creator  # type: str
        self.form_type = form_type  # type: str
        self.form_uuid = form_uuid  # type: str
        self.gmt_create = gmt_create  # type: str
        self.title = title  # type: GetFormListInAppResponseBodyDataTitle

    def validate(self):
        if self.title:
            self.title.validate()

    def to_map(self):
        _map = super(GetFormListInAppResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.form_type is not None:
            result['FormType'] = self.form_type
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.title is not None:
            result['Title'] = self.title.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('FormType') is not None:
            self.form_type = m.get('FormType')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('Title') is not None:
            temp_model = GetFormListInAppResponseBodyDataTitle()
            self.title = temp_model.from_map(m['Title'])
        return self


class GetFormListInAppResponseBody(TeaModel):
    def __init__(self, current_page=None, data=None, request_id=None, success=None, total_count=None,
                 vendor_request_id=None, vendor_type=None):
        self.current_page = current_page  # type: int
        self.data = data  # type: list[GetFormListInAppResponseBodyData]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: int
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetFormListInAppResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = GetFormListInAppResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetFormListInAppResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetFormListInAppResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetFormListInAppResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFormListInAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceByIdHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceByIdHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetInstanceByIdHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetInstanceByIdHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetInstanceByIdHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetInstanceByIdHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetInstanceByIdShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceByIdShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetInstanceByIdRequest(TeaModel):
    def __init__(self, app_type=None, id=None, language=None, system_token=None):
        self.app_type = app_type  # type: str
        self.id = id  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceByIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.id is not None:
            result['Id'] = self.id
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetInstanceByIdResponseBodyActionExecutorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceByIdResponseBodyActionExecutorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetInstanceByIdResponseBodyActionExecutor(TeaModel):
    def __init__(self, dept_name=None, email=None, name=None, user_id=None):
        self.dept_name = dept_name  # type: str
        self.email = email  # type: str
        self.name = name  # type: GetInstanceByIdResponseBodyActionExecutorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(GetInstanceByIdResponseBodyActionExecutor, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            temp_model = GetInstanceByIdResponseBodyActionExecutorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetInstanceByIdResponseBodyOriginatorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceByIdResponseBodyOriginatorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetInstanceByIdResponseBodyOriginator(TeaModel):
    def __init__(self, dept_name=None, email=None, name=None, user_id=None):
        self.dept_name = dept_name  # type: str
        self.email = email  # type: str
        self.name = name  # type: GetInstanceByIdResponseBodyOriginatorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(GetInstanceByIdResponseBodyOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            temp_model = GetInstanceByIdResponseBodyOriginatorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetInstanceByIdResponseBody(TeaModel):
    def __init__(self, action_executor=None, approved_result=None, create_time_gmt=None, data=None, form_uuid=None,
                 instance_status=None, modified_time_gmt=None, originator=None, process_code=None, process_instance_id=None,
                 request_id=None, title=None, vendor_request_id=None, vendor_type=None, version=None):
        self.action_executor = action_executor  # type: list[GetInstanceByIdResponseBodyActionExecutor]
        self.approved_result = approved_result  # type: str
        self.create_time_gmt = create_time_gmt  # type: str
        self.data = data  # type: dict[str, any]
        self.form_uuid = form_uuid  # type: str
        self.instance_status = instance_status  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.originator = originator  # type: GetInstanceByIdResponseBodyOriginator
        self.process_code = process_code  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.request_id = request_id  # type: str
        self.title = title  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.action_executor:
            for k in self.action_executor:
                if k:
                    k.validate()
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(GetInstanceByIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['actionExecutor'] = []
        if self.action_executor is not None:
            for k in self.action_executor:
                result['actionExecutor'].append(k.to_map() if k else None)
        if self.approved_result is not None:
            result['approvedResult'] = self.approved_result
        if self.create_time_gmt is not None:
            result['createTimeGMT'] = self.create_time_gmt
        if self.data is not None:
            result['data'] = self.data
        if self.form_uuid is not None:
            result['formUuid'] = self.form_uuid
        if self.instance_status is not None:
            result['instanceStatus'] = self.instance_status
        if self.modified_time_gmt is not None:
            result['modifiedTimeGMT'] = self.modified_time_gmt
        if self.originator is not None:
            result['originator'] = self.originator.to_map()
        if self.process_code is not None:
            result['processCode'] = self.process_code
        if self.process_instance_id is not None:
            result['processInstanceId'] = self.process_instance_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.title is not None:
            result['title'] = self.title
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.action_executor = []
        if m.get('actionExecutor') is not None:
            for k in m.get('actionExecutor'):
                temp_model = GetInstanceByIdResponseBodyActionExecutor()
                self.action_executor.append(temp_model.from_map(k))
        if m.get('approvedResult') is not None:
            self.approved_result = m.get('approvedResult')
        if m.get('createTimeGMT') is not None:
            self.create_time_gmt = m.get('createTimeGMT')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('formUuid') is not None:
            self.form_uuid = m.get('formUuid')
        if m.get('instanceStatus') is not None:
            self.instance_status = m.get('instanceStatus')
        if m.get('modifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('modifiedTimeGMT')
        if m.get('originator') is not None:
            temp_model = GetInstanceByIdResponseBodyOriginator()
            self.originator = temp_model.from_map(m['originator'])
        if m.get('processCode') is not None:
            self.process_code = m.get('processCode')
        if m.get('processInstanceId') is not None:
            self.process_instance_id = m.get('processInstanceId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class GetInstanceByIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetInstanceByIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstanceByIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInstanceByIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceIdListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceIdListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetInstanceIdListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetInstanceIdListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetInstanceIdListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetInstanceIdListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetInstanceIdListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceIdListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetInstanceIdListRequest(TeaModel):
    def __init__(self, app_type=None, approved_result=None, create_from_time_gmt=None, create_to_time_gmt=None,
                 form_uuid=None, instance_status=None, language=None, modified_from_time_gmt=None, modified_to_time_gmt=None,
                 originator_id=None, page_number=None, page_size=None, search_field_json=None, system_token=None, task_id=None):
        self.app_type = app_type  # type: str
        self.approved_result = approved_result  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: str
        self.create_to_time_gmt = create_to_time_gmt  # type: str
        self.form_uuid = form_uuid  # type: str
        self.instance_status = instance_status  # type: str
        self.language = language  # type: str
        self.modified_from_time_gmt = modified_from_time_gmt  # type: str
        self.modified_to_time_gmt = modified_to_time_gmt  # type: str
        self.originator_id = originator_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.search_field_json = search_field_json  # type: str
        self.system_token = system_token  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceIdListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.approved_result is not None:
            result['ApprovedResult'] = self.approved_result
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.instance_status is not None:
            result['InstanceStatus'] = self.instance_status
        if self.language is not None:
            result['Language'] = self.language
        if self.modified_from_time_gmt is not None:
            result['ModifiedFromTimeGMT'] = self.modified_from_time_gmt
        if self.modified_to_time_gmt is not None:
            result['ModifiedToTimeGMT'] = self.modified_to_time_gmt
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_field_json is not None:
            result['SearchFieldJson'] = self.search_field_json
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('ApprovedResult') is not None:
            self.approved_result = m.get('ApprovedResult')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('InstanceStatus') is not None:
            self.instance_status = m.get('InstanceStatus')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ModifiedFromTimeGMT') is not None:
            self.modified_from_time_gmt = m.get('ModifiedFromTimeGMT')
        if m.get('ModifiedToTimeGMT') is not None:
            self.modified_to_time_gmt = m.get('ModifiedToTimeGMT')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchFieldJson') is not None:
            self.search_field_json = m.get('SearchFieldJson')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetInstanceIdListResponseBody(TeaModel):
    def __init__(self, data=None, page_number=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.data = data  # type: list[str]
        self.page_number = page_number  # type: long
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: long
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceIdListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetInstanceIdListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetInstanceIdListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstanceIdListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInstanceIdListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstancesHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetInstancesHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetInstancesHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetInstancesHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetInstancesHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetInstancesShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetInstancesRequest(TeaModel):
    def __init__(self, app_type=None, approved_result=None, create_from_time_gmt=None, create_to_time_gmt=None,
                 form_uuid=None, instance_status=None, language=None, modified_from_time_gmt=None, modified_to_time_gmt=None,
                 order_config_json=None, originator_id=None, page_number=None, page_size=None, search_field_json=None,
                 system_token=None, task_id=None):
        self.app_type = app_type  # type: str
        self.approved_result = approved_result  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: str
        self.create_to_time_gmt = create_to_time_gmt  # type: str
        self.form_uuid = form_uuid  # type: str
        self.instance_status = instance_status  # type: str
        self.language = language  # type: str
        self.modified_from_time_gmt = modified_from_time_gmt  # type: str
        self.modified_to_time_gmt = modified_to_time_gmt  # type: str
        self.order_config_json = order_config_json  # type: str
        self.originator_id = originator_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.search_field_json = search_field_json  # type: str
        self.system_token = system_token  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.approved_result is not None:
            result['ApprovedResult'] = self.approved_result
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.instance_status is not None:
            result['InstanceStatus'] = self.instance_status
        if self.language is not None:
            result['Language'] = self.language
        if self.modified_from_time_gmt is not None:
            result['ModifiedFromTimeGMT'] = self.modified_from_time_gmt
        if self.modified_to_time_gmt is not None:
            result['ModifiedToTimeGMT'] = self.modified_to_time_gmt
        if self.order_config_json is not None:
            result['OrderConfigJson'] = self.order_config_json
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_field_json is not None:
            result['SearchFieldJson'] = self.search_field_json
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('ApprovedResult') is not None:
            self.approved_result = m.get('ApprovedResult')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('InstanceStatus') is not None:
            self.instance_status = m.get('InstanceStatus')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ModifiedFromTimeGMT') is not None:
            self.modified_from_time_gmt = m.get('ModifiedFromTimeGMT')
        if m.get('ModifiedToTimeGMT') is not None:
            self.modified_to_time_gmt = m.get('ModifiedToTimeGMT')
        if m.get('OrderConfigJson') is not None:
            self.order_config_json = m.get('OrderConfigJson')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchFieldJson') is not None:
            self.search_field_json = m.get('SearchFieldJson')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetInstancesResponseBodyDataActionExecutorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesResponseBodyDataActionExecutorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetInstancesResponseBodyDataActionExecutor(TeaModel):
    def __init__(self, dept_name=None, email=None, name=None, user_id=None):
        self.dept_name = dept_name  # type: str
        self.email = email  # type: str
        self.name = name  # type: GetInstancesResponseBodyDataActionExecutorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(GetInstancesResponseBodyDataActionExecutor, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            temp_model = GetInstancesResponseBodyDataActionExecutorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetInstancesResponseBodyDataOriginatorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesResponseBodyDataOriginatorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetInstancesResponseBodyDataOriginator(TeaModel):
    def __init__(self, dept_name=None, email=None, name=None, user_id=None):
        self.dept_name = dept_name  # type: str
        self.email = email  # type: str
        self.name = name  # type: GetInstancesResponseBodyDataOriginatorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(GetInstancesResponseBodyDataOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            temp_model = GetInstancesResponseBodyDataOriginatorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetInstancesResponseBodyData(TeaModel):
    def __init__(self, action_executor=None, approved_result=None, create_time_gmt=None, data=None, form_uuid=None,
                 instance_status=None, modified_time_gmt=None, originator=None, process_code=None, process_instance_id=None,
                 title=None, version=None):
        self.action_executor = action_executor  # type: list[GetInstancesResponseBodyDataActionExecutor]
        self.approved_result = approved_result  # type: str
        self.create_time_gmt = create_time_gmt  # type: str
        self.data = data  # type: dict[str, any]
        self.form_uuid = form_uuid  # type: str
        self.instance_status = instance_status  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.originator = originator  # type: GetInstancesResponseBodyDataOriginator
        self.process_code = process_code  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.title = title  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.action_executor:
            for k in self.action_executor:
                if k:
                    k.validate()
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(GetInstancesResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ActionExecutor'] = []
        if self.action_executor is not None:
            for k in self.action_executor:
                result['ActionExecutor'].append(k.to_map() if k else None)
        if self.approved_result is not None:
            result['ApprovedResult'] = self.approved_result
        if self.create_time_gmt is not None:
            result['CreateTimeGMT'] = self.create_time_gmt
        if self.data is not None:
            result['Data'] = self.data
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.instance_status is not None:
            result['InstanceStatus'] = self.instance_status
        if self.modified_time_gmt is not None:
            result['ModifiedTimeGMT'] = self.modified_time_gmt
        if self.originator is not None:
            result['Originator'] = self.originator.to_map()
        if self.process_code is not None:
            result['ProcessCode'] = self.process_code
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.title is not None:
            result['Title'] = self.title
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.action_executor = []
        if m.get('ActionExecutor') is not None:
            for k in m.get('ActionExecutor'):
                temp_model = GetInstancesResponseBodyDataActionExecutor()
                self.action_executor.append(temp_model.from_map(k))
        if m.get('ApprovedResult') is not None:
            self.approved_result = m.get('ApprovedResult')
        if m.get('CreateTimeGMT') is not None:
            self.create_time_gmt = m.get('CreateTimeGMT')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('InstanceStatus') is not None:
            self.instance_status = m.get('InstanceStatus')
        if m.get('ModifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('ModifiedTimeGMT')
        if m.get('Originator') is not None:
            temp_model = GetInstancesResponseBodyDataOriginator()
            self.originator = temp_model.from_map(m['Originator'])
        if m.get('ProcessCode') is not None:
            self.process_code = m.get('ProcessCode')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetInstancesResponseBody(TeaModel):
    def __init__(self, data=None, page_number=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.data = data  # type: list[GetInstancesResponseBodyData]
        self.page_number = page_number  # type: long
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: long
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetInstancesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = GetInstancesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetInstancesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetInstancesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstancesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstancesByIdListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesByIdListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetInstancesByIdListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetInstancesByIdListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetInstancesByIdListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetInstancesByIdListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetInstancesByIdListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesByIdListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetInstancesByIdListRequest(TeaModel):
    def __init__(self, app_type=None, language=None, process_instance_ids=None, system_token=None):
        self.app_type = app_type  # type: str
        self.language = language  # type: str
        self.process_instance_ids = process_instance_ids  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesByIdListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.language is not None:
            result['Language'] = self.language
        if self.process_instance_ids is not None:
            result['ProcessInstanceIds'] = self.process_instance_ids
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ProcessInstanceIds') is not None:
            self.process_instance_ids = m.get('ProcessInstanceIds')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetInstancesByIdListResponseBodyResultActionExecutorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesByIdListResponseBodyResultActionExecutorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetInstancesByIdListResponseBodyResultActionExecutor(TeaModel):
    def __init__(self, department_name=None, email=None, name=None, user_id=None):
        self.department_name = department_name  # type: str
        self.email = email  # type: str
        self.name = name  # type: GetInstancesByIdListResponseBodyResultActionExecutorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(GetInstancesByIdListResponseBodyResultActionExecutor, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department_name is not None:
            result['DepartmentName'] = self.department_name
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DepartmentName') is not None:
            self.department_name = m.get('DepartmentName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            temp_model = GetInstancesByIdListResponseBodyResultActionExecutorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetInstancesByIdListResponseBodyResultOriginatorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesByIdListResponseBodyResultOriginatorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetInstancesByIdListResponseBodyResultOriginator(TeaModel):
    def __init__(self, department_name=None, email=None, name=None, user_id=None):
        self.department_name = department_name  # type: str
        self.email = email  # type: str
        self.name = name  # type: GetInstancesByIdListResponseBodyResultOriginatorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(GetInstancesByIdListResponseBodyResultOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department_name is not None:
            result['DepartmentName'] = self.department_name
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DepartmentName') is not None:
            self.department_name = m.get('DepartmentName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            temp_model = GetInstancesByIdListResponseBodyResultOriginatorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetInstancesByIdListResponseBodyResult(TeaModel):
    def __init__(self, action_executor=None, approved_result=None, data=None, form_uuid=None, instance_status=None,
                 originator=None, process_code=None, process_instance_id=None, title=None):
        self.action_executor = action_executor  # type: list[GetInstancesByIdListResponseBodyResultActionExecutor]
        self.approved_result = approved_result  # type: str
        self.data = data  # type: dict[str, any]
        self.form_uuid = form_uuid  # type: str
        self.instance_status = instance_status  # type: str
        self.originator = originator  # type: GetInstancesByIdListResponseBodyResultOriginator
        self.process_code = process_code  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.action_executor:
            for k in self.action_executor:
                if k:
                    k.validate()
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(GetInstancesByIdListResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ActionExecutor'] = []
        if self.action_executor is not None:
            for k in self.action_executor:
                result['ActionExecutor'].append(k.to_map() if k else None)
        if self.approved_result is not None:
            result['ApprovedResult'] = self.approved_result
        if self.data is not None:
            result['Data'] = self.data
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.instance_status is not None:
            result['InstanceStatus'] = self.instance_status
        if self.originator is not None:
            result['Originator'] = self.originator.to_map()
        if self.process_code is not None:
            result['ProcessCode'] = self.process_code
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.action_executor = []
        if m.get('ActionExecutor') is not None:
            for k in m.get('ActionExecutor'):
                temp_model = GetInstancesByIdListResponseBodyResultActionExecutor()
                self.action_executor.append(temp_model.from_map(k))
        if m.get('ApprovedResult') is not None:
            self.approved_result = m.get('ApprovedResult')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('InstanceStatus') is not None:
            self.instance_status = m.get('InstanceStatus')
        if m.get('Originator') is not None:
            temp_model = GetInstancesByIdListResponseBodyResultOriginator()
            self.originator = temp_model.from_map(m['Originator'])
        if m.get('ProcessCode') is not None:
            self.process_code = m.get('ProcessCode')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class GetInstancesByIdListResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[GetInstancesByIdListResponseBodyResult]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetInstancesByIdListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = GetInstancesByIdListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetInstancesByIdListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetInstancesByIdListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstancesByIdListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInstancesByIdListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMeCorpSubmissionHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeCorpSubmissionHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetMeCorpSubmissionHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetMeCorpSubmissionHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetMeCorpSubmissionHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetMeCorpSubmissionHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetMeCorpSubmissionShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeCorpSubmissionShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetMeCorpSubmissionRequest(TeaModel):
    def __init__(self, app_types=None, corp_id=None, create_from_time_gmt=None, create_to_time_gmt=None,
                 keyword=None, language=None, page_number=None, page_size=None, process_codes=None, token=None):
        self.app_types = app_types  # type: str
        self.corp_id = corp_id  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: long
        self.create_to_time_gmt = create_to_time_gmt  # type: long
        self.keyword = keyword  # type: str
        self.language = language  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.process_codes = process_codes  # type: str
        self.token = token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeCorpSubmissionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_types is not None:
            result['AppTypes'] = self.app_types
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.language is not None:
            result['Language'] = self.language
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.process_codes is not None:
            result['ProcessCodes'] = self.process_codes
        if self.token is not None:
            result['Token'] = self.token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppTypes') is not None:
            self.app_types = m.get('AppTypes')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProcessCodes') is not None:
            self.process_codes = m.get('ProcessCodes')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        return self


class GetMeCorpSubmissionResponseBodyDataActioner(TeaModel):
    def __init__(self, bu_name=None, email=None, employee_type=None, employee_type_information=None,
                 human_resource_group_work_number=None, is_system_admin=None, level=None, name=None, nick_name=None, order_number=None,
                 personal_photo=None, personal_photo_url=None, pinyin_name_all=None, pinyin_nick_name=None, state=None,
                 super_user_id=None, tb_wang=None, user_id=None):
        self.bu_name = bu_name  # type: str
        self.email = email  # type: str
        self.employee_type = employee_type  # type: str
        self.employee_type_information = employee_type_information  # type: str
        self.human_resource_group_work_number = human_resource_group_work_number  # type: str
        self.is_system_admin = is_system_admin  # type: bool
        self.level = level  # type: str
        self.name = name  # type: str
        self.nick_name = nick_name  # type: str
        self.order_number = order_number  # type: str
        self.personal_photo = personal_photo  # type: str
        self.personal_photo_url = personal_photo_url  # type: str
        self.pinyin_name_all = pinyin_name_all  # type: str
        self.pinyin_nick_name = pinyin_nick_name  # type: str
        self.state = state  # type: str
        self.super_user_id = super_user_id  # type: str
        self.tb_wang = tb_wang  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeCorpSubmissionResponseBodyDataActioner, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bu_name is not None:
            result['BuName'] = self.bu_name
        if self.email is not None:
            result['Email'] = self.email
        if self.employee_type is not None:
            result['EmployeeType'] = self.employee_type
        if self.employee_type_information is not None:
            result['EmployeeTypeInformation'] = self.employee_type_information
        if self.human_resource_group_work_number is not None:
            result['HumanResourceGroupWorkNumber'] = self.human_resource_group_work_number
        if self.is_system_admin is not None:
            result['IsSystemAdmin'] = self.is_system_admin
        if self.level is not None:
            result['Level'] = self.level
        if self.name is not None:
            result['Name'] = self.name
        if self.nick_name is not None:
            result['NickName'] = self.nick_name
        if self.order_number is not None:
            result['OrderNumber'] = self.order_number
        if self.personal_photo is not None:
            result['PersonalPhoto'] = self.personal_photo
        if self.personal_photo_url is not None:
            result['PersonalPhotoUrl'] = self.personal_photo_url
        if self.pinyin_name_all is not None:
            result['PinyinNameAll'] = self.pinyin_name_all
        if self.pinyin_nick_name is not None:
            result['PinyinNickName'] = self.pinyin_nick_name
        if self.state is not None:
            result['State'] = self.state
        if self.super_user_id is not None:
            result['SuperUserId'] = self.super_user_id
        if self.tb_wang is not None:
            result['TbWang'] = self.tb_wang
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BuName') is not None:
            self.bu_name = m.get('BuName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('EmployeeType') is not None:
            self.employee_type = m.get('EmployeeType')
        if m.get('EmployeeTypeInformation') is not None:
            self.employee_type_information = m.get('EmployeeTypeInformation')
        if m.get('HumanResourceGroupWorkNumber') is not None:
            self.human_resource_group_work_number = m.get('HumanResourceGroupWorkNumber')
        if m.get('IsSystemAdmin') is not None:
            self.is_system_admin = m.get('IsSystemAdmin')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NickName') is not None:
            self.nick_name = m.get('NickName')
        if m.get('OrderNumber') is not None:
            self.order_number = m.get('OrderNumber')
        if m.get('PersonalPhoto') is not None:
            self.personal_photo = m.get('PersonalPhoto')
        if m.get('PersonalPhotoUrl') is not None:
            self.personal_photo_url = m.get('PersonalPhotoUrl')
        if m.get('PinyinNameAll') is not None:
            self.pinyin_name_all = m.get('PinyinNameAll')
        if m.get('PinyinNickName') is not None:
            self.pinyin_nick_name = m.get('PinyinNickName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('SuperUserId') is not None:
            self.super_user_id = m.get('SuperUserId')
        if m.get('TbWang') is not None:
            self.tb_wang = m.get('TbWang')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances(TeaModel):
    def __init__(self, activity_id=None, activity_instance_status=None, activity_name=None, activity_name_en=None,
                 id=None):
        self.activity_id = activity_id  # type: str
        self.activity_instance_status = activity_instance_status  # type: str
        self.activity_name = activity_name  # type: str
        self.activity_name_en = activity_name_en  # type: str
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_id is not None:
            result['ActivityId'] = self.activity_id
        if self.activity_instance_status is not None:
            result['ActivityInstanceStatus'] = self.activity_instance_status
        if self.activity_name is not None:
            result['ActivityName'] = self.activity_name
        if self.activity_name_en is not None:
            result['ActivityNameEn'] = self.activity_name_en
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityId') is not None:
            self.activity_id = m.get('ActivityId')
        if m.get('ActivityInstanceStatus') is not None:
            self.activity_instance_status = m.get('ActivityInstanceStatus')
        if m.get('ActivityName') is not None:
            self.activity_name = m.get('ActivityName')
        if m.get('ActivityNameEn') is not None:
            self.activity_name_en = m.get('ActivityNameEn')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetMeCorpSubmissionResponseBodyData(TeaModel):
    def __init__(self, actioner=None, actioner_id=None, actioner_name=None, app_type=None, create_time_gmt=None,
                 current_activity_instances=None, data_map=None, data_type=None, finish_time_gmt=None, form_instance_id=None, form_uuid=None,
                 instance_value=None, modified_time_gmt=None, originator_avatar=None, originator_display_name=None,
                 originator_id=None, process_approved_result=None, process_approved_result_text=None, process_code=None,
                 process_id=None, process_instance_id=None, process_instance_status=None, process_instance_status_text=None,
                 process_name=None, title=None, version=None):
        self.actioner = actioner  # type: list[GetMeCorpSubmissionResponseBodyDataActioner]
        self.actioner_id = actioner_id  # type: list[str]
        self.actioner_name = actioner_name  # type: list[str]
        self.app_type = app_type  # type: str
        self.create_time_gmt = create_time_gmt  # type: str
        self.current_activity_instances = current_activity_instances  # type: list[GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances]
        self.data_map = data_map  # type: dict[str, any]
        self.data_type = data_type  # type: str
        self.finish_time_gmt = finish_time_gmt  # type: str
        self.form_instance_id = form_instance_id  # type: str
        self.form_uuid = form_uuid  # type: str
        self.instance_value = instance_value  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.originator_avatar = originator_avatar  # type: str
        self.originator_display_name = originator_display_name  # type: str
        self.originator_id = originator_id  # type: str
        self.process_approved_result = process_approved_result  # type: str
        self.process_approved_result_text = process_approved_result_text  # type: str
        self.process_code = process_code  # type: str
        self.process_id = process_id  # type: long
        self.process_instance_id = process_instance_id  # type: str
        self.process_instance_status = process_instance_status  # type: str
        self.process_instance_status_text = process_instance_status_text  # type: str
        self.process_name = process_name  # type: str
        self.title = title  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.actioner:
            for k in self.actioner:
                if k:
                    k.validate()
        if self.current_activity_instances:
            for k in self.current_activity_instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMeCorpSubmissionResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Actioner'] = []
        if self.actioner is not None:
            for k in self.actioner:
                result['Actioner'].append(k.to_map() if k else None)
        if self.actioner_id is not None:
            result['ActionerId'] = self.actioner_id
        if self.actioner_name is not None:
            result['ActionerName'] = self.actioner_name
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.create_time_gmt is not None:
            result['CreateTimeGMT'] = self.create_time_gmt
        result['CurrentActivityInstances'] = []
        if self.current_activity_instances is not None:
            for k in self.current_activity_instances:
                result['CurrentActivityInstances'].append(k.to_map() if k else None)
        if self.data_map is not None:
            result['DataMap'] = self.data_map
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.finish_time_gmt is not None:
            result['FinishTimeGMT'] = self.finish_time_gmt
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.instance_value is not None:
            result['InstanceValue'] = self.instance_value
        if self.modified_time_gmt is not None:
            result['ModifiedTimeGMT'] = self.modified_time_gmt
        if self.originator_avatar is not None:
            result['OriginatorAvatar'] = self.originator_avatar
        if self.originator_display_name is not None:
            result['OriginatorDisplayName'] = self.originator_display_name
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.process_approved_result is not None:
            result['ProcessApprovedResult'] = self.process_approved_result
        if self.process_approved_result_text is not None:
            result['ProcessApprovedResultText'] = self.process_approved_result_text
        if self.process_code is not None:
            result['ProcessCode'] = self.process_code
        if self.process_id is not None:
            result['ProcessId'] = self.process_id
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.process_instance_status is not None:
            result['ProcessInstanceStatus'] = self.process_instance_status
        if self.process_instance_status_text is not None:
            result['ProcessInstanceStatusText'] = self.process_instance_status_text
        if self.process_name is not None:
            result['ProcessName'] = self.process_name
        if self.title is not None:
            result['Title'] = self.title
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.actioner = []
        if m.get('Actioner') is not None:
            for k in m.get('Actioner'):
                temp_model = GetMeCorpSubmissionResponseBodyDataActioner()
                self.actioner.append(temp_model.from_map(k))
        if m.get('ActionerId') is not None:
            self.actioner_id = m.get('ActionerId')
        if m.get('ActionerName') is not None:
            self.actioner_name = m.get('ActionerName')
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('CreateTimeGMT') is not None:
            self.create_time_gmt = m.get('CreateTimeGMT')
        self.current_activity_instances = []
        if m.get('CurrentActivityInstances') is not None:
            for k in m.get('CurrentActivityInstances'):
                temp_model = GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances()
                self.current_activity_instances.append(temp_model.from_map(k))
        if m.get('DataMap') is not None:
            self.data_map = m.get('DataMap')
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('FinishTimeGMT') is not None:
            self.finish_time_gmt = m.get('FinishTimeGMT')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('InstanceValue') is not None:
            self.instance_value = m.get('InstanceValue')
        if m.get('ModifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('ModifiedTimeGMT')
        if m.get('OriginatorAvatar') is not None:
            self.originator_avatar = m.get('OriginatorAvatar')
        if m.get('OriginatorDisplayName') is not None:
            self.originator_display_name = m.get('OriginatorDisplayName')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('ProcessApprovedResult') is not None:
            self.process_approved_result = m.get('ProcessApprovedResult')
        if m.get('ProcessApprovedResultText') is not None:
            self.process_approved_result_text = m.get('ProcessApprovedResultText')
        if m.get('ProcessCode') is not None:
            self.process_code = m.get('ProcessCode')
        if m.get('ProcessId') is not None:
            self.process_id = m.get('ProcessId')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('ProcessInstanceStatus') is not None:
            self.process_instance_status = m.get('ProcessInstanceStatus')
        if m.get('ProcessInstanceStatusText') is not None:
            self.process_instance_status_text = m.get('ProcessInstanceStatusText')
        if m.get('ProcessName') is not None:
            self.process_name = m.get('ProcessName')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetMeCorpSubmissionResponseBody(TeaModel):
    def __init__(self, data=None, page_number=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.data = data  # type: list[GetMeCorpSubmissionResponseBodyData]
        self.page_number = page_number  # type: long
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: long
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMeCorpSubmissionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = GetMeCorpSubmissionResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetMeCorpSubmissionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMeCorpSubmissionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMeCorpSubmissionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMeCorpSubmissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMeetingRoomsScheduleHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetMeetingRoomsScheduleHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetMeetingRoomsScheduleHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetMeetingRoomsScheduleHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetMeetingRoomsScheduleShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetMeetingRoomsScheduleRequest(TeaModel):
    def __init__(self, end_time=None, room_ids=None, start_time=None):
        self.end_time = end_time  # type: str
        self.room_ids = room_ids  # type: list[str]
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.room_ids is not None:
            result['RoomIds'] = self.room_ids
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('RoomIds') is not None:
            self.room_ids = m.get('RoomIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetMeetingRoomsScheduleShrinkRequest(TeaModel):
    def __init__(self, end_time=None, room_ids_shrink=None, start_time=None):
        self.end_time = end_time  # type: str
        self.room_ids_shrink = room_ids_shrink  # type: str
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.room_ids_shrink is not None:
            result['RoomIds'] = self.room_ids_shrink
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('RoomIds') is not None:
            self.room_ids_shrink = m.get('RoomIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd(TeaModel):
    def __init__(self, date_time=None, time_zone=None):
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer(TeaModel):
    def __init__(self, id=None):
        self.id = id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart(TeaModel):
    def __init__(self, date_time=None, time_zone=None):
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems(TeaModel):
    def __init__(self, end=None, event_id=None, organizer=None, start=None, status=None):
        self.end = end  # type: GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd
        self.event_id = event_id  # type: str
        self.organizer = organizer  # type: GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer
        self.start = start  # type: GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart
        self.status = status  # type: str

    def validate(self):
        if self.end:
            self.end.validate()
        if self.organizer:
            self.organizer.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end is not None:
            result['End'] = self.end.to_map()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.organizer is not None:
            result['Organizer'] = self.organizer.to_map()
        if self.start is not None:
            result['Start'] = self.start.to_map()
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('End') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd()
            self.end = temp_model.from_map(m['End'])
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('Organizer') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer()
            self.organizer = temp_model.from_map(m['Organizer'])
        if m.get('Start') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart()
            self.start = temp_model.from_map(m['Start'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetMeetingRoomsScheduleResponseBodyScheduleInformation(TeaModel):
    def __init__(self, error=None, room_id=None, schedule_items=None):
        self.error = error  # type: str
        self.room_id = room_id  # type: str
        self.schedule_items = schedule_items  # type: list[GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems]

    def validate(self):
        if self.schedule_items:
            for k in self.schedule_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleResponseBodyScheduleInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error is not None:
            result['Error'] = self.error
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        result['ScheduleItems'] = []
        if self.schedule_items is not None:
            for k in self.schedule_items:
                result['ScheduleItems'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        self.schedule_items = []
        if m.get('ScheduleItems') is not None:
            for k in m.get('ScheduleItems'):
                temp_model = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems()
                self.schedule_items.append(temp_model.from_map(k))
        return self


class GetMeetingRoomsScheduleResponseBody(TeaModel):
    def __init__(self, request_id=None, schedule_information=None):
        # requestId
        self.request_id = request_id  # type: str
        self.schedule_information = schedule_information  # type: list[GetMeetingRoomsScheduleResponseBodyScheduleInformation]

    def validate(self):
        if self.schedule_information:
            for k in self.schedule_information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['scheduleInformation'] = []
        if self.schedule_information is not None:
            for k in self.schedule_information:
                result['scheduleInformation'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.schedule_information = []
        if m.get('scheduleInformation') is not None:
            for k in m.get('scheduleInformation'):
                temp_model = GetMeetingRoomsScheduleResponseBodyScheduleInformation()
                self.schedule_information.append(temp_model.from_map(k))
        return self


class GetMeetingRoomsScheduleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMeetingRoomsScheduleResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMeetingRoomsScheduleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMeetingRoomsScheduleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMineWorkspaceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMineWorkspaceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetMineWorkspaceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetMineWorkspaceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetMineWorkspaceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetMineWorkspaceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetMineWorkspaceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMineWorkspaceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetMineWorkspaceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMineWorkspaceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetMineWorkspaceRequest(TeaModel):
    def __init__(self, request=None, tenant_context=None):
        self.request = request  # type: dict[str, any]
        self.tenant_context = tenant_context  # type: GetMineWorkspaceRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetMineWorkspaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['Request'] = self.request
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request = m.get('Request')
        if m.get('TenantContext') is not None:
            temp_model = GetMineWorkspaceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class GetMineWorkspaceShrinkRequest(TeaModel):
    def __init__(self, request_shrink=None, tenant_context_shrink=None):
        self.request_shrink = request_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMineWorkspaceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_shrink is not None:
            result['Request'] = self.request_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request_shrink = m.get('Request')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class GetMineWorkspaceResponseBodyWorkspaceIcon(TeaModel):
    def __init__(self, type=None, value=None):
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMineWorkspaceResponseBodyWorkspaceIcon, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetMineWorkspaceResponseBodyWorkspace(TeaModel):
    def __init__(self, corp_id=None, cover=None, create_time=None, creator_id=None, description=None, icon=None,
                 modified_time=None, modifier_id=None, name=None, permission_role=None, root_node_id=None, team_id=None, type=None,
                 url=None, workspace_id=None):
        self.corp_id = corp_id  # type: str
        self.cover = cover  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.icon = icon  # type: GetMineWorkspaceResponseBodyWorkspaceIcon
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.permission_role = permission_role  # type: str
        self.root_node_id = root_node_id  # type: str
        self.team_id = team_id  # type: str
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.icon:
            self.icon.validate()

    def to_map(self):
        _map = super(GetMineWorkspaceResponseBodyWorkspace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.cover is not None:
            result['Cover'] = self.cover
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.description is not None:
            result['Description'] = self.description
        if self.icon is not None:
            result['Icon'] = self.icon.to_map()
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.root_node_id is not None:
            result['RootNodeId'] = self.root_node_id
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Cover') is not None:
            self.cover = m.get('Cover')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Icon') is not None:
            temp_model = GetMineWorkspaceResponseBodyWorkspaceIcon()
            self.icon = temp_model.from_map(m['Icon'])
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('RootNodeId') is not None:
            self.root_node_id = m.get('RootNodeId')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMineWorkspaceResponseBody(TeaModel):
    def __init__(self, request_id=None, workspace=None):
        # requestId
        self.request_id = request_id  # type: str
        self.workspace = workspace  # type: GetMineWorkspaceResponseBodyWorkspace

    def validate(self):
        if self.workspace:
            self.workspace.validate()

    def to_map(self):
        _map = super(GetMineWorkspaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.workspace is not None:
            result['workspace'] = self.workspace.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('workspace') is not None:
            temp_model = GetMineWorkspaceResponseBodyWorkspace()
            self.workspace = temp_model.from_map(m['workspace'])
        return self


class GetMineWorkspaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMineWorkspaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMineWorkspaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMineWorkspaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNodeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetNodeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetNodeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetNodeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetNodeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetNodeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetNodeRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetNodeRequest(TeaModel):
    def __init__(self, node_id=None, tenant_context=None, with_permission_role=None, with_statistical_info=None):
        self.node_id = node_id  # type: str
        self.tenant_context = tenant_context  # type: GetNodeRequestTenantContext
        self.with_permission_role = with_permission_role  # type: bool
        self.with_statistical_info = with_statistical_info  # type: bool

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetNodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        if self.with_statistical_info is not None:
            result['WithStatisticalInfo'] = self.with_statistical_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            temp_model = GetNodeRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        if m.get('WithStatisticalInfo') is not None:
            self.with_statistical_info = m.get('WithStatisticalInfo')
        return self


class GetNodeShrinkRequest(TeaModel):
    def __init__(self, node_id=None, tenant_context_shrink=None, with_permission_role=None,
                 with_statistical_info=None):
        self.node_id = node_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.with_permission_role = with_permission_role  # type: bool
        self.with_statistical_info = with_statistical_info  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        if self.with_statistical_info is not None:
            result['WithStatisticalInfo'] = self.with_statistical_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        if m.get('WithStatisticalInfo') is not None:
            self.with_statistical_info = m.get('WithStatisticalInfo')
        return self


class GetNodeResponseBodyNodeStatisticalInfo(TeaModel):
    def __init__(self, word_count=None):
        self.word_count = word_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeResponseBodyNodeStatisticalInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.word_count is not None:
            result['WordCount'] = self.word_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WordCount') is not None:
            self.word_count = m.get('WordCount')
        return self


class GetNodeResponseBodyNode(TeaModel):
    def __init__(self, category=None, create_time=None, creator_id=None, extension=None, has_children=None,
                 modified_time=None, modifier_id=None, name=None, node_id=None, permission_role=None, size=None,
                 statistical_info=None, type=None, url=None, workspace_id=None):
        self.category = category  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.extension = extension  # type: str
        self.has_children = has_children  # type: bool
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.node_id = node_id  # type: str
        self.permission_role = permission_role  # type: str
        self.size = size  # type: long
        self.statistical_info = statistical_info  # type: GetNodeResponseBodyNodeStatisticalInfo
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.statistical_info:
            self.statistical_info.validate()

    def to_map(self):
        _map = super(GetNodeResponseBodyNode, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.has_children is not None:
            result['HasChildren'] = self.has_children
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.size is not None:
            result['Size'] = self.size
        if self.statistical_info is not None:
            result['StatisticalInfo'] = self.statistical_info.to_map()
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('HasChildren') is not None:
            self.has_children = m.get('HasChildren')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StatisticalInfo') is not None:
            temp_model = GetNodeResponseBodyNodeStatisticalInfo()
            self.statistical_info = temp_model.from_map(m['StatisticalInfo'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetNodeResponseBody(TeaModel):
    def __init__(self, node=None, request_id=None):
        self.node = node  # type: GetNodeResponseBodyNode
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.node:
            self.node.validate()

    def to_map(self):
        _map = super(GetNodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node is not None:
            result['node'] = self.node.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('node') is not None:
            temp_model = GetNodeResponseBodyNode()
            self.node = temp_model.from_map(m['node'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class GetNodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetNodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetNodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetNodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNodeByUrlHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeByUrlHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetNodeByUrlHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetNodeByUrlHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetNodeByUrlHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetNodeByUrlHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetNodeByUrlShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeByUrlShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetNodeByUrlRequestOption(TeaModel):
    def __init__(self, with_permission_role=None, with_statistical_info=None):
        self.with_permission_role = with_permission_role  # type: bool
        self.with_statistical_info = with_statistical_info  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeByUrlRequestOption, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        if self.with_statistical_info is not None:
            result['WithStatisticalInfo'] = self.with_statistical_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        if m.get('WithStatisticalInfo') is not None:
            self.with_statistical_info = m.get('WithStatisticalInfo')
        return self


class GetNodeByUrlRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeByUrlRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetNodeByUrlRequest(TeaModel):
    def __init__(self, option=None, tenant_context=None, url=None):
        self.option = option  # type: GetNodeByUrlRequestOption
        self.tenant_context = tenant_context  # type: GetNodeByUrlRequestTenantContext
        self.url = url  # type: str

    def validate(self):
        if self.option:
            self.option.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetNodeByUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.option is not None:
            result['Option'] = self.option.to_map()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Option') is not None:
            temp_model = GetNodeByUrlRequestOption()
            self.option = temp_model.from_map(m['Option'])
        if m.get('TenantContext') is not None:
            temp_model = GetNodeByUrlRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetNodeByUrlShrinkRequest(TeaModel):
    def __init__(self, option_shrink=None, tenant_context_shrink=None, url=None):
        self.option_shrink = option_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeByUrlShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.option_shrink is not None:
            result['Option'] = self.option_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Option') is not None:
            self.option_shrink = m.get('Option')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetNodeByUrlResponseBodyNodeStatisticalInfo(TeaModel):
    def __init__(self, word_count=None):
        self.word_count = word_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeByUrlResponseBodyNodeStatisticalInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.word_count is not None:
            result['WordCount'] = self.word_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WordCount') is not None:
            self.word_count = m.get('WordCount')
        return self


class GetNodeByUrlResponseBodyNode(TeaModel):
    def __init__(self, category=None, create_time=None, creator_id=None, extension=None, has_children=None,
                 modified_time=None, modifier_id=None, name=None, node_id=None, permission_role=None, size=None,
                 statistical_info=None, type=None, url=None, workspace_id=None):
        self.category = category  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.extension = extension  # type: str
        self.has_children = has_children  # type: bool
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.node_id = node_id  # type: str
        self.permission_role = permission_role  # type: str
        self.size = size  # type: long
        self.statistical_info = statistical_info  # type: GetNodeByUrlResponseBodyNodeStatisticalInfo
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.statistical_info:
            self.statistical_info.validate()

    def to_map(self):
        _map = super(GetNodeByUrlResponseBodyNode, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.has_children is not None:
            result['HasChildren'] = self.has_children
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.size is not None:
            result['Size'] = self.size
        if self.statistical_info is not None:
            result['StatisticalInfo'] = self.statistical_info.to_map()
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('HasChildren') is not None:
            self.has_children = m.get('HasChildren')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StatisticalInfo') is not None:
            temp_model = GetNodeByUrlResponseBodyNodeStatisticalInfo()
            self.statistical_info = temp_model.from_map(m['StatisticalInfo'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetNodeByUrlResponseBody(TeaModel):
    def __init__(self, node=None, request_id=None):
        self.node = node  # type: GetNodeByUrlResponseBodyNode
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.node:
            self.node.validate()

    def to_map(self):
        _map = super(GetNodeByUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node is not None:
            result['node'] = self.node.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('node') is not None:
            temp_model = GetNodeByUrlResponseBodyNode()
            self.node = temp_model.from_map(m['node'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class GetNodeByUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetNodeByUrlResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetNodeByUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetNodeByUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNodesHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodesHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetNodesHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetNodesHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetNodesHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetNodesHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetNodesShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodesShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetNodesRequestOption(TeaModel):
    def __init__(self, with_permission_role=None, with_statistical_info=None):
        self.with_permission_role = with_permission_role  # type: bool
        self.with_statistical_info = with_statistical_info  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodesRequestOption, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        if self.with_statistical_info is not None:
            result['WithStatisticalInfo'] = self.with_statistical_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        if m.get('WithStatisticalInfo') is not None:
            self.with_statistical_info = m.get('WithStatisticalInfo')
        return self


class GetNodesRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodesRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetNodesRequest(TeaModel):
    def __init__(self, node_ids=None, option=None, tenant_context=None):
        self.node_ids = node_ids  # type: list[str]
        self.option = option  # type: GetNodesRequestOption
        self.tenant_context = tenant_context  # type: GetNodesRequestTenantContext

    def validate(self):
        if self.option:
            self.option.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetNodesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_ids is not None:
            result['NodeIds'] = self.node_ids
        if self.option is not None:
            result['Option'] = self.option.to_map()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeIds') is not None:
            self.node_ids = m.get('NodeIds')
        if m.get('Option') is not None:
            temp_model = GetNodesRequestOption()
            self.option = temp_model.from_map(m['Option'])
        if m.get('TenantContext') is not None:
            temp_model = GetNodesRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class GetNodesShrinkRequest(TeaModel):
    def __init__(self, node_ids_shrink=None, option_shrink=None, tenant_context_shrink=None):
        self.node_ids_shrink = node_ids_shrink  # type: str
        self.option_shrink = option_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_ids_shrink is not None:
            result['NodeIds'] = self.node_ids_shrink
        if self.option_shrink is not None:
            result['Option'] = self.option_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeIds') is not None:
            self.node_ids_shrink = m.get('NodeIds')
        if m.get('Option') is not None:
            self.option_shrink = m.get('Option')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class GetNodesResponseBodyNodesStatisticalInfo(TeaModel):
    def __init__(self, word_count=None):
        self.word_count = word_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodesResponseBodyNodesStatisticalInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.word_count is not None:
            result['WordCount'] = self.word_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WordCount') is not None:
            self.word_count = m.get('WordCount')
        return self


class GetNodesResponseBodyNodes(TeaModel):
    def __init__(self, category=None, create_time=None, creator_id=None, extension=None, has_children=None,
                 modified_time=None, modifier_id=None, name=None, node_id=None, permission_role=None, size=None,
                 statistical_info=None, type=None, url=None, workspace_id=None):
        self.category = category  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.extension = extension  # type: str
        self.has_children = has_children  # type: bool
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.node_id = node_id  # type: str
        self.permission_role = permission_role  # type: str
        self.size = size  # type: long
        self.statistical_info = statistical_info  # type: GetNodesResponseBodyNodesStatisticalInfo
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.statistical_info:
            self.statistical_info.validate()

    def to_map(self):
        _map = super(GetNodesResponseBodyNodes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.has_children is not None:
            result['HasChildren'] = self.has_children
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.size is not None:
            result['Size'] = self.size
        if self.statistical_info is not None:
            result['StatisticalInfo'] = self.statistical_info.to_map()
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('HasChildren') is not None:
            self.has_children = m.get('HasChildren')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StatisticalInfo') is not None:
            temp_model = GetNodesResponseBodyNodesStatisticalInfo()
            self.statistical_info = temp_model.from_map(m['StatisticalInfo'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetNodesResponseBody(TeaModel):
    def __init__(self, nodes=None, request_id=None):
        self.nodes = nodes  # type: list[GetNodesResponseBodyNodes]
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.nodes:
            for k in self.nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetNodesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['nodes'] = []
        if self.nodes is not None:
            for k in self.nodes:
                result['nodes'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.nodes = []
        if m.get('nodes') is not None:
            for k in m.get('nodes'):
                temp_model = GetNodesResponseBodyNodes()
                self.nodes.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class GetNodesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetNodesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetNodesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetNodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOpenUrlHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOpenUrlHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetOpenUrlHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetOpenUrlHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetOpenUrlHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetOpenUrlHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetOpenUrlShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOpenUrlShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetOpenUrlRequest(TeaModel):
    def __init__(self, app_type=None, file_url=None, language=None, system_token=None, timeout=None):
        self.app_type = app_type  # type: str
        self.file_url = file_url  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str
        self.timeout = timeout  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOpenUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        return self


class GetOpenUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOpenUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class GetOpenUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetOpenUrlResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetOpenUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOpenUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOperationRecordsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOperationRecordsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetOperationRecordsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetOperationRecordsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetOperationRecordsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetOperationRecordsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetOperationRecordsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOperationRecordsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetOperationRecordsRequest(TeaModel):
    def __init__(self, app_type=None, language=None, process_instance_id=None, system_token=None):
        self.app_type = app_type  # type: str
        self.language = language  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOperationRecordsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.language is not None:
            result['Language'] = self.language
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class GetOperationRecordsResponseBodyResult(TeaModel):
    def __init__(self, action=None, action_exit=None, active_time_gmt=None, activity_id=None, data_id=None,
                 digital_sign=None, files=None, operate_time_gmt=None, operate_type=None, operator_display_name=None,
                 operator_name=None, operator_nick_name=None, operator_photo_url=None, operator_status=None,
                 operator_user_id=None, process_instance_id=None, remark=None, show_name=None, size=None, task_execute_type=None,
                 task_hold_time_gmt=None, task_id=None, task_type=None, type=None):
        self.action = action  # type: str
        self.action_exit = action_exit  # type: str
        self.active_time_gmt = active_time_gmt  # type: str
        self.activity_id = activity_id  # type: str
        self.data_id = data_id  # type: long
        self.digital_sign = digital_sign  # type: str
        self.files = files  # type: str
        self.operate_time_gmt = operate_time_gmt  # type: str
        self.operate_type = operate_type  # type: str
        self.operator_display_name = operator_display_name  # type: str
        self.operator_name = operator_name  # type: str
        self.operator_nick_name = operator_nick_name  # type: str
        self.operator_photo_url = operator_photo_url  # type: str
        self.operator_status = operator_status  # type: str
        self.operator_user_id = operator_user_id  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.remark = remark  # type: str
        self.show_name = show_name  # type: str
        self.size = size  # type: int
        self.task_execute_type = task_execute_type  # type: str
        self.task_hold_time_gmt = task_hold_time_gmt  # type: long
        self.task_id = task_id  # type: str
        self.task_type = task_type  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOperationRecordsResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.action_exit is not None:
            result['ActionExit'] = self.action_exit
        if self.active_time_gmt is not None:
            result['ActiveTimeGMT'] = self.active_time_gmt
        if self.activity_id is not None:
            result['ActivityId'] = self.activity_id
        if self.data_id is not None:
            result['DataId'] = self.data_id
        if self.digital_sign is not None:
            result['DigitalSign'] = self.digital_sign
        if self.files is not None:
            result['Files'] = self.files
        if self.operate_time_gmt is not None:
            result['OperateTimeGMT'] = self.operate_time_gmt
        if self.operate_type is not None:
            result['OperateType'] = self.operate_type
        if self.operator_display_name is not None:
            result['OperatorDisplayName'] = self.operator_display_name
        if self.operator_name is not None:
            result['OperatorName'] = self.operator_name
        if self.operator_nick_name is not None:
            result['OperatorNickName'] = self.operator_nick_name
        if self.operator_photo_url is not None:
            result['OperatorPhotoUrl'] = self.operator_photo_url
        if self.operator_status is not None:
            result['OperatorStatus'] = self.operator_status
        if self.operator_user_id is not None:
            result['OperatorUserId'] = self.operator_user_id
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.show_name is not None:
            result['ShowName'] = self.show_name
        if self.size is not None:
            result['Size'] = self.size
        if self.task_execute_type is not None:
            result['TaskExecuteType'] = self.task_execute_type
        if self.task_hold_time_gmt is not None:
            result['TaskHoldTimeGMT'] = self.task_hold_time_gmt
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('ActionExit') is not None:
            self.action_exit = m.get('ActionExit')
        if m.get('ActiveTimeGMT') is not None:
            self.active_time_gmt = m.get('ActiveTimeGMT')
        if m.get('ActivityId') is not None:
            self.activity_id = m.get('ActivityId')
        if m.get('DataId') is not None:
            self.data_id = m.get('DataId')
        if m.get('DigitalSign') is not None:
            self.digital_sign = m.get('DigitalSign')
        if m.get('Files') is not None:
            self.files = m.get('Files')
        if m.get('OperateTimeGMT') is not None:
            self.operate_time_gmt = m.get('OperateTimeGMT')
        if m.get('OperateType') is not None:
            self.operate_type = m.get('OperateType')
        if m.get('OperatorDisplayName') is not None:
            self.operator_display_name = m.get('OperatorDisplayName')
        if m.get('OperatorName') is not None:
            self.operator_name = m.get('OperatorName')
        if m.get('OperatorNickName') is not None:
            self.operator_nick_name = m.get('OperatorNickName')
        if m.get('OperatorPhotoUrl') is not None:
            self.operator_photo_url = m.get('OperatorPhotoUrl')
        if m.get('OperatorStatus') is not None:
            self.operator_status = m.get('OperatorStatus')
        if m.get('OperatorUserId') is not None:
            self.operator_user_id = m.get('OperatorUserId')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ShowName') is not None:
            self.show_name = m.get('ShowName')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TaskExecuteType') is not None:
            self.task_execute_type = m.get('TaskExecuteType')
        if m.get('TaskHoldTimeGMT') is not None:
            self.task_hold_time_gmt = m.get('TaskHoldTimeGMT')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetOperationRecordsResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[GetOperationRecordsResponseBodyResult]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetOperationRecordsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = GetOperationRecordsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetOperationRecordsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetOperationRecordsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetOperationRecordsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOperationRecordsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetProcessDefinitionHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProcessDefinitionHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetProcessDefinitionHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetProcessDefinitionHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetProcessDefinitionHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetProcessDefinitionHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetProcessDefinitionShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProcessDefinitionShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetProcessDefinitionRequest(TeaModel):
    def __init__(self, app_type=None, corp_id=None, group_id=None, language=None, name_space=None, order_number=None,
                 process_instance_id=None, system_token=None, system_type=None):
        self.app_type = app_type  # type: str
        self.corp_id = corp_id  # type: str
        self.group_id = group_id  # type: str
        self.language = language  # type: str
        self.name_space = name_space  # type: str
        self.order_number = order_number  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.system_token = system_token  # type: str
        self.system_type = system_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProcessDefinitionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.language is not None:
            result['Language'] = self.language
        if self.name_space is not None:
            result['NameSpace'] = self.name_space
        if self.order_number is not None:
            result['OrderNumber'] = self.order_number
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.system_type is not None:
            result['SystemType'] = self.system_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('NameSpace') is not None:
            self.name_space = m.get('NameSpace')
        if m.get('OrderNumber') is not None:
            self.order_number = m.get('OrderNumber')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('SystemType') is not None:
            self.system_type = m.get('SystemType')
        return self


class GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments(TeaModel):
    def __init__(self, dept_name=None, dept_name_in_english=None, dept_no=None, dept_path=None,
                 human_source_group_order_number=None, human_source_group_work_no=None, id=None, master_work_no=None):
        self.dept_name = dept_name  # type: str
        self.dept_name_in_english = dept_name_in_english  # type: str
        self.dept_no = dept_no  # type: str
        self.dept_path = dept_path  # type: str
        self.human_source_group_order_number = human_source_group_order_number  # type: str
        self.human_source_group_work_no = human_source_group_work_no  # type: str
        self.id = id  # type: long
        self.master_work_no = master_work_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.dept_name_in_english is not None:
            result['DeptNameInEnglish'] = self.dept_name_in_english
        if self.dept_no is not None:
            result['DeptNo'] = self.dept_no
        if self.dept_path is not None:
            result['DeptPath'] = self.dept_path
        if self.human_source_group_order_number is not None:
            result['HumanSourceGroupOrderNumber'] = self.human_source_group_order_number
        if self.human_source_group_work_no is not None:
            result['HumanSourceGroupWorkNo'] = self.human_source_group_work_no
        if self.id is not None:
            result['Id'] = self.id
        if self.master_work_no is not None:
            result['MasterWorkNo'] = self.master_work_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('DeptNameInEnglish') is not None:
            self.dept_name_in_english = m.get('DeptNameInEnglish')
        if m.get('DeptNo') is not None:
            self.dept_no = m.get('DeptNo')
        if m.get('DeptPath') is not None:
            self.dept_path = m.get('DeptPath')
        if m.get('HumanSourceGroupOrderNumber') is not None:
            self.human_source_group_order_number = m.get('HumanSourceGroupOrderNumber')
        if m.get('HumanSourceGroupWorkNo') is not None:
            self.human_source_group_work_no = m.get('HumanSourceGroupWorkNo')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MasterWorkNo') is not None:
            self.master_work_no = m.get('MasterWorkNo')
        return self


class GetProcessDefinitionResponseBodyOriginator(TeaModel):
    def __init__(self, department_description=None, display_en_name=None, display_name=None,
                 master_data_departments=None, order_number=None, personal_photo=None, status=None, tb_wang=None, user_id=None,
                 user_info=None):
        self.department_description = department_description  # type: str
        self.display_en_name = display_en_name  # type: str
        self.display_name = display_name  # type: str
        self.master_data_departments = master_data_departments  # type: list[GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments]
        self.order_number = order_number  # type: str
        self.personal_photo = personal_photo  # type: str
        self.status = status  # type: str
        self.tb_wang = tb_wang  # type: str
        self.user_id = user_id  # type: str
        self.user_info = user_info  # type: str

    def validate(self):
        if self.master_data_departments:
            for k in self.master_data_departments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetProcessDefinitionResponseBodyOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department_description is not None:
            result['DepartmentDescription'] = self.department_description
        if self.display_en_name is not None:
            result['DisplayEnName'] = self.display_en_name
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        result['MasterDataDepartments'] = []
        if self.master_data_departments is not None:
            for k in self.master_data_departments:
                result['MasterDataDepartments'].append(k.to_map() if k else None)
        if self.order_number is not None:
            result['OrderNumber'] = self.order_number
        if self.personal_photo is not None:
            result['PersonalPhoto'] = self.personal_photo
        if self.status is not None:
            result['Status'] = self.status
        if self.tb_wang is not None:
            result['TbWang'] = self.tb_wang
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_info is not None:
            result['UserInfo'] = self.user_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DepartmentDescription') is not None:
            self.department_description = m.get('DepartmentDescription')
        if m.get('DisplayEnName') is not None:
            self.display_en_name = m.get('DisplayEnName')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        self.master_data_departments = []
        if m.get('MasterDataDepartments') is not None:
            for k in m.get('MasterDataDepartments'):
                temp_model = GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments()
                self.master_data_departments.append(temp_model.from_map(k))
        if m.get('OrderNumber') is not None:
            self.order_number = m.get('OrderNumber')
        if m.get('PersonalPhoto') is not None:
            self.personal_photo = m.get('PersonalPhoto')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TbWang') is not None:
            self.tb_wang = m.get('TbWang')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserInfo') is not None:
            self.user_info = m.get('UserInfo')
        return self


class GetProcessDefinitionResponseBodyOwnersMasterDataDepartments(TeaModel):
    def __init__(self, dept_name=None, dept_name_in_english=None, dept_no=None, dept_path=None,
                 human_source_group_order_number=None, human_source_group_work_no=None, id=None, master_work_no=None):
        self.dept_name = dept_name  # type: str
        self.dept_name_in_english = dept_name_in_english  # type: str
        self.dept_no = dept_no  # type: str
        self.dept_path = dept_path  # type: str
        self.human_source_group_order_number = human_source_group_order_number  # type: str
        self.human_source_group_work_no = human_source_group_work_no  # type: str
        self.id = id  # type: long
        self.master_work_no = master_work_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProcessDefinitionResponseBodyOwnersMasterDataDepartments, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.dept_name_in_english is not None:
            result['DeptNameInEnglish'] = self.dept_name_in_english
        if self.dept_no is not None:
            result['DeptNo'] = self.dept_no
        if self.dept_path is not None:
            result['DeptPath'] = self.dept_path
        if self.human_source_group_order_number is not None:
            result['HumanSourceGroupOrderNumber'] = self.human_source_group_order_number
        if self.human_source_group_work_no is not None:
            result['HumanSourceGroupWorkNo'] = self.human_source_group_work_no
        if self.id is not None:
            result['Id'] = self.id
        if self.master_work_no is not None:
            result['MasterWorkNo'] = self.master_work_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('DeptNameInEnglish') is not None:
            self.dept_name_in_english = m.get('DeptNameInEnglish')
        if m.get('DeptNo') is not None:
            self.dept_no = m.get('DeptNo')
        if m.get('DeptPath') is not None:
            self.dept_path = m.get('DeptPath')
        if m.get('HumanSourceGroupOrderNumber') is not None:
            self.human_source_group_order_number = m.get('HumanSourceGroupOrderNumber')
        if m.get('HumanSourceGroupWorkNo') is not None:
            self.human_source_group_work_no = m.get('HumanSourceGroupWorkNo')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MasterWorkNo') is not None:
            self.master_work_no = m.get('MasterWorkNo')
        return self


class GetProcessDefinitionResponseBodyOwners(TeaModel):
    def __init__(self, department_description=None, display_en_name=None, display_name=None,
                 master_data_departments=None, order_number=None, personal_photo=None, status=None, tb_wang=None, user_id=None,
                 user_info=None):
        self.department_description = department_description  # type: str
        self.display_en_name = display_en_name  # type: str
        self.display_name = display_name  # type: str
        self.master_data_departments = master_data_departments  # type: list[GetProcessDefinitionResponseBodyOwnersMasterDataDepartments]
        self.order_number = order_number  # type: str
        self.personal_photo = personal_photo  # type: str
        self.status = status  # type: str
        self.tb_wang = tb_wang  # type: str
        self.user_id = user_id  # type: str
        self.user_info = user_info  # type: str

    def validate(self):
        if self.master_data_departments:
            for k in self.master_data_departments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetProcessDefinitionResponseBodyOwners, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department_description is not None:
            result['DepartmentDescription'] = self.department_description
        if self.display_en_name is not None:
            result['DisplayEnName'] = self.display_en_name
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        result['MasterDataDepartments'] = []
        if self.master_data_departments is not None:
            for k in self.master_data_departments:
                result['MasterDataDepartments'].append(k.to_map() if k else None)
        if self.order_number is not None:
            result['OrderNumber'] = self.order_number
        if self.personal_photo is not None:
            result['PersonalPhoto'] = self.personal_photo
        if self.status is not None:
            result['Status'] = self.status
        if self.tb_wang is not None:
            result['TbWang'] = self.tb_wang
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_info is not None:
            result['UserInfo'] = self.user_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DepartmentDescription') is not None:
            self.department_description = m.get('DepartmentDescription')
        if m.get('DisplayEnName') is not None:
            self.display_en_name = m.get('DisplayEnName')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        self.master_data_departments = []
        if m.get('MasterDataDepartments') is not None:
            for k in m.get('MasterDataDepartments'):
                temp_model = GetProcessDefinitionResponseBodyOwnersMasterDataDepartments()
                self.master_data_departments.append(temp_model.from_map(k))
        if m.get('OrderNumber') is not None:
            self.order_number = m.get('OrderNumber')
        if m.get('PersonalPhoto') is not None:
            self.personal_photo = m.get('PersonalPhoto')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TbWang') is not None:
            self.tb_wang = m.get('TbWang')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserInfo') is not None:
            self.user_info = m.get('UserInfo')
        return self


class GetProcessDefinitionResponseBodyTasksActivity(TeaModel):
    def __init__(self, activity_id=None, activity_instance_status=None, activity_name=None,
                 activity_name_in_english=None, id=None):
        self.activity_id = activity_id  # type: str
        self.activity_instance_status = activity_instance_status  # type: str
        self.activity_name = activity_name  # type: str
        self.activity_name_in_english = activity_name_in_english  # type: str
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProcessDefinitionResponseBodyTasksActivity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_id is not None:
            result['ActivityId'] = self.activity_id
        if self.activity_instance_status is not None:
            result['ActivityInstanceStatus'] = self.activity_instance_status
        if self.activity_name is not None:
            result['ActivityName'] = self.activity_name
        if self.activity_name_in_english is not None:
            result['ActivityNameInEnglish'] = self.activity_name_in_english
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityId') is not None:
            self.activity_id = m.get('ActivityId')
        if m.get('ActivityInstanceStatus') is not None:
            self.activity_instance_status = m.get('ActivityInstanceStatus')
        if m.get('ActivityName') is not None:
            self.activity_name = m.get('ActivityName')
        if m.get('ActivityNameInEnglish') is not None:
            self.activity_name_in_english = m.get('ActivityNameInEnglish')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetProcessDefinitionResponseBodyTasks(TeaModel):
    def __init__(self, actioner_id=None, activity=None, status=None, task_id=None):
        self.actioner_id = actioner_id  # type: str
        self.activity = activity  # type: GetProcessDefinitionResponseBodyTasksActivity
        self.status = status  # type: str
        self.task_id = task_id  # type: long

    def validate(self):
        if self.activity:
            self.activity.validate()

    def to_map(self):
        _map = super(GetProcessDefinitionResponseBodyTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actioner_id is not None:
            result['ActionerId'] = self.actioner_id
        if self.activity is not None:
            result['Activity'] = self.activity.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActionerId') is not None:
            self.actioner_id = m.get('ActionerId')
        if m.get('Activity') is not None:
            temp_model = GetProcessDefinitionResponseBodyTasksActivity()
            self.activity = temp_model.from_map(m['Activity'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetProcessDefinitionResponseBody(TeaModel):
    def __init__(self, form_uuid=None, originator=None, out_result=None, owners=None, process_id=None,
                 process_instance_id=None, request_id=None, status=None, tasks=None, title=None, variables=None, vendor_request_id=None,
                 vendor_type=None):
        self.form_uuid = form_uuid  # type: str
        self.originator = originator  # type: GetProcessDefinitionResponseBodyOriginator
        self.out_result = out_result  # type: str
        self.owners = owners  # type: list[GetProcessDefinitionResponseBodyOwners]
        self.process_id = process_id  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.tasks = tasks  # type: list[GetProcessDefinitionResponseBodyTasks]
        self.title = title  # type: str
        self.variables = variables  # type: dict[str, any]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.originator:
            self.originator.validate()
        if self.owners:
            for k in self.owners:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetProcessDefinitionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.form_uuid is not None:
            result['formUuid'] = self.form_uuid
        if self.originator is not None:
            result['originator'] = self.originator.to_map()
        if self.out_result is not None:
            result['outResult'] = self.out_result
        result['owners'] = []
        if self.owners is not None:
            for k in self.owners:
                result['owners'].append(k.to_map() if k else None)
        if self.process_id is not None:
            result['processId'] = self.process_id
        if self.process_instance_id is not None:
            result['processInstanceId'] = self.process_instance_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.status is not None:
            result['status'] = self.status
        result['tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['tasks'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        if self.variables is not None:
            result['variables'] = self.variables
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('formUuid') is not None:
            self.form_uuid = m.get('formUuid')
        if m.get('originator') is not None:
            temp_model = GetProcessDefinitionResponseBodyOriginator()
            self.originator = temp_model.from_map(m['originator'])
        if m.get('outResult') is not None:
            self.out_result = m.get('outResult')
        self.owners = []
        if m.get('owners') is not None:
            for k in m.get('owners'):
                temp_model = GetProcessDefinitionResponseBodyOwners()
                self.owners.append(temp_model.from_map(k))
        if m.get('processId') is not None:
            self.process_id = m.get('processId')
        if m.get('processInstanceId') is not None:
            self.process_instance_id = m.get('processInstanceId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('status') is not None:
            self.status = m.get('status')
        self.tasks = []
        if m.get('tasks') is not None:
            for k in m.get('tasks'):
                temp_model = GetProcessDefinitionResponseBodyTasks()
                self.tasks.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('variables') is not None:
            self.variables = m.get('variables')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class GetProcessDefinitionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetProcessDefinitionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetProcessDefinitionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetProcessDefinitionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRangeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRangeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetRangeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetRangeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetRangeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetRangeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetRangeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRangeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetRangeRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRangeRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetRangeRequest(TeaModel):
    def __init__(self, range_address=None, select=None, sheet_id=None, tenant_context=None, workbook_id=None):
        self.range_address = range_address  # type: str
        self.select = select  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: GetRangeRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetRangeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.select is not None:
            result['Select'] = self.select
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('Select') is not None:
            self.select = m.get('Select')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = GetRangeRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class GetRangeShrinkRequest(TeaModel):
    def __init__(self, range_address=None, select=None, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.range_address = range_address  # type: str
        self.select = select  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRangeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.select is not None:
            result['Select'] = self.select
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('Select') is not None:
            self.select = m.get('Select')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class GetRangeResponseBodyBackgroundColors(TeaModel):
    def __init__(self, red=None, green=None, blue=None, hex_string=None):
        # red
        self.red = red  # type: int
        # green
        self.green = green  # type: int
        # blue
        self.blue = blue  # type: int
        # hexString
        self.hex_string = hex_string  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRangeResponseBodyBackgroundColors, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.red is not None:
            result['Red'] = self.red
        if self.green is not None:
            result['Green'] = self.green
        if self.blue is not None:
            result['Blue'] = self.blue
        if self.hex_string is not None:
            result['HexString'] = self.hex_string
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Red') is not None:
            self.red = m.get('Red')
        if m.get('Green') is not None:
            self.green = m.get('Green')
        if m.get('Blue') is not None:
            self.blue = m.get('Blue')
        if m.get('HexString') is not None:
            self.hex_string = m.get('HexString')
        return self


class GetRangeResponseBody(TeaModel):
    def __init__(self, background_colors=None, display_values=None, formulas=None, request_id=None, values=None):
        self.background_colors = background_colors  # type: list[list[GetRangeResponseBodyBackgroundColors]]
        self.display_values = display_values  # type: list[list[str]]
        self.formulas = formulas  # type: list[list[str]]
        # requestId
        self.request_id = request_id  # type: str
        self.values = values  # type: list[list[any]]

    def validate(self):
        if self.background_colors:
            for k in self.background_colors:
                for k1 in k:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super(GetRangeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['backgroundColors'] = []
        if self.background_colors is not None:
            for k in self.background_colors:
                l1 = []
                for k1 in k:
                    l1.append(k1.to_map() if k1 else None)
                result['backgroundColors'].append(l1)
        if self.display_values is not None:
            result['displayValues'] = self.display_values
        if self.formulas is not None:
            result['formulas'] = self.formulas
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.values is not None:
            result['values'] = self.values
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.background_colors = []
        if m.get('backgroundColors') is not None:
            for k in m.get('backgroundColors'):
                l1 = []
                for k1 in k:
                    temp_model = GetRangeResponseBodyBackgroundColors()
                    l1.append(temp_model.from_map(k1))
                self.background_colors.append(l1)
        if m.get('displayValues') is not None:
            self.display_values = m.get('displayValues')
        if m.get('formulas') is not None:
            self.formulas = m.get('formulas')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('values') is not None:
            self.values = m.get('values')
        return self


class GetRangeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRangeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRangeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetReportTemplateByNameHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportTemplateByNameHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetReportTemplateByNameHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetReportTemplateByNameHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetReportTemplateByNameHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetReportTemplateByNameHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetReportTemplateByNameShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportTemplateByNameShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetReportTemplateByNameRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportTemplateByNameRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetReportTemplateByNameRequest(TeaModel):
    def __init__(self, template_name=None, tenant_context=None):
        self.template_name = template_name  # type: str
        self.tenant_context = tenant_context  # type: GetReportTemplateByNameRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetReportTemplateByNameRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TenantContext') is not None:
            temp_model = GetReportTemplateByNameRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class GetReportTemplateByNameShrinkRequest(TeaModel):
    def __init__(self, template_name=None, tenant_context_shrink=None):
        self.template_name = template_name  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportTemplateByNameShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class GetReportTemplateByNameResponseBodyDefaultReceivedConvs(TeaModel):
    def __init__(self, conversation_id=None, title=None):
        self.conversation_id = conversation_id  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportTemplateByNameResponseBodyDefaultReceivedConvs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conversation_id is not None:
            result['ConversationId'] = self.conversation_id
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConversationId') is not None:
            self.conversation_id = m.get('ConversationId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class GetReportTemplateByNameResponseBodyDefaultReceivers(TeaModel):
    def __init__(self, user_name=None, userid=None):
        self.user_name = user_name  # type: str
        self.userid = userid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportTemplateByNameResponseBodyDefaultReceivers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.userid is not None:
            result['Userid'] = self.userid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('Userid') is not None:
            self.userid = m.get('Userid')
        return self


class GetReportTemplateByNameResponseBodyFields(TeaModel):
    def __init__(self, field_name=None, sort=None, type=None):
        self.field_name = field_name  # type: str
        self.sort = sort  # type: long
        self.type = type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportTemplateByNameResponseBodyFields, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_name is not None:
            result['FieldName'] = self.field_name
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FieldName') is not None:
            self.field_name = m.get('FieldName')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetReportTemplateByNameResponseBody(TeaModel):
    def __init__(self, default_received_convs=None, default_receivers=None, fields=None, id=None, name=None,
                 request_id=None, user_name=None, userid=None):
        self.default_received_convs = default_received_convs  # type: list[GetReportTemplateByNameResponseBodyDefaultReceivedConvs]
        self.default_receivers = default_receivers  # type: list[GetReportTemplateByNameResponseBodyDefaultReceivers]
        self.fields = fields  # type: list[GetReportTemplateByNameResponseBodyFields]
        self.id = id  # type: str
        self.name = name  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.user_name = user_name  # type: str
        self.userid = userid  # type: str

    def validate(self):
        if self.default_received_convs:
            for k in self.default_received_convs:
                if k:
                    k.validate()
        if self.default_receivers:
            for k in self.default_receivers:
                if k:
                    k.validate()
        if self.fields:
            for k in self.fields:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetReportTemplateByNameResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['defaultReceivedConvs'] = []
        if self.default_received_convs is not None:
            for k in self.default_received_convs:
                result['defaultReceivedConvs'].append(k.to_map() if k else None)
        result['defaultReceivers'] = []
        if self.default_receivers is not None:
            for k in self.default_receivers:
                result['defaultReceivers'].append(k.to_map() if k else None)
        result['fields'] = []
        if self.fields is not None:
            for k in self.fields:
                result['fields'].append(k.to_map() if k else None)
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.user_name is not None:
            result['userName'] = self.user_name
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.default_received_convs = []
        if m.get('defaultReceivedConvs') is not None:
            for k in m.get('defaultReceivedConvs'):
                temp_model = GetReportTemplateByNameResponseBodyDefaultReceivedConvs()
                self.default_received_convs.append(temp_model.from_map(k))
        self.default_receivers = []
        if m.get('defaultReceivers') is not None:
            for k in m.get('defaultReceivers'):
                temp_model = GetReportTemplateByNameResponseBodyDefaultReceivers()
                self.default_receivers.append(temp_model.from_map(k))
        self.fields = []
        if m.get('fields') is not None:
            for k in m.get('fields'):
                temp_model = GetReportTemplateByNameResponseBodyFields()
                self.fields.append(temp_model.from_map(k))
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('userName') is not None:
            self.user_name = m.get('userName')
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class GetReportTemplateByNameResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetReportTemplateByNameResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetReportTemplateByNameResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetReportTemplateByNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetReportUnReadCountHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportUnReadCountHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetReportUnReadCountHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetReportUnReadCountHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetReportUnReadCountHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetReportUnReadCountHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetReportUnReadCountShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportUnReadCountShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetReportUnReadCountRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportUnReadCountRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetReportUnReadCountRequest(TeaModel):
    def __init__(self, request=None, tenant_context=None):
        self.request = request  # type: dict[str, any]
        self.tenant_context = tenant_context  # type: GetReportUnReadCountRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetReportUnReadCountRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['Request'] = self.request
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request = m.get('Request')
        if m.get('TenantContext') is not None:
            temp_model = GetReportUnReadCountRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class GetReportUnReadCountShrinkRequest(TeaModel):
    def __init__(self, request_shrink=None, tenant_context_shrink=None):
        self.request_shrink = request_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportUnReadCountShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_shrink is not None:
            result['Request'] = self.request_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request_shrink = m.get('Request')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class GetReportUnReadCountResponseBody(TeaModel):
    def __init__(self, count=None, request_id=None):
        self.count = count  # type: long
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetReportUnReadCountResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['count'] = self.count
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('count') is not None:
            self.count = m.get('count')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class GetReportUnReadCountResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetReportUnReadCountResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetReportUnReadCountResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetReportUnReadCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSheetHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSheetHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetSheetHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetSheetHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetSheetHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetSheetHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetSheetShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSheetShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetSheetRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSheetRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetSheetRequest(TeaModel):
    def __init__(self, sheet_id=None, tenant_context=None, workbook_id=None):
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: GetSheetRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetSheetRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = GetSheetRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class GetSheetShrinkRequest(TeaModel):
    def __init__(self, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSheetShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class GetSheetResponseBody(TeaModel):
    def __init__(self, column_count=None, id=None, last_non_empty_column=None, last_non_empty_row=None, name=None,
                 request_id=None, row_count=None, visibility=None):
        self.column_count = column_count  # type: long
        self.id = id  # type: str
        self.last_non_empty_column = last_non_empty_column  # type: long
        self.last_non_empty_row = last_non_empty_row  # type: long
        self.name = name  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.row_count = row_count  # type: long
        self.visibility = visibility  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSheetResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column_count is not None:
            result['columnCount'] = self.column_count
        if self.id is not None:
            result['id'] = self.id
        if self.last_non_empty_column is not None:
            result['lastNonEmptyColumn'] = self.last_non_empty_column
        if self.last_non_empty_row is not None:
            result['lastNonEmptyRow'] = self.last_non_empty_row
        if self.name is not None:
            result['name'] = self.name
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.row_count is not None:
            result['rowCount'] = self.row_count
        if self.visibility is not None:
            result['visibility'] = self.visibility
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('columnCount') is not None:
            self.column_count = m.get('columnCount')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('lastNonEmptyColumn') is not None:
            self.last_non_empty_column = m.get('lastNonEmptyColumn')
        if m.get('lastNonEmptyRow') is not None:
            self.last_non_empty_row = m.get('lastNonEmptyRow')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('rowCount') is not None:
            self.row_count = m.get('rowCount')
        if m.get('visibility') is not None:
            self.visibility = m.get('visibility')
        return self


class GetSheetResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSheetResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSheetResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSheetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSpaceDirectoriesHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetSpaceDirectoriesHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetSpaceDirectoriesHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetSpaceDirectoriesHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetSpaceDirectoriesHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetSpaceDirectoriesShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetSpaceDirectoriesRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetSpaceDirectoriesRequest(TeaModel):
    def __init__(self, dentry_id=None, max_results=None, next_token=None, space_id=None, tenant_context=None):
        self.dentry_id = dentry_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.space_id = space_id  # type: str
        self.tenant_context = tenant_context  # type: GetSpaceDirectoriesRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetSpaceDirectoriesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_id is not None:
            result['DentryId'] = self.dentry_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryId') is not None:
            self.dentry_id = m.get('DentryId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('TenantContext') is not None:
            temp_model = GetSpaceDirectoriesRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class GetSpaceDirectoriesShrinkRequest(TeaModel):
    def __init__(self, dentry_id=None, max_results=None, next_token=None, space_id=None, tenant_context_shrink=None):
        self.dentry_id = dentry_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.space_id = space_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_id is not None:
            result['DentryId'] = self.dentry_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryId') is not None:
            self.dentry_id = m.get('DentryId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class GetSpaceDirectoriesResponseBodyChildrenCreator(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenCreator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl(TeaModel):
    def __init__(self, line=None, small=None):
        self.line = line  # type: str
        self.small = small  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.line is not None:
            result['Line'] = self.line
        if self.small is not None:
            result['Small'] = self.small
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Line') is not None:
            self.line = m.get('Line')
        if m.get('Small') is not None:
            self.small = m.get('Small')
        return self


class GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo(TeaModel):
    def __init__(self, extension=None, icon_url=None, id=None, link_type=None, space_id=None):
        self.extension = extension  # type: str
        self.icon_url = icon_url  # type: GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl
        self.id = id  # type: str
        self.link_type = link_type  # type: long
        self.space_id = space_id  # type: str

    def validate(self):
        if self.icon_url:
            self.icon_url.validate()

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.icon_url is not None:
            result['IconUrl'] = self.icon_url.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.link_type is not None:
            result['LinkType'] = self.link_type
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('IconUrl') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl()
            self.icon_url = temp_model.from_map(m['IconUrl'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('LinkType') is not None:
            self.link_type = m.get('LinkType')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        return self


class GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO(TeaModel):
    def __init__(self, icon=None, type=None):
        self.icon = icon  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO(TeaModel):
    def __init__(self, icon=None, type=None):
        self.icon = icon  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetSpaceDirectoriesResponseBodyChildrenSpaceOwner(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenSpaceOwner, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo(TeaModel):
    def __init__(self, dentry_actions=None, role_code=None, space_actions=None):
        self.dentry_actions = dentry_actions  # type: list[str]
        self.role_code = role_code  # type: str
        self.space_actions = space_actions  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_actions is not None:
            result['DentryActions'] = self.dentry_actions
        if self.role_code is not None:
            result['RoleCode'] = self.role_code
        if self.space_actions is not None:
            result['SpaceActions'] = self.space_actions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryActions') is not None:
            self.dentry_actions = m.get('DentryActions')
        if m.get('RoleCode') is not None:
            self.role_code = m.get('RoleCode')
        if m.get('SpaceActions') is not None:
            self.space_actions = m.get('SpaceActions')
        return self


class GetSpaceDirectoriesResponseBodyChildrenSpace(TeaModel):
    def __init__(self, cover=None, description=None, hd_icon_vo=None, icon_vo=None, id=None, name=None, owner=None,
                 recent_list=None, type=None, url=None, visitor_info=None):
        self.cover = cover  # type: str
        self.description = description  # type: str
        self.hd_icon_vo = hd_icon_vo  # type: GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO
        self.icon_vo = icon_vo  # type: GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO
        self.id = id  # type: str
        self.name = name  # type: str
        self.owner = owner  # type: GetSpaceDirectoriesResponseBodyChildrenSpaceOwner
        self.recent_list = recent_list  # type: list[any]
        self.type = type  # type: int
        self.url = url  # type: str
        self.visitor_info = visitor_info  # type: GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo

    def validate(self):
        if self.hd_icon_vo:
            self.hd_icon_vo.validate()
        if self.icon_vo:
            self.icon_vo.validate()
        if self.owner:
            self.owner.validate()
        if self.visitor_info:
            self.visitor_info.validate()

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenSpace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover is not None:
            result['Cover'] = self.cover
        if self.description is not None:
            result['Description'] = self.description
        if self.hd_icon_vo is not None:
            result['HdIconVO'] = self.hd_icon_vo.to_map()
        if self.icon_vo is not None:
            result['IconVO'] = self.icon_vo.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.owner is not None:
            result['Owner'] = self.owner.to_map()
        if self.recent_list is not None:
            result['RecentList'] = self.recent_list
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.visitor_info is not None:
            result['VisitorInfo'] = self.visitor_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cover') is not None:
            self.cover = m.get('Cover')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('HdIconVO') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO()
            self.hd_icon_vo = temp_model.from_map(m['HdIconVO'])
        if m.get('IconVO') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO()
            self.icon_vo = temp_model.from_map(m['IconVO'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Owner') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenSpaceOwner()
            self.owner = temp_model.from_map(m['Owner'])
        if m.get('RecentList') is not None:
            self.recent_list = m.get('RecentList')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('VisitorInfo') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo()
            self.visitor_info = temp_model.from_map(m['VisitorInfo'])
        return self


class GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo(TeaModel):
    def __init__(self, word_count=None):
        # WordCount
        self.word_count = word_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.word_count is not None:
            result['WordCount'] = self.word_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WordCount') is not None:
            self.word_count = m.get('WordCount')
        return self


class GetSpaceDirectoriesResponseBodyChildrenUpdater(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenUpdater, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetSpaceDirectoriesResponseBodyChildrenVisitorInfo(TeaModel):
    def __init__(self, dentry_actions=None, role_code=None, space_actions=None):
        self.dentry_actions = dentry_actions  # type: list[str]
        self.role_code = role_code  # type: str
        self.space_actions = space_actions  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildrenVisitorInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_actions is not None:
            result['DentryActions'] = self.dentry_actions
        if self.role_code is not None:
            result['RoleCode'] = self.role_code
        if self.space_actions is not None:
            result['SpaceActions'] = self.space_actions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryActions') is not None:
            self.dentry_actions = m.get('DentryActions')
        if m.get('RoleCode') is not None:
            self.role_code = m.get('RoleCode')
        if m.get('SpaceActions') is not None:
            self.space_actions = m.get('SpaceActions')
        return self


class GetSpaceDirectoriesResponseBodyChildren(TeaModel):
    def __init__(self, content_type=None, created_time=None, creator=None, dentry_id=None, dentry_type=None,
                 dentry_uuid=None, doc_key=None, extension=None, has_children=None, link_source_info=None, name=None, path=None,
                 space=None, space_id=None, statistical_info=None, updated_time=None, updater=None, url=None,
                 visitor_info=None):
        self.content_type = content_type  # type: str
        self.created_time = created_time  # type: long
        self.creator = creator  # type: GetSpaceDirectoriesResponseBodyChildrenCreator
        self.dentry_id = dentry_id  # type: str
        self.dentry_type = dentry_type  # type: str
        self.dentry_uuid = dentry_uuid  # type: str
        self.doc_key = doc_key  # type: str
        self.extension = extension  # type: str
        self.has_children = has_children  # type: bool
        self.link_source_info = link_source_info  # type: GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo
        self.name = name  # type: str
        self.path = path  # type: str
        self.space = space  # type: GetSpaceDirectoriesResponseBodyChildrenSpace
        self.space_id = space_id  # type: str
        self.statistical_info = statistical_info  # type: GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo
        self.updated_time = updated_time  # type: long
        self.updater = updater  # type: GetSpaceDirectoriesResponseBodyChildrenUpdater
        self.url = url  # type: str
        self.visitor_info = visitor_info  # type: GetSpaceDirectoriesResponseBodyChildrenVisitorInfo

    def validate(self):
        if self.creator:
            self.creator.validate()
        if self.link_source_info:
            self.link_source_info.validate()
        if self.space:
            self.space.validate()
        if self.statistical_info:
            self.statistical_info.validate()
        if self.updater:
            self.updater.validate()
        if self.visitor_info:
            self.visitor_info.validate()

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBodyChildren, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.creator is not None:
            result['Creator'] = self.creator.to_map()
        if self.dentry_id is not None:
            result['DentryId'] = self.dentry_id
        if self.dentry_type is not None:
            result['DentryType'] = self.dentry_type
        if self.dentry_uuid is not None:
            result['DentryUuid'] = self.dentry_uuid
        if self.doc_key is not None:
            result['DocKey'] = self.doc_key
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.has_children is not None:
            result['HasChildren'] = self.has_children
        if self.link_source_info is not None:
            result['LinkSourceInfo'] = self.link_source_info.to_map()
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.space is not None:
            result['Space'] = self.space.to_map()
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.statistical_info is not None:
            result['StatisticalInfo'] = self.statistical_info.to_map()
        if self.updated_time is not None:
            result['UpdatedTime'] = self.updated_time
        if self.updater is not None:
            result['Updater'] = self.updater.to_map()
        if self.url is not None:
            result['Url'] = self.url
        if self.visitor_info is not None:
            result['VisitorInfo'] = self.visitor_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('Creator') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenCreator()
            self.creator = temp_model.from_map(m['Creator'])
        if m.get('DentryId') is not None:
            self.dentry_id = m.get('DentryId')
        if m.get('DentryType') is not None:
            self.dentry_type = m.get('DentryType')
        if m.get('DentryUuid') is not None:
            self.dentry_uuid = m.get('DentryUuid')
        if m.get('DocKey') is not None:
            self.doc_key = m.get('DocKey')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('HasChildren') is not None:
            self.has_children = m.get('HasChildren')
        if m.get('LinkSourceInfo') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo()
            self.link_source_info = temp_model.from_map(m['LinkSourceInfo'])
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Space') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenSpace()
            self.space = temp_model.from_map(m['Space'])
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('StatisticalInfo') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo()
            self.statistical_info = temp_model.from_map(m['StatisticalInfo'])
        if m.get('UpdatedTime') is not None:
            self.updated_time = m.get('UpdatedTime')
        if m.get('Updater') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenUpdater()
            self.updater = temp_model.from_map(m['Updater'])
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('VisitorInfo') is not None:
            temp_model = GetSpaceDirectoriesResponseBodyChildrenVisitorInfo()
            self.visitor_info = temp_model.from_map(m['VisitorInfo'])
        return self


class GetSpaceDirectoriesResponseBody(TeaModel):
    def __init__(self, children=None, has_more=None, next_token=None, request_id=None):
        self.children = children  # type: list[GetSpaceDirectoriesResponseBodyChildren]
        self.has_more = has_more  # type: bool
        self.next_token = next_token  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.children:
            for k in self.children:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['children'] = []
        if self.children is not None:
            for k in self.children:
                result['children'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.children = []
        if m.get('children') is not None:
            for k in m.get('children'):
                temp_model = GetSpaceDirectoriesResponseBodyChildren()
                self.children.append(temp_model.from_map(k))
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class GetSpaceDirectoriesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSpaceDirectoriesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSpaceDirectoriesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSpaceDirectoriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSubscribedCalendarHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSubscribedCalendarHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetSubscribedCalendarHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetSubscribedCalendarHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetSubscribedCalendarHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetSubscribedCalendarHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetSubscribedCalendarShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSubscribedCalendarShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetSubscribedCalendarRequest(TeaModel):
    def __init__(self, calendar_id=None):
        self.calendar_id = calendar_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSubscribedCalendarRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        return self


class GetSubscribedCalendarResponseBodySubscribeScope(TeaModel):
    def __init__(self, corp_ids=None, open_conversation_ids=None, user_ids=None):
        self.corp_ids = corp_ids  # type: list[str]
        self.open_conversation_ids = open_conversation_ids  # type: list[str]
        self.user_ids = user_ids  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSubscribedCalendarResponseBodySubscribeScope, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_ids is not None:
            result['CorpIds'] = self.corp_ids
        if self.open_conversation_ids is not None:
            result['OpenConversationIds'] = self.open_conversation_ids
        if self.user_ids is not None:
            result['UserIds'] = self.user_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpIds') is not None:
            self.corp_ids = m.get('CorpIds')
        if m.get('OpenConversationIds') is not None:
            self.open_conversation_ids = m.get('OpenConversationIds')
        if m.get('UserIds') is not None:
            self.user_ids = m.get('UserIds')
        return self


class GetSubscribedCalendarResponseBody(TeaModel):
    def __init__(self, author=None, calendar_id=None, description=None, managers=None, name=None, request_id=None,
                 subscribe_scope=None):
        self.author = author  # type: str
        self.calendar_id = calendar_id  # type: str
        self.description = description  # type: str
        self.managers = managers  # type: list[str]
        self.name = name  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.subscribe_scope = subscribe_scope  # type: GetSubscribedCalendarResponseBodySubscribeScope

    def validate(self):
        if self.subscribe_scope:
            self.subscribe_scope.validate()

    def to_map(self):
        _map = super(GetSubscribedCalendarResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.author is not None:
            result['author'] = self.author
        if self.calendar_id is not None:
            result['calendarId'] = self.calendar_id
        if self.description is not None:
            result['description'] = self.description
        if self.managers is not None:
            result['managers'] = self.managers
        if self.name is not None:
            result['name'] = self.name
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.subscribe_scope is not None:
            result['subscribeScope'] = self.subscribe_scope.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('author') is not None:
            self.author = m.get('author')
        if m.get('calendarId') is not None:
            self.calendar_id = m.get('calendarId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('managers') is not None:
            self.managers = m.get('managers')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('subscribeScope') is not None:
            temp_model = GetSubscribedCalendarResponseBodySubscribeScope()
            self.subscribe_scope = temp_model.from_map(m['subscribeScope'])
        return self


class GetSubscribedCalendarResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSubscribedCalendarResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSubscribedCalendarResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSubscribedCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTemplateListByUserIdHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTemplateListByUserIdHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetTemplateListByUserIdHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetTemplateListByUserIdHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetTemplateListByUserIdHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetTemplateListByUserIdHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetTemplateListByUserIdShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTemplateListByUserIdShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetTemplateListByUserIdRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTemplateListByUserIdRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetTemplateListByUserIdRequest(TeaModel):
    def __init__(self, offset=None, size=None, tenant_context=None):
        self.offset = offset  # type: long
        self.size = size  # type: long
        self.tenant_context = tenant_context  # type: GetTemplateListByUserIdRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetTemplateListByUserIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            temp_model = GetTemplateListByUserIdRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class GetTemplateListByUserIdShrinkRequest(TeaModel):
    def __init__(self, offset=None, size=None, tenant_context_shrink=None):
        self.offset = offset  # type: long
        self.size = size  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTemplateListByUserIdShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class GetTemplateListByUserIdResponseBodyTemplateList(TeaModel):
    def __init__(self, icon_url=None, name=None, report_code=None, url=None):
        self.icon_url = icon_url  # type: str
        self.name = name  # type: str
        self.report_code = report_code  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTemplateListByUserIdResponseBodyTemplateList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon_url is not None:
            result['IconUrl'] = self.icon_url
        if self.name is not None:
            result['Name'] = self.name
        if self.report_code is not None:
            result['ReportCode'] = self.report_code
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IconUrl') is not None:
            self.icon_url = m.get('IconUrl')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ReportCode') is not None:
            self.report_code = m.get('ReportCode')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetTemplateListByUserIdResponseBody(TeaModel):
    def __init__(self, next_cursor=None, request_id=None, template_list=None):
        self.next_cursor = next_cursor  # type: long
        # requestId
        self.request_id = request_id  # type: str
        self.template_list = template_list  # type: list[GetTemplateListByUserIdResponseBodyTemplateList]

    def validate(self):
        if self.template_list:
            for k in self.template_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetTemplateListByUserIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['templateList'] = []
        if self.template_list is not None:
            for k in self.template_list:
                result['templateList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.template_list = []
        if m.get('templateList') is not None:
            for k in m.get('templateList'):
                temp_model = GetTemplateListByUserIdResponseBodyTemplateList()
                self.template_list.append(temp_model.from_map(k))
        return self


class GetTemplateListByUserIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetTemplateListByUserIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTemplateListByUserIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTemplateListByUserIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetUserHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetUserHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetUserHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetUserHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetUserShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetUserRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetUserRequest(TeaModel):
    def __init__(self, tenant_context=None, language=None):
        self.tenant_context = tenant_context  # type: GetUserRequestTenantContext
        self.language = language  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.language is not None:
            result['language'] = self.language
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = GetUserRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('language') is not None:
            self.language = m.get('language')
        return self


class GetUserShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, language=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.language = language  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.language is not None:
            result['language'] = self.language
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('language') is not None:
            self.language = m.get('language')
        return self


class GetUserResponseBodyDeptOrderList(TeaModel):
    def __init__(self, dept_id=None, order=None):
        self.dept_id = dept_id  # type: long
        self.order = order  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserResponseBodyDeptOrderList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_id is not None:
            result['deptId'] = self.dept_id
        if self.order is not None:
            result['order'] = self.order
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('deptId') is not None:
            self.dept_id = m.get('deptId')
        if m.get('order') is not None:
            self.order = m.get('order')
        return self


class GetUserResponseBodyLeaderInDept(TeaModel):
    def __init__(self, dept_id=None, leader=None):
        self.dept_id = dept_id  # type: long
        self.leader = leader  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserResponseBodyLeaderInDept, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_id is not None:
            result['deptId'] = self.dept_id
        if self.leader is not None:
            result['leader'] = self.leader
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('deptId') is not None:
            self.dept_id = m.get('deptId')
        if m.get('leader') is not None:
            self.leader = m.get('leader')
        return self


class GetUserResponseBodyRoleList(TeaModel):
    def __init__(self, group_name=None, id=None, name=None):
        self.group_name = group_name  # type: str
        self.id = id  # type: long
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserResponseBodyRoleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class GetUserResponseBodyUnionEmpExtUnionEmpMapList(TeaModel):
    def __init__(self, crop_id=None, userid=None):
        self.crop_id = crop_id  # type: str
        self.userid = userid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserResponseBodyUnionEmpExtUnionEmpMapList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.crop_id is not None:
            result['cropId'] = self.crop_id
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cropId') is not None:
            self.crop_id = m.get('cropId')
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class GetUserResponseBodyUnionEmpExt(TeaModel):
    def __init__(self, corp_id=None, union_emp_map_list=None, userid=None):
        self.corp_id = corp_id  # type: str
        self.union_emp_map_list = union_emp_map_list  # type: list[GetUserResponseBodyUnionEmpExtUnionEmpMapList]
        self.userid = userid  # type: str

    def validate(self):
        if self.union_emp_map_list:
            for k in self.union_emp_map_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetUserResponseBodyUnionEmpExt, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corpId'] = self.corp_id
        result['unionEmpMapList'] = []
        if self.union_emp_map_list is not None:
            for k in self.union_emp_map_list:
                result['unionEmpMapList'].append(k.to_map() if k else None)
        if self.userid is not None:
            result['userid'] = self.userid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corpId') is not None:
            self.corp_id = m.get('corpId')
        self.union_emp_map_list = []
        if m.get('unionEmpMapList') is not None:
            for k in m.get('unionEmpMapList'):
                temp_model = GetUserResponseBodyUnionEmpExtUnionEmpMapList()
                self.union_emp_map_list.append(temp_model.from_map(k))
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        return self


class GetUserResponseBody(TeaModel):
    def __init__(self, active=None, admin=None, avatar=None, boss=None, dept_id_list=None, dept_order_list=None,
                 email=None, exclusive_account=None, exclusive_account_corp_id=None, exclusive_account_corp_name=None,
                 exclusive_account_type=None, extension=None, hide_mobile=None, hired_date=None, job_number=None, leader_in_dept=None,
                 login_id=None, manager_userid=None, mobile=None, name=None, nickname=None, org_email=None, real_authed=None,
                 remark=None, request_id=None, role_list=None, senior=None, state_code=None, telephone=None, title=None,
                 union_emp_ext=None, userid=None, work_place=None):
        self.active = active  # type: bool
        self.admin = admin  # type: bool
        self.avatar = avatar  # type: str
        self.boss = boss  # type: bool
        self.dept_id_list = dept_id_list  # type: list[long]
        self.dept_order_list = dept_order_list  # type: list[GetUserResponseBodyDeptOrderList]
        self.email = email  # type: str
        self.exclusive_account = exclusive_account  # type: bool
        self.exclusive_account_corp_id = exclusive_account_corp_id  # type: str
        self.exclusive_account_corp_name = exclusive_account_corp_name  # type: str
        self.exclusive_account_type = exclusive_account_type  # type: str
        self.extension = extension  # type: str
        self.hide_mobile = hide_mobile  # type: bool
        self.hired_date = hired_date  # type: long
        self.job_number = job_number  # type: str
        self.leader_in_dept = leader_in_dept  # type: list[GetUserResponseBodyLeaderInDept]
        self.login_id = login_id  # type: str
        self.manager_userid = manager_userid  # type: str
        self.mobile = mobile  # type: str
        self.name = name  # type: str
        self.nickname = nickname  # type: str
        self.org_email = org_email  # type: str
        self.real_authed = real_authed  # type: bool
        self.remark = remark  # type: str
        self.request_id = request_id  # type: str
        self.role_list = role_list  # type: list[GetUserResponseBodyRoleList]
        self.senior = senior  # type: bool
        self.state_code = state_code  # type: str
        self.telephone = telephone  # type: str
        self.title = title  # type: str
        self.union_emp_ext = union_emp_ext  # type: GetUserResponseBodyUnionEmpExt
        self.userid = userid  # type: str
        self.work_place = work_place  # type: str

    def validate(self):
        if self.dept_order_list:
            for k in self.dept_order_list:
                if k:
                    k.validate()
        if self.leader_in_dept:
            for k in self.leader_in_dept:
                if k:
                    k.validate()
        if self.role_list:
            for k in self.role_list:
                if k:
                    k.validate()
        if self.union_emp_ext:
            self.union_emp_ext.validate()

    def to_map(self):
        _map = super(GetUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active is not None:
            result['active'] = self.active
        if self.admin is not None:
            result['admin'] = self.admin
        if self.avatar is not None:
            result['avatar'] = self.avatar
        if self.boss is not None:
            result['boss'] = self.boss
        if self.dept_id_list is not None:
            result['deptIdList'] = self.dept_id_list
        result['deptOrderList'] = []
        if self.dept_order_list is not None:
            for k in self.dept_order_list:
                result['deptOrderList'].append(k.to_map() if k else None)
        if self.email is not None:
            result['email'] = self.email
        if self.exclusive_account is not None:
            result['exclusiveAccount'] = self.exclusive_account
        if self.exclusive_account_corp_id is not None:
            result['exclusiveAccountCorpId'] = self.exclusive_account_corp_id
        if self.exclusive_account_corp_name is not None:
            result['exclusiveAccountCorpName'] = self.exclusive_account_corp_name
        if self.exclusive_account_type is not None:
            result['exclusiveAccountType'] = self.exclusive_account_type
        if self.extension is not None:
            result['extension'] = self.extension
        if self.hide_mobile is not None:
            result['hideMobile'] = self.hide_mobile
        if self.hired_date is not None:
            result['hiredDate'] = self.hired_date
        if self.job_number is not None:
            result['jobNumber'] = self.job_number
        result['leaderInDept'] = []
        if self.leader_in_dept is not None:
            for k in self.leader_in_dept:
                result['leaderInDept'].append(k.to_map() if k else None)
        if self.login_id is not None:
            result['loginId'] = self.login_id
        if self.manager_userid is not None:
            result['managerUserid'] = self.manager_userid
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.name is not None:
            result['name'] = self.name
        if self.nickname is not None:
            result['nickname'] = self.nickname
        if self.org_email is not None:
            result['orgEmail'] = self.org_email
        if self.real_authed is not None:
            result['realAuthed'] = self.real_authed
        if self.remark is not None:
            result['remark'] = self.remark
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['roleList'] = []
        if self.role_list is not None:
            for k in self.role_list:
                result['roleList'].append(k.to_map() if k else None)
        if self.senior is not None:
            result['senior'] = self.senior
        if self.state_code is not None:
            result['stateCode'] = self.state_code
        if self.telephone is not None:
            result['telephone'] = self.telephone
        if self.title is not None:
            result['title'] = self.title
        if self.union_emp_ext is not None:
            result['unionEmpExt'] = self.union_emp_ext.to_map()
        if self.userid is not None:
            result['userid'] = self.userid
        if self.work_place is not None:
            result['workPlace'] = self.work_place
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('active') is not None:
            self.active = m.get('active')
        if m.get('admin') is not None:
            self.admin = m.get('admin')
        if m.get('avatar') is not None:
            self.avatar = m.get('avatar')
        if m.get('boss') is not None:
            self.boss = m.get('boss')
        if m.get('deptIdList') is not None:
            self.dept_id_list = m.get('deptIdList')
        self.dept_order_list = []
        if m.get('deptOrderList') is not None:
            for k in m.get('deptOrderList'):
                temp_model = GetUserResponseBodyDeptOrderList()
                self.dept_order_list.append(temp_model.from_map(k))
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('exclusiveAccount') is not None:
            self.exclusive_account = m.get('exclusiveAccount')
        if m.get('exclusiveAccountCorpId') is not None:
            self.exclusive_account_corp_id = m.get('exclusiveAccountCorpId')
        if m.get('exclusiveAccountCorpName') is not None:
            self.exclusive_account_corp_name = m.get('exclusiveAccountCorpName')
        if m.get('exclusiveAccountType') is not None:
            self.exclusive_account_type = m.get('exclusiveAccountType')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('hideMobile') is not None:
            self.hide_mobile = m.get('hideMobile')
        if m.get('hiredDate') is not None:
            self.hired_date = m.get('hiredDate')
        if m.get('jobNumber') is not None:
            self.job_number = m.get('jobNumber')
        self.leader_in_dept = []
        if m.get('leaderInDept') is not None:
            for k in m.get('leaderInDept'):
                temp_model = GetUserResponseBodyLeaderInDept()
                self.leader_in_dept.append(temp_model.from_map(k))
        if m.get('loginId') is not None:
            self.login_id = m.get('loginId')
        if m.get('managerUserid') is not None:
            self.manager_userid = m.get('managerUserid')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('nickname') is not None:
            self.nickname = m.get('nickname')
        if m.get('orgEmail') is not None:
            self.org_email = m.get('orgEmail')
        if m.get('realAuthed') is not None:
            self.real_authed = m.get('realAuthed')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.role_list = []
        if m.get('roleList') is not None:
            for k in m.get('roleList'):
                temp_model = GetUserResponseBodyRoleList()
                self.role_list.append(temp_model.from_map(k))
        if m.get('senior') is not None:
            self.senior = m.get('senior')
        if m.get('stateCode') is not None:
            self.state_code = m.get('stateCode')
        if m.get('telephone') is not None:
            self.telephone = m.get('telephone')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('unionEmpExt') is not None:
            temp_model = GetUserResponseBodyUnionEmpExt()
            self.union_emp_ext = temp_model.from_map(m['unionEmpExt'])
        if m.get('userid') is not None:
            self.userid = m.get('userid')
        if m.get('workPlace') is not None:
            self.work_place = m.get('workPlace')
        return self


class GetUserResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetWorkspaceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspaceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetWorkspaceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetWorkspaceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetWorkspaceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetWorkspaceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetWorkspaceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspaceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetWorkspaceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspaceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetWorkspaceRequest(TeaModel):
    def __init__(self, tenant_context=None, with_permission_role=None, workspace_id=None):
        self.tenant_context = tenant_context  # type: GetWorkspaceRequestTenantContext
        self.with_permission_role = with_permission_role  # type: bool
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetWorkspaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = GetWorkspaceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetWorkspaceShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, with_permission_role=None, workspace_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.with_permission_role = with_permission_role  # type: bool
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspaceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetWorkspaceResponseBodyWorkspaceIcon(TeaModel):
    def __init__(self, type=None, value=None):
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspaceResponseBodyWorkspaceIcon, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetWorkspaceResponseBodyWorkspace(TeaModel):
    def __init__(self, corp_id=None, cover=None, create_time=None, creator_id=None, description=None, icon=None,
                 modified_time=None, modifier_id=None, name=None, permission_role=None, root_node_id=None, team_id=None, type=None,
                 url=None, workspace_id=None):
        self.corp_id = corp_id  # type: str
        self.cover = cover  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.icon = icon  # type: GetWorkspaceResponseBodyWorkspaceIcon
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.permission_role = permission_role  # type: str
        self.root_node_id = root_node_id  # type: str
        self.team_id = team_id  # type: str
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.icon:
            self.icon.validate()

    def to_map(self):
        _map = super(GetWorkspaceResponseBodyWorkspace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.cover is not None:
            result['Cover'] = self.cover
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.description is not None:
            result['Description'] = self.description
        if self.icon is not None:
            result['Icon'] = self.icon.to_map()
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.root_node_id is not None:
            result['RootNodeId'] = self.root_node_id
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Cover') is not None:
            self.cover = m.get('Cover')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Icon') is not None:
            temp_model = GetWorkspaceResponseBodyWorkspaceIcon()
            self.icon = temp_model.from_map(m['Icon'])
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('RootNodeId') is not None:
            self.root_node_id = m.get('RootNodeId')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetWorkspaceResponseBody(TeaModel):
    def __init__(self, request_id=None, workspace=None):
        # requestId
        self.request_id = request_id  # type: str
        self.workspace = workspace  # type: GetWorkspaceResponseBodyWorkspace

    def validate(self):
        if self.workspace:
            self.workspace.validate()

    def to_map(self):
        _map = super(GetWorkspaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.workspace is not None:
            result['workspace'] = self.workspace.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('workspace') is not None:
            temp_model = GetWorkspaceResponseBodyWorkspace()
            self.workspace = temp_model.from_map(m['workspace'])
        return self


class GetWorkspaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetWorkspaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetWorkspaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetWorkspaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetWorkspacesHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspacesHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GetWorkspacesHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GetWorkspacesHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GetWorkspacesHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GetWorkspacesHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GetWorkspacesShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspacesShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GetWorkspacesRequestOption(TeaModel):
    def __init__(self, with_permission_role=None):
        self.with_permission_role = with_permission_role  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspacesRequestOption, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        return self


class GetWorkspacesRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspacesRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GetWorkspacesRequest(TeaModel):
    def __init__(self, option=None, tenant_context=None, workspace_ids=None):
        self.option = option  # type: GetWorkspacesRequestOption
        self.tenant_context = tenant_context  # type: GetWorkspacesRequestTenantContext
        self.workspace_ids = workspace_ids  # type: list[str]

    def validate(self):
        if self.option:
            self.option.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GetWorkspacesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.option is not None:
            result['Option'] = self.option.to_map()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_ids is not None:
            result['WorkspaceIds'] = self.workspace_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Option') is not None:
            temp_model = GetWorkspacesRequestOption()
            self.option = temp_model.from_map(m['Option'])
        if m.get('TenantContext') is not None:
            temp_model = GetWorkspacesRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceIds') is not None:
            self.workspace_ids = m.get('WorkspaceIds')
        return self


class GetWorkspacesShrinkRequest(TeaModel):
    def __init__(self, option_shrink=None, tenant_context_shrink=None, workspace_ids_shrink=None):
        self.option_shrink = option_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_ids_shrink = workspace_ids_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspacesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.option_shrink is not None:
            result['Option'] = self.option_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_ids_shrink is not None:
            result['WorkspaceIds'] = self.workspace_ids_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Option') is not None:
            self.option_shrink = m.get('Option')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceIds') is not None:
            self.workspace_ids_shrink = m.get('WorkspaceIds')
        return self


class GetWorkspacesResponseBodyWorkspaceIcon(TeaModel):
    def __init__(self, type=None, value=None):
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetWorkspacesResponseBodyWorkspaceIcon, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetWorkspacesResponseBodyWorkspace(TeaModel):
    def __init__(self, corp_id=None, cover=None, create_time=None, creator_id=None, description=None, icon=None,
                 modified_time=None, modifier_id=None, name=None, permission_role=None, root_node_id=None, team_id=None, type=None,
                 url=None, workspace_id=None):
        self.corp_id = corp_id  # type: str
        self.cover = cover  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.icon = icon  # type: GetWorkspacesResponseBodyWorkspaceIcon
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.permission_role = permission_role  # type: str
        self.root_node_id = root_node_id  # type: str
        self.team_id = team_id  # type: str
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.icon:
            self.icon.validate()

    def to_map(self):
        _map = super(GetWorkspacesResponseBodyWorkspace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.cover is not None:
            result['Cover'] = self.cover
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.description is not None:
            result['Description'] = self.description
        if self.icon is not None:
            result['Icon'] = self.icon.to_map()
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.root_node_id is not None:
            result['RootNodeId'] = self.root_node_id
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Cover') is not None:
            self.cover = m.get('Cover')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Icon') is not None:
            temp_model = GetWorkspacesResponseBodyWorkspaceIcon()
            self.icon = temp_model.from_map(m['Icon'])
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('RootNodeId') is not None:
            self.root_node_id = m.get('RootNodeId')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetWorkspacesResponseBody(TeaModel):
    def __init__(self, request_id=None, workspace=None):
        # requestId
        self.request_id = request_id  # type: str
        self.workspace = workspace  # type: list[GetWorkspacesResponseBodyWorkspace]

    def validate(self):
        if self.workspace:
            for k in self.workspace:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetWorkspacesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['workspace'] = []
        if self.workspace is not None:
            for k in self.workspace:
                result['workspace'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.workspace = []
        if m.get('workspace') is not None:
            for k in m.get('workspace'):
                temp_model = GetWorkspacesResponseBodyWorkspace()
                self.workspace.append(temp_model.from_map(k))
        return self


class GetWorkspacesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetWorkspacesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetWorkspacesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetWorkspacesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GrantHonorHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GrantHonorHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class GrantHonorHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: GrantHonorHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(GrantHonorHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = GrantHonorHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class GrantHonorShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GrantHonorShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class GrantHonorRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GrantHonorRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class GrantHonorRequest(TeaModel):
    def __init__(self, tenant_context=None, expiration_time=None, grant_reason=None, granter_name=None,
                 honor_id=None, notice_announcer=None, notice_single=None, open_conversation_ids=None, org_id=None,
                 receiver_user_ids=None, sender_user_id=None):
        self.tenant_context = tenant_context  # type: GrantHonorRequestTenantContext
        self.expiration_time = expiration_time  # type: long
        self.grant_reason = grant_reason  # type: str
        self.granter_name = granter_name  # type: str
        self.honor_id = honor_id  # type: str
        self.notice_announcer = notice_announcer  # type: bool
        self.notice_single = notice_single  # type: bool
        self.open_conversation_ids = open_conversation_ids  # type: list[str]
        self.org_id = org_id  # type: long
        self.receiver_user_ids = receiver_user_ids  # type: list[str]
        self.sender_user_id = sender_user_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(GrantHonorRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.expiration_time is not None:
            result['expirationTime'] = self.expiration_time
        if self.grant_reason is not None:
            result['grantReason'] = self.grant_reason
        if self.granter_name is not None:
            result['granterName'] = self.granter_name
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.notice_announcer is not None:
            result['noticeAnnouncer'] = self.notice_announcer
        if self.notice_single is not None:
            result['noticeSingle'] = self.notice_single
        if self.open_conversation_ids is not None:
            result['openConversationIds'] = self.open_conversation_ids
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.receiver_user_ids is not None:
            result['receiverUserIds'] = self.receiver_user_ids
        if self.sender_user_id is not None:
            result['senderUserId'] = self.sender_user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = GrantHonorRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('expirationTime') is not None:
            self.expiration_time = m.get('expirationTime')
        if m.get('grantReason') is not None:
            self.grant_reason = m.get('grantReason')
        if m.get('granterName') is not None:
            self.granter_name = m.get('granterName')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('noticeAnnouncer') is not None:
            self.notice_announcer = m.get('noticeAnnouncer')
        if m.get('noticeSingle') is not None:
            self.notice_single = m.get('noticeSingle')
        if m.get('openConversationIds') is not None:
            self.open_conversation_ids = m.get('openConversationIds')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('receiverUserIds') is not None:
            self.receiver_user_ids = m.get('receiverUserIds')
        if m.get('senderUserId') is not None:
            self.sender_user_id = m.get('senderUserId')
        return self


class GrantHonorShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, expiration_time=None, grant_reason=None, granter_name=None,
                 honor_id=None, notice_announcer=None, notice_single=None, open_conversation_ids_shrink=None, org_id=None,
                 receiver_user_ids_shrink=None, sender_user_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.expiration_time = expiration_time  # type: long
        self.grant_reason = grant_reason  # type: str
        self.granter_name = granter_name  # type: str
        self.honor_id = honor_id  # type: str
        self.notice_announcer = notice_announcer  # type: bool
        self.notice_single = notice_single  # type: bool
        self.open_conversation_ids_shrink = open_conversation_ids_shrink  # type: str
        self.org_id = org_id  # type: long
        self.receiver_user_ids_shrink = receiver_user_ids_shrink  # type: str
        self.sender_user_id = sender_user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GrantHonorShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.expiration_time is not None:
            result['expirationTime'] = self.expiration_time
        if self.grant_reason is not None:
            result['grantReason'] = self.grant_reason
        if self.granter_name is not None:
            result['granterName'] = self.granter_name
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.notice_announcer is not None:
            result['noticeAnnouncer'] = self.notice_announcer
        if self.notice_single is not None:
            result['noticeSingle'] = self.notice_single
        if self.open_conversation_ids_shrink is not None:
            result['openConversationIds'] = self.open_conversation_ids_shrink
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.receiver_user_ids_shrink is not None:
            result['receiverUserIds'] = self.receiver_user_ids_shrink
        if self.sender_user_id is not None:
            result['senderUserId'] = self.sender_user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('expirationTime') is not None:
            self.expiration_time = m.get('expirationTime')
        if m.get('grantReason') is not None:
            self.grant_reason = m.get('grantReason')
        if m.get('granterName') is not None:
            self.granter_name = m.get('granterName')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('noticeAnnouncer') is not None:
            self.notice_announcer = m.get('noticeAnnouncer')
        if m.get('noticeSingle') is not None:
            self.notice_single = m.get('noticeSingle')
        if m.get('openConversationIds') is not None:
            self.open_conversation_ids_shrink = m.get('openConversationIds')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('receiverUserIds') is not None:
            self.receiver_user_ids_shrink = m.get('receiverUserIds')
        if m.get('senderUserId') is not None:
            self.sender_user_id = m.get('senderUserId')
        return self


class GrantHonorResponseBody(TeaModel):
    def __init__(self, failed_user_ids=None, request_id=None, success_user_ids=None):
        self.failed_user_ids = failed_user_ids  # type: list[str]
        # requestId
        self.request_id = request_id  # type: str
        self.success_user_ids = success_user_ids  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(GrantHonorResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.failed_user_ids is not None:
            result['failedUserIds'] = self.failed_user_ids
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success_user_ids is not None:
            result['successUserIds'] = self.success_user_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('failedUserIds') is not None:
            self.failed_user_ids = m.get('failedUserIds')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('successUserIds') is not None:
            self.success_user_ids = m.get('successUserIds')
        return self


class GrantHonorResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GrantHonorResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GrantHonorResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GrantHonorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsertColumnsBeforeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertColumnsBeforeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class InsertColumnsBeforeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: InsertColumnsBeforeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(InsertColumnsBeforeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = InsertColumnsBeforeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class InsertColumnsBeforeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertColumnsBeforeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class InsertColumnsBeforeRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertColumnsBeforeRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class InsertColumnsBeforeRequest(TeaModel):
    def __init__(self, column=None, column_count=None, sheet_id=None, tenant_context=None, workbook_id=None):
        self.column = column  # type: long
        self.column_count = column_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: InsertColumnsBeforeRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(InsertColumnsBeforeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column is not None:
            result['Column'] = self.column
        if self.column_count is not None:
            result['ColumnCount'] = self.column_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Column') is not None:
            self.column = m.get('Column')
        if m.get('ColumnCount') is not None:
            self.column_count = m.get('ColumnCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = InsertColumnsBeforeRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class InsertColumnsBeforeShrinkRequest(TeaModel):
    def __init__(self, column=None, column_count=None, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.column = column  # type: long
        self.column_count = column_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertColumnsBeforeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column is not None:
            result['Column'] = self.column
        if self.column_count is not None:
            result['ColumnCount'] = self.column_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Column') is not None:
            self.column = m.get('Column')
        if m.get('ColumnCount') is not None:
            self.column_count = m.get('ColumnCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class InsertColumnsBeforeResponseBody(TeaModel):
    def __init__(self, id=None, request_id=None):
        self.id = id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertColumnsBeforeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class InsertColumnsBeforeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InsertColumnsBeforeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InsertColumnsBeforeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsertColumnsBeforeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsertRowsBeforeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertRowsBeforeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class InsertRowsBeforeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: InsertRowsBeforeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(InsertRowsBeforeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = InsertRowsBeforeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class InsertRowsBeforeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertRowsBeforeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class InsertRowsBeforeRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertRowsBeforeRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class InsertRowsBeforeRequest(TeaModel):
    def __init__(self, row=None, row_count=None, sheet_id=None, tenant_context=None, workbook_id=None):
        self.row = row  # type: long
        self.row_count = row_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: InsertRowsBeforeRequestTenantContext
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(InsertRowsBeforeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.row is not None:
            result['Row'] = self.row
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Row') is not None:
            self.row = m.get('Row')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = InsertRowsBeforeRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class InsertRowsBeforeShrinkRequest(TeaModel):
    def __init__(self, row=None, row_count=None, sheet_id=None, tenant_context_shrink=None, workbook_id=None):
        self.row = row  # type: long
        self.row_count = row_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertRowsBeforeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.row is not None:
            result['Row'] = self.row
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Row') is not None:
            self.row = m.get('Row')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class InsertRowsBeforeResponseBody(TeaModel):
    def __init__(self, id=None, request_id=None):
        self.id = id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsertRowsBeforeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class InsertRowsBeforeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InsertRowsBeforeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InsertRowsBeforeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsertRowsBeforeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InviteUsersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InviteUsersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class InviteUsersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: InviteUsersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(InviteUsersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = InviteUsersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class InviteUsersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InviteUsersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class InviteUsersRequestInviteeList(TeaModel):
    def __init__(self, nick=None, user_id=None):
        self.nick = nick  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InviteUsersRequestInviteeList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.nick is not None:
            result['Nick'] = self.nick
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Nick') is not None:
            self.nick = m.get('Nick')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class InviteUsersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InviteUsersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class InviteUsersRequest(TeaModel):
    def __init__(self, invitee_list=None, tenant_context=None, conference_id=None):
        self.invitee_list = invitee_list  # type: list[InviteUsersRequestInviteeList]
        self.tenant_context = tenant_context  # type: InviteUsersRequestTenantContext
        self.conference_id = conference_id  # type: str

    def validate(self):
        if self.invitee_list:
            for k in self.invitee_list:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(InviteUsersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InviteeList'] = []
        if self.invitee_list is not None:
            for k in self.invitee_list:
                result['InviteeList'].append(k.to_map() if k else None)
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.invitee_list = []
        if m.get('InviteeList') is not None:
            for k in m.get('InviteeList'):
                temp_model = InviteUsersRequestInviteeList()
                self.invitee_list.append(temp_model.from_map(k))
        if m.get('TenantContext') is not None:
            temp_model = InviteUsersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class InviteUsersShrinkRequest(TeaModel):
    def __init__(self, invitee_list_shrink=None, tenant_context_shrink=None, conference_id=None):
        self.invitee_list_shrink = invitee_list_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.conference_id = conference_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InviteUsersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.invitee_list_shrink is not None:
            result['InviteeList'] = self.invitee_list_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InviteeList') is not None:
            self.invitee_list_shrink = m.get('InviteeList')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class InviteUsersResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(InviteUsersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class InviteUsersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InviteUsersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InviteUsersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InviteUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCalendarsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCalendarsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListCalendarsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListCalendarsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListCalendarsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListCalendarsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListCalendarsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCalendarsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListCalendarsRequest(TeaModel):
    def __init__(self, request=None):
        self.request = request  # type: dict[str, any]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCalendarsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['Request'] = self.request
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request = m.get('Request')
        return self


class ListCalendarsShrinkRequest(TeaModel):
    def __init__(self, request_shrink=None):
        self.request_shrink = request_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCalendarsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_shrink is not None:
            result['Request'] = self.request_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request_shrink = m.get('Request')
        return self


class ListCalendarsResponseBodyResponseCalendars(TeaModel):
    def __init__(self, description=None, etag=None, id=None, privilege=None, summary=None, time_zone=None, type=None):
        self.description = description  # type: str
        self.etag = etag  # type: str
        self.id = id  # type: str
        self.privilege = privilege  # type: str
        self.summary = summary  # type: str
        self.time_zone = time_zone  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCalendarsResponseBodyResponseCalendars, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.etag is not None:
            result['ETag'] = self.etag
        if self.id is not None:
            result['Id'] = self.id
        if self.privilege is not None:
            result['Privilege'] = self.privilege
        if self.summary is not None:
            result['Summary'] = self.summary
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('ETag') is not None:
            self.etag = m.get('ETag')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Privilege') is not None:
            self.privilege = m.get('Privilege')
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListCalendarsResponseBodyResponse(TeaModel):
    def __init__(self, calendars=None):
        self.calendars = calendars  # type: list[ListCalendarsResponseBodyResponseCalendars]

    def validate(self):
        if self.calendars:
            for k in self.calendars:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListCalendarsResponseBodyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Calendars'] = []
        if self.calendars is not None:
            for k in self.calendars:
                result['Calendars'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.calendars = []
        if m.get('Calendars') is not None:
            for k in m.get('Calendars'):
                temp_model = ListCalendarsResponseBodyResponseCalendars()
                self.calendars.append(temp_model.from_map(k))
        return self


class ListCalendarsResponseBody(TeaModel):
    def __init__(self, request_id=None, response=None):
        # requestId
        self.request_id = request_id  # type: str
        self.response = response  # type: ListCalendarsResponseBodyResponse

    def validate(self):
        if self.response:
            self.response.validate()

    def to_map(self):
        _map = super(ListCalendarsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.response is not None:
            result['response'] = self.response.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('response') is not None:
            temp_model = ListCalendarsResponseBodyResponse()
            self.response = temp_model.from_map(m['response'])
        return self


class ListCalendarsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListCalendarsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListCalendarsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListCalendarsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListEventsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListEventsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListEventsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListEventsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListEventsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListEventsRequest(TeaModel):
    def __init__(self, calendar_id=None, max_attendees=None, max_results=None, next_token=None,
                 series_master_id=None, show_deleted=None, sync_token=None, time_max=None, time_min=None):
        self.calendar_id = calendar_id  # type: str
        self.max_attendees = max_attendees  # type: int
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.series_master_id = series_master_id  # type: str
        self.show_deleted = show_deleted  # type: bool
        self.sync_token = sync_token  # type: str
        self.time_max = time_max  # type: str
        self.time_min = time_min  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.max_attendees is not None:
            result['MaxAttendees'] = self.max_attendees
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.series_master_id is not None:
            result['SeriesMasterId'] = self.series_master_id
        if self.show_deleted is not None:
            result['ShowDeleted'] = self.show_deleted
        if self.sync_token is not None:
            result['SyncToken'] = self.sync_token
        if self.time_max is not None:
            result['TimeMax'] = self.time_max
        if self.time_min is not None:
            result['TimeMin'] = self.time_min
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('MaxAttendees') is not None:
            self.max_attendees = m.get('MaxAttendees')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('SeriesMasterId') is not None:
            self.series_master_id = m.get('SeriesMasterId')
        if m.get('ShowDeleted') is not None:
            self.show_deleted = m.get('ShowDeleted')
        if m.get('SyncToken') is not None:
            self.sync_token = m.get('SyncToken')
        if m.get('TimeMax') is not None:
            self.time_max = m.get('TimeMax')
        if m.get('TimeMin') is not None:
            self.time_min = m.get('TimeMin')
        return self


class ListEventsResponseBodyEventsAttendees(TeaModel):
    def __init__(self, display_name=None, is_optional=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.is_optional = is_optional  # type: bool
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsAttendees, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.is_optional is not None:
            result['IsOptional'] = self.is_optional
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('IsOptional') is not None:
            self.is_optional = m.get('IsOptional')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class ListEventsResponseBodyEventsCategories(TeaModel):
    def __init__(self, display_name=None):
        self.display_name = display_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsCategories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        return self


class ListEventsResponseBodyEventsEnd(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class ListEventsResponseBodyEventsExtendedPropertiesSharedProperties(TeaModel):
    def __init__(self, belong_corp_id=None, source_open_cid=None):
        self.belong_corp_id = belong_corp_id  # type: str
        self.source_open_cid = source_open_cid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsExtendedPropertiesSharedProperties, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.belong_corp_id is not None:
            result['BelongCorpId'] = self.belong_corp_id
        if self.source_open_cid is not None:
            result['SourceOpenCid'] = self.source_open_cid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BelongCorpId') is not None:
            self.belong_corp_id = m.get('BelongCorpId')
        if m.get('SourceOpenCid') is not None:
            self.source_open_cid = m.get('SourceOpenCid')
        return self


class ListEventsResponseBodyEventsExtendedProperties(TeaModel):
    def __init__(self, shared_properties=None):
        self.shared_properties = shared_properties  # type: ListEventsResponseBodyEventsExtendedPropertiesSharedProperties

    def validate(self):
        if self.shared_properties:
            self.shared_properties.validate()

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsExtendedProperties, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.shared_properties is not None:
            result['SharedProperties'] = self.shared_properties.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SharedProperties') is not None:
            temp_model = ListEventsResponseBodyEventsExtendedPropertiesSharedProperties()
            self.shared_properties = temp_model.from_map(m['SharedProperties'])
        return self


class ListEventsResponseBodyEventsLocation(TeaModel):
    def __init__(self, display_name=None, meeting_rooms=None):
        self.display_name = display_name  # type: str
        self.meeting_rooms = meeting_rooms  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['MeetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('MeetingRooms') is not None:
            self.meeting_rooms = m.get('MeetingRooms')
        return self


class ListEventsResponseBodyEventsMeetingRooms(TeaModel):
    def __init__(self, display_name=None, response_status=None, room_id=None):
        self.display_name = display_name  # type: str
        self.response_status = response_status  # type: str
        self.room_id = room_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsMeetingRooms, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        return self


class ListEventsResponseBodyEventsOnlineMeetingInfo(TeaModel):
    def __init__(self, conference_id=None, extra_info=None, type=None, url=None):
        self.conference_id = conference_id  # type: str
        self.extra_info = extra_info  # type: dict[str, any]
        self.type = type  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsOnlineMeetingInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('ExtraInfo') is not None:
            self.extra_info = m.get('ExtraInfo')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class ListEventsResponseBodyEventsOrganizer(TeaModel):
    def __init__(self, display_name=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsOrganizer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class ListEventsResponseBodyEventsOriginStart(TeaModel):
    def __init__(self, date_time=None):
        self.date_time = date_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsOriginStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        return self


class ListEventsResponseBodyEventsRecurrencePattern(TeaModel):
    def __init__(self, day_of_month=None, days_of_week=None, index=None, interval=None, type=None):
        self.day_of_month = day_of_month  # type: int
        self.days_of_week = days_of_week  # type: str
        self.index = index  # type: str
        self.interval = interval  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsRecurrencePattern, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['DayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['DaysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['Index'] = self.index
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DayOfMonth') is not None:
            self.day_of_month = m.get('DayOfMonth')
        if m.get('DaysOfWeek') is not None:
            self.days_of_week = m.get('DaysOfWeek')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListEventsResponseBodyEventsRecurrenceRange(TeaModel):
    def __init__(self, end_date=None, number_of_occurrences=None, type=None):
        self.end_date = end_date  # type: str
        self.number_of_occurrences = number_of_occurrences  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsRecurrenceRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['NumberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('NumberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('NumberOfOccurrences')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListEventsResponseBodyEventsRecurrence(TeaModel):
    def __init__(self, pattern=None, range=None):
        self.pattern = pattern  # type: ListEventsResponseBodyEventsRecurrencePattern
        self.range = range  # type: ListEventsResponseBodyEventsRecurrenceRange

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsRecurrence, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['Pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['Range'] = self.range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Pattern') is not None:
            temp_model = ListEventsResponseBodyEventsRecurrencePattern()
            self.pattern = temp_model.from_map(m['Pattern'])
        if m.get('Range') is not None:
            temp_model = ListEventsResponseBodyEventsRecurrenceRange()
            self.range = temp_model.from_map(m['Range'])
        return self


class ListEventsResponseBodyEventsReminders(TeaModel):
    def __init__(self, method=None, minutes=None):
        self.method = method  # type: str
        self.minutes = minutes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsReminders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['Method'] = self.method
        if self.minutes is not None:
            result['Minutes'] = self.minutes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('Minutes') is not None:
            self.minutes = m.get('Minutes')
        return self


class ListEventsResponseBodyEventsRichTextDescription(TeaModel):
    def __init__(self, text=None):
        self.text = text  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsRichTextDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.text is not None:
            result['Text'] = self.text
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Text') is not None:
            self.text = m.get('Text')
        return self


class ListEventsResponseBodyEventsStart(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyEventsStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class ListEventsResponseBodyEvents(TeaModel):
    def __init__(self, attendees=None, categories=None, create_time=None, description=None, end=None,
                 extended_properties=None, id=None, is_all_day=None, location=None, meeting_rooms=None, online_meeting_info=None,
                 organizer=None, origin_start=None, recurrence=None, reminders=None, rich_text_description=None,
                 series_master_id=None, start=None, status=None, summary=None, update_time=None):
        self.attendees = attendees  # type: list[ListEventsResponseBodyEventsAttendees]
        self.categories = categories  # type: list[ListEventsResponseBodyEventsCategories]
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.end = end  # type: ListEventsResponseBodyEventsEnd
        self.extended_properties = extended_properties  # type: ListEventsResponseBodyEventsExtendedProperties
        self.id = id  # type: str
        self.is_all_day = is_all_day  # type: bool
        self.location = location  # type: ListEventsResponseBodyEventsLocation
        self.meeting_rooms = meeting_rooms  # type: list[ListEventsResponseBodyEventsMeetingRooms]
        self.online_meeting_info = online_meeting_info  # type: ListEventsResponseBodyEventsOnlineMeetingInfo
        self.organizer = organizer  # type: ListEventsResponseBodyEventsOrganizer
        self.origin_start = origin_start  # type: ListEventsResponseBodyEventsOriginStart
        self.recurrence = recurrence  # type: ListEventsResponseBodyEventsRecurrence
        self.reminders = reminders  # type: list[ListEventsResponseBodyEventsReminders]
        self.rich_text_description = rich_text_description  # type: ListEventsResponseBodyEventsRichTextDescription
        self.series_master_id = series_master_id  # type: str
        self.start = start  # type: ListEventsResponseBodyEventsStart
        self.status = status  # type: str
        self.summary = summary  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.extended_properties:
            self.extended_properties.validate()
        if self.location:
            self.location.validate()
        if self.meeting_rooms:
            for k in self.meeting_rooms:
                if k:
                    k.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.origin_start:
            self.origin_start.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.rich_text_description:
            self.rich_text_description.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super(ListEventsResponseBodyEvents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['Attendees'].append(k.to_map() if k else None)
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.end is not None:
            result['End'] = self.end.to_map()
        if self.extended_properties is not None:
            result['ExtendedProperties'] = self.extended_properties.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.is_all_day is not None:
            result['IsAllDay'] = self.is_all_day
        if self.location is not None:
            result['Location'] = self.location.to_map()
        result['MeetingRooms'] = []
        if self.meeting_rooms is not None:
            for k in self.meeting_rooms:
                result['MeetingRooms'].append(k.to_map() if k else None)
        if self.online_meeting_info is not None:
            result['OnlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['Organizer'] = self.organizer.to_map()
        if self.origin_start is not None:
            result['OriginStart'] = self.origin_start.to_map()
        if self.recurrence is not None:
            result['Recurrence'] = self.recurrence.to_map()
        result['Reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['Reminders'].append(k.to_map() if k else None)
        if self.rich_text_description is not None:
            result['RichTextDescription'] = self.rich_text_description.to_map()
        if self.series_master_id is not None:
            result['SeriesMasterId'] = self.series_master_id
        if self.start is not None:
            result['Start'] = self.start.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.summary is not None:
            result['Summary'] = self.summary
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees = []
        if m.get('Attendees') is not None:
            for k in m.get('Attendees'):
                temp_model = ListEventsResponseBodyEventsAttendees()
                self.attendees.append(temp_model.from_map(k))
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = ListEventsResponseBodyEventsCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('End') is not None:
            temp_model = ListEventsResponseBodyEventsEnd()
            self.end = temp_model.from_map(m['End'])
        if m.get('ExtendedProperties') is not None:
            temp_model = ListEventsResponseBodyEventsExtendedProperties()
            self.extended_properties = temp_model.from_map(m['ExtendedProperties'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAllDay') is not None:
            self.is_all_day = m.get('IsAllDay')
        if m.get('Location') is not None:
            temp_model = ListEventsResponseBodyEventsLocation()
            self.location = temp_model.from_map(m['Location'])
        self.meeting_rooms = []
        if m.get('MeetingRooms') is not None:
            for k in m.get('MeetingRooms'):
                temp_model = ListEventsResponseBodyEventsMeetingRooms()
                self.meeting_rooms.append(temp_model.from_map(k))
        if m.get('OnlineMeetingInfo') is not None:
            temp_model = ListEventsResponseBodyEventsOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['OnlineMeetingInfo'])
        if m.get('Organizer') is not None:
            temp_model = ListEventsResponseBodyEventsOrganizer()
            self.organizer = temp_model.from_map(m['Organizer'])
        if m.get('OriginStart') is not None:
            temp_model = ListEventsResponseBodyEventsOriginStart()
            self.origin_start = temp_model.from_map(m['OriginStart'])
        if m.get('Recurrence') is not None:
            temp_model = ListEventsResponseBodyEventsRecurrence()
            self.recurrence = temp_model.from_map(m['Recurrence'])
        self.reminders = []
        if m.get('Reminders') is not None:
            for k in m.get('Reminders'):
                temp_model = ListEventsResponseBodyEventsReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('RichTextDescription') is not None:
            temp_model = ListEventsResponseBodyEventsRichTextDescription()
            self.rich_text_description = temp_model.from_map(m['RichTextDescription'])
        if m.get('SeriesMasterId') is not None:
            self.series_master_id = m.get('SeriesMasterId')
        if m.get('Start') is not None:
            temp_model = ListEventsResponseBodyEventsStart()
            self.start = temp_model.from_map(m['Start'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ListEventsResponseBody(TeaModel):
    def __init__(self, events=None, next_token=None, request_id=None, sync_token=None):
        self.events = events  # type: list[ListEventsResponseBodyEvents]
        self.next_token = next_token  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.sync_token = sync_token  # type: str

    def validate(self):
        if self.events:
            for k in self.events:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListEventsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['events'] = []
        if self.events is not None:
            for k in self.events:
                result['events'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.sync_token is not None:
            result['syncToken'] = self.sync_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.events = []
        if m.get('events') is not None:
            for k in m.get('events'):
                temp_model = ListEventsResponseBodyEvents()
                self.events.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('syncToken') is not None:
            self.sync_token = m.get('syncToken')
        return self


class ListEventsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListEventsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListEventsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEventsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventsViewHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListEventsViewHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListEventsViewHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListEventsViewHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListEventsViewHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListEventsViewShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListEventsViewRequest(TeaModel):
    def __init__(self, calendar_id=None, max_attendees=None, max_results=None, next_token=None, time_max=None,
                 time_min=None):
        self.calendar_id = calendar_id  # type: str
        self.max_attendees = max_attendees  # type: int
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.time_max = time_max  # type: str
        self.time_min = time_min  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.max_attendees is not None:
            result['MaxAttendees'] = self.max_attendees
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.time_max is not None:
            result['TimeMax'] = self.time_max
        if self.time_min is not None:
            result['TimeMin'] = self.time_min
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('MaxAttendees') is not None:
            self.max_attendees = m.get('MaxAttendees')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('TimeMax') is not None:
            self.time_max = m.get('TimeMax')
        if m.get('TimeMin') is not None:
            self.time_min = m.get('TimeMin')
        return self


class ListEventsViewResponseBodyEventsAttendees(TeaModel):
    def __init__(self, display_name=None, id=None, is_optional=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.is_optional = is_optional  # type: bool
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsAttendees, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.is_optional is not None:
            result['IsOptional'] = self.is_optional
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsOptional') is not None:
            self.is_optional = m.get('IsOptional')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class ListEventsViewResponseBodyEventsCategories(TeaModel):
    def __init__(self, display_name=None):
        self.display_name = display_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsCategories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        return self


class ListEventsViewResponseBodyEventsEnd(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties(TeaModel):
    def __init__(self, belong_corp_id=None, source_open_cid=None):
        self.belong_corp_id = belong_corp_id  # type: str
        self.source_open_cid = source_open_cid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.belong_corp_id is not None:
            result['BelongCorpId'] = self.belong_corp_id
        if self.source_open_cid is not None:
            result['SourceOpenCid'] = self.source_open_cid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BelongCorpId') is not None:
            self.belong_corp_id = m.get('BelongCorpId')
        if m.get('SourceOpenCid') is not None:
            self.source_open_cid = m.get('SourceOpenCid')
        return self


class ListEventsViewResponseBodyEventsExtendedProperties(TeaModel):
    def __init__(self, shared_properties=None):
        self.shared_properties = shared_properties  # type: ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties

    def validate(self):
        if self.shared_properties:
            self.shared_properties.validate()

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsExtendedProperties, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.shared_properties is not None:
            result['SharedProperties'] = self.shared_properties.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SharedProperties') is not None:
            temp_model = ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties()
            self.shared_properties = temp_model.from_map(m['SharedProperties'])
        return self


class ListEventsViewResponseBodyEventsLocation(TeaModel):
    def __init__(self, display_name=None, meeting_rooms=None):
        self.display_name = display_name  # type: str
        self.meeting_rooms = meeting_rooms  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['MeetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('MeetingRooms') is not None:
            self.meeting_rooms = m.get('MeetingRooms')
        return self


class ListEventsViewResponseBodyEventsMeetingRooms(TeaModel):
    def __init__(self, display_name=None, response_status=None, room_id=None):
        self.display_name = display_name  # type: str
        self.response_status = response_status  # type: str
        self.room_id = room_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsMeetingRooms, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        return self


class ListEventsViewResponseBodyEventsOnlineMeetingInfo(TeaModel):
    def __init__(self, conference_id=None, extra_info=None, type=None, url=None):
        self.conference_id = conference_id  # type: str
        self.extra_info = extra_info  # type: dict[str, any]
        self.type = type  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsOnlineMeetingInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.extra_info is not None:
            result['ExtraInfo'] = self.extra_info
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('ExtraInfo') is not None:
            self.extra_info = m.get('ExtraInfo')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class ListEventsViewResponseBodyEventsOrganizer(TeaModel):
    def __init__(self, display_name=None, id=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsOrganizer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class ListEventsViewResponseBodyEventsOriginStart(TeaModel):
    def __init__(self, date_time=None):
        self.date_time = date_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsOriginStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        return self


class ListEventsViewResponseBodyEventsRecurrencePattern(TeaModel):
    def __init__(self, day_of_month=None, days_of_week=None, index=None, interval=None, type=None):
        self.day_of_month = day_of_month  # type: int
        self.days_of_week = days_of_week  # type: str
        self.index = index  # type: str
        self.interval = interval  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsRecurrencePattern, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['DayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['DaysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['Index'] = self.index
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DayOfMonth') is not None:
            self.day_of_month = m.get('DayOfMonth')
        if m.get('DaysOfWeek') is not None:
            self.days_of_week = m.get('DaysOfWeek')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListEventsViewResponseBodyEventsRecurrenceRange(TeaModel):
    def __init__(self, end_date=None, number_of_occurrences=None, type=None):
        self.end_date = end_date  # type: str
        self.number_of_occurrences = number_of_occurrences  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsRecurrenceRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['NumberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('NumberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('NumberOfOccurrences')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListEventsViewResponseBodyEventsRecurrence(TeaModel):
    def __init__(self, pattern=None, range=None):
        self.pattern = pattern  # type: ListEventsViewResponseBodyEventsRecurrencePattern
        self.range = range  # type: ListEventsViewResponseBodyEventsRecurrenceRange

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsRecurrence, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['Pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['Range'] = self.range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Pattern') is not None:
            temp_model = ListEventsViewResponseBodyEventsRecurrencePattern()
            self.pattern = temp_model.from_map(m['Pattern'])
        if m.get('Range') is not None:
            temp_model = ListEventsViewResponseBodyEventsRecurrenceRange()
            self.range = temp_model.from_map(m['Range'])
        return self


class ListEventsViewResponseBodyEventsRichTextDescription(TeaModel):
    def __init__(self, text=None):
        self.text = text  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsRichTextDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.text is not None:
            result['Text'] = self.text
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Text') is not None:
            self.text = m.get('Text')
        return self


class ListEventsViewResponseBodyEventsStart(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEventsStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class ListEventsViewResponseBodyEvents(TeaModel):
    def __init__(self, attendees=None, categories=None, create_time=None, description=None, end=None,
                 extended_properties=None, id=None, is_all_day=None, location=None, meeting_rooms=None, online_meeting_info=None,
                 organizer=None, origin_start=None, recurrence=None, rich_text_description=None, series_master_id=None,
                 start=None, status=None, summary=None, update_time=None):
        self.attendees = attendees  # type: list[ListEventsViewResponseBodyEventsAttendees]
        self.categories = categories  # type: list[ListEventsViewResponseBodyEventsCategories]
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.end = end  # type: ListEventsViewResponseBodyEventsEnd
        self.extended_properties = extended_properties  # type: ListEventsViewResponseBodyEventsExtendedProperties
        self.id = id  # type: str
        self.is_all_day = is_all_day  # type: bool
        self.location = location  # type: ListEventsViewResponseBodyEventsLocation
        self.meeting_rooms = meeting_rooms  # type: list[ListEventsViewResponseBodyEventsMeetingRooms]
        self.online_meeting_info = online_meeting_info  # type: ListEventsViewResponseBodyEventsOnlineMeetingInfo
        self.organizer = organizer  # type: ListEventsViewResponseBodyEventsOrganizer
        self.origin_start = origin_start  # type: ListEventsViewResponseBodyEventsOriginStart
        self.recurrence = recurrence  # type: ListEventsViewResponseBodyEventsRecurrence
        self.rich_text_description = rich_text_description  # type: ListEventsViewResponseBodyEventsRichTextDescription
        self.series_master_id = series_master_id  # type: str
        self.start = start  # type: ListEventsViewResponseBodyEventsStart
        self.status = status  # type: str
        self.summary = summary  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.extended_properties:
            self.extended_properties.validate()
        if self.location:
            self.location.validate()
        if self.meeting_rooms:
            for k in self.meeting_rooms:
                if k:
                    k.validate()
        if self.online_meeting_info:
            self.online_meeting_info.validate()
        if self.organizer:
            self.organizer.validate()
        if self.origin_start:
            self.origin_start.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.rich_text_description:
            self.rich_text_description.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super(ListEventsViewResponseBodyEvents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['Attendees'].append(k.to_map() if k else None)
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.end is not None:
            result['End'] = self.end.to_map()
        if self.extended_properties is not None:
            result['ExtendedProperties'] = self.extended_properties.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.is_all_day is not None:
            result['IsAllDay'] = self.is_all_day
        if self.location is not None:
            result['Location'] = self.location.to_map()
        result['MeetingRooms'] = []
        if self.meeting_rooms is not None:
            for k in self.meeting_rooms:
                result['MeetingRooms'].append(k.to_map() if k else None)
        if self.online_meeting_info is not None:
            result['OnlineMeetingInfo'] = self.online_meeting_info.to_map()
        if self.organizer is not None:
            result['Organizer'] = self.organizer.to_map()
        if self.origin_start is not None:
            result['OriginStart'] = self.origin_start.to_map()
        if self.recurrence is not None:
            result['Recurrence'] = self.recurrence.to_map()
        if self.rich_text_description is not None:
            result['RichTextDescription'] = self.rich_text_description.to_map()
        if self.series_master_id is not None:
            result['SeriesMasterId'] = self.series_master_id
        if self.start is not None:
            result['Start'] = self.start.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.summary is not None:
            result['Summary'] = self.summary
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees = []
        if m.get('Attendees') is not None:
            for k in m.get('Attendees'):
                temp_model = ListEventsViewResponseBodyEventsAttendees()
                self.attendees.append(temp_model.from_map(k))
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = ListEventsViewResponseBodyEventsCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('End') is not None:
            temp_model = ListEventsViewResponseBodyEventsEnd()
            self.end = temp_model.from_map(m['End'])
        if m.get('ExtendedProperties') is not None:
            temp_model = ListEventsViewResponseBodyEventsExtendedProperties()
            self.extended_properties = temp_model.from_map(m['ExtendedProperties'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAllDay') is not None:
            self.is_all_day = m.get('IsAllDay')
        if m.get('Location') is not None:
            temp_model = ListEventsViewResponseBodyEventsLocation()
            self.location = temp_model.from_map(m['Location'])
        self.meeting_rooms = []
        if m.get('MeetingRooms') is not None:
            for k in m.get('MeetingRooms'):
                temp_model = ListEventsViewResponseBodyEventsMeetingRooms()
                self.meeting_rooms.append(temp_model.from_map(k))
        if m.get('OnlineMeetingInfo') is not None:
            temp_model = ListEventsViewResponseBodyEventsOnlineMeetingInfo()
            self.online_meeting_info = temp_model.from_map(m['OnlineMeetingInfo'])
        if m.get('Organizer') is not None:
            temp_model = ListEventsViewResponseBodyEventsOrganizer()
            self.organizer = temp_model.from_map(m['Organizer'])
        if m.get('OriginStart') is not None:
            temp_model = ListEventsViewResponseBodyEventsOriginStart()
            self.origin_start = temp_model.from_map(m['OriginStart'])
        if m.get('Recurrence') is not None:
            temp_model = ListEventsViewResponseBodyEventsRecurrence()
            self.recurrence = temp_model.from_map(m['Recurrence'])
        if m.get('RichTextDescription') is not None:
            temp_model = ListEventsViewResponseBodyEventsRichTextDescription()
            self.rich_text_description = temp_model.from_map(m['RichTextDescription'])
        if m.get('SeriesMasterId') is not None:
            self.series_master_id = m.get('SeriesMasterId')
        if m.get('Start') is not None:
            temp_model = ListEventsViewResponseBodyEventsStart()
            self.start = temp_model.from_map(m['Start'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ListEventsViewResponseBody(TeaModel):
    def __init__(self, events=None, next_token=None, request_id=None):
        self.events = events  # type: list[ListEventsViewResponseBodyEvents]
        self.next_token = next_token  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.events:
            for k in self.events:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListEventsViewResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['events'] = []
        if self.events is not None:
            for k in self.events:
                result['events'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.events = []
        if m.get('events') is not None:
            for k in m.get('events'):
                temp_model = ListEventsViewResponseBodyEvents()
                self.events.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class ListEventsViewResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListEventsViewResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListEventsViewResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEventsViewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListFormRemarksHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListFormRemarksHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListFormRemarksHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListFormRemarksHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListFormRemarksHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListFormRemarksHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListFormRemarksShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListFormRemarksShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListFormRemarksRequest(TeaModel):
    def __init__(self, app_type=None, form_instance_id_list=None, form_uuid=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_instance_id_list = form_instance_id_list  # type: list[str]
        self.form_uuid = form_uuid  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListFormRemarksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_instance_id_list is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class ListFormRemarksShrinkRequest(TeaModel):
    def __init__(self, app_type=None, form_instance_id_list_shrink=None, form_uuid=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_instance_id_list_shrink = form_instance_id_list_shrink  # type: str
        self.form_uuid = form_uuid  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListFormRemarksShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_instance_id_list_shrink is not None:
            result['FormInstanceIdList'] = self.form_instance_id_list_shrink
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormInstanceIdList') is not None:
            self.form_instance_id_list_shrink = m.get('FormInstanceIdList')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class ListFormRemarksResponseBody(TeaModel):
    def __init__(self, form_remark_vo_map=None, request_id=None, vendor_request_id=None, vendor_type=None):
        self.form_remark_vo_map = form_remark_vo_map  # type: dict[str, any]
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListFormRemarksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.form_remark_vo_map is not None:
            result['formRemarkVoMap'] = self.form_remark_vo_map
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('formRemarkVoMap') is not None:
            self.form_remark_vo_map = m.get('formRemarkVoMap')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class ListFormRemarksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListFormRemarksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListFormRemarksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListFormRemarksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNavigationByFormTypeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNavigationByFormTypeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListNavigationByFormTypeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListNavigationByFormTypeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListNavigationByFormTypeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListNavigationByFormTypeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListNavigationByFormTypeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNavigationByFormTypeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListNavigationByFormTypeRequest(TeaModel):
    def __init__(self, app_type=None, form_type=None, language=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_type = form_type  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNavigationByFormTypeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_type is not None:
            result['FormType'] = self.form_type
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormType') is not None:
            self.form_type = m.get('FormType')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class ListNavigationByFormTypeResponseBodyResultTitle(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNavigationByFormTypeResponseBodyResultTitle, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListNavigationByFormTypeResponseBodyResult(TeaModel):
    def __init__(self, form_uuid=None, process_code=None, title=None):
        self.form_uuid = form_uuid  # type: str
        self.process_code = process_code  # type: str
        self.title = title  # type: ListNavigationByFormTypeResponseBodyResultTitle

    def validate(self):
        if self.title:
            self.title.validate()

    def to_map(self):
        _map = super(ListNavigationByFormTypeResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.process_code is not None:
            result['ProcessCode'] = self.process_code
        if self.title is not None:
            result['Title'] = self.title.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('ProcessCode') is not None:
            self.process_code = m.get('ProcessCode')
        if m.get('Title') is not None:
            temp_model = ListNavigationByFormTypeResponseBodyResultTitle()
            self.title = temp_model.from_map(m['Title'])
        return self


class ListNavigationByFormTypeResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: list[ListNavigationByFormTypeResponseBodyResult]
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListNavigationByFormTypeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = ListNavigationByFormTypeResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class ListNavigationByFormTypeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListNavigationByFormTypeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListNavigationByFormTypeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNavigationByFormTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNodesHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNodesHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListNodesHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListNodesHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListNodesHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListNodesHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListNodesShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNodesShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListNodesRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNodesRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class ListNodesRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, parent_node_id=None, tenant_context=None,
                 with_permission_role=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.parent_node_id = parent_node_id  # type: str
        self.tenant_context = tenant_context  # type: ListNodesRequestTenantContext
        self.with_permission_role = with_permission_role  # type: bool

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(ListNodesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.parent_node_id is not None:
            result['ParentNodeId'] = self.parent_node_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('ParentNodeId') is not None:
            self.parent_node_id = m.get('ParentNodeId')
        if m.get('TenantContext') is not None:
            temp_model = ListNodesRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        return self


class ListNodesShrinkRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, parent_node_id=None, tenant_context_shrink=None,
                 with_permission_role=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.parent_node_id = parent_node_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.with_permission_role = with_permission_role  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNodesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.parent_node_id is not None:
            result['ParentNodeId'] = self.parent_node_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('ParentNodeId') is not None:
            self.parent_node_id = m.get('ParentNodeId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        return self


class ListNodesResponseBodyNodesStatisticalInfo(TeaModel):
    def __init__(self, word_count=None):
        self.word_count = word_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNodesResponseBodyNodesStatisticalInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.word_count is not None:
            result['WordCount'] = self.word_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WordCount') is not None:
            self.word_count = m.get('WordCount')
        return self


class ListNodesResponseBodyNodes(TeaModel):
    def __init__(self, category=None, create_time=None, creator_id=None, extension=None, has_children=None,
                 modified_time=None, modifier_id=None, name=None, node_id=None, permission_role=None, size=None,
                 statistical_info=None, type=None, url=None, workspace_id=None):
        self.category = category  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.extension = extension  # type: str
        self.has_children = has_children  # type: bool
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.node_id = node_id  # type: str
        self.permission_role = permission_role  # type: str
        self.size = size  # type: long
        self.statistical_info = statistical_info  # type: ListNodesResponseBodyNodesStatisticalInfo
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.statistical_info:
            self.statistical_info.validate()

    def to_map(self):
        _map = super(ListNodesResponseBodyNodes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.has_children is not None:
            result['HasChildren'] = self.has_children
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.size is not None:
            result['Size'] = self.size
        if self.statistical_info is not None:
            result['StatisticalInfo'] = self.statistical_info.to_map()
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('HasChildren') is not None:
            self.has_children = m.get('HasChildren')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StatisticalInfo') is not None:
            temp_model = ListNodesResponseBodyNodesStatisticalInfo()
            self.statistical_info = temp_model.from_map(m['StatisticalInfo'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListNodesResponseBody(TeaModel):
    def __init__(self, next_token=None, nodes=None, request_id=None):
        self.next_token = next_token  # type: str
        self.nodes = nodes  # type: list[ListNodesResponseBodyNodes]
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.nodes:
            for k in self.nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListNodesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        result['nodes'] = []
        if self.nodes is not None:
            for k in self.nodes:
                result['nodes'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        self.nodes = []
        if m.get('nodes') is not None:
            for k in m.get('nodes'):
                temp_model = ListNodesResponseBodyNodes()
                self.nodes.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class ListNodesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListNodesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListNodesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListReportHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReportHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListReportHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListReportHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListReportHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListReportHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListReportShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReportShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListReportRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReportRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class ListReportRequest(TeaModel):
    def __init__(self, cursor=None, end_time=None, modified_end_time=None, modified_start_time=None, size=None,
                 start_time=None, template_name=None, tenant_context=None):
        self.cursor = cursor  # type: long
        self.end_time = end_time  # type: long
        self.modified_end_time = modified_end_time  # type: long
        self.modified_start_time = modified_start_time  # type: long
        self.size = size  # type: long
        self.start_time = start_time  # type: long
        self.template_name = template_name  # type: str
        self.tenant_context = tenant_context  # type: ListReportRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(ListReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cursor is not None:
            result['Cursor'] = self.cursor
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.modified_end_time is not None:
            result['ModifiedEndTime'] = self.modified_end_time
        if self.modified_start_time is not None:
            result['ModifiedStartTime'] = self.modified_start_time
        if self.size is not None:
            result['Size'] = self.size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cursor') is not None:
            self.cursor = m.get('Cursor')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ModifiedEndTime') is not None:
            self.modified_end_time = m.get('ModifiedEndTime')
        if m.get('ModifiedStartTime') is not None:
            self.modified_start_time = m.get('ModifiedStartTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TenantContext') is not None:
            temp_model = ListReportRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class ListReportShrinkRequest(TeaModel):
    def __init__(self, cursor=None, end_time=None, modified_end_time=None, modified_start_time=None, size=None,
                 start_time=None, template_name=None, tenant_context_shrink=None):
        self.cursor = cursor  # type: long
        self.end_time = end_time  # type: long
        self.modified_end_time = modified_end_time  # type: long
        self.modified_start_time = modified_start_time  # type: long
        self.size = size  # type: long
        self.start_time = start_time  # type: long
        self.template_name = template_name  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReportShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cursor is not None:
            result['Cursor'] = self.cursor
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.modified_end_time is not None:
            result['ModifiedEndTime'] = self.modified_end_time
        if self.modified_start_time is not None:
            result['ModifiedStartTime'] = self.modified_start_time
        if self.size is not None:
            result['Size'] = self.size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cursor') is not None:
            self.cursor = m.get('Cursor')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ModifiedEndTime') is not None:
            self.modified_end_time = m.get('ModifiedEndTime')
        if m.get('ModifiedStartTime') is not None:
            self.modified_start_time = m.get('ModifiedStartTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class ListReportResponseBodyDataListContents(TeaModel):
    def __init__(self, key=None, sort=None, type=None, value=None):
        self.key = key  # type: str
        self.sort = sort  # type: str
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReportResponseBodyDataListContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListReportResponseBodyDataList(TeaModel):
    def __init__(self, contents=None, create_time=None, creator_id=None, creator_name=None, dept_name=None,
                 images=None, latitude=None, longitude=None, modified_time=None, remark=None, report_id=None,
                 template_name=None):
        self.contents = contents  # type: list[ListReportResponseBodyDataListContents]
        self.create_time = create_time  # type: long
        self.creator_id = creator_id  # type: str
        self.creator_name = creator_name  # type: str
        self.dept_name = dept_name  # type: str
        self.images = images  # type: list[str]
        self.latitude = latitude  # type: str
        self.longitude = longitude  # type: str
        self.modified_time = modified_time  # type: long
        self.remark = remark  # type: str
        self.report_id = report_id  # type: str
        self.template_name = template_name  # type: str

    def validate(self):
        if self.contents:
            for k in self.contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListReportResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Contents'] = []
        if self.contents is not None:
            for k in self.contents:
                result['Contents'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.images is not None:
            result['Images'] = self.images
        if self.latitude is not None:
            result['Latitude'] = self.latitude
        if self.longitude is not None:
            result['Longitude'] = self.longitude
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contents = []
        if m.get('Contents') is not None:
            for k in m.get('Contents'):
                temp_model = ListReportResponseBodyDataListContents()
                self.contents.append(temp_model.from_map(k))
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('Images') is not None:
            self.images = m.get('Images')
        if m.get('Latitude') is not None:
            self.latitude = m.get('Latitude')
        if m.get('Longitude') is not None:
            self.longitude = m.get('Longitude')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class ListReportResponseBody(TeaModel):
    def __init__(self, data_list=None, has_more=None, next_cursor=None, request_id=None, size=None):
        self.data_list = data_list  # type: list[ListReportResponseBodyDataList]
        self.has_more = has_more  # type: bool
        self.next_cursor = next_cursor  # type: long
        # requestId
        self.request_id = request_id  # type: str
        self.size = size  # type: long

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['dataList'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['dataList'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data_list = []
        if m.get('dataList') is not None:
            for k in m.get('dataList'):
                temp_model = ListReportResponseBodyDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class ListReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTableDataByFormInstanceIdTableIdHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTableDataByFormInstanceIdTableIdHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListTableDataByFormInstanceIdTableIdHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListTableDataByFormInstanceIdTableIdHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListTableDataByFormInstanceIdTableIdHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListTableDataByFormInstanceIdTableIdHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListTableDataByFormInstanceIdTableIdShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTableDataByFormInstanceIdTableIdShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListTableDataByFormInstanceIdTableIdRequest(TeaModel):
    def __init__(self, app_type=None, form_instance_id=None, form_uuid=None, page_number=None, page_size=None,
                 system_token=None, table_field_id=None):
        self.app_type = app_type  # type: str
        self.form_instance_id = form_instance_id  # type: str
        self.form_uuid = form_uuid  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.system_token = system_token  # type: str
        self.table_field_id = table_field_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTableDataByFormInstanceIdTableIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.table_field_id is not None:
            result['TableFieldId'] = self.table_field_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('TableFieldId') is not None:
            self.table_field_id = m.get('TableFieldId')
        return self


class ListTableDataByFormInstanceIdTableIdResponseBody(TeaModel):
    def __init__(self, data=None, page_number=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.data = data  # type: list[str]
        self.page_number = page_number  # type: long
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: long
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTableDataByFormInstanceIdTableIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class ListTableDataByFormInstanceIdTableIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListTableDataByFormInstanceIdTableIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTableDataByFormInstanceIdTableIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTableDataByFormInstanceIdTableIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListWorkspacesHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListWorkspacesHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ListWorkspacesHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ListWorkspacesHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ListWorkspacesHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ListWorkspacesHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ListWorkspacesShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListWorkspacesShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ListWorkspacesRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListWorkspacesRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class ListWorkspacesRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, order_by=None, team_id=None, tenant_context=None,
                 with_permission_role=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.team_id = team_id  # type: str
        self.tenant_context = tenant_context  # type: ListWorkspacesRequestTenantContext
        self.with_permission_role = with_permission_role  # type: bool

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(ListWorkspacesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        if m.get('TenantContext') is not None:
            temp_model = ListWorkspacesRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        return self


class ListWorkspacesShrinkRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, order_by=None, team_id=None, tenant_context_shrink=None,
                 with_permission_role=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.team_id = team_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.with_permission_role = with_permission_role  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListWorkspacesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.with_permission_role is not None:
            result['WithPermissionRole'] = self.with_permission_role
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WithPermissionRole') is not None:
            self.with_permission_role = m.get('WithPermissionRole')
        return self


class ListWorkspacesResponseBodyWorkspacesIcon(TeaModel):
    def __init__(self, type=None, value=None):
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListWorkspacesResponseBodyWorkspacesIcon, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListWorkspacesResponseBodyWorkspaces(TeaModel):
    def __init__(self, corp_id=None, cover=None, create_time=None, creator_id=None, description=None, icon=None,
                 modified_time=None, modifier_id=None, name=None, permission_role=None, root_node_id=None, team_id=None, type=None,
                 url=None, workspace_id=None):
        self.corp_id = corp_id  # type: str
        self.cover = cover  # type: str
        self.create_time = create_time  # type: str
        self.creator_id = creator_id  # type: str
        self.description = description  # type: str
        self.icon = icon  # type: ListWorkspacesResponseBodyWorkspacesIcon
        self.modified_time = modified_time  # type: str
        self.modifier_id = modifier_id  # type: str
        self.name = name  # type: str
        self.permission_role = permission_role  # type: str
        self.root_node_id = root_node_id  # type: str
        self.team_id = team_id  # type: str
        self.type = type  # type: str
        self.url = url  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.icon:
            self.icon.validate()

    def to_map(self):
        _map = super(ListWorkspacesResponseBodyWorkspaces, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.cover is not None:
            result['Cover'] = self.cover
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.description is not None:
            result['Description'] = self.description
        if self.icon is not None:
            result['Icon'] = self.icon.to_map()
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.modifier_id is not None:
            result['ModifierId'] = self.modifier_id
        if self.name is not None:
            result['Name'] = self.name
        if self.permission_role is not None:
            result['PermissionRole'] = self.permission_role
        if self.root_node_id is not None:
            result['RootNodeId'] = self.root_node_id
        if self.team_id is not None:
            result['TeamId'] = self.team_id
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('Cover') is not None:
            self.cover = m.get('Cover')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Icon') is not None:
            temp_model = ListWorkspacesResponseBodyWorkspacesIcon()
            self.icon = temp_model.from_map(m['Icon'])
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ModifierId') is not None:
            self.modifier_id = m.get('ModifierId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PermissionRole') is not None:
            self.permission_role = m.get('PermissionRole')
        if m.get('RootNodeId') is not None:
            self.root_node_id = m.get('RootNodeId')
        if m.get('TeamId') is not None:
            self.team_id = m.get('TeamId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListWorkspacesResponseBody(TeaModel):
    def __init__(self, next_token=None, request_id=None, workspaces=None):
        self.next_token = next_token  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.workspaces = workspaces  # type: list[ListWorkspacesResponseBodyWorkspaces]

    def validate(self):
        if self.workspaces:
            for k in self.workspaces:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListWorkspacesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['workspaces'] = []
        if self.workspaces is not None:
            for k in self.workspaces:
                result['workspaces'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.workspaces = []
        if m.get('workspaces') is not None:
            for k in m.get('workspaces'):
                temp_model = ListWorkspacesResponseBodyWorkspaces()
                self.workspaces.append(temp_model.from_map(k))
        return self


class ListWorkspacesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListWorkspacesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListWorkspacesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListWorkspacesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PatchEventHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class PatchEventHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: PatchEventHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(PatchEventHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = PatchEventHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class PatchEventShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class PatchEventRequestAttendees(TeaModel):
    def __init__(self, id=None, is_optional=None):
        self.id = id  # type: str
        self.is_optional = is_optional  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventRequestAttendees, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_optional is not None:
            result['isOptional'] = self.is_optional
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isOptional') is not None:
            self.is_optional = m.get('isOptional')
        return self


class PatchEventRequestEnd(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventRequestEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class PatchEventRequestLocation(TeaModel):
    def __init__(self, display_name=None):
        self.display_name = display_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventRequestLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['displayName'] = self.display_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('displayName') is not None:
            self.display_name = m.get('displayName')
        return self


class PatchEventRequestRecurrencePattern(TeaModel):
    def __init__(self, day_of_month=None, days_of_week=None, index=None, interval=None, type=None):
        self.day_of_month = day_of_month  # type: int
        self.days_of_week = days_of_week  # type: str
        self.index = index  # type: str
        self.interval = interval  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventRequestRecurrencePattern, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['dayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['daysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['index'] = self.index
        if self.interval is not None:
            result['interval'] = self.interval
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dayOfMonth') is not None:
            self.day_of_month = m.get('dayOfMonth')
        if m.get('daysOfWeek') is not None:
            self.days_of_week = m.get('daysOfWeek')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('interval') is not None:
            self.interval = m.get('interval')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class PatchEventRequestRecurrenceRange(TeaModel):
    def __init__(self, end_date=None, number_of_occurrences=None, type=None):
        self.end_date = end_date  # type: str
        self.number_of_occurrences = number_of_occurrences  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventRequestRecurrenceRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['numberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('numberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('numberOfOccurrences')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class PatchEventRequestRecurrence(TeaModel):
    def __init__(self, pattern=None, range=None):
        self.pattern = pattern  # type: PatchEventRequestRecurrencePattern
        self.range = range  # type: PatchEventRequestRecurrenceRange

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super(PatchEventRequestRecurrence, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['range'] = self.range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('pattern') is not None:
            temp_model = PatchEventRequestRecurrencePattern()
            self.pattern = temp_model.from_map(m['pattern'])
        if m.get('range') is not None:
            temp_model = PatchEventRequestRecurrenceRange()
            self.range = temp_model.from_map(m['range'])
        return self


class PatchEventRequestReminders(TeaModel):
    def __init__(self, method=None, minutes=None):
        self.method = method  # type: str
        self.minutes = minutes  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventRequestReminders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['method'] = self.method
        if self.minutes is not None:
            result['minutes'] = self.minutes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('method') is not None:
            self.method = m.get('method')
        if m.get('minutes') is not None:
            self.minutes = m.get('minutes')
        return self


class PatchEventRequestStart(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventRequestStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        if self.date_time is not None:
            result['dateTime'] = self.date_time
        if self.time_zone is not None:
            result['timeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('dateTime') is not None:
            self.date_time = m.get('dateTime')
        if m.get('timeZone') is not None:
            self.time_zone = m.get('timeZone')
        return self


class PatchEventRequest(TeaModel):
    def __init__(self, attendees=None, calendar_id=None, description=None, end=None, event_id=None, extra=None,
                 is_all_day=None, location=None, recurrence=None, reminders=None, start=None, summary=None):
        self.attendees = attendees  # type: list[PatchEventRequestAttendees]
        self.calendar_id = calendar_id  # type: str
        self.description = description  # type: str
        self.end = end  # type: PatchEventRequestEnd
        self.event_id = event_id  # type: str
        self.extra = extra  # type: dict[str, str]
        self.is_all_day = is_all_day  # type: bool
        self.location = location  # type: PatchEventRequestLocation
        self.recurrence = recurrence  # type: PatchEventRequestRecurrence
        self.reminders = reminders  # type: list[PatchEventRequestReminders]
        self.start = start  # type: PatchEventRequestStart
        self.summary = summary  # type: str

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super(PatchEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['Attendees'].append(k.to_map() if k else None)
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.description is not None:
            result['Description'] = self.description
        if self.end is not None:
            result['End'] = self.end.to_map()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.is_all_day is not None:
            result['IsAllDay'] = self.is_all_day
        if self.location is not None:
            result['Location'] = self.location.to_map()
        if self.recurrence is not None:
            result['Recurrence'] = self.recurrence.to_map()
        result['Reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['Reminders'].append(k.to_map() if k else None)
        if self.start is not None:
            result['Start'] = self.start.to_map()
        if self.summary is not None:
            result['Summary'] = self.summary
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees = []
        if m.get('Attendees') is not None:
            for k in m.get('Attendees'):
                temp_model = PatchEventRequestAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('End') is not None:
            temp_model = PatchEventRequestEnd()
            self.end = temp_model.from_map(m['End'])
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('IsAllDay') is not None:
            self.is_all_day = m.get('IsAllDay')
        if m.get('Location') is not None:
            temp_model = PatchEventRequestLocation()
            self.location = temp_model.from_map(m['Location'])
        if m.get('Recurrence') is not None:
            temp_model = PatchEventRequestRecurrence()
            self.recurrence = temp_model.from_map(m['Recurrence'])
        self.reminders = []
        if m.get('Reminders') is not None:
            for k in m.get('Reminders'):
                temp_model = PatchEventRequestReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('Start') is not None:
            temp_model = PatchEventRequestStart()
            self.start = temp_model.from_map(m['Start'])
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        return self


class PatchEventShrinkRequest(TeaModel):
    def __init__(self, attendees_shrink=None, calendar_id=None, description=None, end_shrink=None, event_id=None,
                 extra_shrink=None, is_all_day=None, location_shrink=None, recurrence_shrink=None, reminders_shrink=None,
                 start_shrink=None, summary=None):
        self.attendees_shrink = attendees_shrink  # type: str
        self.calendar_id = calendar_id  # type: str
        self.description = description  # type: str
        self.end_shrink = end_shrink  # type: str
        self.event_id = event_id  # type: str
        self.extra_shrink = extra_shrink  # type: str
        self.is_all_day = is_all_day  # type: bool
        self.location_shrink = location_shrink  # type: str
        self.recurrence_shrink = recurrence_shrink  # type: str
        self.reminders_shrink = reminders_shrink  # type: str
        self.start_shrink = start_shrink  # type: str
        self.summary = summary  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attendees_shrink is not None:
            result['Attendees'] = self.attendees_shrink
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.description is not None:
            result['Description'] = self.description
        if self.end_shrink is not None:
            result['End'] = self.end_shrink
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.extra_shrink is not None:
            result['Extra'] = self.extra_shrink
        if self.is_all_day is not None:
            result['IsAllDay'] = self.is_all_day
        if self.location_shrink is not None:
            result['Location'] = self.location_shrink
        if self.recurrence_shrink is not None:
            result['Recurrence'] = self.recurrence_shrink
        if self.reminders_shrink is not None:
            result['Reminders'] = self.reminders_shrink
        if self.start_shrink is not None:
            result['Start'] = self.start_shrink
        if self.summary is not None:
            result['Summary'] = self.summary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Attendees') is not None:
            self.attendees_shrink = m.get('Attendees')
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('End') is not None:
            self.end_shrink = m.get('End')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('Extra') is not None:
            self.extra_shrink = m.get('Extra')
        if m.get('IsAllDay') is not None:
            self.is_all_day = m.get('IsAllDay')
        if m.get('Location') is not None:
            self.location_shrink = m.get('Location')
        if m.get('Recurrence') is not None:
            self.recurrence_shrink = m.get('Recurrence')
        if m.get('Reminders') is not None:
            self.reminders_shrink = m.get('Reminders')
        if m.get('Start') is not None:
            self.start_shrink = m.get('Start')
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        return self


class PatchEventResponseBodyAttendees(TeaModel):
    def __init__(self, display_name=None, id=None, is_optional=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.is_optional = is_optional  # type: bool
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyAttendees, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.is_optional is not None:
            result['IsOptional'] = self.is_optional
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsOptional') is not None:
            self.is_optional = m.get('IsOptional')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class PatchEventResponseBodyEnd(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyEnd, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class PatchEventResponseBodyLocation(TeaModel):
    def __init__(self, display_name=None, meeting_rooms=None):
        self.display_name = display_name  # type: str
        self.meeting_rooms = meeting_rooms  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.meeting_rooms is not None:
            result['MeetingRooms'] = self.meeting_rooms
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('MeetingRooms') is not None:
            self.meeting_rooms = m.get('MeetingRooms')
        return self


class PatchEventResponseBodyOrganizer(TeaModel):
    def __init__(self, display_name=None, id=None, response_status=None, self_=None):
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.response_status = response_status  # type: str
        self.self = self_  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyOrganizer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.response_status is not None:
            result['ResponseStatus'] = self.response_status
        if self.self is not None:
            result['Self'] = self.self
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ResponseStatus') is not None:
            self.response_status = m.get('ResponseStatus')
        if m.get('Self') is not None:
            self.self = m.get('Self')
        return self


class PatchEventResponseBodyRecurrencePattern(TeaModel):
    def __init__(self, day_of_month=None, days_of_week=None, index=None, interval=None, type=None):
        self.day_of_month = day_of_month  # type: int
        self.days_of_week = days_of_week  # type: str
        self.index = index  # type: str
        self.interval = interval  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyRecurrencePattern, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_month is not None:
            result['DayOfMonth'] = self.day_of_month
        if self.days_of_week is not None:
            result['DaysOfWeek'] = self.days_of_week
        if self.index is not None:
            result['Index'] = self.index
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DayOfMonth') is not None:
            self.day_of_month = m.get('DayOfMonth')
        if m.get('DaysOfWeek') is not None:
            self.days_of_week = m.get('DaysOfWeek')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class PatchEventResponseBodyRecurrenceRange(TeaModel):
    def __init__(self, end_date=None, number_of_occurrences=None, type=None):
        self.end_date = end_date  # type: str
        self.number_of_occurrences = number_of_occurrences  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyRecurrenceRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.number_of_occurrences is not None:
            result['NumberOfOccurrences'] = self.number_of_occurrences
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('NumberOfOccurrences') is not None:
            self.number_of_occurrences = m.get('NumberOfOccurrences')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class PatchEventResponseBodyRecurrence(TeaModel):
    def __init__(self, pattern=None, range=None):
        self.pattern = pattern  # type: PatchEventResponseBodyRecurrencePattern
        self.range = range  # type: PatchEventResponseBodyRecurrenceRange

    def validate(self):
        if self.pattern:
            self.pattern.validate()
        if self.range:
            self.range.validate()

    def to_map(self):
        _map = super(PatchEventResponseBodyRecurrence, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.pattern is not None:
            result['Pattern'] = self.pattern.to_map()
        if self.range is not None:
            result['Range'] = self.range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Pattern') is not None:
            temp_model = PatchEventResponseBodyRecurrencePattern()
            self.pattern = temp_model.from_map(m['Pattern'])
        if m.get('Range') is not None:
            temp_model = PatchEventResponseBodyRecurrenceRange()
            self.range = temp_model.from_map(m['Range'])
        return self


class PatchEventResponseBodyReminders(TeaModel):
    def __init__(self, method=None, minutes=None):
        self.method = method  # type: str
        self.minutes = minutes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyReminders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.method is not None:
            result['Method'] = self.method
        if self.minutes is not None:
            result['Minutes'] = self.minutes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('Minutes') is not None:
            self.minutes = m.get('Minutes')
        return self


class PatchEventResponseBodyStart(TeaModel):
    def __init__(self, date=None, date_time=None, time_zone=None):
        self.date = date  # type: str
        self.date_time = date_time  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PatchEventResponseBodyStart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class PatchEventResponseBody(TeaModel):
    def __init__(self, attendees=None, create_time=None, description=None, end=None, id=None, is_all_day=None,
                 location=None, organizer=None, recurrence=None, reminders=None, request_id=None, start=None, summary=None,
                 update_time=None):
        self.attendees = attendees  # type: list[PatchEventResponseBodyAttendees]
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.end = end  # type: PatchEventResponseBodyEnd
        self.id = id  # type: str
        self.is_all_day = is_all_day  # type: bool
        self.location = location  # type: PatchEventResponseBodyLocation
        self.organizer = organizer  # type: PatchEventResponseBodyOrganizer
        self.recurrence = recurrence  # type: PatchEventResponseBodyRecurrence
        self.reminders = reminders  # type: list[PatchEventResponseBodyReminders]
        # requestId
        self.request_id = request_id  # type: str
        self.start = start  # type: PatchEventResponseBodyStart
        self.summary = summary  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.attendees:
            for k in self.attendees:
                if k:
                    k.validate()
        if self.end:
            self.end.validate()
        if self.location:
            self.location.validate()
        if self.organizer:
            self.organizer.validate()
        if self.recurrence:
            self.recurrence.validate()
        if self.reminders:
            for k in self.reminders:
                if k:
                    k.validate()
        if self.start:
            self.start.validate()

    def to_map(self):
        _map = super(PatchEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attendees'] = []
        if self.attendees is not None:
            for k in self.attendees:
                result['attendees'].append(k.to_map() if k else None)
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.end is not None:
            result['end'] = self.end.to_map()
        if self.id is not None:
            result['id'] = self.id
        if self.is_all_day is not None:
            result['isAllDay'] = self.is_all_day
        if self.location is not None:
            result['location'] = self.location.to_map()
        if self.organizer is not None:
            result['organizer'] = self.organizer.to_map()
        if self.recurrence is not None:
            result['recurrence'] = self.recurrence.to_map()
        result['reminders'] = []
        if self.reminders is not None:
            for k in self.reminders:
                result['reminders'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.start is not None:
            result['start'] = self.start.to_map()
        if self.summary is not None:
            result['summary'] = self.summary
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attendees = []
        if m.get('attendees') is not None:
            for k in m.get('attendees'):
                temp_model = PatchEventResponseBodyAttendees()
                self.attendees.append(temp_model.from_map(k))
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('end') is not None:
            temp_model = PatchEventResponseBodyEnd()
            self.end = temp_model.from_map(m['end'])
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isAllDay') is not None:
            self.is_all_day = m.get('isAllDay')
        if m.get('location') is not None:
            temp_model = PatchEventResponseBodyLocation()
            self.location = temp_model.from_map(m['location'])
        if m.get('organizer') is not None:
            temp_model = PatchEventResponseBodyOrganizer()
            self.organizer = temp_model.from_map(m['organizer'])
        if m.get('recurrence') is not None:
            temp_model = PatchEventResponseBodyRecurrence()
            self.recurrence = temp_model.from_map(m['recurrence'])
        self.reminders = []
        if m.get('reminders') is not None:
            for k in m.get('reminders'):
                temp_model = PatchEventResponseBodyReminders()
                self.reminders.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('start') is not None:
            temp_model = PatchEventResponseBodyStart()
            self.start = temp_model.from_map(m['start'])
        if m.get('summary') is not None:
            self.summary = m.get('summary')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class PatchEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PatchEventResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PatchEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PatchEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCloudRecordTextHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordTextHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryCloudRecordTextHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryCloudRecordTextHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryCloudRecordTextHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryCloudRecordTextHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryCloudRecordTextShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordTextShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryCloudRecordTextRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordTextRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryCloudRecordTextRequest(TeaModel):
    def __init__(self, direction=None, max_results=None, next_token=None, start_time=None, tenant_context=None,
                 conference_id=None):
        self.direction = direction  # type: str
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context = tenant_context  # type: QueryCloudRecordTextRequestTenantContext
        self.conference_id = conference_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryCloudRecordTextRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.direction is not None:
            result['Direction'] = self.direction
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Direction') is not None:
            self.direction = m.get('Direction')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            temp_model = QueryCloudRecordTextRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryCloudRecordTextShrinkRequest(TeaModel):
    def __init__(self, direction=None, max_results=None, next_token=None, start_time=None,
                 tenant_context_shrink=None, conference_id=None):
        self.direction = direction  # type: str
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.conference_id = conference_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordTextShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.direction is not None:
            result['Direction'] = self.direction
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Direction') is not None:
            self.direction = m.get('Direction')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList(TeaModel):
    def __init__(self, end_time=None, start_time=None, word=None, word_id=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.word = word  # type: str
        self.word_id = word_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.word is not None:
            result['Word'] = self.word
        if self.word_id is not None:
            result['WordId'] = self.word_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Word') is not None:
            self.word = m.get('Word')
        if m.get('WordId') is not None:
            self.word_id = m.get('WordId')
        return self


class QueryCloudRecordTextResponseBodyParagraphListSentenceList(TeaModel):
    def __init__(self, end_time=None, sentence=None, start_time=None, user_id=None, word_list=None):
        self.end_time = end_time  # type: long
        self.sentence = sentence  # type: str
        self.start_time = start_time  # type: long
        self.user_id = user_id  # type: str
        self.word_list = word_list  # type: list[QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList]

    def validate(self):
        if self.word_list:
            for k in self.word_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryCloudRecordTextResponseBodyParagraphListSentenceList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.sentence is not None:
            result['Sentence'] = self.sentence
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.user_id is not None:
            result['UserId'] = self.user_id
        result['WordList'] = []
        if self.word_list is not None:
            for k in self.word_list:
                result['WordList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Sentence') is not None:
            self.sentence = m.get('Sentence')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        self.word_list = []
        if m.get('WordList') is not None:
            for k in m.get('WordList'):
                temp_model = QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList()
                self.word_list.append(temp_model.from_map(k))
        return self


class QueryCloudRecordTextResponseBodyParagraphList(TeaModel):
    def __init__(self, end_time=None, next_ttoken=None, nick_name=None, paragraph=None, record_id=None,
                 sentence_list=None, start_time=None, status=None, user_id=None):
        self.end_time = end_time  # type: long
        self.next_ttoken = next_ttoken  # type: long
        self.nick_name = nick_name  # type: str
        self.paragraph = paragraph  # type: str
        self.record_id = record_id  # type: long
        self.sentence_list = sentence_list  # type: list[QueryCloudRecordTextResponseBodyParagraphListSentenceList]
        self.start_time = start_time  # type: long
        self.status = status  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        if self.sentence_list:
            for k in self.sentence_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryCloudRecordTextResponseBodyParagraphList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.next_ttoken is not None:
            result['NextTtoken'] = self.next_ttoken
        if self.nick_name is not None:
            result['NickName'] = self.nick_name
        if self.paragraph is not None:
            result['Paragraph'] = self.paragraph
        if self.record_id is not None:
            result['RecordId'] = self.record_id
        result['SentenceList'] = []
        if self.sentence_list is not None:
            for k in self.sentence_list:
                result['SentenceList'].append(k.to_map() if k else None)
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('NextTtoken') is not None:
            self.next_ttoken = m.get('NextTtoken')
        if m.get('NickName') is not None:
            self.nick_name = m.get('NickName')
        if m.get('Paragraph') is not None:
            self.paragraph = m.get('Paragraph')
        if m.get('RecordId') is not None:
            self.record_id = m.get('RecordId')
        self.sentence_list = []
        if m.get('SentenceList') is not None:
            for k in m.get('SentenceList'):
                temp_model = QueryCloudRecordTextResponseBodyParagraphListSentenceList()
                self.sentence_list.append(temp_model.from_map(k))
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryCloudRecordTextResponseBody(TeaModel):
    def __init__(self, has_more=None, paragraph_list=None, request_id=None):
        self.has_more = has_more  # type: bool
        self.paragraph_list = paragraph_list  # type: list[QueryCloudRecordTextResponseBodyParagraphList]
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.paragraph_list:
            for k in self.paragraph_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryCloudRecordTextResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        result['paragraphList'] = []
        if self.paragraph_list is not None:
            for k in self.paragraph_list:
                result['paragraphList'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        self.paragraph_list = []
        if m.get('paragraphList') is not None:
            for k in m.get('paragraphList'):
                temp_model = QueryCloudRecordTextResponseBodyParagraphList()
                self.paragraph_list.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class QueryCloudRecordTextResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryCloudRecordTextResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryCloudRecordTextResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCloudRecordTextResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCloudRecordVideoHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryCloudRecordVideoHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryCloudRecordVideoHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryCloudRecordVideoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryCloudRecordVideoHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryCloudRecordVideoShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryCloudRecordVideoRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryCloudRecordVideoRequest(TeaModel):
    def __init__(self, tenant_context=None, conference_id=None):
        self.tenant_context = tenant_context  # type: QueryCloudRecordVideoRequestTenantContext
        self.conference_id = conference_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryCloudRecordVideoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = QueryCloudRecordVideoRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryCloudRecordVideoShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, conference_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.conference_id = conference_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryCloudRecordVideoResponseBodyVideoList(TeaModel):
    def __init__(self, duration=None, end_time=None, file_size=None, media_id=None, record_id=None, record_type=None,
                 region_id=None, start_time=None, user_id=None):
        self.duration = duration  # type: long
        self.end_time = end_time  # type: long
        self.file_size = file_size  # type: long
        self.media_id = media_id  # type: str
        self.record_id = record_id  # type: str
        self.record_type = record_type  # type: long
        self.region_id = region_id  # type: str
        self.start_time = start_time  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoResponseBodyVideoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.media_id is not None:
            result['MediaId'] = self.media_id
        if self.record_id is not None:
            result['RecordId'] = self.record_id
        if self.record_type is not None:
            result['RecordType'] = self.record_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('MediaId') is not None:
            self.media_id = m.get('MediaId')
        if m.get('RecordId') is not None:
            self.record_id = m.get('RecordId')
        if m.get('RecordType') is not None:
            self.record_type = m.get('RecordType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryCloudRecordVideoResponseBody(TeaModel):
    def __init__(self, request_id=None, video_list=None):
        # requestId
        self.request_id = request_id  # type: str
        self.video_list = video_list  # type: list[QueryCloudRecordVideoResponseBodyVideoList]

    def validate(self):
        if self.video_list:
            for k in self.video_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryCloudRecordVideoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['videoList'] = []
        if self.video_list is not None:
            for k in self.video_list:
                result['videoList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.video_list = []
        if m.get('videoList') is not None:
            for k in m.get('videoList'):
                temp_model = QueryCloudRecordVideoResponseBodyVideoList()
                self.video_list.append(temp_model.from_map(k))
        return self


class QueryCloudRecordVideoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryCloudRecordVideoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryCloudRecordVideoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCloudRecordVideoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCloudRecordVideoPlayInfoHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryCloudRecordVideoPlayInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryCloudRecordVideoPlayInfoHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryCloudRecordVideoPlayInfoHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryCloudRecordVideoPlayInfoShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryCloudRecordVideoPlayInfoRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryCloudRecordVideoPlayInfoRequest(TeaModel):
    def __init__(self, conference_id=None, media_id=None, region_id=None, tenant_context=None):
        self.conference_id = conference_id  # type: str
        self.media_id = media_id  # type: str
        self.region_id = region_id  # type: str
        self.tenant_context = tenant_context  # type: QueryCloudRecordVideoPlayInfoRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.media_id is not None:
            result['MediaId'] = self.media_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('MediaId') is not None:
            self.media_id = m.get('MediaId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('TenantContext') is not None:
            temp_model = QueryCloudRecordVideoPlayInfoRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryCloudRecordVideoPlayInfoShrinkRequest(TeaModel):
    def __init__(self, conference_id=None, media_id=None, region_id=None, tenant_context_shrink=None):
        self.conference_id = conference_id  # type: str
        self.media_id = media_id  # type: str
        self.region_id = region_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.media_id is not None:
            result['MediaId'] = self.media_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('MediaId') is not None:
            self.media_id = m.get('MediaId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryCloudRecordVideoPlayInfoResponseBody(TeaModel):
    def __init__(self, duration=None, file_size=None, mp_4file_url=None, play_url=None, request_id=None, status=None):
        self.duration = duration  # type: long
        self.file_size = file_size  # type: long
        self.mp_4file_url = mp_4file_url  # type: str
        self.play_url = play_url  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.status = status  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.duration is not None:
            result['duration'] = self.duration
        if self.file_size is not None:
            result['fileSize'] = self.file_size
        if self.mp_4file_url is not None:
            result['mp4FileUrl'] = self.mp_4file_url
        if self.play_url is not None:
            result['playUrl'] = self.play_url
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('fileSize') is not None:
            self.file_size = m.get('fileSize')
        if m.get('mp4FileUrl') is not None:
            self.mp_4file_url = m.get('mp4FileUrl')
        if m.get('playUrl') is not None:
            self.play_url = m.get('playUrl')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class QueryCloudRecordVideoPlayInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryCloudRecordVideoPlayInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryCloudRecordVideoPlayInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCloudRecordVideoPlayInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryConferenceInfoHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceInfoHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryConferenceInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryConferenceInfoHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryConferenceInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryConferenceInfoHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryConferenceInfoShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceInfoShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryConferenceInfoRequest(TeaModel):
    def __init__(self, conference_id=None):
        self.conference_id = conference_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryConferenceInfoResponseBodyConfInfo(TeaModel):
    def __init__(self, active_num=None, attend_num=None, conf_duration=None, conference_id=None, creator_id=None,
                 creator_nick=None, end_time=None, external_link_url=None, invited_num=None, room_code=None, start_time=None,
                 status=None, title=None):
        self.active_num = active_num  # type: int
        self.attend_num = attend_num  # type: int
        self.conf_duration = conf_duration  # type: long
        self.conference_id = conference_id  # type: str
        self.creator_id = creator_id  # type: str
        self.creator_nick = creator_nick  # type: str
        self.end_time = end_time  # type: long
        self.external_link_url = external_link_url  # type: str
        self.invited_num = invited_num  # type: int
        self.room_code = room_code  # type: str
        self.start_time = start_time  # type: long
        self.status = status  # type: int
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceInfoResponseBodyConfInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_num is not None:
            result['ActiveNum'] = self.active_num
        if self.attend_num is not None:
            result['AttendNum'] = self.attend_num
        if self.conf_duration is not None:
            result['ConfDuration'] = self.conf_duration
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_nick is not None:
            result['CreatorNick'] = self.creator_nick
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.external_link_url is not None:
            result['ExternalLinkUrl'] = self.external_link_url
        if self.invited_num is not None:
            result['InvitedNum'] = self.invited_num
        if self.room_code is not None:
            result['RoomCode'] = self.room_code
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActiveNum') is not None:
            self.active_num = m.get('ActiveNum')
        if m.get('AttendNum') is not None:
            self.attend_num = m.get('AttendNum')
        if m.get('ConfDuration') is not None:
            self.conf_duration = m.get('ConfDuration')
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorNick') is not None:
            self.creator_nick = m.get('CreatorNick')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ExternalLinkUrl') is not None:
            self.external_link_url = m.get('ExternalLinkUrl')
        if m.get('InvitedNum') is not None:
            self.invited_num = m.get('InvitedNum')
        if m.get('RoomCode') is not None:
            self.room_code = m.get('RoomCode')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class QueryConferenceInfoResponseBody(TeaModel):
    def __init__(self, conf_info=None, request_id=None):
        self.conf_info = conf_info  # type: QueryConferenceInfoResponseBodyConfInfo
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.conf_info:
            self.conf_info.validate()

    def to_map(self):
        _map = super(QueryConferenceInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conf_info is not None:
            result['confInfo'] = self.conf_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('confInfo') is not None:
            temp_model = QueryConferenceInfoResponseBodyConfInfo()
            self.conf_info = temp_model.from_map(m['confInfo'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class QueryConferenceInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryConferenceInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryConferenceInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryConferenceInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryConferenceMembersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceMembersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryConferenceMembersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryConferenceMembersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryConferenceMembersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryConferenceMembersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryConferenceMembersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceMembersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryConferenceMembersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceMembersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryConferenceMembersRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, tenant_context=None, conference_id=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.tenant_context = tenant_context  # type: QueryConferenceMembersRequestTenantContext
        self.conference_id = conference_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryConferenceMembersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('TenantContext') is not None:
            temp_model = QueryConferenceMembersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryConferenceMembersShrinkRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, tenant_context_shrink=None, conference_id=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.conference_id = conference_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceMembersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class QueryConferenceMembersResponseBodyMemberModels(TeaModel):
    def __init__(self, attend_status=None, co_host=None, conference_id=None, duration=None, host=None,
                 join_time=None, leave_time=None, outer_org_member=None, pstn_join=None, user_id=None, user_nick=None):
        self.attend_status = attend_status  # type: int
        self.co_host = co_host  # type: bool
        self.conference_id = conference_id  # type: str
        self.duration = duration  # type: long
        self.host = host  # type: bool
        self.join_time = join_time  # type: long
        self.leave_time = leave_time  # type: long
        self.outer_org_member = outer_org_member  # type: bool
        self.pstn_join = pstn_join  # type: bool
        self.user_id = user_id  # type: str
        self.user_nick = user_nick  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryConferenceMembersResponseBodyMemberModels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attend_status is not None:
            result['AttendStatus'] = self.attend_status
        if self.co_host is not None:
            result['CoHost'] = self.co_host
        if self.conference_id is not None:
            result['ConferenceId'] = self.conference_id
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.host is not None:
            result['Host'] = self.host
        if self.join_time is not None:
            result['JoinTime'] = self.join_time
        if self.leave_time is not None:
            result['LeaveTime'] = self.leave_time
        if self.outer_org_member is not None:
            result['OuterOrgMember'] = self.outer_org_member
        if self.pstn_join is not None:
            result['PstnJoin'] = self.pstn_join
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttendStatus') is not None:
            self.attend_status = m.get('AttendStatus')
        if m.get('CoHost') is not None:
            self.co_host = m.get('CoHost')
        if m.get('ConferenceId') is not None:
            self.conference_id = m.get('ConferenceId')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('JoinTime') is not None:
            self.join_time = m.get('JoinTime')
        if m.get('LeaveTime') is not None:
            self.leave_time = m.get('LeaveTime')
        if m.get('OuterOrgMember') is not None:
            self.outer_org_member = m.get('OuterOrgMember')
        if m.get('PstnJoin') is not None:
            self.pstn_join = m.get('PstnJoin')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class QueryConferenceMembersResponseBody(TeaModel):
    def __init__(self, member_models=None, next_token=None, request_id=None, total_count=None):
        self.member_models = member_models  # type: list[QueryConferenceMembersResponseBodyMemberModels]
        self.next_token = next_token  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.member_models:
            for k in self.member_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryConferenceMembersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['memberModels'] = []
        if self.member_models is not None:
            for k in self.member_models:
                result['memberModels'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.member_models = []
        if m.get('memberModels') is not None:
            for k in m.get('memberModels'):
                temp_model = QueryConferenceMembersResponseBodyMemberModels()
                self.member_models.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        return self


class QueryConferenceMembersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryConferenceMembersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryConferenceMembersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryConferenceMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDentryHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryDentryHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryDentryHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryDentryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryDentryHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryDentryShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryDentryRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryDentryRequest(TeaModel):
    def __init__(self, dentry_id=None, include_space=None, space_id=None, tenant_context=None):
        self.dentry_id = dentry_id  # type: str
        self.include_space = include_space  # type: bool
        self.space_id = space_id  # type: str
        self.tenant_context = tenant_context  # type: QueryDentryRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryDentryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_id is not None:
            result['DentryId'] = self.dentry_id
        if self.include_space is not None:
            result['IncludeSpace'] = self.include_space
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryId') is not None:
            self.dentry_id = m.get('DentryId')
        if m.get('IncludeSpace') is not None:
            self.include_space = m.get('IncludeSpace')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('TenantContext') is not None:
            temp_model = QueryDentryRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryDentryShrinkRequest(TeaModel):
    def __init__(self, dentry_id=None, include_space=None, space_id=None, tenant_context_shrink=None):
        self.dentry_id = dentry_id  # type: str
        self.include_space = include_space  # type: bool
        self.space_id = space_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_id is not None:
            result['DentryId'] = self.dentry_id
        if self.include_space is not None:
            result['IncludeSpace'] = self.include_space
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryId') is not None:
            self.dentry_id = m.get('DentryId')
        if m.get('IncludeSpace') is not None:
            self.include_space = m.get('IncludeSpace')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryDentryResponseBodyCreator(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodyCreator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryDentryResponseBodyLinkSourceInfoIconUrl(TeaModel):
    def __init__(self, line=None, small=None):
        self.line = line  # type: str
        self.small = small  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodyLinkSourceInfoIconUrl, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.line is not None:
            result['Line'] = self.line
        if self.small is not None:
            result['Small'] = self.small
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Line') is not None:
            self.line = m.get('Line')
        if m.get('Small') is not None:
            self.small = m.get('Small')
        return self


class QueryDentryResponseBodyLinkSourceInfo(TeaModel):
    def __init__(self, extension=None, icon_url=None, id=None, link_type=None, space_id=None):
        self.extension = extension  # type: str
        self.icon_url = icon_url  # type: QueryDentryResponseBodyLinkSourceInfoIconUrl
        self.id = id  # type: str
        self.link_type = link_type  # type: long
        self.space_id = space_id  # type: str

    def validate(self):
        if self.icon_url:
            self.icon_url.validate()

    def to_map(self):
        _map = super(QueryDentryResponseBodyLinkSourceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.icon_url is not None:
            result['IconUrl'] = self.icon_url.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.link_type is not None:
            result['LinkType'] = self.link_type
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('IconUrl') is not None:
            temp_model = QueryDentryResponseBodyLinkSourceInfoIconUrl()
            self.icon_url = temp_model.from_map(m['IconUrl'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('LinkType') is not None:
            self.link_type = m.get('LinkType')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        return self


class QueryDentryResponseBodySpaceHdIconVO(TeaModel):
    def __init__(self, icon=None, type=None):
        self.icon = icon  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceHdIconVO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryDentryResponseBodySpaceIconVO(TeaModel):
    def __init__(self, icon=None, type=None):
        self.icon = icon  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceIconVO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon is not None:
            result['Icon'] = self.icon
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Icon') is not None:
            self.icon = m.get('Icon')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryDentryResponseBodySpaceOwner(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceOwner, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryDentryResponseBodySpaceRecentListCreator(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceRecentListCreator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl(TeaModel):
    def __init__(self, line=None, small=None):
        self.line = line  # type: str
        self.small = small  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.line is not None:
            result['Line'] = self.line
        if self.small is not None:
            result['Small'] = self.small
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Line') is not None:
            self.line = m.get('Line')
        if m.get('Small') is not None:
            self.small = m.get('Small')
        return self


class QueryDentryResponseBodySpaceRecentListLinkSourceInfo(TeaModel):
    def __init__(self, extension=None, icon_url=None, id=None, link_type=None, space_id=None):
        self.extension = extension  # type: str
        self.icon_url = icon_url  # type: QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl
        self.id = id  # type: str
        self.link_type = link_type  # type: long
        self.space_id = space_id  # type: str

    def validate(self):
        if self.icon_url:
            self.icon_url.validate()

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceRecentListLinkSourceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.icon_url is not None:
            result['IconUrl'] = self.icon_url.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.link_type is not None:
            result['LinkType'] = self.link_type
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('IconUrl') is not None:
            temp_model = QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl()
            self.icon_url = temp_model.from_map(m['IconUrl'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('LinkType') is not None:
            self.link_type = m.get('LinkType')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        return self


class QueryDentryResponseBodySpaceRecentListStatisticalInfo(TeaModel):
    def __init__(self, word_count=None):
        self.word_count = word_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceRecentListStatisticalInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.word_count is not None:
            result['WordCount'] = self.word_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('WordCount') is not None:
            self.word_count = m.get('WordCount')
        return self


class QueryDentryResponseBodySpaceRecentListUpdater(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceRecentListUpdater, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryDentryResponseBodySpaceRecentListVisitorInfo(TeaModel):
    def __init__(self, dentry_actions=None, role_code=None, space_actions=None):
        self.dentry_actions = dentry_actions  # type: list[str]
        self.role_code = role_code  # type: str
        self.space_actions = space_actions  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceRecentListVisitorInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_actions is not None:
            result['DentryActions'] = self.dentry_actions
        if self.role_code is not None:
            result['RoleCode'] = self.role_code
        if self.space_actions is not None:
            result['SpaceActions'] = self.space_actions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryActions') is not None:
            self.dentry_actions = m.get('DentryActions')
        if m.get('RoleCode') is not None:
            self.role_code = m.get('RoleCode')
        if m.get('SpaceActions') is not None:
            self.space_actions = m.get('SpaceActions')
        return self


class QueryDentryResponseBodySpaceRecentList(TeaModel):
    def __init__(self, content_type=None, created_time=None, creator=None, dentry_id=None, dentry_type=None,
                 dentry_uuid=None, doc_key=None, extension=None, has_children=None, link_source_info=None, name=None, path=None,
                 space=None, space_id=None, statistical_info=None, updated_time=None, updater=None, url=None,
                 visitor_info=None):
        self.content_type = content_type  # type: str
        self.created_time = created_time  # type: long
        self.creator = creator  # type: QueryDentryResponseBodySpaceRecentListCreator
        self.dentry_id = dentry_id  # type: str
        self.dentry_type = dentry_type  # type: str
        self.dentry_uuid = dentry_uuid  # type: str
        self.doc_key = doc_key  # type: str
        self.extension = extension  # type: str
        self.has_children = has_children  # type: bool
        self.link_source_info = link_source_info  # type: QueryDentryResponseBodySpaceRecentListLinkSourceInfo
        self.name = name  # type: str
        self.path = path  # type: str
        self.space = space  # type: any
        self.space_id = space_id  # type: str
        self.statistical_info = statistical_info  # type: QueryDentryResponseBodySpaceRecentListStatisticalInfo
        self.updated_time = updated_time  # type: long
        self.updater = updater  # type: QueryDentryResponseBodySpaceRecentListUpdater
        self.url = url  # type: str
        self.visitor_info = visitor_info  # type: QueryDentryResponseBodySpaceRecentListVisitorInfo

    def validate(self):
        if self.creator:
            self.creator.validate()
        if self.link_source_info:
            self.link_source_info.validate()
        if self.statistical_info:
            self.statistical_info.validate()
        if self.updater:
            self.updater.validate()
        if self.visitor_info:
            self.visitor_info.validate()

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceRecentList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.creator is not None:
            result['Creator'] = self.creator.to_map()
        if self.dentry_id is not None:
            result['DentryId'] = self.dentry_id
        if self.dentry_type is not None:
            result['DentryType'] = self.dentry_type
        if self.dentry_uuid is not None:
            result['DentryUuid'] = self.dentry_uuid
        if self.doc_key is not None:
            result['DocKey'] = self.doc_key
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.has_children is not None:
            result['HasChildren'] = self.has_children
        if self.link_source_info is not None:
            result['LinkSourceInfo'] = self.link_source_info.to_map()
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.space is not None:
            result['Space'] = self.space
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.statistical_info is not None:
            result['StatisticalInfo'] = self.statistical_info.to_map()
        if self.updated_time is not None:
            result['UpdatedTime'] = self.updated_time
        if self.updater is not None:
            result['Updater'] = self.updater.to_map()
        if self.url is not None:
            result['Url'] = self.url
        if self.visitor_info is not None:
            result['VisitorInfo'] = self.visitor_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('Creator') is not None:
            temp_model = QueryDentryResponseBodySpaceRecentListCreator()
            self.creator = temp_model.from_map(m['Creator'])
        if m.get('DentryId') is not None:
            self.dentry_id = m.get('DentryId')
        if m.get('DentryType') is not None:
            self.dentry_type = m.get('DentryType')
        if m.get('DentryUuid') is not None:
            self.dentry_uuid = m.get('DentryUuid')
        if m.get('DocKey') is not None:
            self.doc_key = m.get('DocKey')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('HasChildren') is not None:
            self.has_children = m.get('HasChildren')
        if m.get('LinkSourceInfo') is not None:
            temp_model = QueryDentryResponseBodySpaceRecentListLinkSourceInfo()
            self.link_source_info = temp_model.from_map(m['LinkSourceInfo'])
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('StatisticalInfo') is not None:
            temp_model = QueryDentryResponseBodySpaceRecentListStatisticalInfo()
            self.statistical_info = temp_model.from_map(m['StatisticalInfo'])
        if m.get('UpdatedTime') is not None:
            self.updated_time = m.get('UpdatedTime')
        if m.get('Updater') is not None:
            temp_model = QueryDentryResponseBodySpaceRecentListUpdater()
            self.updater = temp_model.from_map(m['Updater'])
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('VisitorInfo') is not None:
            temp_model = QueryDentryResponseBodySpaceRecentListVisitorInfo()
            self.visitor_info = temp_model.from_map(m['VisitorInfo'])
        return self


class QueryDentryResponseBodySpaceVisitorInfo(TeaModel):
    def __init__(self, dentry_actions=None, role_code=None, space_actions=None):
        self.dentry_actions = dentry_actions  # type: list[str]
        self.role_code = role_code  # type: str
        self.space_actions = space_actions  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodySpaceVisitorInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_actions is not None:
            result['DentryActions'] = self.dentry_actions
        if self.role_code is not None:
            result['RoleCode'] = self.role_code
        if self.space_actions is not None:
            result['SpaceActions'] = self.space_actions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryActions') is not None:
            self.dentry_actions = m.get('DentryActions')
        if m.get('RoleCode') is not None:
            self.role_code = m.get('RoleCode')
        if m.get('SpaceActions') is not None:
            self.space_actions = m.get('SpaceActions')
        return self


class QueryDentryResponseBodySpace(TeaModel):
    def __init__(self, cover=None, description=None, hd_icon_vo=None, icon_vo=None, id=None, name=None, owner=None,
                 recent_list=None, type=None, url=None, visitor_info=None):
        self.cover = cover  # type: str
        self.description = description  # type: str
        self.hd_icon_vo = hd_icon_vo  # type: QueryDentryResponseBodySpaceHdIconVO
        self.icon_vo = icon_vo  # type: QueryDentryResponseBodySpaceIconVO
        self.id = id  # type: str
        self.name = name  # type: str
        self.owner = owner  # type: QueryDentryResponseBodySpaceOwner
        self.recent_list = recent_list  # type: list[QueryDentryResponseBodySpaceRecentList]
        self.type = type  # type: int
        self.url = url  # type: str
        self.visitor_info = visitor_info  # type: QueryDentryResponseBodySpaceVisitorInfo

    def validate(self):
        if self.hd_icon_vo:
            self.hd_icon_vo.validate()
        if self.icon_vo:
            self.icon_vo.validate()
        if self.owner:
            self.owner.validate()
        if self.recent_list:
            for k in self.recent_list:
                if k:
                    k.validate()
        if self.visitor_info:
            self.visitor_info.validate()

    def to_map(self):
        _map = super(QueryDentryResponseBodySpace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover is not None:
            result['Cover'] = self.cover
        if self.description is not None:
            result['Description'] = self.description
        if self.hd_icon_vo is not None:
            result['HdIconVO'] = self.hd_icon_vo.to_map()
        if self.icon_vo is not None:
            result['IconVO'] = self.icon_vo.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.owner is not None:
            result['Owner'] = self.owner.to_map()
        result['RecentList'] = []
        if self.recent_list is not None:
            for k in self.recent_list:
                result['RecentList'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        if self.url is not None:
            result['Url'] = self.url
        if self.visitor_info is not None:
            result['VisitorInfo'] = self.visitor_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cover') is not None:
            self.cover = m.get('Cover')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('HdIconVO') is not None:
            temp_model = QueryDentryResponseBodySpaceHdIconVO()
            self.hd_icon_vo = temp_model.from_map(m['HdIconVO'])
        if m.get('IconVO') is not None:
            temp_model = QueryDentryResponseBodySpaceIconVO()
            self.icon_vo = temp_model.from_map(m['IconVO'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Owner') is not None:
            temp_model = QueryDentryResponseBodySpaceOwner()
            self.owner = temp_model.from_map(m['Owner'])
        self.recent_list = []
        if m.get('RecentList') is not None:
            for k in m.get('RecentList'):
                temp_model = QueryDentryResponseBodySpaceRecentList()
                self.recent_list.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        if m.get('VisitorInfo') is not None:
            temp_model = QueryDentryResponseBodySpaceVisitorInfo()
            self.visitor_info = temp_model.from_map(m['VisitorInfo'])
        return self


class QueryDentryResponseBodyUpdater(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodyUpdater, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryDentryResponseBodyVisitorInfo(TeaModel):
    def __init__(self, dentry_actions=None, role_code=None, space_actions=None):
        self.dentry_actions = dentry_actions  # type: list[str]
        self.role_code = role_code  # type: str
        self.space_actions = space_actions  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryDentryResponseBodyVisitorInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dentry_actions is not None:
            result['DentryActions'] = self.dentry_actions
        if self.role_code is not None:
            result['RoleCode'] = self.role_code
        if self.space_actions is not None:
            result['SpaceActions'] = self.space_actions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DentryActions') is not None:
            self.dentry_actions = m.get('DentryActions')
        if m.get('RoleCode') is not None:
            self.role_code = m.get('RoleCode')
        if m.get('SpaceActions') is not None:
            self.space_actions = m.get('SpaceActions')
        return self


class QueryDentryResponseBody(TeaModel):
    def __init__(self, content_type=None, created_time=None, creator=None, dentry_id=None, dentry_type=None,
                 dentry_uuid=None, doc_key=None, extension=None, has_children=None, link_source_info=None, name=None, path=None,
                 request_id=None, space=None, space_id=None, updated_time=None, updater=None, url=None, visitor_info=None):
        self.content_type = content_type  # type: str
        self.created_time = created_time  # type: long
        self.creator = creator  # type: QueryDentryResponseBodyCreator
        self.dentry_id = dentry_id  # type: str
        self.dentry_type = dentry_type  # type: str
        self.dentry_uuid = dentry_uuid  # type: str
        self.doc_key = doc_key  # type: str
        self.extension = extension  # type: str
        self.has_children = has_children  # type: bool
        self.link_source_info = link_source_info  # type: QueryDentryResponseBodyLinkSourceInfo
        self.name = name  # type: str
        self.path = path  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.space = space  # type: QueryDentryResponseBodySpace
        self.space_id = space_id  # type: str
        self.updated_time = updated_time  # type: long
        self.updater = updater  # type: QueryDentryResponseBodyUpdater
        self.url = url  # type: str
        self.visitor_info = visitor_info  # type: QueryDentryResponseBodyVisitorInfo

    def validate(self):
        if self.creator:
            self.creator.validate()
        if self.link_source_info:
            self.link_source_info.validate()
        if self.space:
            self.space.validate()
        if self.updater:
            self.updater.validate()
        if self.visitor_info:
            self.visitor_info.validate()

    def to_map(self):
        _map = super(QueryDentryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_type is not None:
            result['contentType'] = self.content_type
        if self.created_time is not None:
            result['createdTime'] = self.created_time
        if self.creator is not None:
            result['creator'] = self.creator.to_map()
        if self.dentry_id is not None:
            result['dentryId'] = self.dentry_id
        if self.dentry_type is not None:
            result['dentryType'] = self.dentry_type
        if self.dentry_uuid is not None:
            result['dentryUuid'] = self.dentry_uuid
        if self.doc_key is not None:
            result['docKey'] = self.doc_key
        if self.extension is not None:
            result['extension'] = self.extension
        if self.has_children is not None:
            result['hasChildren'] = self.has_children
        if self.link_source_info is not None:
            result['linkSourceInfo'] = self.link_source_info.to_map()
        if self.name is not None:
            result['name'] = self.name
        if self.path is not None:
            result['path'] = self.path
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.space is not None:
            result['space'] = self.space.to_map()
        if self.space_id is not None:
            result['spaceId'] = self.space_id
        if self.updated_time is not None:
            result['updatedTime'] = self.updated_time
        if self.updater is not None:
            result['updater'] = self.updater.to_map()
        if self.url is not None:
            result['url'] = self.url
        if self.visitor_info is not None:
            result['visitorInfo'] = self.visitor_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contentType') is not None:
            self.content_type = m.get('contentType')
        if m.get('createdTime') is not None:
            self.created_time = m.get('createdTime')
        if m.get('creator') is not None:
            temp_model = QueryDentryResponseBodyCreator()
            self.creator = temp_model.from_map(m['creator'])
        if m.get('dentryId') is not None:
            self.dentry_id = m.get('dentryId')
        if m.get('dentryType') is not None:
            self.dentry_type = m.get('dentryType')
        if m.get('dentryUuid') is not None:
            self.dentry_uuid = m.get('dentryUuid')
        if m.get('docKey') is not None:
            self.doc_key = m.get('docKey')
        if m.get('extension') is not None:
            self.extension = m.get('extension')
        if m.get('hasChildren') is not None:
            self.has_children = m.get('hasChildren')
        if m.get('linkSourceInfo') is not None:
            temp_model = QueryDentryResponseBodyLinkSourceInfo()
            self.link_source_info = temp_model.from_map(m['linkSourceInfo'])
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('path') is not None:
            self.path = m.get('path')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('space') is not None:
            temp_model = QueryDentryResponseBodySpace()
            self.space = temp_model.from_map(m['space'])
        if m.get('spaceId') is not None:
            self.space_id = m.get('spaceId')
        if m.get('updatedTime') is not None:
            self.updated_time = m.get('updatedTime')
        if m.get('updater') is not None:
            temp_model = QueryDentryResponseBodyUpdater()
            self.updater = temp_model.from_map(m['updater'])
        if m.get('url') is not None:
            self.url = m.get('url')
        if m.get('visitorInfo') is not None:
            temp_model = QueryDentryResponseBodyVisitorInfo()
            self.visitor_info = temp_model.from_map(m['visitorInfo'])
        return self


class QueryDentryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryDentryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryDentryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDentryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryLiveInfoHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveInfoHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryLiveInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryLiveInfoHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryLiveInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryLiveInfoHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryLiveInfoShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveInfoShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryLiveInfoRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveInfoRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryLiveInfoRequest(TeaModel):
    def __init__(self, live_id=None, tenant_context=None):
        self.live_id = live_id  # type: str
        self.tenant_context = tenant_context  # type: QueryLiveInfoRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryLiveInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('TenantContext') is not None:
            temp_model = QueryLiveInfoRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryLiveInfoShrinkRequest(TeaModel):
    def __init__(self, live_id=None, tenant_context_shrink=None):
        self.live_id = live_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveInfoShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryLiveInfoResponseBody(TeaModel):
    def __init__(self, cover_url=None, duration=None, end_time=None, introduction=None, live_id=None,
                 live_play_url=None, live_status=None, playback_duration=None, request_id=None, start_time=None,
                 subscribe_count=None, title=None, uv=None):
        self.cover_url = cover_url  # type: str
        self.duration = duration  # type: long
        self.end_time = end_time  # type: long
        self.introduction = introduction  # type: str
        self.live_id = live_id  # type: str
        self.live_play_url = live_play_url  # type: str
        self.live_status = live_status  # type: int
        self.playback_duration = playback_duration  # type: long
        # requestId
        self.request_id = request_id  # type: str
        self.start_time = start_time  # type: long
        self.subscribe_count = subscribe_count  # type: int
        self.title = title  # type: str
        self.uv = uv  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover_url is not None:
            result['coverUrl'] = self.cover_url
        if self.duration is not None:
            result['duration'] = self.duration
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.introduction is not None:
            result['introduction'] = self.introduction
        if self.live_id is not None:
            result['liveId'] = self.live_id
        if self.live_play_url is not None:
            result['livePlayUrl'] = self.live_play_url
        if self.live_status is not None:
            result['liveStatus'] = self.live_status
        if self.playback_duration is not None:
            result['playbackDuration'] = self.playback_duration
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.subscribe_count is not None:
            result['subscribeCount'] = self.subscribe_count
        if self.title is not None:
            result['title'] = self.title
        if self.uv is not None:
            result['uv'] = self.uv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('coverUrl') is not None:
            self.cover_url = m.get('coverUrl')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('introduction') is not None:
            self.introduction = m.get('introduction')
        if m.get('liveId') is not None:
            self.live_id = m.get('liveId')
        if m.get('livePlayUrl') is not None:
            self.live_play_url = m.get('livePlayUrl')
        if m.get('liveStatus') is not None:
            self.live_status = m.get('liveStatus')
        if m.get('playbackDuration') is not None:
            self.playback_duration = m.get('playbackDuration')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('subscribeCount') is not None:
            self.subscribe_count = m.get('subscribeCount')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('uv') is not None:
            self.uv = m.get('uv')
        return self


class QueryLiveInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryLiveInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryLiveInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryLiveInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryLiveWatchDetailHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchDetailHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryLiveWatchDetailHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryLiveWatchDetailHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryLiveWatchDetailHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryLiveWatchDetailHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryLiveWatchDetailShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchDetailShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryLiveWatchDetailRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchDetailRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryLiveWatchDetailRequest(TeaModel):
    def __init__(self, live_id=None, tenant_context=None):
        self.live_id = live_id  # type: str
        self.tenant_context = tenant_context  # type: QueryLiveWatchDetailRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryLiveWatchDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('TenantContext') is not None:
            temp_model = QueryLiveWatchDetailRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryLiveWatchDetailShrinkRequest(TeaModel):
    def __init__(self, live_id=None, tenant_context_shrink=None):
        self.live_id = live_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchDetailShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryLiveWatchDetailResponseBody(TeaModel):
    def __init__(self, avg_watch_time=None, live_uv=None, msg_count=None, playback_uv=None, praise_count=None,
                 pv=None, request_id=None, total_watch_time=None, uv=None):
        self.avg_watch_time = avg_watch_time  # type: long
        self.live_uv = live_uv  # type: int
        self.msg_count = msg_count  # type: int
        self.playback_uv = playback_uv  # type: int
        self.praise_count = praise_count  # type: int
        self.pv = pv  # type: int
        # requestId
        self.request_id = request_id  # type: str
        self.total_watch_time = total_watch_time  # type: long
        self.uv = uv  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avg_watch_time is not None:
            result['avgWatchTime'] = self.avg_watch_time
        if self.live_uv is not None:
            result['liveUv'] = self.live_uv
        if self.msg_count is not None:
            result['msgCount'] = self.msg_count
        if self.playback_uv is not None:
            result['playbackUv'] = self.playback_uv
        if self.praise_count is not None:
            result['praiseCount'] = self.praise_count
        if self.pv is not None:
            result['pv'] = self.pv
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_watch_time is not None:
            result['totalWatchTime'] = self.total_watch_time
        if self.uv is not None:
            result['uv'] = self.uv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('avgWatchTime') is not None:
            self.avg_watch_time = m.get('avgWatchTime')
        if m.get('liveUv') is not None:
            self.live_uv = m.get('liveUv')
        if m.get('msgCount') is not None:
            self.msg_count = m.get('msgCount')
        if m.get('playbackUv') is not None:
            self.playback_uv = m.get('playbackUv')
        if m.get('praiseCount') is not None:
            self.praise_count = m.get('praiseCount')
        if m.get('pv') is not None:
            self.pv = m.get('pv')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalWatchTime') is not None:
            self.total_watch_time = m.get('totalWatchTime')
        if m.get('uv') is not None:
            self.uv = m.get('uv')
        return self


class QueryLiveWatchDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryLiveWatchDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryLiveWatchDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryLiveWatchDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryLiveWatchUserListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchUserListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryLiveWatchUserListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryLiveWatchUserListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryLiveWatchUserListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryLiveWatchUserListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryLiveWatchUserListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchUserListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryLiveWatchUserListRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchUserListRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryLiveWatchUserListRequest(TeaModel):
    def __init__(self, live_id=None, page_number=None, page_size=None, tenant_context=None):
        self.live_id = live_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.tenant_context = tenant_context  # type: QueryLiveWatchUserListRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryLiveWatchUserListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantContext') is not None:
            temp_model = QueryLiveWatchUserListRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryLiveWatchUserListShrinkRequest(TeaModel):
    def __init__(self, live_id=None, page_number=None, page_size=None, tenant_context_shrink=None):
        self.live_id = live_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchUserListShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryLiveWatchUserListResponseBodyOrgUsesList(TeaModel):
    def __init__(self, dept_name=None, name=None, user_id=None, watch_live_time=None, watch_playback_time=None,
                 watch_progress_ms=None):
        self.dept_name = dept_name  # type: str
        self.name = name  # type: str
        self.user_id = user_id  # type: str
        self.watch_live_time = watch_live_time  # type: long
        self.watch_playback_time = watch_playback_time  # type: long
        self.watch_progress_ms = watch_progress_ms  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchUserListResponseBodyOrgUsesList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.name is not None:
            result['Name'] = self.name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.watch_live_time is not None:
            result['WatchLiveTime'] = self.watch_live_time
        if self.watch_playback_time is not None:
            result['WatchPlaybackTime'] = self.watch_playback_time
        if self.watch_progress_ms is not None:
            result['WatchProgressMs'] = self.watch_progress_ms
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('WatchLiveTime') is not None:
            self.watch_live_time = m.get('WatchLiveTime')
        if m.get('WatchPlaybackTime') is not None:
            self.watch_playback_time = m.get('WatchPlaybackTime')
        if m.get('WatchProgressMs') is not None:
            self.watch_progress_ms = m.get('WatchProgressMs')
        return self


class QueryLiveWatchUserListResponseBodyOutOrgUserList(TeaModel):
    def __init__(self, name=None, watch_live_time=None, watch_playback_time=None, watch_progress_ms=None):
        self.name = name  # type: str
        self.watch_live_time = watch_live_time  # type: long
        self.watch_playback_time = watch_playback_time  # type: long
        self.watch_progress_ms = watch_progress_ms  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryLiveWatchUserListResponseBodyOutOrgUserList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.watch_live_time is not None:
            result['WatchLiveTime'] = self.watch_live_time
        if self.watch_playback_time is not None:
            result['WatchPlaybackTime'] = self.watch_playback_time
        if self.watch_progress_ms is not None:
            result['WatchProgressMs'] = self.watch_progress_ms
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('WatchLiveTime') is not None:
            self.watch_live_time = m.get('WatchLiveTime')
        if m.get('WatchPlaybackTime') is not None:
            self.watch_playback_time = m.get('WatchPlaybackTime')
        if m.get('WatchProgressMs') is not None:
            self.watch_progress_ms = m.get('WatchProgressMs')
        return self


class QueryLiveWatchUserListResponseBody(TeaModel):
    def __init__(self, org_uses_list=None, out_org_user_list=None, request_id=None):
        self.org_uses_list = org_uses_list  # type: list[QueryLiveWatchUserListResponseBodyOrgUsesList]
        self.out_org_user_list = out_org_user_list  # type: list[QueryLiveWatchUserListResponseBodyOutOrgUserList]
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.org_uses_list:
            for k in self.org_uses_list:
                if k:
                    k.validate()
        if self.out_org_user_list:
            for k in self.out_org_user_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryLiveWatchUserListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['orgUsesList'] = []
        if self.org_uses_list is not None:
            for k in self.org_uses_list:
                result['orgUsesList'].append(k.to_map() if k else None)
        result['outOrgUserList'] = []
        if self.out_org_user_list is not None:
            for k in self.out_org_user_list:
                result['outOrgUserList'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.org_uses_list = []
        if m.get('orgUsesList') is not None:
            for k in m.get('orgUsesList'):
                temp_model = QueryLiveWatchUserListResponseBodyOrgUsesList()
                self.org_uses_list.append(temp_model.from_map(k))
        self.out_org_user_list = []
        if m.get('outOrgUserList') is not None:
            for k in m.get('outOrgUserList'):
                temp_model = QueryLiveWatchUserListResponseBodyOutOrgUserList()
                self.out_org_user_list.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class QueryLiveWatchUserListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryLiveWatchUserListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryLiveWatchUserListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryLiveWatchUserListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryMeetingRoomHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryMeetingRoomHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryMeetingRoomHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryMeetingRoomShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryMeetingRoomRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryMeetingRoomRequest(TeaModel):
    def __init__(self, room_id=None, tenant_context=None):
        self.room_id = room_id  # type: str
        self.tenant_context = tenant_context  # type: QueryMeetingRoomRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        if m.get('TenantContext') is not None:
            temp_model = QueryMeetingRoomRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryMeetingRoomShrinkRequest(TeaModel):
    def __init__(self, room_id=None, tenant_context_shrink=None):
        self.room_id = room_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers(TeaModel):
    def __init__(self, member_id=None, member_name=None, member_type=None):
        self.member_id = member_id  # type: str
        self.member_name = member_name  # type: str
        self.member_type = member_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        return self


class QueryMeetingRoomResponseBodyResultReservationAuthority(TeaModel):
    def __init__(self, authorized_members=None):
        self.authorized_members = authorized_members  # type: list[QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers]

    def validate(self):
        if self.authorized_members:
            for k in self.authorized_members:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomResponseBodyResultReservationAuthority, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AuthorizedMembers'] = []
        if self.authorized_members is not None:
            for k in self.authorized_members:
                result['AuthorizedMembers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.authorized_members = []
        if m.get('AuthorizedMembers') is not None:
            for k in m.get('AuthorizedMembers'):
                temp_model = QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers()
                self.authorized_members.append(temp_model.from_map(k))
        return self


class QueryMeetingRoomResponseBodyResultRoomGroup(TeaModel):
    def __init__(self, group_id=None, group_name=None, parent_id=None):
        self.group_id = group_id  # type: long
        self.group_name = group_name  # type: str
        self.parent_id = parent_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomResponseBodyResultRoomGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.group_name is not None:
            result['GroupName'] = self.group_name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('GroupName') is not None:
            self.group_name = m.get('GroupName')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        return self


class QueryMeetingRoomResponseBodyResultRoomLabels(TeaModel):
    def __init__(self, label_id=None, label_name=None):
        self.label_id = label_id  # type: long
        self.label_name = label_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomResponseBodyResultRoomLabels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_id is not None:
            result['LabelId'] = self.label_id
        if self.label_name is not None:
            result['LabelName'] = self.label_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LabelId') is not None:
            self.label_id = m.get('LabelId')
        if m.get('LabelName') is not None:
            self.label_name = m.get('LabelName')
        return self


class QueryMeetingRoomResponseBodyResultRoomLocation(TeaModel):
    def __init__(self, desc=None, title=None):
        self.desc = desc  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomResponseBodyResultRoomLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class QueryMeetingRoomResponseBodyResult(TeaModel):
    def __init__(self, corp_id=None, device_union_ids=None, enable_cycle_reservation=None, isv_room_id=None,
                 reservation_authority=None, room_capacity=None, room_group=None, room_id=None, room_labels=None, room_location=None,
                 room_name=None, room_picture=None, room_staff_id=None, room_status=None):
        self.corp_id = corp_id  # type: str
        self.device_union_ids = device_union_ids  # type: list[str]
        self.enable_cycle_reservation = enable_cycle_reservation  # type: bool
        self.isv_room_id = isv_room_id  # type: str
        self.reservation_authority = reservation_authority  # type: QueryMeetingRoomResponseBodyResultReservationAuthority
        self.room_capacity = room_capacity  # type: int
        self.room_group = room_group  # type: QueryMeetingRoomResponseBodyResultRoomGroup
        self.room_id = room_id  # type: str
        self.room_labels = room_labels  # type: list[QueryMeetingRoomResponseBodyResultRoomLabels]
        self.room_location = room_location  # type: QueryMeetingRoomResponseBodyResultRoomLocation
        self.room_name = room_name  # type: str
        self.room_picture = room_picture  # type: str
        self.room_staff_id = room_staff_id  # type: str
        self.room_status = room_status  # type: int

    def validate(self):
        if self.reservation_authority:
            self.reservation_authority.validate()
        if self.room_group:
            self.room_group.validate()
        if self.room_labels:
            for k in self.room_labels:
                if k:
                    k.validate()
        if self.room_location:
            self.room_location.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.device_union_ids is not None:
            result['DeviceUnionIds'] = self.device_union_ids
        if self.enable_cycle_reservation is not None:
            result['EnableCycleReservation'] = self.enable_cycle_reservation
        if self.isv_room_id is not None:
            result['IsvRoomId'] = self.isv_room_id
        if self.reservation_authority is not None:
            result['ReservationAuthority'] = self.reservation_authority.to_map()
        if self.room_capacity is not None:
            result['RoomCapacity'] = self.room_capacity
        if self.room_group is not None:
            result['RoomGroup'] = self.room_group.to_map()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        result['RoomLabels'] = []
        if self.room_labels is not None:
            for k in self.room_labels:
                result['RoomLabels'].append(k.to_map() if k else None)
        if self.room_location is not None:
            result['RoomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['RoomName'] = self.room_name
        if self.room_picture is not None:
            result['RoomPicture'] = self.room_picture
        if self.room_staff_id is not None:
            result['RoomStaffId'] = self.room_staff_id
        if self.room_status is not None:
            result['RoomStatus'] = self.room_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('DeviceUnionIds') is not None:
            self.device_union_ids = m.get('DeviceUnionIds')
        if m.get('EnableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('EnableCycleReservation')
        if m.get('IsvRoomId') is not None:
            self.isv_room_id = m.get('IsvRoomId')
        if m.get('ReservationAuthority') is not None:
            temp_model = QueryMeetingRoomResponseBodyResultReservationAuthority()
            self.reservation_authority = temp_model.from_map(m['ReservationAuthority'])
        if m.get('RoomCapacity') is not None:
            self.room_capacity = m.get('RoomCapacity')
        if m.get('RoomGroup') is not None:
            temp_model = QueryMeetingRoomResponseBodyResultRoomGroup()
            self.room_group = temp_model.from_map(m['RoomGroup'])
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        self.room_labels = []
        if m.get('RoomLabels') is not None:
            for k in m.get('RoomLabels'):
                temp_model = QueryMeetingRoomResponseBodyResultRoomLabels()
                self.room_labels.append(temp_model.from_map(k))
        if m.get('RoomLocation') is not None:
            temp_model = QueryMeetingRoomResponseBodyResultRoomLocation()
            self.room_location = temp_model.from_map(m['RoomLocation'])
        if m.get('RoomName') is not None:
            self.room_name = m.get('RoomName')
        if m.get('RoomPicture') is not None:
            self.room_picture = m.get('RoomPicture')
        if m.get('RoomStaffId') is not None:
            self.room_staff_id = m.get('RoomStaffId')
        if m.get('RoomStatus') is not None:
            self.room_status = m.get('RoomStatus')
        return self


class QueryMeetingRoomResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: QueryMeetingRoomResponseBodyResult
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result.to_map()
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            temp_model = QueryMeetingRoomResponseBodyResult()
            self.result = temp_model.from_map(m['result'])
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class QueryMeetingRoomResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMeetingRoomResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomGroupHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryMeetingRoomGroupHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryMeetingRoomGroupHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomGroupHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryMeetingRoomGroupHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryMeetingRoomGroupShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryMeetingRoomGroupRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryMeetingRoomGroupRequest(TeaModel):
    def __init__(self, group_id=None, tenant_context=None):
        self.group_id = group_id  # type: str
        self.tenant_context = tenant_context  # type: QueryMeetingRoomGroupRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('TenantContext') is not None:
            temp_model = QueryMeetingRoomGroupRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryMeetingRoomGroupShrinkRequest(TeaModel):
    def __init__(self, group_id=None, tenant_context_shrink=None):
        self.group_id = group_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryMeetingRoomGroupResponseBody(TeaModel):
    def __init__(self, group_id=None, group_name=None, parent_id=None, request_id=None):
        self.group_id = group_id  # type: long
        self.group_name = group_name  # type: str
        self.parent_id = parent_id  # type: long
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['groupId'] = self.group_id
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.parent_id is not None:
            result['parentId'] = self.parent_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('groupId') is not None:
            self.group_id = m.get('groupId')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('parentId') is not None:
            self.parent_id = m.get('parentId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class QueryMeetingRoomGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMeetingRoomGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomGroupListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryMeetingRoomGroupListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryMeetingRoomGroupListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryMeetingRoomGroupListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryMeetingRoomGroupListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryMeetingRoomGroupListRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryMeetingRoomGroupListRequest(TeaModel):
    def __init__(self, request=None, tenant_context=None):
        self.request = request  # type: dict[str, any]
        self.tenant_context = tenant_context  # type: QueryMeetingRoomGroupListRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request is not None:
            result['Request'] = self.request
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request = m.get('Request')
        if m.get('TenantContext') is not None:
            temp_model = QueryMeetingRoomGroupListRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryMeetingRoomGroupListShrinkRequest(TeaModel):
    def __init__(self, request_shrink=None, tenant_context_shrink=None):
        self.request_shrink = request_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_shrink is not None:
            result['Request'] = self.request_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Request') is not None:
            self.request_shrink = m.get('Request')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryMeetingRoomGroupListResponseBodyResult(TeaModel):
    def __init__(self, group_id=None, group_name=None, parent_id=None):
        self.group_id = group_id  # type: long
        self.group_name = group_name  # type: str
        self.parent_id = parent_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.group_name is not None:
            result['GroupName'] = self.group_name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('GroupName') is not None:
            self.group_name = m.get('GroupName')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        return self


class QueryMeetingRoomGroupListResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: list[QueryMeetingRoomGroupListResponseBodyResult]

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = QueryMeetingRoomGroupListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class QueryMeetingRoomGroupListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMeetingRoomGroupListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomGroupListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMeetingRoomGroupListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMeetingRoomListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryMeetingRoomListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryMeetingRoomListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryMeetingRoomListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryMeetingRoomListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryMeetingRoomListRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomListRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryMeetingRoomListRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, tenant_context=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: long
        self.tenant_context = tenant_context  # type: QueryMeetingRoomListRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('TenantContext') is not None:
            temp_model = QueryMeetingRoomListRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryMeetingRoomListShrinkRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, tenant_context_shrink=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomListShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryMeetingRoomListResponseBodyResultRoomGroup(TeaModel):
    def __init__(self, group_id=None, group_name=None, parent_id=None):
        self.group_id = group_id  # type: long
        self.group_name = group_name  # type: str
        self.parent_id = parent_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomListResponseBodyResultRoomGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.group_name is not None:
            result['GroupName'] = self.group_name
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('GroupName') is not None:
            self.group_name = m.get('GroupName')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        return self


class QueryMeetingRoomListResponseBodyResultRoomLabels(TeaModel):
    def __init__(self, label_id=None, label_name=None):
        self.label_id = label_id  # type: long
        self.label_name = label_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomListResponseBodyResultRoomLabels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_id is not None:
            result['LabelId'] = self.label_id
        if self.label_name is not None:
            result['LabelName'] = self.label_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LabelId') is not None:
            self.label_id = m.get('LabelId')
        if m.get('LabelName') is not None:
            self.label_name = m.get('LabelName')
        return self


class QueryMeetingRoomListResponseBodyResultRoomLocation(TeaModel):
    def __init__(self, desc=None, title=None):
        self.desc = desc  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMeetingRoomListResponseBodyResultRoomLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class QueryMeetingRoomListResponseBodyResult(TeaModel):
    def __init__(self, corp_id=None, isv_room_id=None, room_capacity=None, room_group=None, room_id=None,
                 room_labels=None, room_location=None, room_name=None, room_picture=None, room_staff_id=None, room_status=None):
        self.corp_id = corp_id  # type: str
        self.isv_room_id = isv_room_id  # type: str
        self.room_capacity = room_capacity  # type: int
        self.room_group = room_group  # type: QueryMeetingRoomListResponseBodyResultRoomGroup
        self.room_id = room_id  # type: str
        self.room_labels = room_labels  # type: list[QueryMeetingRoomListResponseBodyResultRoomLabels]
        self.room_location = room_location  # type: QueryMeetingRoomListResponseBodyResultRoomLocation
        self.room_name = room_name  # type: str
        self.room_picture = room_picture  # type: str
        self.room_staff_id = room_staff_id  # type: str
        self.room_status = room_status  # type: int

    def validate(self):
        if self.room_group:
            self.room_group.validate()
        if self.room_labels:
            for k in self.room_labels:
                if k:
                    k.validate()
        if self.room_location:
            self.room_location.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomListResponseBodyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['CorpId'] = self.corp_id
        if self.isv_room_id is not None:
            result['IsvRoomId'] = self.isv_room_id
        if self.room_capacity is not None:
            result['RoomCapacity'] = self.room_capacity
        if self.room_group is not None:
            result['RoomGroup'] = self.room_group.to_map()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        result['RoomLabels'] = []
        if self.room_labels is not None:
            for k in self.room_labels:
                result['RoomLabels'].append(k.to_map() if k else None)
        if self.room_location is not None:
            result['RoomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['RoomName'] = self.room_name
        if self.room_picture is not None:
            result['RoomPicture'] = self.room_picture
        if self.room_staff_id is not None:
            result['RoomStaffId'] = self.room_staff_id
        if self.room_status is not None:
            result['RoomStatus'] = self.room_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CorpId') is not None:
            self.corp_id = m.get('CorpId')
        if m.get('IsvRoomId') is not None:
            self.isv_room_id = m.get('IsvRoomId')
        if m.get('RoomCapacity') is not None:
            self.room_capacity = m.get('RoomCapacity')
        if m.get('RoomGroup') is not None:
            temp_model = QueryMeetingRoomListResponseBodyResultRoomGroup()
            self.room_group = temp_model.from_map(m['RoomGroup'])
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        self.room_labels = []
        if m.get('RoomLabels') is not None:
            for k in m.get('RoomLabels'):
                temp_model = QueryMeetingRoomListResponseBodyResultRoomLabels()
                self.room_labels.append(temp_model.from_map(k))
        if m.get('RoomLocation') is not None:
            temp_model = QueryMeetingRoomListResponseBodyResultRoomLocation()
            self.room_location = temp_model.from_map(m['RoomLocation'])
        if m.get('RoomName') is not None:
            self.room_name = m.get('RoomName')
        if m.get('RoomPicture') is not None:
            self.room_picture = m.get('RoomPicture')
        if m.get('RoomStaffId') is not None:
            self.room_staff_id = m.get('RoomStaffId')
        if m.get('RoomStatus') is not None:
            self.room_status = m.get('RoomStatus')
        return self


class QueryMeetingRoomListResponseBody(TeaModel):
    def __init__(self, has_more=None, next_token=None, request_id=None, result=None):
        self.has_more = has_more  # type: bool
        self.next_token = next_token  # type: long
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: list[QueryMeetingRoomListResponseBodyResult]

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['result'] = []
        if self.result is not None:
            for k in self.result:
                result['result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result = []
        if m.get('result') is not None:
            for k in m.get('result'):
                temp_model = QueryMeetingRoomListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class QueryMeetingRoomListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMeetingRoomListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMeetingRoomListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMeetingRoomListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOrgHonorsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgHonorsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryOrgHonorsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryOrgHonorsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryOrgHonorsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryOrgHonorsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryOrgHonorsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgHonorsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryOrgHonorsRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgHonorsRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryOrgHonorsRequest(TeaModel):
    def __init__(self, tenant_context=None, max_results=None, next_token=None, org_id=None):
        self.tenant_context = tenant_context  # type: QueryOrgHonorsRequestTenantContext
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.org_id = org_id  # type: long

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryOrgHonorsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.org_id is not None:
            result['orgId'] = self.org_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = QueryOrgHonorsRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        return self


class QueryOrgHonorsShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, max_results=None, next_token=None, org_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.org_id = org_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgHonorsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.org_id is not None:
            result['orgId'] = self.org_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        return self


class QueryOrgHonorsResponseBodyOpenHonors(TeaModel):
    def __init__(self, honor_desc=None, honor_id=None, honor_img_url=None, honor_name=None,
                 honor_pendant_img_url=None):
        self.honor_desc = honor_desc  # type: str
        self.honor_id = honor_id  # type: long
        self.honor_img_url = honor_img_url  # type: str
        self.honor_name = honor_name  # type: str
        self.honor_pendant_img_url = honor_pendant_img_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgHonorsResponseBodyOpenHonors, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.honor_desc is not None:
            result['honorDesc'] = self.honor_desc
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.honor_img_url is not None:
            result['honorImgUrl'] = self.honor_img_url
        if self.honor_name is not None:
            result['honorName'] = self.honor_name
        if self.honor_pendant_img_url is not None:
            result['honorPendantImgUrl'] = self.honor_pendant_img_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('honorDesc') is not None:
            self.honor_desc = m.get('honorDesc')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('honorImgUrl') is not None:
            self.honor_img_url = m.get('honorImgUrl')
        if m.get('honorName') is not None:
            self.honor_name = m.get('honorName')
        if m.get('honorPendantImgUrl') is not None:
            self.honor_pendant_img_url = m.get('honorPendantImgUrl')
        return self


class QueryOrgHonorsResponseBody(TeaModel):
    def __init__(self, next_token=None, open_honors=None, request_id=None):
        self.next_token = next_token  # type: str
        self.open_honors = open_honors  # type: list[QueryOrgHonorsResponseBodyOpenHonors]
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.open_honors:
            for k in self.open_honors:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryOrgHonorsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        result['openHonors'] = []
        if self.open_honors is not None:
            for k in self.open_honors:
                result['openHonors'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        self.open_honors = []
        if m.get('openHonors') is not None:
            for k in m.get('openHonors'):
                temp_model = QueryOrgHonorsResponseBodyOpenHonors()
                self.open_honors.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class QueryOrgHonorsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryOrgHonorsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryOrgHonorsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryOrgHonorsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOrgTodoTasksHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgTodoTasksHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryOrgTodoTasksHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryOrgTodoTasksHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryOrgTodoTasksHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryOrgTodoTasksHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryOrgTodoTasksShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgTodoTasksShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryOrgTodoTasksRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgTodoTasksRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryOrgTodoTasksRequest(TeaModel):
    def __init__(self, tenant_context=None, is_done=None, next_token=None):
        self.tenant_context = tenant_context  # type: QueryOrgTodoTasksRequestTenantContext
        self.is_done = is_done  # type: bool
        self.next_token = next_token  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryOrgTodoTasksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.is_done is not None:
            result['isDone'] = self.is_done
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = QueryOrgTodoTasksRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('isDone') is not None:
            self.is_done = m.get('isDone')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class QueryOrgTodoTasksShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, is_done=None, next_token=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.is_done = is_done  # type: bool
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgTodoTasksShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.is_done is not None:
            result['isDone'] = self.is_done
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('isDone') is not None:
            self.is_done = m.get('isDone')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        return self


class QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl(TeaModel):
    def __init__(self, app_url=None, pc_url=None):
        self.app_url = app_url  # type: str
        self.pc_url = pc_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_url is not None:
            result['appUrl'] = self.app_url
        if self.pc_url is not None:
            result['pcUrl'] = self.pc_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('appUrl') is not None:
            self.app_url = m.get('appUrl')
        if m.get('pcUrl') is not None:
            self.pc_url = m.get('pcUrl')
        return self


class QueryOrgTodoTasksResponseBodyTodoCards(TeaModel):
    def __init__(self, biz_tag=None, created_time=None, creator_id=None, detail_url=None, due_time=None,
                 is_done=None, modified_time=None, priority=None, source_id=None, subject=None, task_id=None):
        self.biz_tag = biz_tag  # type: str
        self.created_time = created_time  # type: long
        self.creator_id = creator_id  # type: str
        self.detail_url = detail_url  # type: QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl
        self.due_time = due_time  # type: long
        self.is_done = is_done  # type: bool
        self.modified_time = modified_time  # type: long
        self.priority = priority  # type: int
        self.source_id = source_id  # type: str
        self.subject = subject  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.detail_url:
            self.detail_url.validate()

    def to_map(self):
        _map = super(QueryOrgTodoTasksResponseBodyTodoCards, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_tag is not None:
            result['bizTag'] = self.biz_tag
        if self.created_time is not None:
            result['createdTime'] = self.created_time
        if self.creator_id is not None:
            result['creatorId'] = self.creator_id
        if self.detail_url is not None:
            result['detailUrl'] = self.detail_url.to_map()
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.is_done is not None:
            result['isDone'] = self.is_done
        if self.modified_time is not None:
            result['modifiedTime'] = self.modified_time
        if self.priority is not None:
            result['priority'] = self.priority
        if self.source_id is not None:
            result['sourceId'] = self.source_id
        if self.subject is not None:
            result['subject'] = self.subject
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bizTag') is not None:
            self.biz_tag = m.get('bizTag')
        if m.get('createdTime') is not None:
            self.created_time = m.get('createdTime')
        if m.get('creatorId') is not None:
            self.creator_id = m.get('creatorId')
        if m.get('detailUrl') is not None:
            temp_model = QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl()
            self.detail_url = temp_model.from_map(m['detailUrl'])
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('isDone') is not None:
            self.is_done = m.get('isDone')
        if m.get('modifiedTime') is not None:
            self.modified_time = m.get('modifiedTime')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('sourceId') is not None:
            self.source_id = m.get('sourceId')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class QueryOrgTodoTasksResponseBody(TeaModel):
    def __init__(self, next_token=None, request_id=None, todo_cards=None):
        self.next_token = next_token  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.todo_cards = todo_cards  # type: list[QueryOrgTodoTasksResponseBodyTodoCards]

    def validate(self):
        if self.todo_cards:
            for k in self.todo_cards:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryOrgTodoTasksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['todoCards'] = []
        if self.todo_cards is not None:
            for k in self.todo_cards:
                result['todoCards'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.todo_cards = []
        if m.get('todoCards') is not None:
            for k in m.get('todoCards'):
                temp_model = QueryOrgTodoTasksResponseBodyTodoCards()
                self.todo_cards.append(temp_model.from_map(k))
        return self


class QueryOrgTodoTasksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryOrgTodoTasksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryOrgTodoTasksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryOrgTodoTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryScheduleConferenceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScheduleConferenceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryScheduleConferenceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryScheduleConferenceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryScheduleConferenceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryScheduleConferenceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryScheduleConferenceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScheduleConferenceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryScheduleConferenceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScheduleConferenceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryScheduleConferenceRequest(TeaModel):
    def __init__(self, request_union_id=None, tenant_context=None):
        self.request_union_id = request_union_id  # type: str
        self.tenant_context = tenant_context  # type: QueryScheduleConferenceRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryScheduleConferenceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_union_id is not None:
            result['RequestUnionId'] = self.request_union_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestUnionId') is not None:
            self.request_union_id = m.get('RequestUnionId')
        if m.get('TenantContext') is not None:
            temp_model = QueryScheduleConferenceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class QueryScheduleConferenceShrinkRequest(TeaModel):
    def __init__(self, request_union_id=None, tenant_context_shrink=None):
        self.request_union_id = request_union_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScheduleConferenceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_union_id is not None:
            result['RequestUnionId'] = self.request_union_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestUnionId') is not None:
            self.request_union_id = m.get('RequestUnionId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class QueryScheduleConferenceResponseBody(TeaModel):
    def __init__(self, end_time=None, phones=None, request_id=None, room_code=None, schedule_conference_id=None,
                 start_time=None, title=None, url=None):
        self.end_time = end_time  # type: long
        self.phones = phones  # type: list[str]
        self.request_id = request_id  # type: str
        self.room_code = room_code  # type: str
        self.schedule_conference_id = schedule_conference_id  # type: str
        self.start_time = start_time  # type: long
        self.title = title  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScheduleConferenceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.phones is not None:
            result['phones'] = self.phones
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.room_code is not None:
            result['roomCode'] = self.room_code
        if self.schedule_conference_id is not None:
            result['scheduleConferenceId'] = self.schedule_conference_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.title is not None:
            result['title'] = self.title
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('phones') is not None:
            self.phones = m.get('phones')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('roomCode') is not None:
            self.room_code = m.get('roomCode')
        if m.get('scheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('scheduleConferenceId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class QueryScheduleConferenceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryScheduleConferenceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryScheduleConferenceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryUserHonorsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryUserHonorsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class QueryUserHonorsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: QueryUserHonorsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(QueryUserHonorsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = QueryUserHonorsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class QueryUserHonorsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryUserHonorsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class QueryUserHonorsRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryUserHonorsRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class QueryUserHonorsRequest(TeaModel):
    def __init__(self, tenant_context=None, max_results=None, next_token=None, org_id=None, user_id=None):
        self.tenant_context = tenant_context  # type: QueryUserHonorsRequestTenantContext
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(QueryUserHonorsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = QueryUserHonorsRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class QueryUserHonorsShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, max_results=None, next_token=None, org_id=None, user_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryUserHonorsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.max_results is not None:
            result['maxResults'] = self.max_results
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('maxResults') is not None:
            self.max_results = m.get('maxResults')
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class QueryUserHonorsResponseBodyHonorsGrantHistory(TeaModel):
    def __init__(self, grant_time=None, sender_userid=None):
        self.grant_time = grant_time  # type: long
        self.sender_userid = sender_userid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryUserHonorsResponseBodyHonorsGrantHistory, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.grant_time is not None:
            result['grantTime'] = self.grant_time
        if self.sender_userid is not None:
            result['senderUserid'] = self.sender_userid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('grantTime') is not None:
            self.grant_time = m.get('grantTime')
        if m.get('senderUserid') is not None:
            self.sender_userid = m.get('senderUserid')
        return self


class QueryUserHonorsResponseBodyHonors(TeaModel):
    def __init__(self, expiration_time=None, grant_history=None, honor_desc=None, honor_id=None, honor_name=None):
        self.expiration_time = expiration_time  # type: long
        self.grant_history = grant_history  # type: list[QueryUserHonorsResponseBodyHonorsGrantHistory]
        self.honor_desc = honor_desc  # type: str
        self.honor_id = honor_id  # type: str
        self.honor_name = honor_name  # type: str

    def validate(self):
        if self.grant_history:
            for k in self.grant_history:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryUserHonorsResponseBodyHonors, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiration_time is not None:
            result['expirationTime'] = self.expiration_time
        result['grantHistory'] = []
        if self.grant_history is not None:
            for k in self.grant_history:
                result['grantHistory'].append(k.to_map() if k else None)
        if self.honor_desc is not None:
            result['honorDesc'] = self.honor_desc
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.honor_name is not None:
            result['honorName'] = self.honor_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expirationTime') is not None:
            self.expiration_time = m.get('expirationTime')
        self.grant_history = []
        if m.get('grantHistory') is not None:
            for k in m.get('grantHistory'):
                temp_model = QueryUserHonorsResponseBodyHonorsGrantHistory()
                self.grant_history.append(temp_model.from_map(k))
        if m.get('honorDesc') is not None:
            self.honor_desc = m.get('honorDesc')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('honorName') is not None:
            self.honor_name = m.get('honorName')
        return self


class QueryUserHonorsResponseBody(TeaModel):
    def __init__(self, honors=None, next_token=None, request_id=None):
        self.honors = honors  # type: list[QueryUserHonorsResponseBodyHonors]
        self.next_token = next_token  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        if self.honors:
            for k in self.honors:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryUserHonorsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['honors'] = []
        if self.honors is not None:
            for k in self.honors:
                result['honors'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['nextToken'] = self.next_token
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.honors = []
        if m.get('honors') is not None:
            for k in m.get('honors'):
                temp_model = QueryUserHonorsResponseBodyHonors()
                self.honors.append(temp_model.from_map(k))
        if m.get('nextToken') is not None:
            self.next_token = m.get('nextToken')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class QueryUserHonorsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryUserHonorsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryUserHonorsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryUserHonorsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RecallHonorHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecallHonorHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class RecallHonorHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: RecallHonorHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(RecallHonorHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = RecallHonorHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class RecallHonorShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecallHonorShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class RecallHonorRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecallHonorRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class RecallHonorRequest(TeaModel):
    def __init__(self, tenant_context=None, honor_id=None, org_id=None, user_id=None):
        self.tenant_context = tenant_context  # type: RecallHonorRequestTenantContext
        self.honor_id = honor_id  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(RecallHonorRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = RecallHonorRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class RecallHonorShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, honor_id=None, org_id=None, user_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.honor_id = honor_id  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecallHonorShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class RecallHonorResponseBodyContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: any

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecallHonorResponseBodyContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class RecallHonorResponseBody(TeaModel):
    def __init__(self, content=None, error_code=None, error_ctx=None, error_msg=None, http_status_code=None,
                 request_id=None, success=None):
        self.content = content  # type: RecallHonorResponseBodyContent
        self.error_code = error_code  # type: str
        self.error_ctx = error_ctx  # type: dict[str, any]
        self.error_msg = error_msg  # type: str
        self.http_status_code = http_status_code  # type: int
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(RecallHonorResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            temp_model = RecallHonorResponseBodyContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class RecallHonorResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RecallHonorResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RecallHonorResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RecallHonorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReceiverListReportHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReceiverListReportHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class ReceiverListReportHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: ReceiverListReportHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(ReceiverListReportHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = ReceiverListReportHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class ReceiverListReportShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReceiverListReportShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class ReceiverListReportRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReceiverListReportRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class ReceiverListReportRequest(TeaModel):
    def __init__(self, offset=None, report_id=None, size=None, tenant_context=None):
        self.offset = offset  # type: long
        self.report_id = report_id  # type: str
        self.size = size  # type: long
        self.tenant_context = tenant_context  # type: ReceiverListReportRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(ReceiverListReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            temp_model = ReceiverListReportRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class ReceiverListReportShrinkRequest(TeaModel):
    def __init__(self, offset=None, report_id=None, size=None, tenant_context_shrink=None):
        self.offset = offset  # type: long
        self.report_id = report_id  # type: str
        self.size = size  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReceiverListReportShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class ReceiverListReportResponseBody(TeaModel):
    def __init__(self, has_more=None, next_cursor=None, request_id=None, userid_list=None):
        self.has_more = has_more  # type: bool
        self.next_cursor = next_cursor  # type: long
        # requestId
        self.request_id = request_id  # type: str
        self.userid_list = userid_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReceiverListReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.userid_list is not None:
            result['useridList'] = self.userid_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('useridList') is not None:
            self.userid_list = m.get('useridList')
        return self


class ReceiverListReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ReceiverListReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ReceiverListReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ReceiverListReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveAttendeeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveAttendeeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class RemoveAttendeeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: RemoveAttendeeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(RemoveAttendeeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = RemoveAttendeeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class RemoveAttendeeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveAttendeeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class RemoveAttendeeRequest(TeaModel):
    def __init__(self, attendees_to_remove=None, calendar_id=None, event_id=None):
        self.attendees_to_remove = attendees_to_remove  # type: list[str]
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveAttendeeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attendees_to_remove is not None:
            result['AttendeesToRemove'] = self.attendees_to_remove
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttendeesToRemove') is not None:
            self.attendees_to_remove = m.get('AttendeesToRemove')
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        return self


class RemoveAttendeeShrinkRequest(TeaModel):
    def __init__(self, attendees_to_remove_shrink=None, calendar_id=None, event_id=None):
        self.attendees_to_remove_shrink = attendees_to_remove_shrink  # type: str
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveAttendeeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attendees_to_remove_shrink is not None:
            result['AttendeesToRemove'] = self.attendees_to_remove_shrink
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttendeesToRemove') is not None:
            self.attendees_to_remove_shrink = m.get('AttendeesToRemove')
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        return self


class RemoveAttendeeResponseBodyContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: any

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveAttendeeResponseBodyContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        return self


class RemoveAttendeeResponseBody(TeaModel):
    def __init__(self, content=None, error_code=None, error_ctx=None, error_msg=None, http_status_code=None,
                 request_id=None, success=None):
        self.content = content  # type: RemoveAttendeeResponseBodyContent
        self.error_code = error_code  # type: str
        self.error_ctx = error_ctx  # type: dict[str, any]
        self.error_msg = error_msg  # type: str
        self.http_status_code = http_status_code  # type: int
        # RequestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(RemoveAttendeeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_ctx is not None:
            result['ErrorCtx'] = self.error_ctx
        if self.error_msg is not None:
            result['ErrorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = RemoveAttendeeResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorCtx') is not None:
            self.error_ctx = m.get('ErrorCtx')
        if m.get('ErrorMsg') is not None:
            self.error_msg = m.get('ErrorMsg')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemoveAttendeeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RemoveAttendeeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemoveAttendeeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveAttendeeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveMeetingRoomsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveMeetingRoomsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class RemoveMeetingRoomsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: RemoveMeetingRoomsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(RemoveMeetingRoomsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = RemoveMeetingRoomsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class RemoveMeetingRoomsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveMeetingRoomsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class RemoveMeetingRoomsRequestMeetingRoomsToRemove(TeaModel):
    def __init__(self, room_id=None):
        self.room_id = room_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveMeetingRoomsRequestMeetingRoomsToRemove, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        return self


class RemoveMeetingRoomsRequest(TeaModel):
    def __init__(self, calendar_id=None, event_id=None, meeting_rooms_to_remove=None):
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.meeting_rooms_to_remove = meeting_rooms_to_remove  # type: list[RemoveMeetingRoomsRequestMeetingRoomsToRemove]

    def validate(self):
        if self.meeting_rooms_to_remove:
            for k in self.meeting_rooms_to_remove:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(RemoveMeetingRoomsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        result['MeetingRoomsToRemove'] = []
        if self.meeting_rooms_to_remove is not None:
            for k in self.meeting_rooms_to_remove:
                result['MeetingRoomsToRemove'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        self.meeting_rooms_to_remove = []
        if m.get('MeetingRoomsToRemove') is not None:
            for k in m.get('MeetingRoomsToRemove'):
                temp_model = RemoveMeetingRoomsRequestMeetingRoomsToRemove()
                self.meeting_rooms_to_remove.append(temp_model.from_map(k))
        return self


class RemoveMeetingRoomsShrinkRequest(TeaModel):
    def __init__(self, calendar_id=None, event_id=None, meeting_rooms_to_remove_shrink=None):
        self.calendar_id = calendar_id  # type: str
        self.event_id = event_id  # type: str
        self.meeting_rooms_to_remove_shrink = meeting_rooms_to_remove_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveMeetingRoomsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.meeting_rooms_to_remove_shrink is not None:
            result['MeetingRoomsToRemove'] = self.meeting_rooms_to_remove_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('MeetingRoomsToRemove') is not None:
            self.meeting_rooms_to_remove_shrink = m.get('MeetingRoomsToRemove')
        return self


class RemoveMeetingRoomsResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveMeetingRoomsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class RemoveMeetingRoomsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RemoveMeetingRoomsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemoveMeetingRoomsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveMeetingRoomsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveContentHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContentHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SaveContentHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SaveContentHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SaveContentHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SaveContentHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SaveContentShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContentShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SaveContentRequestContents(TeaModel):
    def __init__(self, content=None, content_type=None, key=None, sort=None, type=None):
        self.content = content  # type: str
        self.content_type = content_type  # type: str
        self.key = key  # type: str
        self.sort = sort  # type: long
        self.type = type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContentRequestContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.key is not None:
            result['Key'] = self.key
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SaveContentRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContentRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class SaveContentRequest(TeaModel):
    def __init__(self, contents=None, dd_from=None, template_id=None, tenant_context=None):
        self.contents = contents  # type: list[SaveContentRequestContents]
        self.dd_from = dd_from  # type: str
        self.template_id = template_id  # type: str
        self.tenant_context = tenant_context  # type: SaveContentRequestTenantContext

    def validate(self):
        if self.contents:
            for k in self.contents:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(SaveContentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Contents'] = []
        if self.contents is not None:
            for k in self.contents:
                result['Contents'].append(k.to_map() if k else None)
        if self.dd_from is not None:
            result['DdFrom'] = self.dd_from
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contents = []
        if m.get('Contents') is not None:
            for k in m.get('Contents'):
                temp_model = SaveContentRequestContents()
                self.contents.append(temp_model.from_map(k))
        if m.get('DdFrom') is not None:
            self.dd_from = m.get('DdFrom')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TenantContext') is not None:
            temp_model = SaveContentRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class SaveContentShrinkRequest(TeaModel):
    def __init__(self, contents_shrink=None, dd_from=None, template_id=None, tenant_context_shrink=None):
        self.contents_shrink = contents_shrink  # type: str
        self.dd_from = dd_from  # type: str
        self.template_id = template_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContentShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contents_shrink is not None:
            result['Contents'] = self.contents_shrink
        if self.dd_from is not None:
            result['DdFrom'] = self.dd_from
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Contents') is not None:
            self.contents_shrink = m.get('Contents')
        if m.get('DdFrom') is not None:
            self.dd_from = m.get('DdFrom')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class SaveContentResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class SaveContentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveContentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveContentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveFormDataHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveFormDataHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SaveFormDataHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SaveFormDataHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SaveFormDataHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SaveFormDataHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SaveFormDataShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveFormDataShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SaveFormDataRequest(TeaModel):
    def __init__(self, app_type=None, form_data_json=None, form_uuid=None, language=None, system_token=None):
        self.app_type = app_type  # type: str
        self.form_data_json = form_data_json  # type: str
        self.form_uuid = form_uuid  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveFormDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_data_json is not None:
            result['FormDataJson'] = self.form_data_json
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormDataJson') is not None:
            self.form_data_json = m.get('FormDataJson')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class SaveFormDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveFormDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SaveFormDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveFormDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveFormDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveFormDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchEmployeeFieldValuesHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchEmployeeFieldValuesHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SearchEmployeeFieldValuesHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SearchEmployeeFieldValuesHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SearchEmployeeFieldValuesHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SearchEmployeeFieldValuesHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SearchEmployeeFieldValuesShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchEmployeeFieldValuesShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SearchEmployeeFieldValuesRequest(TeaModel):
    def __init__(self, app_type=None, create_from_time_gmt=None, create_to_time_gmt=None, form_uuid=None,
                 language=None, modified_from_time_gmt=None, modified_to_time_gmt=None, originator_id=None,
                 search_field_json=None, system_token=None, target_field_json=None):
        self.app_type = app_type  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: str
        self.create_to_time_gmt = create_to_time_gmt  # type: str
        self.form_uuid = form_uuid  # type: str
        self.language = language  # type: str
        self.modified_from_time_gmt = modified_from_time_gmt  # type: str
        self.modified_to_time_gmt = modified_to_time_gmt  # type: str
        self.originator_id = originator_id  # type: str
        self.search_field_json = search_field_json  # type: str
        self.system_token = system_token  # type: str
        self.target_field_json = target_field_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchEmployeeFieldValuesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.language is not None:
            result['Language'] = self.language
        if self.modified_from_time_gmt is not None:
            result['ModifiedFromTimeGMT'] = self.modified_from_time_gmt
        if self.modified_to_time_gmt is not None:
            result['ModifiedToTimeGMT'] = self.modified_to_time_gmt
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.search_field_json is not None:
            result['SearchFieldJson'] = self.search_field_json
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.target_field_json is not None:
            result['TargetFieldJson'] = self.target_field_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ModifiedFromTimeGMT') is not None:
            self.modified_from_time_gmt = m.get('ModifiedFromTimeGMT')
        if m.get('ModifiedToTimeGMT') is not None:
            self.modified_to_time_gmt = m.get('ModifiedToTimeGMT')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('SearchFieldJson') is not None:
            self.search_field_json = m.get('SearchFieldJson')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('TargetFieldJson') is not None:
            self.target_field_json = m.get('TargetFieldJson')
        return self


class SearchEmployeeFieldValuesResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchEmployeeFieldValuesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SearchEmployeeFieldValuesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SearchEmployeeFieldValuesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SearchEmployeeFieldValuesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchEmployeeFieldValuesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchFormDataIdListHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataIdListHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SearchFormDataIdListHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SearchFormDataIdListHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SearchFormDataIdListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SearchFormDataIdListHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SearchFormDataIdListShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataIdListShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SearchFormDataIdListRequest(TeaModel):
    def __init__(self, app_type=None, create_from_time_gmt=None, create_to_time_gmt=None, form_uuid=None,
                 language=None, modified_from_time_gmt=None, modified_to_time_gmt=None, originator_id=None,
                 page_number=None, page_size=None, search_field_json=None, system_token=None):
        self.app_type = app_type  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: str
        self.create_to_time_gmt = create_to_time_gmt  # type: str
        self.form_uuid = form_uuid  # type: str
        self.language = language  # type: str
        self.modified_from_time_gmt = modified_from_time_gmt  # type: str
        self.modified_to_time_gmt = modified_to_time_gmt  # type: str
        self.originator_id = originator_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.search_field_json = search_field_json  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataIdListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.language is not None:
            result['Language'] = self.language
        if self.modified_from_time_gmt is not None:
            result['ModifiedFromTimeGMT'] = self.modified_from_time_gmt
        if self.modified_to_time_gmt is not None:
            result['ModifiedToTimeGMT'] = self.modified_to_time_gmt
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_field_json is not None:
            result['SearchFieldJson'] = self.search_field_json
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ModifiedFromTimeGMT') is not None:
            self.modified_from_time_gmt = m.get('ModifiedFromTimeGMT')
        if m.get('ModifiedToTimeGMT') is not None:
            self.modified_to_time_gmt = m.get('ModifiedToTimeGMT')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchFieldJson') is not None:
            self.search_field_json = m.get('SearchFieldJson')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class SearchFormDataIdListResponseBody(TeaModel):
    def __init__(self, data=None, page_number=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.data = data  # type: list[str]
        self.page_number = page_number  # type: long
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: long
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataIdListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SearchFormDataIdListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SearchFormDataIdListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SearchFormDataIdListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchFormDataIdListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchFormDataSecondGenerationHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SearchFormDataSecondGenerationHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SearchFormDataSecondGenerationHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SearchFormDataSecondGenerationHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SearchFormDataSecondGenerationShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SearchFormDataSecondGenerationRequest(TeaModel):
    def __init__(self, app_type=None, create_from_time_gmt=None, create_to_time_gmt=None, form_uuid=None,
                 modified_from_time_gmt=None, modified_to_time_gmt=None, order_config_json=None, originator_id=None, page_number=None,
                 page_size=None, search_condition=None, system_token=None):
        self.app_type = app_type  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: str
        self.create_to_time_gmt = create_to_time_gmt  # type: str
        self.form_uuid = form_uuid  # type: str
        self.modified_from_time_gmt = modified_from_time_gmt  # type: str
        self.modified_to_time_gmt = modified_to_time_gmt  # type: str
        self.order_config_json = order_config_json  # type: str
        self.originator_id = originator_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.search_condition = search_condition  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.modified_from_time_gmt is not None:
            result['ModifiedFromTimeGMT'] = self.modified_from_time_gmt
        if self.modified_to_time_gmt is not None:
            result['ModifiedToTimeGMT'] = self.modified_to_time_gmt
        if self.order_config_json is not None:
            result['OrderConfigJson'] = self.order_config_json
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_condition is not None:
            result['SearchCondition'] = self.search_condition
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('ModifiedFromTimeGMT') is not None:
            self.modified_from_time_gmt = m.get('ModifiedFromTimeGMT')
        if m.get('ModifiedToTimeGMT') is not None:
            self.modified_to_time_gmt = m.get('ModifiedToTimeGMT')
        if m.get('OrderConfigJson') is not None:
            self.order_config_json = m.get('OrderConfigJson')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchCondition') is not None:
            self.search_condition = m.get('SearchCondition')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class SearchFormDataSecondGenerationResponseBodyDataModifyUserName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationResponseBodyDataModifyUserName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        return self


class SearchFormDataSecondGenerationResponseBodyDataModifyUser(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: SearchFormDataSecondGenerationResponseBodyDataModifyUserName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationResponseBodyDataModifyUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            temp_model = SearchFormDataSecondGenerationResponseBodyDataModifyUserName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class SearchFormDataSecondGenerationResponseBodyDataOriginatorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationResponseBodyDataOriginatorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        return self


class SearchFormDataSecondGenerationResponseBodyDataOriginator(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: SearchFormDataSecondGenerationResponseBodyDataOriginatorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationResponseBodyDataOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            temp_model = SearchFormDataSecondGenerationResponseBodyDataOriginatorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class SearchFormDataSecondGenerationResponseBodyData(TeaModel):
    def __init__(self, create_time_gmt=None, creator_user_id=None, form_data=None, form_instance_id=None,
                 form_uuid=None, id=None, instance_value=None, modified_time_gmt=None, modifier=None, modify_user=None,
                 originator=None, sequence=None, serial_number=None, title=None, version=None):
        self.create_time_gmt = create_time_gmt  # type: str
        self.creator_user_id = creator_user_id  # type: str
        self.form_data = form_data  # type: dict[str, any]
        self.form_instance_id = form_instance_id  # type: str
        self.form_uuid = form_uuid  # type: str
        self.id = id  # type: long
        self.instance_value = instance_value  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.modifier = modifier  # type: str
        self.modify_user = modify_user  # type: SearchFormDataSecondGenerationResponseBodyDataModifyUser
        self.originator = originator  # type: SearchFormDataSecondGenerationResponseBodyDataOriginator
        self.sequence = sequence  # type: str
        self.serial_number = serial_number  # type: str
        self.title = title  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.modify_user:
            self.modify_user.validate()
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time_gmt is not None:
            result['CreateTimeGMT'] = self.create_time_gmt
        if self.creator_user_id is not None:
            result['CreatorUserId'] = self.creator_user_id
        if self.form_data is not None:
            result['FormData'] = self.form_data
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_value is not None:
            result['InstanceValue'] = self.instance_value
        if self.modified_time_gmt is not None:
            result['ModifiedTimeGMT'] = self.modified_time_gmt
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.modify_user is not None:
            result['ModifyUser'] = self.modify_user.to_map()
        if self.originator is not None:
            result['Originator'] = self.originator.to_map()
        if self.sequence is not None:
            result['Sequence'] = self.sequence
        if self.serial_number is not None:
            result['SerialNumber'] = self.serial_number
        if self.title is not None:
            result['Title'] = self.title
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTimeGMT') is not None:
            self.create_time_gmt = m.get('CreateTimeGMT')
        if m.get('CreatorUserId') is not None:
            self.creator_user_id = m.get('CreatorUserId')
        if m.get('FormData') is not None:
            self.form_data = m.get('FormData')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceValue') is not None:
            self.instance_value = m.get('InstanceValue')
        if m.get('ModifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('ModifiedTimeGMT')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('ModifyUser') is not None:
            temp_model = SearchFormDataSecondGenerationResponseBodyDataModifyUser()
            self.modify_user = temp_model.from_map(m['ModifyUser'])
        if m.get('Originator') is not None:
            temp_model = SearchFormDataSecondGenerationResponseBodyDataOriginator()
            self.originator = temp_model.from_map(m['Originator'])
        if m.get('Sequence') is not None:
            self.sequence = m.get('Sequence')
        if m.get('SerialNumber') is not None:
            self.serial_number = m.get('SerialNumber')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class SearchFormDataSecondGenerationResponseBody(TeaModel):
    def __init__(self, data=None, page_number=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.data = data  # type: list[SearchFormDataSecondGenerationResponseBodyData]
        self.page_number = page_number  # type: long
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: long
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = SearchFormDataSecondGenerationResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SearchFormDataSecondGenerationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SearchFormDataSecondGenerationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchFormDataSecondGenerationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SearchFormDataSecondGenerationNoTableFieldHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SearchFormDataSecondGenerationNoTableFieldShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SearchFormDataSecondGenerationNoTableFieldRequest(TeaModel):
    def __init__(self, app_type=None, create_from_time_gmt=None, create_to_time_gmt=None, form_uuid=None,
                 modified_from_time_gmt=None, modified_to_time_gmt=None, order_config_json=None, originator_id=None, page_number=None,
                 page_size=None, search_condition=None, system_token=None):
        self.app_type = app_type  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: str
        self.create_to_time_gmt = create_to_time_gmt  # type: str
        self.form_uuid = form_uuid  # type: str
        self.modified_from_time_gmt = modified_from_time_gmt  # type: str
        self.modified_to_time_gmt = modified_to_time_gmt  # type: str
        self.order_config_json = order_config_json  # type: str
        self.originator_id = originator_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.search_condition = search_condition  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.modified_from_time_gmt is not None:
            result['ModifiedFromTimeGMT'] = self.modified_from_time_gmt
        if self.modified_to_time_gmt is not None:
            result['ModifiedToTimeGMT'] = self.modified_to_time_gmt
        if self.order_config_json is not None:
            result['OrderConfigJson'] = self.order_config_json
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_condition is not None:
            result['SearchCondition'] = self.search_condition
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('ModifiedFromTimeGMT') is not None:
            self.modified_from_time_gmt = m.get('ModifiedFromTimeGMT')
        if m.get('ModifiedToTimeGMT') is not None:
            self.modified_to_time_gmt = m.get('ModifiedToTimeGMT')
        if m.get('OrderConfigJson') is not None:
            self.order_config_json = m.get('OrderConfigJson')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchCondition') is not None:
            self.search_condition = m.get('SearchCondition')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        return self


class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            temp_model = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        return self


class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator(TeaModel):
    def __init__(self, name=None, user_id=None):
        self.name = name  # type: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName
        self.user_id = user_id  # type: str

    def validate(self):
        if self.name:
            self.name.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            temp_model = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName()
            self.name = temp_model.from_map(m['Name'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class SearchFormDataSecondGenerationNoTableFieldResponseBodyData(TeaModel):
    def __init__(self, create_time_gmt=None, creator_user_id=None, form_data=None, form_instance_id=None,
                 form_uuid=None, id=None, instance_value=None, modified_time_gmt=None, modifier=None, modify_user=None,
                 originator=None, sequence=None, serial_number=None, title=None, version=None):
        self.create_time_gmt = create_time_gmt  # type: str
        self.creator_user_id = creator_user_id  # type: str
        self.form_data = form_data  # type: dict[str, any]
        self.form_instance_id = form_instance_id  # type: str
        self.form_uuid = form_uuid  # type: str
        self.id = id  # type: long
        self.instance_value = instance_value  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.modifier = modifier  # type: str
        self.modify_user = modify_user  # type: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser
        self.originator = originator  # type: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator
        self.sequence = sequence  # type: str
        self.serial_number = serial_number  # type: str
        self.title = title  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.modify_user:
            self.modify_user.validate()
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time_gmt is not None:
            result['CreateTimeGMT'] = self.create_time_gmt
        if self.creator_user_id is not None:
            result['CreatorUserId'] = self.creator_user_id
        if self.form_data is not None:
            result['FormData'] = self.form_data
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_value is not None:
            result['InstanceValue'] = self.instance_value
        if self.modified_time_gmt is not None:
            result['ModifiedTimeGMT'] = self.modified_time_gmt
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.modify_user is not None:
            result['ModifyUser'] = self.modify_user.to_map()
        if self.originator is not None:
            result['Originator'] = self.originator.to_map()
        if self.sequence is not None:
            result['Sequence'] = self.sequence
        if self.serial_number is not None:
            result['SerialNumber'] = self.serial_number
        if self.title is not None:
            result['Title'] = self.title
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTimeGMT') is not None:
            self.create_time_gmt = m.get('CreateTimeGMT')
        if m.get('CreatorUserId') is not None:
            self.creator_user_id = m.get('CreatorUserId')
        if m.get('FormData') is not None:
            self.form_data = m.get('FormData')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceValue') is not None:
            self.instance_value = m.get('InstanceValue')
        if m.get('ModifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('ModifiedTimeGMT')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('ModifyUser') is not None:
            temp_model = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser()
            self.modify_user = temp_model.from_map(m['ModifyUser'])
        if m.get('Originator') is not None:
            temp_model = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator()
            self.originator = temp_model.from_map(m['Originator'])
        if m.get('Sequence') is not None:
            self.sequence = m.get('Sequence')
        if m.get('SerialNumber') is not None:
            self.serial_number = m.get('SerialNumber')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class SearchFormDataSecondGenerationNoTableFieldResponseBody(TeaModel):
    def __init__(self, data=None, page_number=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.data = data  # type: list[SearchFormDataSecondGenerationNoTableFieldResponseBodyData]
        self.page_number = page_number  # type: long
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: long
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['pageNumber'] = self.page_number
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = SearchFormDataSecondGenerationNoTableFieldResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('pageNumber') is not None:
            self.page_number = m.get('pageNumber')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SearchFormDataSecondGenerationNoTableFieldResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SearchFormDataSecondGenerationNoTableFieldResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SearchFormDataSecondGenerationNoTableFieldResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchFormDataSecondGenerationNoTableFieldResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchFormDatasHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDatasHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SearchFormDatasHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SearchFormDatasHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SearchFormDatasHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SearchFormDatasHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SearchFormDatasShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDatasShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SearchFormDatasRequest(TeaModel):
    def __init__(self, app_type=None, create_from_time_gmt=None, create_to_time_gmt=None, current_page=None,
                 dynamic_order=None, form_uuid=None, language=None, modified_from_time_gmt=None, modified_to_time_gmt=None,
                 originator_id=None, page_size=None, search_field_json=None, system_token=None):
        self.app_type = app_type  # type: str
        self.create_from_time_gmt = create_from_time_gmt  # type: str
        self.create_to_time_gmt = create_to_time_gmt  # type: str
        self.current_page = current_page  # type: int
        self.dynamic_order = dynamic_order  # type: str
        self.form_uuid = form_uuid  # type: str
        self.language = language  # type: str
        self.modified_from_time_gmt = modified_from_time_gmt  # type: str
        self.modified_to_time_gmt = modified_to_time_gmt  # type: str
        self.originator_id = originator_id  # type: str
        self.page_size = page_size  # type: int
        self.search_field_json = search_field_json  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDatasRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.create_from_time_gmt is not None:
            result['CreateFromTimeGMT'] = self.create_from_time_gmt
        if self.create_to_time_gmt is not None:
            result['CreateToTimeGMT'] = self.create_to_time_gmt
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.dynamic_order is not None:
            result['DynamicOrder'] = self.dynamic_order
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.language is not None:
            result['Language'] = self.language
        if self.modified_from_time_gmt is not None:
            result['ModifiedFromTimeGMT'] = self.modified_from_time_gmt
        if self.modified_to_time_gmt is not None:
            result['ModifiedToTimeGMT'] = self.modified_to_time_gmt
        if self.originator_id is not None:
            result['OriginatorId'] = self.originator_id
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_field_json is not None:
            result['SearchFieldJson'] = self.search_field_json
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('CreateFromTimeGMT') is not None:
            self.create_from_time_gmt = m.get('CreateFromTimeGMT')
        if m.get('CreateToTimeGMT') is not None:
            self.create_to_time_gmt = m.get('CreateToTimeGMT')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('DynamicOrder') is not None:
            self.dynamic_order = m.get('DynamicOrder')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ModifiedFromTimeGMT') is not None:
            self.modified_from_time_gmt = m.get('ModifiedFromTimeGMT')
        if m.get('ModifiedToTimeGMT') is not None:
            self.modified_to_time_gmt = m.get('ModifiedToTimeGMT')
        if m.get('OriginatorId') is not None:
            self.originator_id = m.get('OriginatorId')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchFieldJson') is not None:
            self.search_field_json = m.get('SearchFieldJson')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class SearchFormDatasResponseBodyDataModifyUserUserName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDatasResponseBodyDataModifyUserUserName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SearchFormDatasResponseBodyDataModifyUser(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: SearchFormDatasResponseBodyDataModifyUserUserName

    def validate(self):
        if self.user_name:
            self.user_name.validate()

    def to_map(self):
        _map = super(SearchFormDatasResponseBodyDataModifyUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            temp_model = SearchFormDatasResponseBodyDataModifyUserUserName()
            self.user_name = temp_model.from_map(m['UserName'])
        return self


class SearchFormDatasResponseBodyDataOriginatorUserName(TeaModel):
    def __init__(self, name_in_chinese=None, name_in_english=None, type=None):
        self.name_in_chinese = name_in_chinese  # type: str
        self.name_in_english = name_in_english  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchFormDatasResponseBodyDataOriginatorUserName, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name_in_chinese is not None:
            result['NameInChinese'] = self.name_in_chinese
        if self.name_in_english is not None:
            result['NameInEnglish'] = self.name_in_english
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NameInChinese') is not None:
            self.name_in_chinese = m.get('NameInChinese')
        if m.get('NameInEnglish') is not None:
            self.name_in_english = m.get('NameInEnglish')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SearchFormDatasResponseBodyDataOriginator(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: SearchFormDatasResponseBodyDataOriginatorUserName

    def validate(self):
        if self.user_name:
            self.user_name.validate()

    def to_map(self):
        _map = super(SearchFormDatasResponseBodyDataOriginator, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            temp_model = SearchFormDatasResponseBodyDataOriginatorUserName()
            self.user_name = temp_model.from_map(m['UserName'])
        return self


class SearchFormDatasResponseBodyData(TeaModel):
    def __init__(self, created_time_gmt=None, creator_user_id=None, data_id=None, form_data=None,
                 form_instance_id=None, form_uuid=None, instance_value=None, model_uuid=None, modified_time_gmt=None,
                 modifier_user_id=None, modify_user=None, originator=None, sequence=None, serial_no=None, title=None, version=None):
        self.created_time_gmt = created_time_gmt  # type: str
        self.creator_user_id = creator_user_id  # type: str
        self.data_id = data_id  # type: long
        self.form_data = form_data  # type: dict[str, any]
        self.form_instance_id = form_instance_id  # type: str
        self.form_uuid = form_uuid  # type: str
        self.instance_value = instance_value  # type: str
        self.model_uuid = model_uuid  # type: str
        self.modified_time_gmt = modified_time_gmt  # type: str
        self.modifier_user_id = modifier_user_id  # type: str
        self.modify_user = modify_user  # type: SearchFormDatasResponseBodyDataModifyUser
        self.originator = originator  # type: SearchFormDatasResponseBodyDataOriginator
        self.sequence = sequence  # type: str
        self.serial_no = serial_no  # type: str
        self.title = title  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.modify_user:
            self.modify_user.validate()
        if self.originator:
            self.originator.validate()

    def to_map(self):
        _map = super(SearchFormDatasResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.created_time_gmt is not None:
            result['CreatedTimeGMT'] = self.created_time_gmt
        if self.creator_user_id is not None:
            result['CreatorUserId'] = self.creator_user_id
        if self.data_id is not None:
            result['DataId'] = self.data_id
        if self.form_data is not None:
            result['FormData'] = self.form_data
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.instance_value is not None:
            result['InstanceValue'] = self.instance_value
        if self.model_uuid is not None:
            result['ModelUuid'] = self.model_uuid
        if self.modified_time_gmt is not None:
            result['ModifiedTimeGMT'] = self.modified_time_gmt
        if self.modifier_user_id is not None:
            result['ModifierUserId'] = self.modifier_user_id
        if self.modify_user is not None:
            result['ModifyUser'] = self.modify_user.to_map()
        if self.originator is not None:
            result['Originator'] = self.originator.to_map()
        if self.sequence is not None:
            result['Sequence'] = self.sequence
        if self.serial_no is not None:
            result['SerialNo'] = self.serial_no
        if self.title is not None:
            result['Title'] = self.title
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreatedTimeGMT') is not None:
            self.created_time_gmt = m.get('CreatedTimeGMT')
        if m.get('CreatorUserId') is not None:
            self.creator_user_id = m.get('CreatorUserId')
        if m.get('DataId') is not None:
            self.data_id = m.get('DataId')
        if m.get('FormData') is not None:
            self.form_data = m.get('FormData')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('InstanceValue') is not None:
            self.instance_value = m.get('InstanceValue')
        if m.get('ModelUuid') is not None:
            self.model_uuid = m.get('ModelUuid')
        if m.get('ModifiedTimeGMT') is not None:
            self.modified_time_gmt = m.get('ModifiedTimeGMT')
        if m.get('ModifierUserId') is not None:
            self.modifier_user_id = m.get('ModifierUserId')
        if m.get('ModifyUser') is not None:
            temp_model = SearchFormDatasResponseBodyDataModifyUser()
            self.modify_user = temp_model.from_map(m['ModifyUser'])
        if m.get('Originator') is not None:
            temp_model = SearchFormDatasResponseBodyDataOriginator()
            self.originator = temp_model.from_map(m['Originator'])
        if m.get('Sequence') is not None:
            self.sequence = m.get('Sequence')
        if m.get('SerialNo') is not None:
            self.serial_no = m.get('SerialNo')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class SearchFormDatasResponseBody(TeaModel):
    def __init__(self, current_page=None, data=None, request_id=None, total_count=None, vendor_request_id=None,
                 vendor_type=None):
        self.current_page = current_page  # type: int
        self.data = data  # type: list[SearchFormDatasResponseBodyData]
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(SearchFormDatasResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = SearchFormDatasResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SearchFormDatasResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SearchFormDatasResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SearchFormDatasResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchFormDatasResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendBannerHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendBannerHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SendBannerHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SendBannerHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SendBannerHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SendBannerHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SendBannerShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendBannerShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SendBannerRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendBannerRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class SendBannerRequest(TeaModel):
    def __init__(self, content=None, end_time=None, start_time=None, tenant_context=None):
        self.content = content  # type: dict[str, any]
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context = tenant_context  # type: SendBannerRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(SendBannerRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            temp_model = SendBannerRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class SendBannerShrinkRequest(TeaModel):
    def __init__(self, content_shrink=None, end_time=None, start_time=None, tenant_context_shrink=None):
        self.content_shrink = content_shrink  # type: str
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendBannerShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_shrink is not None:
            result['Content'] = self.content_shrink
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content_shrink = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class SendBannerResponseBody(TeaModel):
    def __init__(self, arguments=None, request_id=None, success=None, vendor_request_id=None, vendor_type=None):
        self.arguments = arguments  # type: list[any]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendBannerResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arguments is not None:
            result['arguments'] = self.arguments
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arguments') is not None:
            self.arguments = m.get('arguments')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SendBannerResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SendBannerResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SendBannerResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SendBannerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendPopupHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendPopupHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SendPopupHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SendPopupHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SendPopupHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SendPopupHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SendPopupShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendPopupShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SendPopupRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendPopupRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class SendPopupRequest(TeaModel):
    def __init__(self, content=None, end_time=None, start_time=None, tenant_context=None):
        self.content = content  # type: dict[str, any]
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context = tenant_context  # type: SendPopupRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(SendPopupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            temp_model = SendPopupRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class SendPopupShrinkRequest(TeaModel):
    def __init__(self, content_shrink=None, end_time=None, start_time=None, tenant_context_shrink=None):
        self.content_shrink = content_shrink  # type: str
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendPopupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_shrink is not None:
            result['Content'] = self.content_shrink
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content_shrink = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class SendPopupResponseBody(TeaModel):
    def __init__(self, arguments=None, request_id=None, success=None, vendor_request_id=None, vendor_type=None):
        self.arguments = arguments  # type: list[any]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendPopupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arguments is not None:
            result['arguments'] = self.arguments
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arguments') is not None:
            self.arguments = m.get('arguments')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SendPopupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SendPopupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SendPopupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SendPopupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendSearchShadeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendSearchShadeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SendSearchShadeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SendSearchShadeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SendSearchShadeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SendSearchShadeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SendSearchShadeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendSearchShadeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SendSearchShadeRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendSearchShadeRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class SendSearchShadeRequest(TeaModel):
    def __init__(self, content=None, end_time=None, start_time=None, tenant_context=None):
        self.content = content  # type: dict[str, any]
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context = tenant_context  # type: SendSearchShadeRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(SendSearchShadeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            temp_model = SendSearchShadeRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class SendSearchShadeShrinkRequest(TeaModel):
    def __init__(self, content_shrink=None, end_time=None, start_time=None, tenant_context_shrink=None):
        self.content_shrink = content_shrink  # type: str
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendSearchShadeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_shrink is not None:
            result['Content'] = self.content_shrink
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content_shrink = m.get('Content')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class SendSearchShadeResponseBody(TeaModel):
    def __init__(self, arguments=None, request_id=None, success=None, vendor_request_id=None, vendor_type=None):
        self.arguments = arguments  # type: list[any]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendSearchShadeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arguments is not None:
            result['arguments'] = self.arguments
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arguments') is not None:
            self.arguments = m.get('arguments')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class SendSearchShadeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SendSearchShadeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SendSearchShadeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SendSearchShadeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SetColumnsVisibilityHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetColumnsVisibilityHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SetColumnsVisibilityHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SetColumnsVisibilityHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SetColumnsVisibilityHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SetColumnsVisibilityHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SetColumnsVisibilityShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetColumnsVisibilityShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SetColumnsVisibilityRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetColumnsVisibilityRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class SetColumnsVisibilityRequest(TeaModel):
    def __init__(self, column=None, column_count=None, sheet_id=None, tenant_context=None, visibility=None,
                 workbook_id=None):
        self.column = column  # type: long
        self.column_count = column_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: SetColumnsVisibilityRequestTenantContext
        self.visibility = visibility  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(SetColumnsVisibilityRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column is not None:
            result['Column'] = self.column
        if self.column_count is not None:
            result['ColumnCount'] = self.column_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.visibility is not None:
            result['Visibility'] = self.visibility
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Column') is not None:
            self.column = m.get('Column')
        if m.get('ColumnCount') is not None:
            self.column_count = m.get('ColumnCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = SetColumnsVisibilityRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Visibility') is not None:
            self.visibility = m.get('Visibility')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class SetColumnsVisibilityShrinkRequest(TeaModel):
    def __init__(self, column=None, column_count=None, sheet_id=None, tenant_context_shrink=None, visibility=None,
                 workbook_id=None):
        self.column = column  # type: long
        self.column_count = column_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.visibility = visibility  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetColumnsVisibilityShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column is not None:
            result['Column'] = self.column
        if self.column_count is not None:
            result['ColumnCount'] = self.column_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.visibility is not None:
            result['Visibility'] = self.visibility
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Column') is not None:
            self.column = m.get('Column')
        if m.get('ColumnCount') is not None:
            self.column_count = m.get('ColumnCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Visibility') is not None:
            self.visibility = m.get('Visibility')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class SetColumnsVisibilityResponseBody(TeaModel):
    def __init__(self, id=None, request_id=None):
        self.id = id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetColumnsVisibilityResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class SetColumnsVisibilityResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SetColumnsVisibilityResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SetColumnsVisibilityResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SetColumnsVisibilityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SetRowsVisibilityHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetRowsVisibilityHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SetRowsVisibilityHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SetRowsVisibilityHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SetRowsVisibilityHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SetRowsVisibilityHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SetRowsVisibilityShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetRowsVisibilityShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SetRowsVisibilityRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetRowsVisibilityRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class SetRowsVisibilityRequest(TeaModel):
    def __init__(self, row=None, row_count=None, sheet_id=None, tenant_context=None, visibility=None,
                 workbook_id=None):
        self.row = row  # type: long
        self.row_count = row_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: SetRowsVisibilityRequestTenantContext
        self.visibility = visibility  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(SetRowsVisibilityRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.row is not None:
            result['Row'] = self.row
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.visibility is not None:
            result['Visibility'] = self.visibility
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Row') is not None:
            self.row = m.get('Row')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = SetRowsVisibilityRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Visibility') is not None:
            self.visibility = m.get('Visibility')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class SetRowsVisibilityShrinkRequest(TeaModel):
    def __init__(self, row=None, row_count=None, sheet_id=None, tenant_context_shrink=None, visibility=None,
                 workbook_id=None):
        self.row = row  # type: long
        self.row_count = row_count  # type: long
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.visibility = visibility  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetRowsVisibilityShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.row is not None:
            result['Row'] = self.row
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.visibility is not None:
            result['Visibility'] = self.visibility
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Row') is not None:
            self.row = m.get('Row')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Visibility') is not None:
            self.visibility = m.get('Visibility')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class SetRowsVisibilityResponseBody(TeaModel):
    def __init__(self, id=None, request_id=None):
        self.id = id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetRowsVisibilityResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class SetRowsVisibilityResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SetRowsVisibilityResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SetRowsVisibilityResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SetRowsVisibilityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SimpleListReportHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SimpleListReportHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SimpleListReportHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SimpleListReportHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SimpleListReportHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SimpleListReportHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SimpleListReportShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SimpleListReportShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SimpleListReportRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SimpleListReportRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class SimpleListReportRequest(TeaModel):
    def __init__(self, cursor=None, end_time=None, size=None, start_time=None, template_name=None,
                 tenant_context=None):
        self.cursor = cursor  # type: long
        self.end_time = end_time  # type: long
        self.size = size  # type: long
        self.start_time = start_time  # type: long
        self.template_name = template_name  # type: str
        self.tenant_context = tenant_context  # type: SimpleListReportRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(SimpleListReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cursor is not None:
            result['Cursor'] = self.cursor
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.size is not None:
            result['Size'] = self.size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cursor') is not None:
            self.cursor = m.get('Cursor')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TenantContext') is not None:
            temp_model = SimpleListReportRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class SimpleListReportShrinkRequest(TeaModel):
    def __init__(self, cursor=None, end_time=None, size=None, start_time=None, template_name=None,
                 tenant_context_shrink=None):
        self.cursor = cursor  # type: long
        self.end_time = end_time  # type: long
        self.size = size  # type: long
        self.start_time = start_time  # type: long
        self.template_name = template_name  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SimpleListReportShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cursor is not None:
            result['Cursor'] = self.cursor
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.size is not None:
            result['Size'] = self.size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cursor') is not None:
            self.cursor = m.get('Cursor')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class SimpleListReportResponseBodyDataList(TeaModel):
    def __init__(self, create_time=None, creator_id=None, creator_name=None, dept_name=None, remark=None,
                 report_id=None, template_name=None):
        self.create_time = create_time  # type: long
        self.creator_id = creator_id  # type: str
        self.creator_name = creator_name  # type: str
        self.dept_name = dept_name  # type: str
        self.remark = remark  # type: str
        self.report_id = report_id  # type: str
        self.template_name = template_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SimpleListReportResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.dept_name is not None:
            result['DeptName'] = self.dept_name
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('DeptName') is not None:
            self.dept_name = m.get('DeptName')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class SimpleListReportResponseBody(TeaModel):
    def __init__(self, data_list=None, has_more=None, next_cursor=None, request_id=None, size=None):
        self.data_list = data_list  # type: list[SimpleListReportResponseBodyDataList]
        self.has_more = has_more  # type: bool
        self.next_cursor = next_cursor  # type: long
        # requestId
        self.request_id = request_id  # type: str
        self.size = size  # type: long

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(SimpleListReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['dataList'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['dataList'].append(k.to_map() if k else None)
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data_list = []
        if m.get('dataList') is not None:
            for k in m.get('dataList'):
                temp_model = SimpleListReportResponseBodyDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class SimpleListReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SimpleListReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SimpleListReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SimpleListReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartCloudRecordHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartCloudRecordHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class StartCloudRecordHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: StartCloudRecordHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(StartCloudRecordHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = StartCloudRecordHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class StartCloudRecordShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartCloudRecordShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class StartCloudRecordRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartCloudRecordRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class StartCloudRecordRequest(TeaModel):
    def __init__(self, mode=None, small_window_position=None, tenant_context=None, conference_id=None):
        self.mode = mode  # type: str
        self.small_window_position = small_window_position  # type: str
        self.tenant_context = tenant_context  # type: StartCloudRecordRequestTenantContext
        self.conference_id = conference_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(StartCloudRecordRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.small_window_position is not None:
            result['SmallWindowPosition'] = self.small_window_position
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('SmallWindowPosition') is not None:
            self.small_window_position = m.get('SmallWindowPosition')
        if m.get('TenantContext') is not None:
            temp_model = StartCloudRecordRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class StartCloudRecordShrinkRequest(TeaModel):
    def __init__(self, mode=None, small_window_position=None, tenant_context_shrink=None, conference_id=None):
        self.mode = mode  # type: str
        self.small_window_position = small_window_position  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.conference_id = conference_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartCloudRecordShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.small_window_position is not None:
            result['SmallWindowPosition'] = self.small_window_position
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('SmallWindowPosition') is not None:
            self.small_window_position = m.get('SmallWindowPosition')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class StartCloudRecordResponseBody(TeaModel):
    def __init__(self, code=None, request_id=None):
        self.code = code  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartCloudRecordResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class StartCloudRecordResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StartCloudRecordResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartCloudRecordResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartCloudRecordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartInstanceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartInstanceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class StartInstanceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: StartInstanceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(StartInstanceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = StartInstanceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class StartInstanceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartInstanceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class StartInstanceRequest(TeaModel):
    def __init__(self, app_type=None, department_id=None, form_data_json=None, form_uuid=None, language=None,
                 process_code=None, system_token=None):
        self.app_type = app_type  # type: str
        self.department_id = department_id  # type: str
        self.form_data_json = form_data_json  # type: str
        self.form_uuid = form_uuid  # type: str
        self.language = language  # type: str
        self.process_code = process_code  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.department_id is not None:
            result['DepartmentId'] = self.department_id
        if self.form_data_json is not None:
            result['FormDataJson'] = self.form_data_json
        if self.form_uuid is not None:
            result['FormUuid'] = self.form_uuid
        if self.language is not None:
            result['Language'] = self.language
        if self.process_code is not None:
            result['ProcessCode'] = self.process_code
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('DepartmentId') is not None:
            self.department_id = m.get('DepartmentId')
        if m.get('FormDataJson') is not None:
            self.form_data_json = m.get('FormDataJson')
        if m.get('FormUuid') is not None:
            self.form_uuid = m.get('FormUuid')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ProcessCode') is not None:
            self.process_code = m.get('ProcessCode')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class StartInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class StartInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StartInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StatisticsListByTypeReportHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsListByTypeReportHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class StatisticsListByTypeReportHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: StatisticsListByTypeReportHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(StatisticsListByTypeReportHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = StatisticsListByTypeReportHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class StatisticsListByTypeReportShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsListByTypeReportShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class StatisticsListByTypeReportRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsListByTypeReportRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class StatisticsListByTypeReportRequest(TeaModel):
    def __init__(self, offset=None, report_id=None, size=None, tenant_context=None, type=None):
        self.offset = offset  # type: long
        self.report_id = report_id  # type: str
        self.size = size  # type: long
        self.tenant_context = tenant_context  # type: StatisticsListByTypeReportRequestTenantContext
        self.type = type  # type: long

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(StatisticsListByTypeReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            temp_model = StatisticsListByTypeReportRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class StatisticsListByTypeReportShrinkRequest(TeaModel):
    def __init__(self, offset=None, report_id=None, size=None, tenant_context_shrink=None, type=None):
        self.offset = offset  # type: long
        self.report_id = report_id  # type: str
        self.size = size  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.type = type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsListByTypeReportShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.size is not None:
            result['Size'] = self.size
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class StatisticsListByTypeReportResponseBody(TeaModel):
    def __init__(self, has_more=None, next_cursor=None, request_id=None, userid_list=None):
        self.has_more = has_more  # type: bool
        self.next_cursor = next_cursor  # type: long
        # requestId
        self.request_id = request_id  # type: str
        self.userid_list = userid_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsListByTypeReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.has_more is not None:
            result['hasMore'] = self.has_more
        if self.next_cursor is not None:
            result['nextCursor'] = self.next_cursor
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.userid_list is not None:
            result['useridList'] = self.userid_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hasMore') is not None:
            self.has_more = m.get('hasMore')
        if m.get('nextCursor') is not None:
            self.next_cursor = m.get('nextCursor')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('useridList') is not None:
            self.userid_list = m.get('useridList')
        return self


class StatisticsListByTypeReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StatisticsListByTypeReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StatisticsListByTypeReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StatisticsListByTypeReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StatisticsReportHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsReportHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class StatisticsReportHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: StatisticsReportHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(StatisticsReportHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = StatisticsReportHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class StatisticsReportShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsReportShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class StatisticsReportRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsReportRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class StatisticsReportRequest(TeaModel):
    def __init__(self, report_id=None, tenant_context=None):
        self.report_id = report_id  # type: str
        self.tenant_context = tenant_context  # type: StatisticsReportRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(StatisticsReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('TenantContext') is not None:
            temp_model = StatisticsReportRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class StatisticsReportShrinkRequest(TeaModel):
    def __init__(self, report_id=None, tenant_context_shrink=None):
        self.report_id = report_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsReportShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.report_id is not None:
            result['ReportId'] = self.report_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ReportId') is not None:
            self.report_id = m.get('ReportId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class StatisticsReportResponseBody(TeaModel):
    def __init__(self, comment_num=None, comment_user_num=None, like_num=None, read_num=None, request_id=None):
        self.comment_num = comment_num  # type: long
        self.comment_user_num = comment_user_num  # type: long
        self.like_num = like_num  # type: long
        self.read_num = read_num  # type: long
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StatisticsReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comment_num is not None:
            result['commentNum'] = self.comment_num
        if self.comment_user_num is not None:
            result['commentUserNum'] = self.comment_user_num
        if self.like_num is not None:
            result['likeNum'] = self.like_num
        if self.read_num is not None:
            result['readNum'] = self.read_num
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commentNum') is not None:
            self.comment_num = m.get('commentNum')
        if m.get('commentUserNum') is not None:
            self.comment_user_num = m.get('commentUserNum')
        if m.get('likeNum') is not None:
            self.like_num = m.get('likeNum')
        if m.get('readNum') is not None:
            self.read_num = m.get('readNum')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class StatisticsReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StatisticsReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StatisticsReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StatisticsReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopCloudRecordHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StopCloudRecordHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class StopCloudRecordHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: StopCloudRecordHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(StopCloudRecordHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = StopCloudRecordHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class StopCloudRecordShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StopCloudRecordShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class StopCloudRecordRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StopCloudRecordRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class StopCloudRecordRequest(TeaModel):
    def __init__(self, tenant_context=None, conference_id=None):
        self.tenant_context = tenant_context  # type: StopCloudRecordRequestTenantContext
        self.conference_id = conference_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(StopCloudRecordRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = StopCloudRecordRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class StopCloudRecordShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, conference_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.conference_id = conference_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StopCloudRecordShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.conference_id is not None:
            result['conferenceId'] = self.conference_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('conferenceId') is not None:
            self.conference_id = m.get('conferenceId')
        return self


class StopCloudRecordResponseBody(TeaModel):
    def __init__(self, code=None, request_id=None):
        self.code = code  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StopCloudRecordResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class StopCloudRecordResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StopCloudRecordResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StopCloudRecordResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopCloudRecordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubscribeCalendarHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubscribeCalendarHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class SubscribeCalendarHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: SubscribeCalendarHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(SubscribeCalendarHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = SubscribeCalendarHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class SubscribeCalendarShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubscribeCalendarShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class SubscribeCalendarRequest(TeaModel):
    def __init__(self, calendar_id=None):
        self.calendar_id = calendar_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubscribeCalendarRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        return self


class SubscribeCalendarResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubscribeCalendarResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class SubscribeCalendarResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SubscribeCalendarResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SubscribeCalendarResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubscribeCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TerminateInstanceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TerminateInstanceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class TerminateInstanceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: TerminateInstanceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(TerminateInstanceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = TerminateInstanceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class TerminateInstanceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TerminateInstanceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class TerminateInstanceRequest(TeaModel):
    def __init__(self, app_type=None, language=None, process_instance_id=None, system_token=None):
        self.app_type = app_type  # type: str
        self.language = language  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TerminateInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.language is not None:
            result['Language'] = self.language
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class TerminateInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TerminateInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class TerminateInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TerminateInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TerminateInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TerminateInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UnsubscribeCalendarHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UnsubscribeCalendarHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UnsubscribeCalendarHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UnsubscribeCalendarHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UnsubscribeCalendarHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UnsubscribeCalendarHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UnsubscribeCalendarShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UnsubscribeCalendarShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UnsubscribeCalendarRequest(TeaModel):
    def __init__(self, calendar_id=None):
        self.calendar_id = calendar_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UnsubscribeCalendarRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        return self


class UnsubscribeCalendarResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UnsubscribeCalendarResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UnsubscribeCalendarResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UnsubscribeCalendarResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UnsubscribeCalendarResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UnsubscribeCalendarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateFormDataHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateFormDataHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateFormDataHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateFormDataHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateFormDataHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateFormDataHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateFormDataShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateFormDataShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateFormDataRequest(TeaModel):
    def __init__(self, app_type=None, form_instance_id=None, language=None, system_token=None,
                 update_form_data_json=None, use_latest_version=None):
        self.app_type = app_type  # type: str
        self.form_instance_id = form_instance_id  # type: str
        self.language = language  # type: str
        self.system_token = system_token  # type: str
        self.update_form_data_json = update_form_data_json  # type: str
        self.use_latest_version = use_latest_version  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateFormDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.form_instance_id is not None:
            result['FormInstanceId'] = self.form_instance_id
        if self.language is not None:
            result['Language'] = self.language
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.update_form_data_json is not None:
            result['UpdateFormDataJson'] = self.update_form_data_json
        if self.use_latest_version is not None:
            result['UseLatestVersion'] = self.use_latest_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('FormInstanceId') is not None:
            self.form_instance_id = m.get('FormInstanceId')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('UpdateFormDataJson') is not None:
            self.update_form_data_json = m.get('UpdateFormDataJson')
        if m.get('UseLatestVersion') is not None:
            self.use_latest_version = m.get('UseLatestVersion')
        return self


class UpdateFormDataResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateFormDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class UpdateFormDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateFormDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateFormDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateFormDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateInstanceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInstanceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateInstanceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateInstanceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateInstanceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateInstanceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateInstanceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInstanceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateInstanceRequest(TeaModel):
    def __init__(self, app_type=None, language=None, process_instance_id=None, system_token=None,
                 update_form_data_json=None):
        self.app_type = app_type  # type: str
        self.language = language  # type: str
        self.process_instance_id = process_instance_id  # type: str
        self.system_token = system_token  # type: str
        self.update_form_data_json = update_form_data_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.language is not None:
            result['Language'] = self.language
        if self.process_instance_id is not None:
            result['ProcessInstanceId'] = self.process_instance_id
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        if self.update_form_data_json is not None:
            result['UpdateFormDataJson'] = self.update_form_data_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('ProcessInstanceId') is not None:
            self.process_instance_id = m.get('ProcessInstanceId')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        if m.get('UpdateFormDataJson') is not None:
            self.update_form_data_json = m.get('UpdateFormDataJson')
        return self


class UpdateInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class UpdateInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateLiveHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateLiveHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateLiveHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateLiveHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateLiveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateLiveHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateLiveShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateLiveShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateLiveRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateLiveRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateLiveRequest(TeaModel):
    def __init__(self, cover_url=None, introduction=None, live_id=None, pre_end_time=None, pre_start_time=None,
                 tenant_context=None, title=None):
        self.cover_url = cover_url  # type: str
        self.introduction = introduction  # type: str
        self.live_id = live_id  # type: str
        self.pre_end_time = pre_end_time  # type: long
        self.pre_start_time = pre_start_time  # type: long
        self.tenant_context = tenant_context  # type: UpdateLiveRequestTenantContext
        self.title = title  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateLiveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover_url is not None:
            result['CoverUrl'] = self.cover_url
        if self.introduction is not None:
            result['Introduction'] = self.introduction
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.pre_end_time is not None:
            result['PreEndTime'] = self.pre_end_time
        if self.pre_start_time is not None:
            result['PreStartTime'] = self.pre_start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CoverUrl') is not None:
            self.cover_url = m.get('CoverUrl')
        if m.get('Introduction') is not None:
            self.introduction = m.get('Introduction')
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('PreEndTime') is not None:
            self.pre_end_time = m.get('PreEndTime')
        if m.get('PreStartTime') is not None:
            self.pre_start_time = m.get('PreStartTime')
        if m.get('TenantContext') is not None:
            temp_model = UpdateLiveRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class UpdateLiveShrinkRequest(TeaModel):
    def __init__(self, cover_url=None, introduction=None, live_id=None, pre_end_time=None, pre_start_time=None,
                 tenant_context_shrink=None, title=None):
        self.cover_url = cover_url  # type: str
        self.introduction = introduction  # type: str
        self.live_id = live_id  # type: str
        self.pre_end_time = pre_end_time  # type: long
        self.pre_start_time = pre_start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateLiveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cover_url is not None:
            result['CoverUrl'] = self.cover_url
        if self.introduction is not None:
            result['Introduction'] = self.introduction
        if self.live_id is not None:
            result['LiveId'] = self.live_id
        if self.pre_end_time is not None:
            result['PreEndTime'] = self.pre_end_time
        if self.pre_start_time is not None:
            result['PreStartTime'] = self.pre_start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CoverUrl') is not None:
            self.cover_url = m.get('CoverUrl')
        if m.get('Introduction') is not None:
            self.introduction = m.get('Introduction')
        if m.get('LiveId') is not None:
            self.live_id = m.get('LiveId')
        if m.get('PreEndTime') is not None:
            self.pre_end_time = m.get('PreEndTime')
        if m.get('PreStartTime') is not None:
            self.pre_start_time = m.get('PreStartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class UpdateLiveResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateLiveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class UpdateLiveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateLiveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateLiveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateLiveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMeetingRoomHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateMeetingRoomHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateMeetingRoomHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateMeetingRoomHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateMeetingRoomHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateMeetingRoomShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers(TeaModel):
    def __init__(self, member_id=None, member_name=None, member_type=None):
        self.member_id = member_id  # type: str
        self.member_name = member_name  # type: str
        self.member_type = member_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        return self


class UpdateMeetingRoomRequestReservationAuthority(TeaModel):
    def __init__(self, authorized_members=None):
        self.authorized_members = authorized_members  # type: list[UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers]

    def validate(self):
        if self.authorized_members:
            for k in self.authorized_members:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateMeetingRoomRequestReservationAuthority, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AuthorizedMembers'] = []
        if self.authorized_members is not None:
            for k in self.authorized_members:
                result['AuthorizedMembers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.authorized_members = []
        if m.get('AuthorizedMembers') is not None:
            for k in m.get('AuthorizedMembers'):
                temp_model = UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers()
                self.authorized_members.append(temp_model.from_map(k))
        return self


class UpdateMeetingRoomRequestRoomLocation(TeaModel):
    def __init__(self, desc=None, title=None):
        self.desc = desc  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomRequestRoomLocation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class UpdateMeetingRoomRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateMeetingRoomRequest(TeaModel):
    def __init__(self, enable_cycle_reservation=None, group_id=None, isv_room_id=None, reservation_authority=None,
                 room_capacity=None, room_id=None, room_label_ids=None, room_location=None, room_name=None, room_picture=None,
                 room_status=None, tenant_context=None):
        self.enable_cycle_reservation = enable_cycle_reservation  # type: bool
        self.group_id = group_id  # type: long
        self.isv_room_id = isv_room_id  # type: str
        self.reservation_authority = reservation_authority  # type: UpdateMeetingRoomRequestReservationAuthority
        self.room_capacity = room_capacity  # type: int
        self.room_id = room_id  # type: str
        self.room_label_ids = room_label_ids  # type: list[long]
        self.room_location = room_location  # type: UpdateMeetingRoomRequestRoomLocation
        self.room_name = room_name  # type: str
        self.room_picture = room_picture  # type: str
        self.room_status = room_status  # type: int
        self.tenant_context = tenant_context  # type: UpdateMeetingRoomRequestTenantContext

    def validate(self):
        if self.reservation_authority:
            self.reservation_authority.validate()
        if self.room_location:
            self.room_location.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateMeetingRoomRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_cycle_reservation is not None:
            result['EnableCycleReservation'] = self.enable_cycle_reservation
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.isv_room_id is not None:
            result['IsvRoomId'] = self.isv_room_id
        if self.reservation_authority is not None:
            result['ReservationAuthority'] = self.reservation_authority.to_map()
        if self.room_capacity is not None:
            result['RoomCapacity'] = self.room_capacity
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        if self.room_label_ids is not None:
            result['RoomLabelIds'] = self.room_label_ids
        if self.room_location is not None:
            result['RoomLocation'] = self.room_location.to_map()
        if self.room_name is not None:
            result['RoomName'] = self.room_name
        if self.room_picture is not None:
            result['RoomPicture'] = self.room_picture
        if self.room_status is not None:
            result['RoomStatus'] = self.room_status
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EnableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('EnableCycleReservation')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsvRoomId') is not None:
            self.isv_room_id = m.get('IsvRoomId')
        if m.get('ReservationAuthority') is not None:
            temp_model = UpdateMeetingRoomRequestReservationAuthority()
            self.reservation_authority = temp_model.from_map(m['ReservationAuthority'])
        if m.get('RoomCapacity') is not None:
            self.room_capacity = m.get('RoomCapacity')
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        if m.get('RoomLabelIds') is not None:
            self.room_label_ids = m.get('RoomLabelIds')
        if m.get('RoomLocation') is not None:
            temp_model = UpdateMeetingRoomRequestRoomLocation()
            self.room_location = temp_model.from_map(m['RoomLocation'])
        if m.get('RoomName') is not None:
            self.room_name = m.get('RoomName')
        if m.get('RoomPicture') is not None:
            self.room_picture = m.get('RoomPicture')
        if m.get('RoomStatus') is not None:
            self.room_status = m.get('RoomStatus')
        if m.get('TenantContext') is not None:
            temp_model = UpdateMeetingRoomRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class UpdateMeetingRoomShrinkRequest(TeaModel):
    def __init__(self, enable_cycle_reservation=None, group_id=None, isv_room_id=None,
                 reservation_authority_shrink=None, room_capacity=None, room_id=None, room_label_ids_shrink=None, room_location_shrink=None,
                 room_name=None, room_picture=None, room_status=None, tenant_context_shrink=None):
        self.enable_cycle_reservation = enable_cycle_reservation  # type: bool
        self.group_id = group_id  # type: long
        self.isv_room_id = isv_room_id  # type: str
        self.reservation_authority_shrink = reservation_authority_shrink  # type: str
        self.room_capacity = room_capacity  # type: int
        self.room_id = room_id  # type: str
        self.room_label_ids_shrink = room_label_ids_shrink  # type: str
        self.room_location_shrink = room_location_shrink  # type: str
        self.room_name = room_name  # type: str
        self.room_picture = room_picture  # type: str
        self.room_status = room_status  # type: int
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_cycle_reservation is not None:
            result['EnableCycleReservation'] = self.enable_cycle_reservation
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.isv_room_id is not None:
            result['IsvRoomId'] = self.isv_room_id
        if self.reservation_authority_shrink is not None:
            result['ReservationAuthority'] = self.reservation_authority_shrink
        if self.room_capacity is not None:
            result['RoomCapacity'] = self.room_capacity
        if self.room_id is not None:
            result['RoomId'] = self.room_id
        if self.room_label_ids_shrink is not None:
            result['RoomLabelIds'] = self.room_label_ids_shrink
        if self.room_location_shrink is not None:
            result['RoomLocation'] = self.room_location_shrink
        if self.room_name is not None:
            result['RoomName'] = self.room_name
        if self.room_picture is not None:
            result['RoomPicture'] = self.room_picture
        if self.room_status is not None:
            result['RoomStatus'] = self.room_status
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EnableCycleReservation') is not None:
            self.enable_cycle_reservation = m.get('EnableCycleReservation')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsvRoomId') is not None:
            self.isv_room_id = m.get('IsvRoomId')
        if m.get('ReservationAuthority') is not None:
            self.reservation_authority_shrink = m.get('ReservationAuthority')
        if m.get('RoomCapacity') is not None:
            self.room_capacity = m.get('RoomCapacity')
        if m.get('RoomId') is not None:
            self.room_id = m.get('RoomId')
        if m.get('RoomLabelIds') is not None:
            self.room_label_ids_shrink = m.get('RoomLabelIds')
        if m.get('RoomLocation') is not None:
            self.room_location_shrink = m.get('RoomLocation')
        if m.get('RoomName') is not None:
            self.room_name = m.get('RoomName')
        if m.get('RoomPicture') is not None:
            self.room_picture = m.get('RoomPicture')
        if m.get('RoomStatus') is not None:
            self.room_status = m.get('RoomStatus')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class UpdateMeetingRoomResponseBody(TeaModel):
    def __init__(self, result=None, request_id=None, vendor_request_id=None, vendor_type=None):
        self.result = result  # type: bool
        # requestId
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.result is not None:
            result['Result'] = self.result
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class UpdateMeetingRoomResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateMeetingRoomResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateMeetingRoomResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateMeetingRoomResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMeetingRoomGroupHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateMeetingRoomGroupHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateMeetingRoomGroupHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateMeetingRoomGroupHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateMeetingRoomGroupShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateMeetingRoomGroupRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateMeetingRoomGroupRequest(TeaModel):
    def __init__(self, group_id=None, group_name=None, tenant_context=None):
        self.group_id = group_id  # type: str
        self.group_name = group_name  # type: str
        self.tenant_context = tenant_context  # type: UpdateMeetingRoomGroupRequestTenantContext

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.group_name is not None:
            result['GroupName'] = self.group_name
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('GroupName') is not None:
            self.group_name = m.get('GroupName')
        if m.get('TenantContext') is not None:
            temp_model = UpdateMeetingRoomGroupRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        return self


class UpdateMeetingRoomGroupShrinkRequest(TeaModel):
    def __init__(self, group_id=None, group_name=None, tenant_context_shrink=None):
        self.group_id = group_id  # type: str
        self.group_name = group_name  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.group_name is not None:
            result['GroupName'] = self.group_name
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('GroupName') is not None:
            self.group_name = m.get('GroupName')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        return self


class UpdateMeetingRoomGroupResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UpdateMeetingRoomGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateMeetingRoomGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateMeetingRoomGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateMeetingRoomGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateRangeHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRangeHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateRangeHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateRangeHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateRangeHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateRangeHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateRangeShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRangeShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateRangeRequestHyperlinks(TeaModel):
    def __init__(self, type=None, link=None, text=None):
        self.type = type  # type: str
        self.link = link  # type: str
        self.text = text  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRangeRequestHyperlinks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.link is not None:
            result['Link'] = self.link
        if self.text is not None:
            result['Text'] = self.text
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Link') is not None:
            self.link = m.get('Link')
        if m.get('Text') is not None:
            self.text = m.get('Text')
        return self


class UpdateRangeRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRangeRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateRangeRequest(TeaModel):
    def __init__(self, background_colors=None, hyperlinks=None, number_format=None, range_address=None,
                 sheet_id=None, tenant_context=None, values=None, workbook_id=None):
        self.background_colors = background_colors  # type: list[list[str]]
        self.hyperlinks = hyperlinks  # type: list[list[UpdateRangeRequestHyperlinks]]
        self.number_format = number_format  # type: str
        self.range_address = range_address  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context = tenant_context  # type: UpdateRangeRequestTenantContext
        self.values = values  # type: list[list[str]]
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        if self.hyperlinks:
            for k in self.hyperlinks:
                for k1 in k:
                    if k1:
                        k1.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateRangeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.background_colors is not None:
            result['BackgroundColors'] = self.background_colors
        result['Hyperlinks'] = []
        if self.hyperlinks is not None:
            for k in self.hyperlinks:
                l1 = []
                for k1 in k:
                    l1.append(k1.to_map() if k1 else None)
                result['Hyperlinks'].append(l1)
        if self.number_format is not None:
            result['NumberFormat'] = self.number_format
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.values is not None:
            result['Values'] = self.values
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BackgroundColors') is not None:
            self.background_colors = m.get('BackgroundColors')
        self.hyperlinks = []
        if m.get('Hyperlinks') is not None:
            for k in m.get('Hyperlinks'):
                l1 = []
                for k1 in k:
                    temp_model = UpdateRangeRequestHyperlinks()
                    l1.append(temp_model.from_map(k1))
                self.hyperlinks.append(l1)
        if m.get('NumberFormat') is not None:
            self.number_format = m.get('NumberFormat')
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            temp_model = UpdateRangeRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Values') is not None:
            self.values = m.get('Values')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class UpdateRangeShrinkRequest(TeaModel):
    def __init__(self, background_colors_shrink=None, hyperlinks_shrink=None, number_format=None,
                 range_address=None, sheet_id=None, tenant_context_shrink=None, values_shrink=None, workbook_id=None):
        self.background_colors_shrink = background_colors_shrink  # type: str
        self.hyperlinks_shrink = hyperlinks_shrink  # type: str
        self.number_format = number_format  # type: str
        self.range_address = range_address  # type: str
        self.sheet_id = sheet_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.values_shrink = values_shrink  # type: str
        self.workbook_id = workbook_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRangeShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.background_colors_shrink is not None:
            result['BackgroundColors'] = self.background_colors_shrink
        if self.hyperlinks_shrink is not None:
            result['Hyperlinks'] = self.hyperlinks_shrink
        if self.number_format is not None:
            result['NumberFormat'] = self.number_format
        if self.range_address is not None:
            result['RangeAddress'] = self.range_address
        if self.sheet_id is not None:
            result['SheetId'] = self.sheet_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.values_shrink is not None:
            result['Values'] = self.values_shrink
        if self.workbook_id is not None:
            result['WorkbookId'] = self.workbook_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BackgroundColors') is not None:
            self.background_colors_shrink = m.get('BackgroundColors')
        if m.get('Hyperlinks') is not None:
            self.hyperlinks_shrink = m.get('Hyperlinks')
        if m.get('NumberFormat') is not None:
            self.number_format = m.get('NumberFormat')
        if m.get('RangeAddress') is not None:
            self.range_address = m.get('RangeAddress')
        if m.get('SheetId') is not None:
            self.sheet_id = m.get('SheetId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Values') is not None:
            self.values_shrink = m.get('Values')
        if m.get('WorkbookId') is not None:
            self.workbook_id = m.get('WorkbookId')
        return self


class UpdateRangeResponseBody(TeaModel):
    def __init__(self, a_1notation=None, request_id=None):
        self.a_1notation = a_1notation  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRangeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.a_1notation is not None:
            result['a1Notation'] = self.a_1notation
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('a1Notation') is not None:
            self.a_1notation = m.get('a1Notation')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class UpdateRangeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateRangeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateRangeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateRangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateScheduleConferenceHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScheduleConferenceHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateScheduleConferenceHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateScheduleConferenceHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateScheduleConferenceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateScheduleConferenceHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateScheduleConferenceShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScheduleConferenceShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateScheduleConferenceRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScheduleConferenceRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateScheduleConferenceRequest(TeaModel):
    def __init__(self, end_time=None, schedule_conference_id=None, start_time=None, tenant_context=None, title=None):
        self.end_time = end_time  # type: long
        self.schedule_conference_id = schedule_conference_id  # type: str
        self.start_time = start_time  # type: long
        self.tenant_context = tenant_context  # type: UpdateScheduleConferenceRequestTenantContext
        self.title = title  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateScheduleConferenceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.schedule_conference_id is not None:
            result['ScheduleConferenceId'] = self.schedule_conference_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ScheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('ScheduleConferenceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            temp_model = UpdateScheduleConferenceRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class UpdateScheduleConferenceShrinkRequest(TeaModel):
    def __init__(self, end_time=None, schedule_conference_id=None, start_time=None, tenant_context_shrink=None,
                 title=None):
        self.end_time = end_time  # type: long
        self.schedule_conference_id = schedule_conference_id  # type: str
        self.start_time = start_time  # type: long
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScheduleConferenceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.schedule_conference_id is not None:
            result['ScheduleConferenceId'] = self.schedule_conference_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ScheduleConferenceId') is not None:
            self.schedule_conference_id = m.get('ScheduleConferenceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class UpdateScheduleConferenceResponseBody(TeaModel):
    def __init__(self, request_id=None, success=None):
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScheduleConferenceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class UpdateScheduleConferenceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateScheduleConferenceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateScheduleConferenceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateScheduleConferenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateStatusHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateStatusHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateStatusHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateStatusHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateStatusHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateStatusHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateStatusShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateStatusShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateStatusRequest(TeaModel):
    def __init__(self, app_type=None, error_lines=None, import_sequence=None, language=None, status=None,
                 system_token=None):
        self.app_type = app_type  # type: str
        self.error_lines = error_lines  # type: list[int]
        self.import_sequence = import_sequence  # type: str
        self.language = language  # type: str
        self.status = status  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.error_lines is not None:
            result['ErrorLines'] = self.error_lines
        if self.import_sequence is not None:
            result['ImportSequence'] = self.import_sequence
        if self.language is not None:
            result['Language'] = self.language
        if self.status is not None:
            result['Status'] = self.status
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('ErrorLines') is not None:
            self.error_lines = m.get('ErrorLines')
        if m.get('ImportSequence') is not None:
            self.import_sequence = m.get('ImportSequence')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class UpdateStatusShrinkRequest(TeaModel):
    def __init__(self, app_type=None, error_lines_shrink=None, import_sequence=None, language=None, status=None,
                 system_token=None):
        self.app_type = app_type  # type: str
        self.error_lines_shrink = error_lines_shrink  # type: str
        self.import_sequence = import_sequence  # type: str
        self.language = language  # type: str
        self.status = status  # type: str
        self.system_token = system_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateStatusShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_type is not None:
            result['AppType'] = self.app_type
        if self.error_lines_shrink is not None:
            result['ErrorLines'] = self.error_lines_shrink
        if self.import_sequence is not None:
            result['ImportSequence'] = self.import_sequence
        if self.language is not None:
            result['Language'] = self.language
        if self.status is not None:
            result['Status'] = self.status
        if self.system_token is not None:
            result['SystemToken'] = self.system_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppType') is not None:
            self.app_type = m.get('AppType')
        if m.get('ErrorLines') is not None:
            self.error_lines_shrink = m.get('ErrorLines')
        if m.get('ImportSequence') is not None:
            self.import_sequence = m.get('ImportSequence')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SystemToken') is not None:
            self.system_token = m.get('SystemToken')
        return self


class UpdateStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, vendor_request_id=None, vendor_type=None):
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class UpdateStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSubscribedCalendarsHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateSubscribedCalendarsHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateSubscribedCalendarsHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateSubscribedCalendarsHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateSubscribedCalendarsShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateSubscribedCalendarsRequestSubscribeScope(TeaModel):
    def __init__(self, user_ids=None):
        self.user_ids = user_ids  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsRequestSubscribeScope, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_ids is not None:
            result['UserIds'] = self.user_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserIds') is not None:
            self.user_ids = m.get('UserIds')
        return self


class UpdateSubscribedCalendarsRequest(TeaModel):
    def __init__(self, calendar_id=None, description=None, managers=None, name=None, subscribe_scope=None):
        self.calendar_id = calendar_id  # type: str
        self.description = description  # type: str
        self.managers = managers  # type: list[str]
        self.name = name  # type: str
        self.subscribe_scope = subscribe_scope  # type: UpdateSubscribedCalendarsRequestSubscribeScope

    def validate(self):
        if self.subscribe_scope:
            self.subscribe_scope.validate()

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.description is not None:
            result['Description'] = self.description
        if self.managers is not None:
            result['Managers'] = self.managers
        if self.name is not None:
            result['Name'] = self.name
        if self.subscribe_scope is not None:
            result['SubscribeScope'] = self.subscribe_scope.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Managers') is not None:
            self.managers = m.get('Managers')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SubscribeScope') is not None:
            temp_model = UpdateSubscribedCalendarsRequestSubscribeScope()
            self.subscribe_scope = temp_model.from_map(m['SubscribeScope'])
        return self


class UpdateSubscribedCalendarsShrinkRequest(TeaModel):
    def __init__(self, calendar_id=None, description=None, managers_shrink=None, name=None,
                 subscribe_scope_shrink=None):
        self.calendar_id = calendar_id  # type: str
        self.description = description  # type: str
        self.managers_shrink = managers_shrink  # type: str
        self.name = name  # type: str
        self.subscribe_scope_shrink = subscribe_scope_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calendar_id is not None:
            result['CalendarId'] = self.calendar_id
        if self.description is not None:
            result['Description'] = self.description
        if self.managers_shrink is not None:
            result['Managers'] = self.managers_shrink
        if self.name is not None:
            result['Name'] = self.name
        if self.subscribe_scope_shrink is not None:
            result['SubscribeScope'] = self.subscribe_scope_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalendarId') is not None:
            self.calendar_id = m.get('CalendarId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Managers') is not None:
            self.managers_shrink = m.get('Managers')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SubscribeScope') is not None:
            self.subscribe_scope_shrink = m.get('SubscribeScope')
        return self


class UpdateSubscribedCalendarsResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UpdateSubscribedCalendarsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSubscribedCalendarsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSubscribedCalendarsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSubscribedCalendarsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateTodoTaskHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateTodoTaskHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateTodoTaskHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateTodoTaskHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateTodoTaskHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateTodoTaskShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateTodoTaskRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateTodoTaskRequest(TeaModel):
    def __init__(self, tenant_context=None, description=None, done=None, due_time=None, executor_ids=None,
                 participant_ids=None, subject=None, task_id=None):
        self.tenant_context = tenant_context  # type: UpdateTodoTaskRequestTenantContext
        self.description = description  # type: str
        self.done = done  # type: bool
        self.due_time = due_time  # type: long
        self.executor_ids = executor_ids  # type: list[str]
        self.participant_ids = participant_ids  # type: list[str]
        self.subject = subject  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateTodoTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.description is not None:
            result['description'] = self.description
        if self.done is not None:
            result['done'] = self.done
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids is not None:
            result['executorIds'] = self.executor_ids
        if self.participant_ids is not None:
            result['participantIds'] = self.participant_ids
        if self.subject is not None:
            result['subject'] = self.subject
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = UpdateTodoTaskRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('done') is not None:
            self.done = m.get('done')
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids = m.get('executorIds')
        if m.get('participantIds') is not None:
            self.participant_ids = m.get('participantIds')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class UpdateTodoTaskShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, description=None, done=None, due_time=None,
                 executor_ids_shrink=None, participant_ids_shrink=None, subject=None, task_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.description = description  # type: str
        self.done = done  # type: bool
        self.due_time = due_time  # type: long
        self.executor_ids_shrink = executor_ids_shrink  # type: str
        self.participant_ids_shrink = participant_ids_shrink  # type: str
        self.subject = subject  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.description is not None:
            result['description'] = self.description
        if self.done is not None:
            result['done'] = self.done
        if self.due_time is not None:
            result['dueTime'] = self.due_time
        if self.executor_ids_shrink is not None:
            result['executorIds'] = self.executor_ids_shrink
        if self.participant_ids_shrink is not None:
            result['participantIds'] = self.participant_ids_shrink
        if self.subject is not None:
            result['subject'] = self.subject
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('done') is not None:
            self.done = m.get('done')
        if m.get('dueTime') is not None:
            self.due_time = m.get('dueTime')
        if m.get('executorIds') is not None:
            self.executor_ids_shrink = m.get('executorIds')
        if m.get('participantIds') is not None:
            self.participant_ids_shrink = m.get('participantIds')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class UpdateTodoTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UpdateTodoTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateTodoTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateTodoTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateTodoTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateTodoTaskExecutorStatusHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateTodoTaskExecutorStatusHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateTodoTaskExecutorStatusHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateTodoTaskExecutorStatusHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateTodoTaskExecutorStatusShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateTodoTaskExecutorStatusRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateTodoTaskExecutorStatusRequestExecutorStatusList(TeaModel):
    def __init__(self, id=None, is_done=None):
        self.id = id  # type: str
        self.is_done = is_done  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusRequestExecutorStatusList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.is_done is not None:
            result['isDone'] = self.is_done
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('isDone') is not None:
            self.is_done = m.get('isDone')
        return self


class UpdateTodoTaskExecutorStatusRequest(TeaModel):
    def __init__(self, tenant_context=None, executor_status_list=None, operator_id=None, task_id=None):
        self.tenant_context = tenant_context  # type: UpdateTodoTaskExecutorStatusRequestTenantContext
        self.executor_status_list = executor_status_list  # type: list[UpdateTodoTaskExecutorStatusRequestExecutorStatusList]
        self.operator_id = operator_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()
        if self.executor_status_list:
            for k in self.executor_status_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        result['executorStatusList'] = []
        if self.executor_status_list is not None:
            for k in self.executor_status_list:
                result['executorStatusList'].append(k.to_map() if k else None)
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = UpdateTodoTaskExecutorStatusRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        self.executor_status_list = []
        if m.get('executorStatusList') is not None:
            for k in m.get('executorStatusList'):
                temp_model = UpdateTodoTaskExecutorStatusRequestExecutorStatusList()
                self.executor_status_list.append(temp_model.from_map(k))
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class UpdateTodoTaskExecutorStatusShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, executor_status_list_shrink=None, operator_id=None,
                 task_id=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.executor_status_list_shrink = executor_status_list_shrink  # type: str
        self.operator_id = operator_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.executor_status_list_shrink is not None:
            result['executorStatusList'] = self.executor_status_list_shrink
        if self.operator_id is not None:
            result['operatorId'] = self.operator_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('executorStatusList') is not None:
            self.executor_status_list_shrink = m.get('executorStatusList')
        if m.get('operatorId') is not None:
            self.operator_id = m.get('operatorId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class UpdateTodoTaskExecutorStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None):
        # requestId
        self.request_id = request_id  # type: str
        self.result = result  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class UpdateTodoTaskExecutorStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateTodoTaskExecutorStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateTodoTaskExecutorStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateTodoTaskExecutorStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateUserAvatarHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateUserAvatarHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateUserAvatarHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateUserAvatarHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateUserAvatarHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateUserAvatarHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateUserAvatarShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateUserAvatarShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateUserAvatarRequest(TeaModel):
    def __init__(self, avatar_media_id=None):
        self.avatar_media_id = avatar_media_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateUserAvatarRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avatar_media_id is not None:
            result['AvatarMediaId'] = self.avatar_media_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AvatarMediaId') is not None:
            self.avatar_media_id = m.get('AvatarMediaId')
        return self


class UpdateUserAvatarResponseBody(TeaModel):
    def __init__(self, errcode=None, errmsg=None, request_id=None, vendor_request_id=None, vendor_type=None):
        self.errcode = errcode  # type: str
        self.errmsg = errmsg  # type: str
        self.request_id = request_id  # type: str
        self.vendor_request_id = vendor_request_id  # type: str
        self.vendor_type = vendor_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateUserAvatarResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.errcode is not None:
            result['errcode'] = self.errcode
        if self.errmsg is not None:
            result['errmsg'] = self.errmsg
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.vendor_request_id is not None:
            result['vendorRequestId'] = self.vendor_request_id
        if self.vendor_type is not None:
            result['vendorType'] = self.vendor_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('errcode') is not None:
            self.errcode = m.get('errcode')
        if m.get('errmsg') is not None:
            self.errmsg = m.get('errmsg')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('vendorRequestId') is not None:
            self.vendor_request_id = m.get('vendorRequestId')
        if m.get('vendorType') is not None:
            self.vendor_type = m.get('vendorType')
        return self


class UpdateUserAvatarResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateUserAvatarResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateUserAvatarResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateUserAvatarResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateWorkspaceDocMembersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateWorkspaceDocMembersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateWorkspaceDocMembersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateWorkspaceDocMembersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateWorkspaceDocMembersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateWorkspaceDocMembersRequestMembers(TeaModel):
    def __init__(self, member_id=None, member_type=None, role_type=None):
        self.member_id = member_id  # type: str
        self.member_type = member_type  # type: str
        self.role_type = role_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersRequestMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        if self.role_type is not None:
            result['RoleType'] = self.role_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        if m.get('RoleType') is not None:
            self.role_type = m.get('RoleType')
        return self


class UpdateWorkspaceDocMembersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateWorkspaceDocMembersRequest(TeaModel):
    def __init__(self, members=None, node_id=None, tenant_context=None, workspace_id=None):
        self.members = members  # type: list[UpdateWorkspaceDocMembersRequestMembers]
        self.node_id = node_id  # type: str
        self.tenant_context = tenant_context  # type: UpdateWorkspaceDocMembersRequestTenantContext
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = UpdateWorkspaceDocMembersRequestMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            temp_model = UpdateWorkspaceDocMembersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UpdateWorkspaceDocMembersShrinkRequest(TeaModel):
    def __init__(self, members_shrink=None, node_id=None, tenant_context_shrink=None, workspace_id=None):
        self.members_shrink = members_shrink  # type: str
        self.node_id = node_id  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.members_shrink is not None:
            result['Members'] = self.members_shrink
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Members') is not None:
            self.members_shrink = m.get('Members')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UpdateWorkspaceDocMembersResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class UpdateWorkspaceDocMembersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateWorkspaceDocMembersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateWorkspaceDocMembersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateWorkspaceDocMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateWorkspaceMembersHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceMembersHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UpdateWorkspaceMembersHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UpdateWorkspaceMembersHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UpdateWorkspaceMembersHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UpdateWorkspaceMembersHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UpdateWorkspaceMembersShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceMembersShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UpdateWorkspaceMembersRequestMembers(TeaModel):
    def __init__(self, member_id=None, member_type=None, role_type=None):
        self.member_id = member_id  # type: str
        self.member_type = member_type  # type: str
        self.role_type = role_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceMembersRequestMembers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_type is not None:
            result['MemberType'] = self.member_type
        if self.role_type is not None:
            result['RoleType'] = self.role_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberType') is not None:
            self.member_type = m.get('MemberType')
        if m.get('RoleType') is not None:
            self.role_type = m.get('RoleType')
        return self


class UpdateWorkspaceMembersRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceMembersRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UpdateWorkspaceMembersRequest(TeaModel):
    def __init__(self, members=None, tenant_context=None, workspace_id=None):
        self.members = members  # type: list[UpdateWorkspaceMembersRequestMembers]
        self.tenant_context = tenant_context  # type: UpdateWorkspaceMembersRequestTenantContext
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UpdateWorkspaceMembersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = UpdateWorkspaceMembersRequestMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('TenantContext') is not None:
            temp_model = UpdateWorkspaceMembersRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UpdateWorkspaceMembersShrinkRequest(TeaModel):
    def __init__(self, members_shrink=None, tenant_context_shrink=None, workspace_id=None):
        self.members_shrink = members_shrink  # type: str
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceMembersShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.members_shrink is not None:
            result['Members'] = self.members_shrink
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Members') is not None:
            self.members_shrink = m.get('Members')
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UpdateWorkspaceMembersResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateWorkspaceMembersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class UpdateWorkspaceMembersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateWorkspaceMembersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateWorkspaceMembersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateWorkspaceMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadMediaHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMediaHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class UploadMediaHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: UploadMediaHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(UploadMediaHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = UploadMediaHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class UploadMediaShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMediaShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class UploadMediaRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMediaRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class UploadMediaRequest(TeaModel):
    def __init__(self, tenant_context=None, media_name=None, media_type=None, org_id=None, url=None):
        self.tenant_context = tenant_context  # type: UploadMediaRequestTenantContext
        self.media_name = media_name  # type: str
        self.media_type = media_type  # type: str
        self.org_id = org_id  # type: long
        self.url = url  # type: str

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(UploadMediaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.media_name is not None:
            result['mediaName'] = self.media_name
        if self.media_type is not None:
            result['mediaType'] = self.media_type
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = UploadMediaRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('mediaName') is not None:
            self.media_name = m.get('mediaName')
        if m.get('mediaType') is not None:
            self.media_type = m.get('mediaType')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class UploadMediaShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, media_name=None, media_type=None, org_id=None, url=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.media_name = media_name  # type: str
        self.media_type = media_type  # type: str
        self.org_id = org_id  # type: long
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMediaShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.media_name is not None:
            result['mediaName'] = self.media_name
        if self.media_type is not None:
            result['mediaType'] = self.media_type
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('mediaName') is not None:
            self.media_name = m.get('mediaName')
        if m.get('mediaType') is not None:
            self.media_type = m.get('mediaType')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class UploadMediaResponseBody(TeaModel):
    def __init__(self, media_id=None, request_id=None):
        self.media_id = media_id  # type: str
        # requestId
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMediaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.media_id is not None:
            result['mediaId'] = self.media_id
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('mediaId') is not None:
            self.media_id = m.get('mediaId')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class UploadMediaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UploadMediaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UploadMediaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadMediaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class WearOrgHonorHeadersAccountContext(TeaModel):
    def __init__(self, account_id=None):
        self.account_id = account_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(WearOrgHonorHeadersAccountContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        return self


class WearOrgHonorHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context = account_context  # type: WearOrgHonorHeadersAccountContext

    def validate(self):
        if self.account_context:
            self.account_context.validate()

    def to_map(self):
        _map = super(WearOrgHonorHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context is not None:
            result['AccountContext'] = self.account_context.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            temp_model = WearOrgHonorHeadersAccountContext()
            self.account_context = temp_model.from_map(m['AccountContext'])
        return self


class WearOrgHonorShrinkHeaders(TeaModel):
    def __init__(self, common_headers=None, account_context_shrink=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.account_context_shrink = account_context_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(WearOrgHonorShrinkHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.account_context_shrink is not None:
            result['AccountContext'] = self.account_context_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('AccountContext') is not None:
            self.account_context_shrink = m.get('AccountContext')
        return self


class WearOrgHonorRequestTenantContext(TeaModel):
    def __init__(self, tenant_id=None):
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(WearOrgHonorRequestTenantContext, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_id is not None:
            result['tenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tenantId') is not None:
            self.tenant_id = m.get('tenantId')
        return self


class WearOrgHonorRequest(TeaModel):
    def __init__(self, tenant_context=None, honor_id=None, org_id=None, user_id=None, wear=None):
        self.tenant_context = tenant_context  # type: WearOrgHonorRequestTenantContext
        self.honor_id = honor_id  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str
        self.wear = wear  # type: bool

    def validate(self):
        if self.tenant_context:
            self.tenant_context.validate()

    def to_map(self):
        _map = super(WearOrgHonorRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context is not None:
            result['TenantContext'] = self.tenant_context.to_map()
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.wear is not None:
            result['wear'] = self.wear
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            temp_model = WearOrgHonorRequestTenantContext()
            self.tenant_context = temp_model.from_map(m['TenantContext'])
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('wear') is not None:
            self.wear = m.get('wear')
        return self


class WearOrgHonorShrinkRequest(TeaModel):
    def __init__(self, tenant_context_shrink=None, honor_id=None, org_id=None, user_id=None, wear=None):
        self.tenant_context_shrink = tenant_context_shrink  # type: str
        self.honor_id = honor_id  # type: str
        self.org_id = org_id  # type: long
        self.user_id = user_id  # type: str
        self.wear = wear  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(WearOrgHonorShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tenant_context_shrink is not None:
            result['TenantContext'] = self.tenant_context_shrink
        if self.honor_id is not None:
            result['honorId'] = self.honor_id
        if self.org_id is not None:
            result['orgId'] = self.org_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.wear is not None:
            result['wear'] = self.wear
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TenantContext') is not None:
            self.tenant_context_shrink = m.get('TenantContext')
        if m.get('honorId') is not None:
            self.honor_id = m.get('honorId')
        if m.get('orgId') is not None:
            self.org_id = m.get('orgId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('wear') is not None:
            self.wear = m.get('wear')
        return self


class WearOrgHonorResponseBodyContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: any

    def validate(self):
        pass

    def to_map(self):
        _map = super(WearOrgHonorResponseBodyContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class WearOrgHonorResponseBody(TeaModel):
    def __init__(self, content=None, error_code=None, error_ctx=None, error_msg=None, http_status_code=None,
                 request_id=None, success=None):
        self.content = content  # type: WearOrgHonorResponseBodyContent
        self.error_code = error_code  # type: str
        self.error_ctx = error_ctx  # type: dict[str, any]
        self.error_msg = error_msg  # type: str
        self.http_status_code = http_status_code  # type: int
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(WearOrgHonorResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.error_ctx is not None:
            result['errorCtx'] = self.error_ctx
        if self.error_msg is not None:
            result['errorMsg'] = self.error_msg
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            temp_model = WearOrgHonorResponseBodyContent()
            self.content = temp_model.from_map(m['content'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('errorCtx') is not None:
            self.error_ctx = m.get('errorCtx')
        if m.get('errorMsg') is not None:
            self.error_msg = m.get('errorMsg')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class WearOrgHonorResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: WearOrgHonorResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(WearOrgHonorResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = WearOrgHonorResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


