# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class AddMdsMiniConfigRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mini_config_add_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mini_config_add_json_str = mpaas_mappcenter_mini_config_add_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddMdsMiniConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mini_config_add_json_str is not None:
            result['MpaasMappcenterMiniConfigAddJsonStr'] = self.mpaas_mappcenter_mini_config_add_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMiniConfigAddJsonStr') is not None:
            self.mpaas_mappcenter_mini_config_add_json_str = m.get('MpaasMappcenterMiniConfigAddJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class AddMdsMiniConfigResponseBodyResultContentData(TeaModel):
    def __init__(self, content=None, error_code=None, request_id=None, result_msg=None, success=None):
        self.content = content  # type: str
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddMdsMiniConfigResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddMdsMiniConfigResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: AddMdsMiniConfigResponseBodyResultContentData
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(AddMdsMiniConfigResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = AddMdsMiniConfigResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddMdsMiniConfigResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: AddMdsMiniConfigResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(AddMdsMiniConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = AddMdsMiniConfigResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class AddMdsMiniConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddMdsMiniConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddMdsMiniConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddMdsMiniConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelPushSchedulerRequest(TeaModel):
    def __init__(self, app_id=None, type=None, unique_ids=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.type = type  # type: int
        self.unique_ids = unique_ids  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelPushSchedulerRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.type is not None:
            result['Type'] = self.type
        if self.unique_ids is not None:
            result['UniqueIds'] = self.unique_ids
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UniqueIds') is not None:
            self.unique_ids = m.get('UniqueIds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CancelPushSchedulerResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelPushSchedulerResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CancelPushSchedulerResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CancelPushSchedulerResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CancelPushSchedulerResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CancelPushSchedulerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChangeMcubeMiniTaskStatusRequest(TeaModel):
    def __init__(self, app_id=None, biz_type=None, package_id=None, task_id=None, task_status=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.biz_type = biz_type  # type: str
        self.package_id = package_id  # type: long
        self.task_id = task_id  # type: long
        self.task_status = task_status  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeMcubeMiniTaskStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ChangeMcubeMiniTaskStatusResponseBody(TeaModel):
    def __init__(self, change_mini_task_status_result=None, request_id=None, result_code=None, result_message=None):
        self.change_mini_task_status_result = change_mini_task_status_result  # type: ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.change_mini_task_status_result:
            self.change_mini_task_status_result.validate()

    def to_map(self):
        _map = super(ChangeMcubeMiniTaskStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_mini_task_status_result is not None:
            result['ChangeMiniTaskStatusResult'] = self.change_mini_task_status_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ChangeMiniTaskStatusResult') is not None:
            temp_model = ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult()
            self.change_mini_task_status_result = temp_model.from_map(m['ChangeMiniTaskStatusResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ChangeMcubeMiniTaskStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ChangeMcubeMiniTaskStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ChangeMcubeMiniTaskStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ChangeMcubeMiniTaskStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChangeMcubeNebulaTaskStatusRequest(TeaModel):
    def __init__(self, app_id=None, biz_type=None, package_id=None, task_id=None, task_status=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.biz_type = biz_type  # type: str
        self.package_id = package_id  # type: str
        self.task_id = task_id  # type: str
        self.task_status = task_status  # type: int
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeMcubeNebulaTaskStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult(TeaModel):
    def __init__(self, error_code=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ChangeMcubeNebulaTaskStatusResponseBody(TeaModel):
    def __init__(self, change_mcube_nebula_task_status_result=None, request_id=None, result_code=None,
                 result_message=None):
        self.change_mcube_nebula_task_status_result = change_mcube_nebula_task_status_result  # type: ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.change_mcube_nebula_task_status_result:
            self.change_mcube_nebula_task_status_result.validate()

    def to_map(self):
        _map = super(ChangeMcubeNebulaTaskStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_mcube_nebula_task_status_result is not None:
            result['ChangeMcubeNebulaTaskStatusResult'] = self.change_mcube_nebula_task_status_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ChangeMcubeNebulaTaskStatusResult') is not None:
            temp_model = ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult()
            self.change_mcube_nebula_task_status_result = temp_model.from_map(m['ChangeMcubeNebulaTaskStatusResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ChangeMcubeNebulaTaskStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ChangeMcubeNebulaTaskStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ChangeMcubeNebulaTaskStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ChangeMcubeNebulaTaskStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChangeMcubePublicTaskStatusRequest(TeaModel):
    def __init__(self, app_id=None, task_id=None, task_status=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.task_id = task_id  # type: str
        self.task_status = task_status  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeMcubePublicTaskStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ChangeMcubePublicTaskStatusResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, error_code=None, request_id=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeMcubePublicTaskStatusResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ChangeMcubePublicTaskStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: ChangeMcubePublicTaskStatusResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(ChangeMcubePublicTaskStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = ChangeMcubePublicTaskStatusResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ChangeMcubePublicTaskStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ChangeMcubePublicTaskStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ChangeMcubePublicTaskStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ChangeMcubePublicTaskStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CopyMcdpGroupRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_group_copy_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_group_copy_json_str = mpaas_mappcenter_mcdp_group_copy_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CopyMcdpGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_group_copy_json_str is not None:
            result['MpaasMappcenterMcdpGroupCopyJsonStr'] = self.mpaas_mappcenter_mcdp_group_copy_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpGroupCopyJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_group_copy_json_str = m.get('MpaasMappcenterMcdpGroupCopyJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CopyMcdpGroupResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CopyMcdpGroupResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CopyMcdpGroupResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CopyMcdpGroupResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CopyMcdpGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CopyMcdpGroupResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CopyMcdpGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CopyMcdpGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CopyMcdpGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CopyMcdpGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMasCrowdRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_mas_crowd_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_mas_crowd_create_json_str = mpaas_mappcenter_mcdp_mas_crowd_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMasCrowdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_mas_crowd_create_json_str is not None:
            result['MpaasMappcenterMcdpMasCrowdCreateJsonStr'] = self.mpaas_mappcenter_mcdp_mas_crowd_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpMasCrowdCreateJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_mas_crowd_create_json_str = m.get('MpaasMappcenterMcdpMasCrowdCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMasCrowdResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMasCrowdResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMasCrowdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMasCrowdResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMasCrowdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMasCrowdResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMasCrowdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMasCrowdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMasCrowdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMasCrowdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMasFunnelRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_mas_funnel_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_mas_funnel_create_json_str = mpaas_mappcenter_mcdp_mas_funnel_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMasFunnelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_mas_funnel_create_json_str is not None:
            result['MpaasMappcenterMcdpMasFunnelCreateJsonStr'] = self.mpaas_mappcenter_mcdp_mas_funnel_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpMasFunnelCreateJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_mas_funnel_create_json_str = m.get('MpaasMappcenterMcdpMasFunnelCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMasFunnelResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMasFunnelResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMasFunnelResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMasFunnelResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMasFunnelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMasFunnelResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMasFunnelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMasFunnelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMasFunnelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMasFunnelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcdpEventRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_event_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_event_create_json_str = mpaas_mappcenter_mcdp_event_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_event_create_json_str is not None:
            result['MpaasMappcenterMcdpEventCreateJsonStr'] = self.mpaas_mappcenter_mcdp_event_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpEventCreateJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_event_create_json_str = m.get('MpaasMappcenterMcdpEventCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcdpEventResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpEventResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcdpEventResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMcdpEventResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMcdpEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMcdpEventResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcdpEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcdpEventResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcdpEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcdpEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcdpEventAttributeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_event_attribute_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_event_attribute_create_json_str = mpaas_mappcenter_mcdp_event_attribute_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpEventAttributeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_event_attribute_create_json_str is not None:
            result['MpaasMappcenterMcdpEventAttributeCreateJsonStr'] = self.mpaas_mappcenter_mcdp_event_attribute_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpEventAttributeCreateJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_event_attribute_create_json_str = m.get('MpaasMappcenterMcdpEventAttributeCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcdpEventAttributeResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpEventAttributeResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcdpEventAttributeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMcdpEventAttributeResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMcdpEventAttributeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMcdpEventAttributeResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcdpEventAttributeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcdpEventAttributeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcdpEventAttributeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcdpEventAttributeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcdpGroupRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_group_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_group_create_json_str = mpaas_mappcenter_mcdp_group_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_group_create_json_str is not None:
            result['MpaasMappcenterMcdpGroupCreateJsonStr'] = self.mpaas_mappcenter_mcdp_group_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpGroupCreateJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_group_create_json_str = m.get('MpaasMappcenterMcdpGroupCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcdpGroupResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpGroupResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcdpGroupResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMcdpGroupResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMcdpGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMcdpGroupResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcdpGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcdpGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcdpGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcdpGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcdpMaterialRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_material_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_material_create_json_str = mpaas_mappcenter_mcdp_material_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpMaterialRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_material_create_json_str is not None:
            result['MpaasMappcenterMcdpMaterialCreateJsonStr'] = self.mpaas_mappcenter_mcdp_material_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpMaterialCreateJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_material_create_json_str = m.get('MpaasMappcenterMcdpMaterialCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcdpMaterialResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpMaterialResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcdpMaterialResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMcdpMaterialResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMcdpMaterialResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMcdpMaterialResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcdpMaterialResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcdpMaterialResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcdpMaterialResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcdpMaterialResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcdpZoneRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_zone_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_zone_create_json_str = mpaas_mappcenter_mcdp_zone_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpZoneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_zone_create_json_str is not None:
            result['MpaasMappcenterMcdpZoneCreateJsonStr'] = self.mpaas_mappcenter_mcdp_zone_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpZoneCreateJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_zone_create_json_str = m.get('MpaasMappcenterMcdpZoneCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcdpZoneResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcdpZoneResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcdpZoneResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMcdpZoneResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMcdpZoneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMcdpZoneResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcdpZoneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcdpZoneResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcdpZoneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcdpZoneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeMiniAppRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, h_5name=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeMiniAppRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeMiniAppResponseBodyCreateMiniResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeMiniAppResponseBodyCreateMiniResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcubeMiniAppResponseBody(TeaModel):
    def __init__(self, create_mini_result=None, request_id=None, result_code=None, result_message=None):
        self.create_mini_result = create_mini_result  # type: CreateMcubeMiniAppResponseBodyCreateMiniResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_mini_result:
            self.create_mini_result.validate()

    def to_map(self):
        _map = super(CreateMcubeMiniAppResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_mini_result is not None:
            result['CreateMiniResult'] = self.create_mini_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateMiniResult') is not None:
            temp_model = CreateMcubeMiniAppResponseBodyCreateMiniResult()
            self.create_mini_result = temp_model.from_map(m['CreateMiniResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeMiniAppResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeMiniAppResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeMiniAppResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeMiniAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeMiniTaskRequest(TeaModel):
    def __init__(self, app_id=None, grey_config_info=None, grey_endtime_data=None, grey_num=None, memo=None,
                 package_id=None, publish_mode=None, publish_type=None, tenant_id=None, whitelist_ids=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_num = grey_num  # type: long
        self.memo = memo  # type: str
        self.package_id = package_id  # type: long
        self.publish_mode = publish_mode  # type: long
        self.publish_type = publish_type  # type: long
        self.tenant_id = tenant_id  # type: str
        self.whitelist_ids = whitelist_ids  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeMiniTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult(TeaModel):
    def __init__(self, mini_task_id=None, result_msg=None, success=None):
        self.mini_task_id = mini_task_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mini_task_id is not None:
            result['MiniTaskId'] = self.mini_task_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MiniTaskId') is not None:
            self.mini_task_id = m.get('MiniTaskId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcubeMiniTaskResponseBody(TeaModel):
    def __init__(self, create_mini_task_result=None, request_id=None, result_code=None, result_message=None):
        self.create_mini_task_result = create_mini_task_result  # type: CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_mini_task_result:
            self.create_mini_task_result.validate()

    def to_map(self):
        _map = super(CreateMcubeMiniTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_mini_task_result is not None:
            result['CreateMiniTaskResult'] = self.create_mini_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateMiniTaskResult') is not None:
            temp_model = CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult()
            self.create_mini_task_result = temp_model.from_map(m['CreateMiniTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeMiniTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeMiniTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeMiniTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeMiniTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeNebulaAppRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, h_5name=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeNebulaAppRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult(TeaModel):
    def __init__(self, error_code=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcubeNebulaAppResponseBody(TeaModel):
    def __init__(self, create_nebula_app_result=None, request_id=None, result_code=None, result_message=None):
        self.create_nebula_app_result = create_nebula_app_result  # type: CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_nebula_app_result:
            self.create_nebula_app_result.validate()

    def to_map(self):
        _map = super(CreateMcubeNebulaAppResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_nebula_app_result is not None:
            result['CreateNebulaAppResult'] = self.create_nebula_app_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateNebulaAppResult') is not None:
            temp_model = CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult()
            self.create_nebula_app_result = temp_model.from_map(m['CreateNebulaAppResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeNebulaAppResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeNebulaAppResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeNebulaAppResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeNebulaAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeNebulaResourceRequest(TeaModel):
    def __init__(self, app_id=None, auto_install=None, client_version_max=None, client_version_min=None,
                 custom_domain_name=None, extend_info=None, file_url=None, h_5id=None, h_5name=None, h_5version=None, install_type=None,
                 main_url=None, onex_flag=None, platform=None, repeat_nebula=None, resource_type=None, sub_url=None,
                 tenant_id=None, vhost=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.auto_install = auto_install  # type: int
        self.client_version_max = client_version_max  # type: str
        self.client_version_min = client_version_min  # type: str
        self.custom_domain_name = custom_domain_name  # type: str
        self.extend_info = extend_info  # type: str
        self.file_url = file_url  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.h_5version = h_5version  # type: str
        self.install_type = install_type  # type: int
        self.main_url = main_url  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.platform = platform  # type: str
        self.repeat_nebula = repeat_nebula  # type: int
        self.resource_type = resource_type  # type: int
        self.sub_url = sub_url  # type: str
        self.tenant_id = tenant_id  # type: str
        self.vhost = vhost  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeNebulaResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.auto_install is not None:
            result['AutoInstall'] = self.auto_install
        if self.client_version_max is not None:
            result['ClientVersionMax'] = self.client_version_max
        if self.client_version_min is not None:
            result['ClientVersionMin'] = self.client_version_min
        if self.custom_domain_name is not None:
            result['CustomDomainName'] = self.custom_domain_name
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.h_5version is not None:
            result['H5Version'] = self.h_5version
        if self.install_type is not None:
            result['InstallType'] = self.install_type
        if self.main_url is not None:
            result['MainUrl'] = self.main_url
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.repeat_nebula is not None:
            result['RepeatNebula'] = self.repeat_nebula
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.sub_url is not None:
            result['SubUrl'] = self.sub_url
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.vhost is not None:
            result['Vhost'] = self.vhost
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AutoInstall') is not None:
            self.auto_install = m.get('AutoInstall')
        if m.get('ClientVersionMax') is not None:
            self.client_version_max = m.get('ClientVersionMax')
        if m.get('ClientVersionMin') is not None:
            self.client_version_min = m.get('ClientVersionMin')
        if m.get('CustomDomainName') is not None:
            self.custom_domain_name = m.get('CustomDomainName')
        if m.get('ExtendInfo') is not None:
            self.extend_info = m.get('ExtendInfo')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('H5Version') is not None:
            self.h_5version = m.get('H5Version')
        if m.get('InstallType') is not None:
            self.install_type = m.get('InstallType')
        if m.get('MainUrl') is not None:
            self.main_url = m.get('MainUrl')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('RepeatNebula') is not None:
            self.repeat_nebula = m.get('RepeatNebula')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('SubUrl') is not None:
            self.sub_url = m.get('SubUrl')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Vhost') is not None:
            self.vhost = m.get('Vhost')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult(TeaModel):
    def __init__(self, error_code=None, nebula_resource_id=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.nebula_resource_id = nebula_resource_id  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.nebula_resource_id is not None:
            result['NebulaResourceId'] = self.nebula_resource_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('NebulaResourceId') is not None:
            self.nebula_resource_id = m.get('NebulaResourceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcubeNebulaResourceResponseBody(TeaModel):
    def __init__(self, create_mcube_nebula_resource_reslult=None, request_id=None, result_code=None,
                 result_message=None):
        self.create_mcube_nebula_resource_reslult = create_mcube_nebula_resource_reslult  # type: CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_mcube_nebula_resource_reslult:
            self.create_mcube_nebula_resource_reslult.validate()

    def to_map(self):
        _map = super(CreateMcubeNebulaResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_mcube_nebula_resource_reslult is not None:
            result['CreateMcubeNebulaResourceReslult'] = self.create_mcube_nebula_resource_reslult.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateMcubeNebulaResourceReslult') is not None:
            temp_model = CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult()
            self.create_mcube_nebula_resource_reslult = temp_model.from_map(m['CreateMcubeNebulaResourceReslult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeNebulaResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeNebulaResourceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeNebulaResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeNebulaResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeNebulaTaskRequest(TeaModel):
    def __init__(self, app_code=None, app_id=None, biz_type=None, creator=None, gmt_create=None, gmt_modified=None,
                 gmt_modified_str=None, grey_config_info=None, grey_endtime=None, grey_endtime_data=None, grey_endtime_str=None,
                 grey_num=None, grey_url=None, id=None, memo=None, modifier=None, package_id=None, percent=None, platform=None,
                 product_id=None, product_version=None, publish_mode=None, publish_type=None, release_version=None,
                 res_ids=None, serial_version_uid=None, status=None, sync_mode=None, sync_result=None, task_name=None,
                 task_status=None, task_type=None, task_version=None, tenant_id=None, upgrade_notice_num=None,
                 upgrade_progress=None, whitelist_ids=None, workspace_id=None):
        self.app_code = app_code  # type: str
        self.app_id = app_id  # type: str
        self.biz_type = biz_type  # type: str
        self.creator = creator  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.gmt_modified_str = gmt_modified_str  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime = grey_endtime  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_endtime_str = grey_endtime_str  # type: str
        self.grey_num = grey_num  # type: int
        self.grey_url = grey_url  # type: str
        self.id = id  # type: long
        self.memo = memo  # type: str
        self.modifier = modifier  # type: str
        self.package_id = package_id  # type: long
        self.percent = percent  # type: int
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.product_version = product_version  # type: str
        self.publish_mode = publish_mode  # type: int
        self.publish_type = publish_type  # type: int
        self.release_version = release_version  # type: str
        self.res_ids = res_ids  # type: str
        self.serial_version_uid = serial_version_uid  # type: long
        self.status = status  # type: int
        self.sync_mode = sync_mode  # type: str
        self.sync_result = sync_result  # type: str
        self.task_name = task_name  # type: str
        self.task_status = task_status  # type: int
        self.task_type = task_type  # type: int
        self.task_version = task_version  # type: long
        self.tenant_id = tenant_id  # type: str
        self.upgrade_notice_num = upgrade_notice_num  # type: long
        self.upgrade_progress = upgrade_progress  # type: str
        self.whitelist_ids = whitelist_ids  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeNebulaTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_modified_str is not None:
            result['GmtModifiedStr'] = self.gmt_modified_str
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime is not None:
            result['GreyEndtime'] = self.grey_endtime
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_endtime_str is not None:
            result['GreyEndtimeStr'] = self.grey_endtime_str
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.grey_url is not None:
            result['GreyUrl'] = self.grey_url
        if self.id is not None:
            result['Id'] = self.id
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.res_ids is not None:
            result['ResIds'] = self.res_ids
        if self.serial_version_uid is not None:
            result['SerialVersionUID'] = self.serial_version_uid
        if self.status is not None:
            result['Status'] = self.status
        if self.sync_mode is not None:
            result['SyncMode'] = self.sync_mode
        if self.sync_result is not None:
            result['SyncResult'] = self.sync_result
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.task_version is not None:
            result['TaskVersion'] = self.task_version
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.upgrade_notice_num is not None:
            result['UpgradeNoticeNum'] = self.upgrade_notice_num
        if self.upgrade_progress is not None:
            result['UpgradeProgress'] = self.upgrade_progress
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtModifiedStr') is not None:
            self.gmt_modified_str = m.get('GmtModifiedStr')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtime') is not None:
            self.grey_endtime = m.get('GreyEndtime')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyEndtimeStr') is not None:
            self.grey_endtime_str = m.get('GreyEndtimeStr')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('GreyUrl') is not None:
            self.grey_url = m.get('GreyUrl')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('ResIds') is not None:
            self.res_ids = m.get('ResIds')
        if m.get('SerialVersionUID') is not None:
            self.serial_version_uid = m.get('SerialVersionUID')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SyncMode') is not None:
            self.sync_mode = m.get('SyncMode')
        if m.get('SyncResult') is not None:
            self.sync_result = m.get('SyncResult')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('TaskVersion') is not None:
            self.task_version = m.get('TaskVersion')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('UpgradeNoticeNum') is not None:
            self.upgrade_notice_num = m.get('UpgradeNoticeNum')
        if m.get('UpgradeProgress') is not None:
            self.upgrade_progress = m.get('UpgradeProgress')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult(TeaModel):
    def __init__(self, error_code=None, nebula_task_id=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.nebula_task_id = nebula_task_id  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.nebula_task_id is not None:
            result['NebulaTaskId'] = self.nebula_task_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('NebulaTaskId') is not None:
            self.nebula_task_id = m.get('NebulaTaskId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcubeNebulaTaskResponseBody(TeaModel):
    def __init__(self, create_mcube_nebula_task_result=None, request_id=None, result_code=None,
                 result_message=None):
        self.create_mcube_nebula_task_result = create_mcube_nebula_task_result  # type: CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_mcube_nebula_task_result:
            self.create_mcube_nebula_task_result.validate()

    def to_map(self):
        _map = super(CreateMcubeNebulaTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_mcube_nebula_task_result is not None:
            result['CreateMcubeNebulaTaskResult'] = self.create_mcube_nebula_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateMcubeNebulaTaskResult') is not None:
            temp_model = CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult()
            self.create_mcube_nebula_task_result = temp_model.from_map(m['CreateMcubeNebulaTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeNebulaTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeNebulaTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeNebulaTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeNebulaTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeUpgradePackageRequest(TeaModel):
    def __init__(self, app_id=None, app_version=None, appstore_url=None, bundle_id=None, custom_domain_name=None,
                 desc=None, download_url=None, file_url=None, icon_file_url=None, install_amount=None,
                 ios_symbolfile_url=None, is_enterprise=None, need_check=None, onex_flag=None, platform=None, tenant_id=None,
                 valid_days=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.app_version = app_version  # type: str
        self.appstore_url = appstore_url  # type: str
        self.bundle_id = bundle_id  # type: str
        self.custom_domain_name = custom_domain_name  # type: str
        self.desc = desc  # type: str
        self.download_url = download_url  # type: str
        self.file_url = file_url  # type: str
        self.icon_file_url = icon_file_url  # type: str
        self.install_amount = install_amount  # type: int
        self.ios_symbolfile_url = ios_symbolfile_url  # type: str
        self.is_enterprise = is_enterprise  # type: int
        self.need_check = need_check  # type: int
        self.onex_flag = onex_flag  # type: bool
        self.platform = platform  # type: str
        self.tenant_id = tenant_id  # type: str
        self.valid_days = valid_days  # type: int
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeUpgradePackageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_version is not None:
            result['AppVersion'] = self.app_version
        if self.appstore_url is not None:
            result['AppstoreUrl'] = self.appstore_url
        if self.bundle_id is not None:
            result['BundleId'] = self.bundle_id
        if self.custom_domain_name is not None:
            result['CustomDomainName'] = self.custom_domain_name
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.icon_file_url is not None:
            result['IconFileUrl'] = self.icon_file_url
        if self.install_amount is not None:
            result['InstallAmount'] = self.install_amount
        if self.ios_symbolfile_url is not None:
            result['IosSymbolfileUrl'] = self.ios_symbolfile_url
        if self.is_enterprise is not None:
            result['IsEnterprise'] = self.is_enterprise
        if self.need_check is not None:
            result['NeedCheck'] = self.need_check
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.valid_days is not None:
            result['ValidDays'] = self.valid_days
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppVersion') is not None:
            self.app_version = m.get('AppVersion')
        if m.get('AppstoreUrl') is not None:
            self.appstore_url = m.get('AppstoreUrl')
        if m.get('BundleId') is not None:
            self.bundle_id = m.get('BundleId')
        if m.get('CustomDomainName') is not None:
            self.custom_domain_name = m.get('CustomDomainName')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('IconFileUrl') is not None:
            self.icon_file_url = m.get('IconFileUrl')
        if m.get('InstallAmount') is not None:
            self.install_amount = m.get('InstallAmount')
        if m.get('IosSymbolfileUrl') is not None:
            self.ios_symbolfile_url = m.get('IosSymbolfileUrl')
        if m.get('IsEnterprise') is not None:
            self.is_enterprise = m.get('IsEnterprise')
        if m.get('NeedCheck') is not None:
            self.need_check = m.get('NeedCheck')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('ValidDays') is not None:
            self.valid_days = m.get('ValidDays')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeUpgradePackageResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, error_code=None, request_id=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeUpgradePackageResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcubeUpgradePackageResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMcubeUpgradePackageResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMcubeUpgradePackageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMcubeUpgradePackageResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeUpgradePackageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeUpgradePackageResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeUpgradePackageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeUpgradePackageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeUpgradeTaskRequest(TeaModel):
    def __init__(self, app_id=None, grey_config_info=None, grey_endtime_data=None, grey_num=None,
                 history_force=None, memo=None, package_info_id=None, publish_mode=None, publish_type=None, tenant_id=None,
                 upgrade_content=None, upgrade_type=None, whitelist_ids=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_num = grey_num  # type: int
        self.history_force = history_force  # type: int
        self.memo = memo  # type: str
        self.package_info_id = package_info_id  # type: long
        self.publish_mode = publish_mode  # type: int
        self.publish_type = publish_type  # type: int
        self.tenant_id = tenant_id  # type: str
        self.upgrade_content = upgrade_content  # type: str
        self.upgrade_type = upgrade_type  # type: int
        self.whitelist_ids = whitelist_ids  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeUpgradeTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.history_force is not None:
            result['HistoryForce'] = self.history_force
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.package_info_id is not None:
            result['PackageInfoId'] = self.package_info_id
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.upgrade_content is not None:
            result['UpgradeContent'] = self.upgrade_content
        if self.upgrade_type is not None:
            result['UpgradeType'] = self.upgrade_type
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('HistoryForce') is not None:
            self.history_force = m.get('HistoryForce')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('PackageInfoId') is not None:
            self.package_info_id = m.get('PackageInfoId')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('UpgradeContent') is not None:
            self.upgrade_content = m.get('UpgradeContent')
        if m.get('UpgradeType') is not None:
            self.upgrade_type = m.get('UpgradeType')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeUpgradeTaskResponseBodyCreateTaskResult(TeaModel):
    def __init__(self, error_code=None, request_id=None, result_msg=None, success=None, upgrade_task_id=None):
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.upgrade_task_id = upgrade_task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeUpgradeTaskResponseBodyCreateTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.upgrade_task_id is not None:
            result['upgradeTaskId'] = self.upgrade_task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('upgradeTaskId') is not None:
            self.upgrade_task_id = m.get('upgradeTaskId')
        return self


class CreateMcubeUpgradeTaskResponseBody(TeaModel):
    def __init__(self, create_task_result=None, request_id=None, result_code=None, result_message=None):
        self.create_task_result = create_task_result  # type: CreateMcubeUpgradeTaskResponseBodyCreateTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_task_result:
            self.create_task_result.validate()

    def to_map(self):
        _map = super(CreateMcubeUpgradeTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_task_result is not None:
            result['CreateTaskResult'] = self.create_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTaskResult') is not None:
            temp_model = CreateMcubeUpgradeTaskResponseBodyCreateTaskResult()
            self.create_task_result = temp_model.from_map(m['CreateTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeUpgradeTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeUpgradeTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeUpgradeTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeUpgradeTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeVhostRequest(TeaModel):
    def __init__(self, app_id=None, tenant_id=None, vhost=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.vhost = vhost  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeVhostRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.vhost is not None:
            result['Vhost'] = self.vhost
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Vhost') is not None:
            self.vhost = m.get('Vhost')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeVhostResponseBodyCreateVhostResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeVhostResponseBodyCreateVhostResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMcubeVhostResponseBody(TeaModel):
    def __init__(self, create_vhost_result=None, request_id=None, result_code=None, result_message=None):
        self.create_vhost_result = create_vhost_result  # type: CreateMcubeVhostResponseBodyCreateVhostResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_vhost_result:
            self.create_vhost_result.validate()

    def to_map(self):
        _map = super(CreateMcubeVhostResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_vhost_result is not None:
            result['CreateVhostResult'] = self.create_vhost_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateVhostResult') is not None:
            temp_model = CreateMcubeVhostResponseBodyCreateVhostResult()
            self.create_vhost_result = temp_model.from_map(m['CreateVhostResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeVhostResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeVhostResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeVhostResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeVhostResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeWhitelistRequest(TeaModel):
    def __init__(self, app_id=None, tenant_id=None, white_list_name=None, whitelist_type=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.white_list_name = white_list_name  # type: str
        self.whitelist_type = whitelist_type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeWhitelistRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.white_list_name is not None:
            result['WhiteListName'] = self.white_list_name
        if self.whitelist_type is not None:
            result['WhitelistType'] = self.whitelist_type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WhiteListName') is not None:
            self.white_list_name = m.get('WhiteListName')
        if m.get('WhitelistType') is not None:
            self.whitelist_type = m.get('WhitelistType')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeWhitelistResponseBodyCreateWhitelistResult(TeaModel):
    def __init__(self, result_msg=None, success=None, whitelist_id=None):
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.whitelist_id = whitelist_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeWhitelistResponseBodyCreateWhitelistResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.whitelist_id is not None:
            result['WhitelistId'] = self.whitelist_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('WhitelistId') is not None:
            self.whitelist_id = m.get('WhitelistId')
        return self


class CreateMcubeWhitelistResponseBody(TeaModel):
    def __init__(self, create_whitelist_result=None, request_id=None, result_code=None, result_message=None):
        self.create_whitelist_result = create_whitelist_result  # type: CreateMcubeWhitelistResponseBodyCreateWhitelistResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_whitelist_result:
            self.create_whitelist_result.validate()

    def to_map(self):
        _map = super(CreateMcubeWhitelistResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_whitelist_result is not None:
            result['CreateWhitelistResult'] = self.create_whitelist_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateWhitelistResult') is not None:
            temp_model = CreateMcubeWhitelistResponseBodyCreateWhitelistResult()
            self.create_whitelist_result = temp_model.from_map(m['CreateWhitelistResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeWhitelistResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeWhitelistResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeWhitelistResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeWhitelistResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMcubeWhitelistForIdeRequest(TeaModel):
    def __init__(self, app_id=None, tenant_id=None, user_id=None, whitelist_value=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.user_id = user_id  # type: str
        self.whitelist_value = whitelist_value  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeWhitelistForIdeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.whitelist_value is not None:
            result['WhitelistValue'] = self.whitelist_value
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('WhitelistValue') is not None:
            self.whitelist_value = m.get('WhitelistValue')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult(TeaModel):
    def __init__(self, result_msg=None, success=None, whitelist_id=None):
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.whitelist_id = whitelist_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.whitelist_id is not None:
            result['WhitelistId'] = self.whitelist_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('WhitelistId') is not None:
            self.whitelist_id = m.get('WhitelistId')
        return self


class CreateMcubeWhitelistForIdeResponseBody(TeaModel):
    def __init__(self, create_whitelist_for_ide_result=None, request_id=None, result_code=None,
                 result_message=None):
        self.create_whitelist_for_ide_result = create_whitelist_for_ide_result  # type: CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.create_whitelist_for_ide_result:
            self.create_whitelist_for_ide_result.validate()

    def to_map(self):
        _map = super(CreateMcubeWhitelistForIdeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_whitelist_for_ide_result is not None:
            result['CreateWhitelistForIdeResult'] = self.create_whitelist_for_ide_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateWhitelistForIdeResult') is not None:
            temp_model = CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult()
            self.create_whitelist_for_ide_result = temp_model.from_map(m['CreateWhitelistForIdeResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMcubeWhitelistForIdeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMcubeWhitelistForIdeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMcubeWhitelistForIdeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMcubeWhitelistForIdeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMdsMiniprogramTaskRequest(TeaModel):
    def __init__(self, app_id=None, grey_config_info=None, grey_endtime_data=None, grey_num=None, id=None, memo=None,
                 package_id=None, publish_mode=None, publish_type=None, sync_mode=None, tenant_id=None, whitelist_ids=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_num = grey_num  # type: str
        self.id = id  # type: long
        self.memo = memo  # type: str
        self.package_id = package_id  # type: long
        self.publish_mode = publish_mode  # type: str
        self.publish_type = publish_type  # type: long
        self.sync_mode = sync_mode  # type: str
        self.tenant_id = tenant_id  # type: str
        self.whitelist_ids = whitelist_ids  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMdsMiniprogramTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.id is not None:
            result['Id'] = self.id
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.sync_mode is not None:
            result['SyncMode'] = self.sync_mode
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('SyncMode') is not None:
            self.sync_mode = m.get('SyncMode')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMdsMiniprogramTaskResponseBodyResultContentData(TeaModel):
    def __init__(self, content=None, error_code=None, request_id=None, result_msg=None, success=None):
        self.content = content  # type: str
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMdsMiniprogramTaskResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMdsMiniprogramTaskResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: CreateMdsMiniprogramTaskResponseBodyResultContentData
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(CreateMdsMiniprogramTaskResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = CreateMdsMiniprogramTaskResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateMdsMiniprogramTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMdsMiniprogramTaskResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMdsMiniprogramTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMdsMiniprogramTaskResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMdsMiniprogramTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMdsMiniprogramTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMdsMiniprogramTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMdsMiniprogramTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMsaEnhanceRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_msa_enhance_create_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_msa_enhance_create_json_str = mpaas_mappcenter_msa_enhance_create_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMsaEnhanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_msa_enhance_create_json_str is not None:
            result['MpaasMappcenterMsaEnhanceCreateJsonStr'] = self.mpaas_mappcenter_msa_enhance_create_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMsaEnhanceCreateJsonStr') is not None:
            self.mpaas_mappcenter_msa_enhance_create_json_str = m.get('MpaasMappcenterMsaEnhanceCreateJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateMsaEnhanceResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMsaEnhanceResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMsaEnhanceResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: CreateMsaEnhanceResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(CreateMsaEnhanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = CreateMsaEnhanceResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateMsaEnhanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMsaEnhanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMsaEnhanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMsaEnhanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOpenGlobalDataRequest(TeaModel):
    def __init__(self, app_id=None, app_max_version=None, app_min_version=None, biz_type=None, ext_attr_str=None,
                 max_uid=None, min_uid=None, os_type=None, payload=None, third_msg_id=None, uids=None, valid_time_end=None,
                 valid_time_start=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.app_max_version = app_max_version  # type: str
        self.app_min_version = app_min_version  # type: str
        self.biz_type = biz_type  # type: str
        self.ext_attr_str = ext_attr_str  # type: str
        self.max_uid = max_uid  # type: long
        self.min_uid = min_uid  # type: long
        self.os_type = os_type  # type: str
        self.payload = payload  # type: str
        self.third_msg_id = third_msg_id  # type: str
        self.uids = uids  # type: str
        self.valid_time_end = valid_time_end  # type: long
        self.valid_time_start = valid_time_start  # type: long
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOpenGlobalDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_max_version is not None:
            result['AppMaxVersion'] = self.app_max_version
        if self.app_min_version is not None:
            result['AppMinVersion'] = self.app_min_version
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.ext_attr_str is not None:
            result['ExtAttrStr'] = self.ext_attr_str
        if self.max_uid is not None:
            result['MaxUid'] = self.max_uid
        if self.min_uid is not None:
            result['MinUid'] = self.min_uid
        if self.os_type is not None:
            result['OsType'] = self.os_type
        if self.payload is not None:
            result['Payload'] = self.payload
        if self.third_msg_id is not None:
            result['ThirdMsgId'] = self.third_msg_id
        if self.uids is not None:
            result['Uids'] = self.uids
        if self.valid_time_end is not None:
            result['ValidTimeEnd'] = self.valid_time_end
        if self.valid_time_start is not None:
            result['ValidTimeStart'] = self.valid_time_start
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppMaxVersion') is not None:
            self.app_max_version = m.get('AppMaxVersion')
        if m.get('AppMinVersion') is not None:
            self.app_min_version = m.get('AppMinVersion')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExtAttrStr') is not None:
            self.ext_attr_str = m.get('ExtAttrStr')
        if m.get('MaxUid') is not None:
            self.max_uid = m.get('MaxUid')
        if m.get('MinUid') is not None:
            self.min_uid = m.get('MinUid')
        if m.get('OsType') is not None:
            self.os_type = m.get('OsType')
        if m.get('Payload') is not None:
            self.payload = m.get('Payload')
        if m.get('ThirdMsgId') is not None:
            self.third_msg_id = m.get('ThirdMsgId')
        if m.get('Uids') is not None:
            self.uids = m.get('Uids')
        if m.get('ValidTimeEnd') is not None:
            self.valid_time_end = m.get('ValidTimeEnd')
        if m.get('ValidTimeStart') is not None:
            self.valid_time_start = m.get('ValidTimeStart')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateOpenGlobalDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, result_code=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: bool
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOpenGlobalDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateOpenGlobalDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateOpenGlobalDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateOpenGlobalDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOpenGlobalDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOpenSingleDataRequest(TeaModel):
    def __init__(self, app_id=None, app_max_version=None, app_min_version=None, biz_type=None, check_online=None,
                 ext_attr_str=None, link_token=None, os_type=None, payload=None, third_msg_id=None, valid_time_end=None,
                 valid_time_start=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.app_max_version = app_max_version  # type: str
        self.app_min_version = app_min_version  # type: str
        self.biz_type = biz_type  # type: str
        self.check_online = check_online  # type: bool
        self.ext_attr_str = ext_attr_str  # type: str
        self.link_token = link_token  # type: str
        self.os_type = os_type  # type: str
        self.payload = payload  # type: str
        self.third_msg_id = third_msg_id  # type: str
        self.valid_time_end = valid_time_end  # type: long
        self.valid_time_start = valid_time_start  # type: long
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOpenSingleDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_max_version is not None:
            result['AppMaxVersion'] = self.app_max_version
        if self.app_min_version is not None:
            result['AppMinVersion'] = self.app_min_version
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.check_online is not None:
            result['CheckOnline'] = self.check_online
        if self.ext_attr_str is not None:
            result['ExtAttrStr'] = self.ext_attr_str
        if self.link_token is not None:
            result['LinkToken'] = self.link_token
        if self.os_type is not None:
            result['OsType'] = self.os_type
        if self.payload is not None:
            result['Payload'] = self.payload
        if self.third_msg_id is not None:
            result['ThirdMsgId'] = self.third_msg_id
        if self.valid_time_end is not None:
            result['ValidTimeEnd'] = self.valid_time_end
        if self.valid_time_start is not None:
            result['ValidTimeStart'] = self.valid_time_start
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppMaxVersion') is not None:
            self.app_max_version = m.get('AppMaxVersion')
        if m.get('AppMinVersion') is not None:
            self.app_min_version = m.get('AppMinVersion')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CheckOnline') is not None:
            self.check_online = m.get('CheckOnline')
        if m.get('ExtAttrStr') is not None:
            self.ext_attr_str = m.get('ExtAttrStr')
        if m.get('LinkToken') is not None:
            self.link_token = m.get('LinkToken')
        if m.get('OsType') is not None:
            self.os_type = m.get('OsType')
        if m.get('Payload') is not None:
            self.payload = m.get('Payload')
        if m.get('ThirdMsgId') is not None:
            self.third_msg_id = m.get('ThirdMsgId')
        if m.get('ValidTimeEnd') is not None:
            self.valid_time_end = m.get('ValidTimeEnd')
        if m.get('ValidTimeStart') is not None:
            self.valid_time_start = m.get('ValidTimeStart')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class CreateOpenSingleDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result=None, result_code=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result = result  # type: bool
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOpenSingleDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class CreateOpenSingleDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateOpenSingleDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateOpenSingleDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOpenSingleDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteCubecardWhitelistContentRequest(TeaModel):
    def __init__(self, app_id=None, tenant_id=None, whitelist_id=None, whitelist_value=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.whitelist_id = whitelist_id  # type: str
        self.whitelist_value = whitelist_value  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteCubecardWhitelistContentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.whitelist_id is not None:
            result['WhitelistId'] = self.whitelist_id
        if self.whitelist_value is not None:
            result['WhitelistValue'] = self.whitelist_value
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WhitelistId') is not None:
            self.whitelist_id = m.get('WhitelistId')
        if m.get('WhitelistValue') is not None:
            self.whitelist_value = m.get('WhitelistValue')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteCubecardWhitelistContentResponseBodyResultContentData(TeaModel):
    def __init__(self, content=None, error_code=None, result_msg=None, success=None):
        self.content = content  # type: str
        self.error_code = error_code  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteCubecardWhitelistContentResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteCubecardWhitelistContentResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: DeleteCubecardWhitelistContentResponseBodyResultContentData
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(DeleteCubecardWhitelistContentResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = DeleteCubecardWhitelistContentResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteCubecardWhitelistContentResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteCubecardWhitelistContentResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteCubecardWhitelistContentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteCubecardWhitelistContentResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteCubecardWhitelistContentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteCubecardWhitelistContentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteCubecardWhitelistContentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteCubecardWhitelistContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcdpAimRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_aim_delete_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_aim_delete_json_str = mpaas_mappcenter_mcdp_aim_delete_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpAimRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_aim_delete_json_str is not None:
            result['MpaasMappcenterMcdpAimDeleteJsonStr'] = self.mpaas_mappcenter_mcdp_aim_delete_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpAimDeleteJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_aim_delete_json_str = m.get('MpaasMappcenterMcdpAimDeleteJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcdpAimResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpAimResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcdpAimResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteMcdpAimResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteMcdpAimResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteMcdpAimResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcdpAimResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcdpAimResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcdpAimResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcdpAimResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcdpCrowdRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_crowd_delete_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_crowd_delete_json_str = mpaas_mappcenter_mcdp_crowd_delete_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpCrowdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_crowd_delete_json_str is not None:
            result['MpaasMappcenterMcdpCrowdDeleteJsonStr'] = self.mpaas_mappcenter_mcdp_crowd_delete_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpCrowdDeleteJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_crowd_delete_json_str = m.get('MpaasMappcenterMcdpCrowdDeleteJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcdpCrowdResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpCrowdResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcdpCrowdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteMcdpCrowdResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteMcdpCrowdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteMcdpCrowdResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcdpCrowdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcdpCrowdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcdpCrowdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcdpCrowdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcdpEventAttributeByIdRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_event_attribute_delete_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_event_attribute_delete_json_str = mpaas_mappcenter_mcdp_event_attribute_delete_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpEventAttributeByIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_event_attribute_delete_json_str is not None:
            result['MpaasMappcenterMcdpEventAttributeDeleteJsonStr'] = self.mpaas_mappcenter_mcdp_event_attribute_delete_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpEventAttributeDeleteJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_event_attribute_delete_json_str = m.get('MpaasMappcenterMcdpEventAttributeDeleteJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcdpEventAttributeByIdResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpEventAttributeByIdResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcdpEventAttributeByIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteMcdpEventAttributeByIdResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteMcdpEventAttributeByIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteMcdpEventAttributeByIdResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcdpEventAttributeByIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcdpEventAttributeByIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcdpEventAttributeByIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcdpEventAttributeByIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcdpEventByIdRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_event_delete_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_event_delete_json_str = mpaas_mappcenter_mcdp_event_delete_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpEventByIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_event_delete_json_str is not None:
            result['MpaasMappcenterMcdpEventDeleteJsonStr'] = self.mpaas_mappcenter_mcdp_event_delete_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpEventDeleteJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_event_delete_json_str = m.get('MpaasMappcenterMcdpEventDeleteJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcdpEventByIdResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpEventByIdResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcdpEventByIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteMcdpEventByIdResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteMcdpEventByIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteMcdpEventByIdResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcdpEventByIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcdpEventByIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcdpEventByIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcdpEventByIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcdpMaterialRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_material_delete_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_material_delete_json_str = mpaas_mappcenter_mcdp_material_delete_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpMaterialRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_material_delete_json_str is not None:
            result['MpaasMappcenterMcdpMaterialDeleteJsonStr'] = self.mpaas_mappcenter_mcdp_material_delete_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpMaterialDeleteJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_material_delete_json_str = m.get('MpaasMappcenterMcdpMaterialDeleteJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcdpMaterialResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpMaterialResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcdpMaterialResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteMcdpMaterialResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteMcdpMaterialResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteMcdpMaterialResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcdpMaterialResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcdpMaterialResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcdpMaterialResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcdpMaterialResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcdpZoneRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mcdp_zone_delete_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mcdp_zone_delete_json_str = mpaas_mappcenter_mcdp_zone_delete_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpZoneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mcdp_zone_delete_json_str is not None:
            result['MpaasMappcenterMcdpZoneDeleteJsonStr'] = self.mpaas_mappcenter_mcdp_zone_delete_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMcdpZoneDeleteJsonStr') is not None:
            self.mpaas_mappcenter_mcdp_zone_delete_json_str = m.get('MpaasMappcenterMcdpZoneDeleteJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcdpZoneResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcdpZoneResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcdpZoneResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteMcdpZoneResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteMcdpZoneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteMcdpZoneResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcdpZoneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcdpZoneResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcdpZoneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcdpZoneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcubeMiniAppRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeMiniAppRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcubeMiniAppResponseBodyDeleteMiniResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeMiniAppResponseBodyDeleteMiniResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcubeMiniAppResponseBody(TeaModel):
    def __init__(self, delete_mini_result=None, request_id=None, result_code=None, result_message=None):
        self.delete_mini_result = delete_mini_result  # type: DeleteMcubeMiniAppResponseBodyDeleteMiniResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.delete_mini_result:
            self.delete_mini_result.validate()

    def to_map(self):
        _map = super(DeleteMcubeMiniAppResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delete_mini_result is not None:
            result['DeleteMiniResult'] = self.delete_mini_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeleteMiniResult') is not None:
            temp_model = DeleteMcubeMiniAppResponseBodyDeleteMiniResult()
            self.delete_mini_result = temp_model.from_map(m['DeleteMiniResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcubeMiniAppResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcubeMiniAppResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcubeMiniAppResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcubeMiniAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcubeNebulaAppRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeNebulaAppRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult(TeaModel):
    def __init__(self, error_code=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcubeNebulaAppResponseBody(TeaModel):
    def __init__(self, delete_mcube_nebula_app_result=None, request_id=None, result_code=None, result_message=None):
        self.delete_mcube_nebula_app_result = delete_mcube_nebula_app_result  # type: DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.delete_mcube_nebula_app_result:
            self.delete_mcube_nebula_app_result.validate()

    def to_map(self):
        _map = super(DeleteMcubeNebulaAppResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delete_mcube_nebula_app_result is not None:
            result['DeleteMcubeNebulaAppResult'] = self.delete_mcube_nebula_app_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeleteMcubeNebulaAppResult') is not None:
            temp_model = DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult()
            self.delete_mcube_nebula_app_result = temp_model.from_map(m['DeleteMcubeNebulaAppResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcubeNebulaAppResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcubeNebulaAppResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcubeNebulaAppResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcubeNebulaAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcubeUpgradeResourceRequest(TeaModel):
    def __init__(self, app_id=None, id=None, platform=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: str
        self.platform = platform  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeUpgradeResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcubeUpgradeResourceResponseBodyDeleteResult(TeaModel):
    def __init__(self, error_code=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeUpgradeResourceResponseBodyDeleteResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcubeUpgradeResourceResponseBody(TeaModel):
    def __init__(self, delete_result=None, request_id=None, result_code=None, result_message=None):
        self.delete_result = delete_result  # type: DeleteMcubeUpgradeResourceResponseBodyDeleteResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.delete_result:
            self.delete_result.validate()

    def to_map(self):
        _map = super(DeleteMcubeUpgradeResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delete_result is not None:
            result['DeleteResult'] = self.delete_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeleteResult') is not None:
            temp_model = DeleteMcubeUpgradeResourceResponseBodyDeleteResult()
            self.delete_result = temp_model.from_map(m['DeleteResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcubeUpgradeResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcubeUpgradeResourceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcubeUpgradeResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcubeUpgradeResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMcubeWhitelistRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeWhitelistRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMcubeWhitelistResponseBody(TeaModel):
    def __init__(self, delete_whitelist_result=None, request_id=None, result_code=None, result_message=None):
        self.delete_whitelist_result = delete_whitelist_result  # type: DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.delete_whitelist_result:
            self.delete_whitelist_result.validate()

    def to_map(self):
        _map = super(DeleteMcubeWhitelistResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delete_whitelist_result is not None:
            result['DeleteWhitelistResult'] = self.delete_whitelist_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeleteWhitelistResult') is not None:
            temp_model = DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult()
            self.delete_whitelist_result = temp_model.from_map(m['DeleteWhitelistResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMcubeWhitelistResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMcubeWhitelistResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMcubeWhitelistResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMcubeWhitelistResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMdsWhitelistContentRequest(TeaModel):
    def __init__(self, app_id=None, tenant_id=None, whitelist_id=None, whitelist_value=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.whitelist_id = whitelist_id  # type: str
        self.whitelist_value = whitelist_value  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMdsWhitelistContentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.whitelist_id is not None:
            result['WhitelistId'] = self.whitelist_id
        if self.whitelist_value is not None:
            result['WhitelistValue'] = self.whitelist_value
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WhitelistId') is not None:
            self.whitelist_id = m.get('WhitelistId')
        if m.get('WhitelistValue') is not None:
            self.whitelist_value = m.get('WhitelistValue')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class DeleteMdsWhitelistContentResponseBodyResultContentData(TeaModel):
    def __init__(self, content=None, error_code=None, result_msg=None, success=None):
        self.content = content  # type: str
        self.error_code = error_code  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMdsWhitelistContentResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMdsWhitelistContentResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: DeleteMdsWhitelistContentResponseBodyResultContentData
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(DeleteMdsWhitelistContentResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = DeleteMdsWhitelistContentResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteMdsWhitelistContentResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: DeleteMdsWhitelistContentResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(DeleteMdsWhitelistContentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = DeleteMdsWhitelistContentResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class DeleteMdsWhitelistContentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteMdsWhitelistContentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMdsWhitelistContentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMdsWhitelistContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExistMcubeRsaKeyRequest(TeaModel):
    def __init__(self, app_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExistMcubeRsaKeyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExistMcubeRsaKeyResponseBody(TeaModel):
    def __init__(self, check_rsa_key_result=None, request_id=None, result_code=None, result_message=None):
        self.check_rsa_key_result = check_rsa_key_result  # type: ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.check_rsa_key_result:
            self.check_rsa_key_result.validate()

    def to_map(self):
        _map = super(ExistMcubeRsaKeyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_rsa_key_result is not None:
            result['CheckRsaKeyResult'] = self.check_rsa_key_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CheckRsaKeyResult') is not None:
            temp_model = ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult()
            self.check_rsa_key_result = temp_model.from_map(m['CheckRsaKeyResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ExistMcubeRsaKeyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ExistMcubeRsaKeyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ExistMcubeRsaKeyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExistMcubeRsaKeyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExportMappCenterAppConfigRequest(TeaModel):
    def __init__(self, apk_file_url=None, app_id=None, cert_rsa_base_64=None, identifier=None, onex_flag=None,
                 system_type=None, workspace_id=None):
        self.apk_file_url = apk_file_url  # type: str
        self.app_id = app_id  # type: str
        self.cert_rsa_base_64 = cert_rsa_base_64  # type: str
        self.identifier = identifier  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.system_type = system_type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExportMappCenterAppConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apk_file_url is not None:
            result['ApkFileUrl'] = self.apk_file_url
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.cert_rsa_base_64 is not None:
            result['CertRsaBase64'] = self.cert_rsa_base_64
        if self.identifier is not None:
            result['Identifier'] = self.identifier
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.system_type is not None:
            result['SystemType'] = self.system_type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApkFileUrl') is not None:
            self.apk_file_url = m.get('ApkFileUrl')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('CertRsaBase64') is not None:
            self.cert_rsa_base_64 = m.get('CertRsaBase64')
        if m.get('Identifier') is not None:
            self.identifier = m.get('Identifier')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('SystemType') is not None:
            self.system_type = m.get('SystemType')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult(TeaModel):
    def __init__(self, config_download_url=None, result_msg=None, success=None):
        self.config_download_url = config_download_url  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_download_url is not None:
            result['ConfigDownloadUrl'] = self.config_download_url
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigDownloadUrl') is not None:
            self.config_download_url = m.get('ConfigDownloadUrl')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExportMappCenterAppConfigResponseBody(TeaModel):
    def __init__(self, export_mapp_center_app_config_result=None, request_id=None, result_code=None,
                 result_message=None):
        self.export_mapp_center_app_config_result = export_mapp_center_app_config_result  # type: ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.export_mapp_center_app_config_result:
            self.export_mapp_center_app_config_result.validate()

    def to_map(self):
        _map = super(ExportMappCenterAppConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.export_mapp_center_app_config_result is not None:
            result['ExportMappCenterAppConfigResult'] = self.export_mapp_center_app_config_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExportMappCenterAppConfigResult') is not None:
            temp_model = ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult()
            self.export_mapp_center_app_config_result = temp_model.from_map(m['ExportMappCenterAppConfigResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ExportMappCenterAppConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ExportMappCenterAppConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ExportMappCenterAppConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExportMappCenterAppConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFileTokenForUploadToMsaRequest(TeaModel):
    def __init__(self, app_id=None, onex_flag=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFileTokenForUploadToMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetFileTokenForUploadToMsaResponseBodyResultContentContent(TeaModel):
    def __init__(self, accessid=None, dir=None, expire=None, host=None, policy=None, signature=None):
        self.accessid = accessid  # type: str
        self.dir = dir  # type: str
        self.expire = expire  # type: str
        self.host = host  # type: str
        self.policy = policy  # type: str
        self.signature = signature  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFileTokenForUploadToMsaResponseBodyResultContentContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accessid is not None:
            result['Accessid'] = self.accessid
        if self.dir is not None:
            result['Dir'] = self.dir
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.host is not None:
            result['Host'] = self.host
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Accessid') is not None:
            self.accessid = m.get('Accessid')
        if m.get('Dir') is not None:
            self.dir = m.get('Dir')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class GetFileTokenForUploadToMsaResponseBodyResultContent(TeaModel):
    def __init__(self, content=None, error_code=None, request_id=None, result_msg=None, success=None):
        self.content = content  # type: GetFileTokenForUploadToMsaResponseBodyResultContentContent
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: str

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(GetFileTokenForUploadToMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = GetFileTokenForUploadToMsaResponseBodyResultContentContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetFileTokenForUploadToMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: GetFileTokenForUploadToMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(GetFileTokenForUploadToMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = GetFileTokenForUploadToMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetFileTokenForUploadToMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetFileTokenForUploadToMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetFileTokenForUploadToMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFileTokenForUploadToMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetLogUrlInMsaRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetLogUrlInMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetLogUrlInMsaResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetLogUrlInMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetLogUrlInMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: GetLogUrlInMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(GetLogUrlInMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = GetLogUrlInMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetLogUrlInMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetLogUrlInMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetLogUrlInMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetLogUrlInMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMcubeFileTokenRequest(TeaModel):
    def __init__(self, app_id=None, onex_flag=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeFileTokenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken(TeaModel):
    def __init__(self, accessid=None, dir=None, expire=None, host=None, policy=None, signature=None):
        self.accessid = accessid  # type: str
        self.dir = dir  # type: str
        self.expire = expire  # type: str
        self.host = host  # type: str
        self.policy = policy  # type: str
        self.signature = signature  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accessid is not None:
            result['Accessid'] = self.accessid
        if self.dir is not None:
            result['Dir'] = self.dir
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.host is not None:
            result['Host'] = self.host
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Accessid') is not None:
            self.accessid = m.get('Accessid')
        if m.get('Dir') is not None:
            self.dir = m.get('Dir')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class GetMcubeFileTokenResponseBodyGetFileTokenResult(TeaModel):
    def __init__(self, file_token=None, result_msg=None, success=None):
        self.file_token = file_token  # type: GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.file_token:
            self.file_token.validate()

    def to_map(self):
        _map = super(GetMcubeFileTokenResponseBodyGetFileTokenResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_token is not None:
            result['FileToken'] = self.file_token.to_map()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileToken') is not None:
            temp_model = GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken()
            self.file_token = temp_model.from_map(m['FileToken'])
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMcubeFileTokenResponseBody(TeaModel):
    def __init__(self, get_file_token_result=None, request_id=None, result_code=None, result_message=None):
        self.get_file_token_result = get_file_token_result  # type: GetMcubeFileTokenResponseBodyGetFileTokenResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.get_file_token_result:
            self.get_file_token_result.validate()

    def to_map(self):
        _map = super(GetMcubeFileTokenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.get_file_token_result is not None:
            result['GetFileTokenResult'] = self.get_file_token_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GetFileTokenResult') is not None:
            temp_model = GetMcubeFileTokenResponseBodyGetFileTokenResult()
            self.get_file_token_result = temp_model.from_map(m['GetFileTokenResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetMcubeFileTokenResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMcubeFileTokenResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMcubeFileTokenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMcubeFileTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMcubeNebulaResourceRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeNebulaResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo(TeaModel):
    def __init__(self, app_code=None, auto_install=None, client_version_max=None, client_version_min=None,
                 creator=None, download_url=None, extend_info=None, extra_data=None, fallback_base_url=None, file_size=None,
                 gmt_create=None, gmt_modified=None, h_5id=None, h_5name=None, h_5version=None, id=None, install_type=None,
                 main_url=None, memo=None, meta_id=None, modifier=None, package_type=None, platform=None, publish_period=None,
                 resource_type=None, status=None, vhost=None):
        self.app_code = app_code  # type: str
        self.auto_install = auto_install  # type: int
        self.client_version_max = client_version_max  # type: str
        self.client_version_min = client_version_min  # type: str
        self.creator = creator  # type: str
        self.download_url = download_url  # type: str
        self.extend_info = extend_info  # type: str
        self.extra_data = extra_data  # type: str
        self.fallback_base_url = fallback_base_url  # type: str
        self.file_size = file_size  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.h_5version = h_5version  # type: str
        self.id = id  # type: long
        self.install_type = install_type  # type: int
        self.main_url = main_url  # type: str
        self.memo = memo  # type: str
        self.meta_id = meta_id  # type: long
        self.modifier = modifier  # type: str
        self.package_type = package_type  # type: int
        self.platform = platform  # type: str
        self.publish_period = publish_period  # type: int
        self.resource_type = resource_type  # type: str
        self.status = status  # type: int
        self.vhost = vhost  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.auto_install is not None:
            result['AutoInstall'] = self.auto_install
        if self.client_version_max is not None:
            result['ClientVersionMax'] = self.client_version_max
        if self.client_version_min is not None:
            result['ClientVersionMin'] = self.client_version_min
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info
        if self.extra_data is not None:
            result['ExtraData'] = self.extra_data
        if self.fallback_base_url is not None:
            result['FallbackBaseUrl'] = self.fallback_base_url
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.h_5version is not None:
            result['H5Version'] = self.h_5version
        if self.id is not None:
            result['Id'] = self.id
        if self.install_type is not None:
            result['InstallType'] = self.install_type
        if self.main_url is not None:
            result['MainUrl'] = self.main_url
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.meta_id is not None:
            result['MetaId'] = self.meta_id
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.publish_period is not None:
            result['PublishPeriod'] = self.publish_period
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.status is not None:
            result['Status'] = self.status
        if self.vhost is not None:
            result['Vhost'] = self.vhost
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AutoInstall') is not None:
            self.auto_install = m.get('AutoInstall')
        if m.get('ClientVersionMax') is not None:
            self.client_version_max = m.get('ClientVersionMax')
        if m.get('ClientVersionMin') is not None:
            self.client_version_min = m.get('ClientVersionMin')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('ExtendInfo') is not None:
            self.extend_info = m.get('ExtendInfo')
        if m.get('ExtraData') is not None:
            self.extra_data = m.get('ExtraData')
        if m.get('FallbackBaseUrl') is not None:
            self.fallback_base_url = m.get('FallbackBaseUrl')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('H5Version') is not None:
            self.h_5version = m.get('H5Version')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstallType') is not None:
            self.install_type = m.get('InstallType')
        if m.get('MainUrl') is not None:
            self.main_url = m.get('MainUrl')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('MetaId') is not None:
            self.meta_id = m.get('MetaId')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('PublishPeriod') is not None:
            self.publish_period = m.get('PublishPeriod')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Vhost') is not None:
            self.vhost = m.get('Vhost')
        return self


class GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult(TeaModel):
    def __init__(self, error_code=None, nebula_resource_info=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.nebula_resource_info = nebula_resource_info  # type: GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.nebula_resource_info:
            self.nebula_resource_info.validate()

    def to_map(self):
        _map = super(GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.nebula_resource_info is not None:
            result['NebulaResourceInfo'] = self.nebula_resource_info.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('NebulaResourceInfo') is not None:
            temp_model = GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo()
            self.nebula_resource_info = temp_model.from_map(m['NebulaResourceInfo'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMcubeNebulaResourceResponseBody(TeaModel):
    def __init__(self, get_nebula_resource_result=None, request_id=None, result_code=None, result_message=None):
        self.get_nebula_resource_result = get_nebula_resource_result  # type: GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.get_nebula_resource_result:
            self.get_nebula_resource_result.validate()

    def to_map(self):
        _map = super(GetMcubeNebulaResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.get_nebula_resource_result is not None:
            result['GetNebulaResourceResult'] = self.get_nebula_resource_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GetNebulaResourceResult') is not None:
            temp_model = GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult()
            self.get_nebula_resource_result = temp_model.from_map(m['GetNebulaResourceResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetMcubeNebulaResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMcubeNebulaResourceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMcubeNebulaResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMcubeNebulaResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMcubeNebulaTaskDetailRequest(TeaModel):
    def __init__(self, app_id=None, task_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.task_id = task_id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeNebulaTaskDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList(TeaModel):
    def __init__(self, operation=None, rule_element=None, rule_type=None, value=None):
        self.operation = operation  # type: str
        self.rule_element = rule_element  # type: str
        self.rule_type = rule_type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation is not None:
            result['Operation'] = self.operation
        if self.rule_element is not None:
            result['RuleElement'] = self.rule_element
        if self.rule_type is not None:
            result['RuleType'] = self.rule_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Operation') is not None:
            self.operation = m.get('Operation')
        if m.get('RuleElement') is not None:
            self.rule_element = m.get('RuleElement')
        if m.get('RuleType') is not None:
            self.rule_type = m.get('RuleType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail(TeaModel):
    def __init__(self, app_code=None, app_id=None, atomic=None, base_info_id=None, biz_type=None, creator=None,
                 cronexpress=None, download_url=None, extra_data=None, file_size=None, full_repair=None, gmt_create=None,
                 gmt_modified=None, gmt_modified_str=None, grey_config_info=None, grey_endtime=None, grey_endtime_data=None,
                 grey_endtime_str=None, grey_num=None, grey_url=None, id=None, issue_desc=None, memo=None, modifier=None,
                 oss_path=None, package_id=None, percent=None, platform=None, product_id=None, product_version=None,
                 publish_mode=None, publish_period=None, publish_type=None, quick_rollback=None, release_version=None,
                 rule_json_list=None, source_id=None, source_name=None, source_type=None, status=None, sync_result=None,
                 sync_type=None, task_name=None, task_status=None, task_type=None, task_version=None, upgrade_notice_num=None,
                 upgrade_progress=None, whitelist_ids=None, workspace_id=None):
        self.app_code = app_code  # type: str
        self.app_id = app_id  # type: str
        self.atomic = atomic  # type: int
        self.base_info_id = base_info_id  # type: long
        self.biz_type = biz_type  # type: str
        self.creator = creator  # type: str
        self.cronexpress = cronexpress  # type: int
        self.download_url = download_url  # type: str
        self.extra_data = extra_data  # type: str
        self.file_size = file_size  # type: str
        self.full_repair = full_repair  # type: int
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.gmt_modified_str = gmt_modified_str  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime = grey_endtime  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_endtime_str = grey_endtime_str  # type: str
        self.grey_num = grey_num  # type: int
        self.grey_url = grey_url  # type: str
        self.id = id  # type: long
        self.issue_desc = issue_desc  # type: str
        self.memo = memo  # type: str
        self.modifier = modifier  # type: str
        self.oss_path = oss_path  # type: str
        self.package_id = package_id  # type: long
        self.percent = percent  # type: int
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.product_version = product_version  # type: str
        self.publish_mode = publish_mode  # type: int
        self.publish_period = publish_period  # type: int
        self.publish_type = publish_type  # type: int
        self.quick_rollback = quick_rollback  # type: int
        self.release_version = release_version  # type: str
        self.rule_json_list = rule_json_list  # type: list[GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList]
        self.source_id = source_id  # type: str
        self.source_name = source_name  # type: str
        self.source_type = source_type  # type: str
        self.status = status  # type: int
        self.sync_result = sync_result  # type: str
        self.sync_type = sync_type  # type: int
        self.task_name = task_name  # type: str
        self.task_status = task_status  # type: int
        self.task_type = task_type  # type: int
        self.task_version = task_version  # type: long
        self.upgrade_notice_num = upgrade_notice_num  # type: long
        self.upgrade_progress = upgrade_progress  # type: str
        self.whitelist_ids = whitelist_ids  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.rule_json_list:
            for k in self.rule_json_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.atomic is not None:
            result['Atomic'] = self.atomic
        if self.base_info_id is not None:
            result['BaseInfoId'] = self.base_info_id
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.cronexpress is not None:
            result['Cronexpress'] = self.cronexpress
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.extra_data is not None:
            result['ExtraData'] = self.extra_data
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.full_repair is not None:
            result['FullRepair'] = self.full_repair
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_modified_str is not None:
            result['GmtModifiedStr'] = self.gmt_modified_str
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime is not None:
            result['GreyEndtime'] = self.grey_endtime
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_endtime_str is not None:
            result['GreyEndtimeStr'] = self.grey_endtime_str
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.grey_url is not None:
            result['GreyUrl'] = self.grey_url
        if self.id is not None:
            result['Id'] = self.id
        if self.issue_desc is not None:
            result['IssueDesc'] = self.issue_desc
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_period is not None:
            result['PublishPeriod'] = self.publish_period
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.quick_rollback is not None:
            result['QuickRollback'] = self.quick_rollback
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        result['RuleJsonList'] = []
        if self.rule_json_list is not None:
            for k in self.rule_json_list:
                result['RuleJsonList'].append(k.to_map() if k else None)
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.source_name is not None:
            result['SourceName'] = self.source_name
        if self.source_type is not None:
            result['SourceType'] = self.source_type
        if self.status is not None:
            result['Status'] = self.status
        if self.sync_result is not None:
            result['SyncResult'] = self.sync_result
        if self.sync_type is not None:
            result['SyncType'] = self.sync_type
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.task_version is not None:
            result['TaskVersion'] = self.task_version
        if self.upgrade_notice_num is not None:
            result['UpgradeNoticeNum'] = self.upgrade_notice_num
        if self.upgrade_progress is not None:
            result['UpgradeProgress'] = self.upgrade_progress
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Atomic') is not None:
            self.atomic = m.get('Atomic')
        if m.get('BaseInfoId') is not None:
            self.base_info_id = m.get('BaseInfoId')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Cronexpress') is not None:
            self.cronexpress = m.get('Cronexpress')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('ExtraData') is not None:
            self.extra_data = m.get('ExtraData')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('FullRepair') is not None:
            self.full_repair = m.get('FullRepair')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtModifiedStr') is not None:
            self.gmt_modified_str = m.get('GmtModifiedStr')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtime') is not None:
            self.grey_endtime = m.get('GreyEndtime')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyEndtimeStr') is not None:
            self.grey_endtime_str = m.get('GreyEndtimeStr')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('GreyUrl') is not None:
            self.grey_url = m.get('GreyUrl')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IssueDesc') is not None:
            self.issue_desc = m.get('IssueDesc')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishPeriod') is not None:
            self.publish_period = m.get('PublishPeriod')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('QuickRollback') is not None:
            self.quick_rollback = m.get('QuickRollback')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        self.rule_json_list = []
        if m.get('RuleJsonList') is not None:
            for k in m.get('RuleJsonList'):
                temp_model = GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList()
                self.rule_json_list.append(temp_model.from_map(k))
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('SourceName') is not None:
            self.source_name = m.get('SourceName')
        if m.get('SourceType') is not None:
            self.source_type = m.get('SourceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SyncResult') is not None:
            self.sync_result = m.get('SyncResult')
        if m.get('SyncType') is not None:
            self.sync_type = m.get('SyncType')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('TaskVersion') is not None:
            self.task_version = m.get('TaskVersion')
        if m.get('UpgradeNoticeNum') is not None:
            self.upgrade_notice_num = m.get('UpgradeNoticeNum')
        if m.get('UpgradeProgress') is not None:
            self.upgrade_progress = m.get('UpgradeProgress')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult(TeaModel):
    def __init__(self, error_code=None, nebula_task_detail=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.nebula_task_detail = nebula_task_detail  # type: GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.nebula_task_detail:
            self.nebula_task_detail.validate()

    def to_map(self):
        _map = super(GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.nebula_task_detail is not None:
            result['NebulaTaskDetail'] = self.nebula_task_detail.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('NebulaTaskDetail') is not None:
            temp_model = GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail()
            self.nebula_task_detail = temp_model.from_map(m['NebulaTaskDetail'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMcubeNebulaTaskDetailResponseBody(TeaModel):
    def __init__(self, get_mcube_nebula_task_detail_result=None, request_id=None, result_code=None,
                 result_message=None):
        self.get_mcube_nebula_task_detail_result = get_mcube_nebula_task_detail_result  # type: GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.get_mcube_nebula_task_detail_result:
            self.get_mcube_nebula_task_detail_result.validate()

    def to_map(self):
        _map = super(GetMcubeNebulaTaskDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.get_mcube_nebula_task_detail_result is not None:
            result['GetMcubeNebulaTaskDetailResult'] = self.get_mcube_nebula_task_detail_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GetMcubeNebulaTaskDetailResult') is not None:
            temp_model = GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult()
            self.get_mcube_nebula_task_detail_result = temp_model.from_map(m['GetMcubeNebulaTaskDetailResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetMcubeNebulaTaskDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMcubeNebulaTaskDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMcubeNebulaTaskDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMcubeNebulaTaskDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMcubeUpgradePackageInfoRequest(TeaModel):
    def __init__(self, app_id=None, package_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.package_id = package_id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeUpgradePackageInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO(TeaModel):
    def __init__(self, gmt_create=None, gmt_modified=None, id=None, install_amount=None, invalid_time=None,
                 upgrade_id=None):
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.install_amount = install_amount  # type: int
        self.invalid_time = invalid_time  # type: str
        self.upgrade_id = upgrade_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.install_amount is not None:
            result['InstallAmount'] = self.install_amount
        if self.invalid_time is not None:
            result['InvalidTime'] = self.invalid_time
        if self.upgrade_id is not None:
            result['UpgradeId'] = self.upgrade_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstallAmount') is not None:
            self.install_amount = m.get('InstallAmount')
        if m.get('InvalidTime') is not None:
            self.invalid_time = m.get('InvalidTime')
        if m.get('UpgradeId') is not None:
            self.upgrade_id = m.get('UpgradeId')
        return self


class GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO(TeaModel):
    def __init__(self, allow_create_task=None, app_code=None, appstore_url=None, back_log=None, change_log=None,
                 client_file_size=None, client_name=None, cp_id=None, creator=None, download_url=None, global_variables=None,
                 gmt_create=None, gmt_create_str=None, gmt_modified=None, gmt_modified_str=None, id=None, inner_version=None,
                 ios_symbol=None, is_enterprise=None, is_rc=None, is_release=None, max_version=None, md_5=None, modifier=None,
                 need_check=None, oss_path=None, package_type=None, platform=None, product_id=None, product_name=None,
                 product_version=None, publish_period=None, qrcode_url=None, release_type=None, release_window=None,
                 scm_download_url=None, server_version=None, verification_code=None, verify_result=None, version_code=None):
        self.allow_create_task = allow_create_task  # type: bool
        self.app_code = app_code  # type: str
        self.appstore_url = appstore_url  # type: str
        self.back_log = back_log  # type: str
        self.change_log = change_log  # type: str
        self.client_file_size = client_file_size  # type: int
        self.client_name = client_name  # type: str
        self.cp_id = cp_id  # type: str
        self.creator = creator  # type: str
        self.download_url = download_url  # type: str
        self.global_variables = global_variables  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_create_str = gmt_create_str  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.gmt_modified_str = gmt_modified_str  # type: str
        self.id = id  # type: long
        self.inner_version = inner_version  # type: str
        self.ios_symbol = ios_symbol  # type: str
        self.is_enterprise = is_enterprise  # type: int
        self.is_rc = is_rc  # type: int
        self.is_release = is_release  # type: int
        self.max_version = max_version  # type: str
        self.md_5 = md_5  # type: str
        self.modifier = modifier  # type: str
        self.need_check = need_check  # type: int
        self.oss_path = oss_path  # type: str
        self.package_type = package_type  # type: str
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.product_name = product_name  # type: str
        self.product_version = product_version  # type: str
        self.publish_period = publish_period  # type: int
        self.qrcode_url = qrcode_url  # type: str
        self.release_type = release_type  # type: str
        self.release_window = release_window  # type: str
        self.scm_download_url = scm_download_url  # type: str
        self.server_version = server_version  # type: int
        self.verification_code = verification_code  # type: str
        self.verify_result = verify_result  # type: int
        self.version_code = version_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_create_task is not None:
            result['AllowCreateTask'] = self.allow_create_task
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.appstore_url is not None:
            result['AppstoreUrl'] = self.appstore_url
        if self.back_log is not None:
            result['BackLog'] = self.back_log
        if self.change_log is not None:
            result['ChangeLog'] = self.change_log
        if self.client_file_size is not None:
            result['ClientFileSize'] = self.client_file_size
        if self.client_name is not None:
            result['ClientName'] = self.client_name
        if self.cp_id is not None:
            result['CpId'] = self.cp_id
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.global_variables is not None:
            result['GlobalVariables'] = self.global_variables
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_modified_str is not None:
            result['GmtModifiedStr'] = self.gmt_modified_str
        if self.id is not None:
            result['Id'] = self.id
        if self.inner_version is not None:
            result['InnerVersion'] = self.inner_version
        if self.ios_symbol is not None:
            result['IosSymbol'] = self.ios_symbol
        if self.is_enterprise is not None:
            result['IsEnterprise'] = self.is_enterprise
        if self.is_rc is not None:
            result['IsRc'] = self.is_rc
        if self.is_release is not None:
            result['IsRelease'] = self.is_release
        if self.max_version is not None:
            result['MaxVersion'] = self.max_version
        if self.md_5 is not None:
            result['Md5'] = self.md_5
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.need_check is not None:
            result['NeedCheck'] = self.need_check
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_period is not None:
            result['PublishPeriod'] = self.publish_period
        if self.qrcode_url is not None:
            result['QrcodeUrl'] = self.qrcode_url
        if self.release_type is not None:
            result['ReleaseType'] = self.release_type
        if self.release_window is not None:
            result['ReleaseWindow'] = self.release_window
        if self.scm_download_url is not None:
            result['ScmDownloadUrl'] = self.scm_download_url
        if self.server_version is not None:
            result['ServerVersion'] = self.server_version
        if self.verification_code is not None:
            result['VerificationCode'] = self.verification_code
        if self.verify_result is not None:
            result['VerifyResult'] = self.verify_result
        if self.version_code is not None:
            result['VersionCode'] = self.version_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowCreateTask') is not None:
            self.allow_create_task = m.get('AllowCreateTask')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppstoreUrl') is not None:
            self.appstore_url = m.get('AppstoreUrl')
        if m.get('BackLog') is not None:
            self.back_log = m.get('BackLog')
        if m.get('ChangeLog') is not None:
            self.change_log = m.get('ChangeLog')
        if m.get('ClientFileSize') is not None:
            self.client_file_size = m.get('ClientFileSize')
        if m.get('ClientName') is not None:
            self.client_name = m.get('ClientName')
        if m.get('CpId') is not None:
            self.cp_id = m.get('CpId')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('GlobalVariables') is not None:
            self.global_variables = m.get('GlobalVariables')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtModifiedStr') is not None:
            self.gmt_modified_str = m.get('GmtModifiedStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InnerVersion') is not None:
            self.inner_version = m.get('InnerVersion')
        if m.get('IosSymbol') is not None:
            self.ios_symbol = m.get('IosSymbol')
        if m.get('IsEnterprise') is not None:
            self.is_enterprise = m.get('IsEnterprise')
        if m.get('IsRc') is not None:
            self.is_rc = m.get('IsRc')
        if m.get('IsRelease') is not None:
            self.is_release = m.get('IsRelease')
        if m.get('MaxVersion') is not None:
            self.max_version = m.get('MaxVersion')
        if m.get('Md5') is not None:
            self.md_5 = m.get('Md5')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('NeedCheck') is not None:
            self.need_check = m.get('NeedCheck')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishPeriod') is not None:
            self.publish_period = m.get('PublishPeriod')
        if m.get('QrcodeUrl') is not None:
            self.qrcode_url = m.get('QrcodeUrl')
        if m.get('ReleaseType') is not None:
            self.release_type = m.get('ReleaseType')
        if m.get('ReleaseWindow') is not None:
            self.release_window = m.get('ReleaseWindow')
        if m.get('ScmDownloadUrl') is not None:
            self.scm_download_url = m.get('ScmDownloadUrl')
        if m.get('ServerVersion') is not None:
            self.server_version = m.get('ServerVersion')
        if m.get('VerificationCode') is not None:
            self.verification_code = m.get('VerificationCode')
        if m.get('VerifyResult') is not None:
            self.verify_result = m.get('VerifyResult')
        if m.get('VersionCode') is not None:
            self.version_code = m.get('VersionCode')
        return self


class GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo(TeaModel):
    def __init__(self, mobile_test_flight_config_do=None, upgrade_base_info_do=None):
        self.mobile_test_flight_config_do = mobile_test_flight_config_do  # type: GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO
        self.upgrade_base_info_do = upgrade_base_info_do  # type: GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO

    def validate(self):
        if self.mobile_test_flight_config_do:
            self.mobile_test_flight_config_do.validate()
        if self.upgrade_base_info_do:
            self.upgrade_base_info_do.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mobile_test_flight_config_do is not None:
            result['MobileTestFlightConfigDO'] = self.mobile_test_flight_config_do.to_map()
        if self.upgrade_base_info_do is not None:
            result['UpgradeBaseInfoDO'] = self.upgrade_base_info_do.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MobileTestFlightConfigDO') is not None:
            temp_model = GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO()
            self.mobile_test_flight_config_do = temp_model.from_map(m['MobileTestFlightConfigDO'])
        if m.get('UpgradeBaseInfoDO') is not None:
            temp_model = GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO()
            self.upgrade_base_info_do = temp_model.from_map(m['UpgradeBaseInfoDO'])
        return self


class GetMcubeUpgradePackageInfoResponseBodyGetPackageResult(TeaModel):
    def __init__(self, error_code=None, package_info=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.package_info = package_info  # type: GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.package_info:
            self.package_info.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradePackageInfoResponseBodyGetPackageResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.package_info is not None:
            result['PackageInfo'] = self.package_info.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('PackageInfo') is not None:
            temp_model = GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo()
            self.package_info = temp_model.from_map(m['PackageInfo'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMcubeUpgradePackageInfoResponseBody(TeaModel):
    def __init__(self, get_package_result=None, request_id=None, result_code=None, result_message=None):
        self.get_package_result = get_package_result  # type: GetMcubeUpgradePackageInfoResponseBodyGetPackageResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.get_package_result:
            self.get_package_result.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradePackageInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.get_package_result is not None:
            result['GetPackageResult'] = self.get_package_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GetPackageResult') is not None:
            temp_model = GetMcubeUpgradePackageInfoResponseBodyGetPackageResult()
            self.get_package_result = temp_model.from_map(m['GetPackageResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetMcubeUpgradePackageInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMcubeUpgradePackageInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradePackageInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMcubeUpgradePackageInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMcubeUpgradeTaskInfoRequest(TeaModel):
    def __init__(self, app_id=None, task_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.task_id = task_id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeUpgradeTaskInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList(TeaModel):
    def __init__(self, operation=None, rule_element=None, rule_type=None, value=None):
        self.operation = operation  # type: str
        self.rule_element = rule_element  # type: str
        self.rule_type = rule_type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation is not None:
            result['Operation'] = self.operation
        if self.rule_element is not None:
            result['RuleElement'] = self.rule_element
        if self.rule_type is not None:
            result['RuleType'] = self.rule_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Operation') is not None:
            self.operation = m.get('Operation')
        if m.get('RuleElement') is not None:
            self.rule_element = m.get('RuleElement')
        if m.get('RuleType') is not None:
            self.rule_type = m.get('RuleType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist(TeaModel):
    def __init__(self, app_code=None, id=None, id_type=None, platform=None, status=None, user_type=None,
                 white_list_count=None, white_list_name=None, whitelist_type=None):
        self.app_code = app_code  # type: str
        self.id = id  # type: long
        self.id_type = id_type  # type: str
        self.platform = platform  # type: str
        self.status = status  # type: int
        self.user_type = user_type  # type: str
        self.white_list_count = white_list_count  # type: long
        self.white_list_name = white_list_name  # type: str
        self.whitelist_type = whitelist_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.id is not None:
            result['Id'] = self.id
        if self.id_type is not None:
            result['IdType'] = self.id_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.status is not None:
            result['Status'] = self.status
        if self.user_type is not None:
            result['UserType'] = self.user_type
        if self.white_list_count is not None:
            result['WhiteListCount'] = self.white_list_count
        if self.white_list_name is not None:
            result['WhiteListName'] = self.white_list_name
        if self.whitelist_type is not None:
            result['WhitelistType'] = self.whitelist_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IdType') is not None:
            self.id_type = m.get('IdType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UserType') is not None:
            self.user_type = m.get('UserType')
        if m.get('WhiteListCount') is not None:
            self.white_list_count = m.get('WhiteListCount')
        if m.get('WhiteListName') is not None:
            self.white_list_name = m.get('WhiteListName')
        if m.get('WhitelistType') is not None:
            self.whitelist_type = m.get('WhitelistType')
        return self


class GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo(TeaModel):
    def __init__(self, app_code=None, app_id=None, appstore_url=None, creater=None, creator=None, download_url=None,
                 grey_config_info=None, grey_endtime_data=None, grey_num=None, history_force=None, id=None, is_enterprise=None,
                 is_official=None, is_rc=None, is_release=None, memo=None, modifier=None, net_type=None, os_version=None,
                 package_info_id=None, package_type=None, platform=None, product_id=None, publish_mode=None, publish_type=None,
                 push_content=None, qrcode_url=None, rule_json_list=None, silent_type=None, task_status=None,
                 upgrade_content=None, upgrade_type=None, upgrade_valid_time=None, whitelist=None, whitelist_ids=None,
                 workspace_id=None):
        self.app_code = app_code  # type: str
        self.app_id = app_id  # type: str
        self.appstore_url = appstore_url  # type: str
        self.creater = creater  # type: str
        self.creator = creator  # type: str
        self.download_url = download_url  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_num = grey_num  # type: int
        self.history_force = history_force  # type: int
        self.id = id  # type: long
        self.is_enterprise = is_enterprise  # type: int
        self.is_official = is_official  # type: int
        self.is_rc = is_rc  # type: int
        self.is_release = is_release  # type: int
        self.memo = memo  # type: str
        self.modifier = modifier  # type: str
        self.net_type = net_type  # type: str
        self.os_version = os_version  # type: str
        self.package_info_id = package_info_id  # type: long
        self.package_type = package_type  # type: str
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.publish_mode = publish_mode  # type: int
        self.publish_type = publish_type  # type: int
        self.push_content = push_content  # type: str
        self.qrcode_url = qrcode_url  # type: str
        self.rule_json_list = rule_json_list  # type: list[GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList]
        self.silent_type = silent_type  # type: int
        self.task_status = task_status  # type: int
        self.upgrade_content = upgrade_content  # type: str
        self.upgrade_type = upgrade_type  # type: int
        self.upgrade_valid_time = upgrade_valid_time  # type: int
        self.whitelist = whitelist  # type: list[GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist]
        self.whitelist_ids = whitelist_ids  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.rule_json_list:
            for k in self.rule_json_list:
                if k:
                    k.validate()
        if self.whitelist:
            for k in self.whitelist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.appstore_url is not None:
            result['AppstoreUrl'] = self.appstore_url
        if self.creater is not None:
            result['Creater'] = self.creater
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.history_force is not None:
            result['HistoryForce'] = self.history_force
        if self.id is not None:
            result['Id'] = self.id
        if self.is_enterprise is not None:
            result['IsEnterprise'] = self.is_enterprise
        if self.is_official is not None:
            result['IsOfficial'] = self.is_official
        if self.is_rc is not None:
            result['IsRc'] = self.is_rc
        if self.is_release is not None:
            result['IsRelease'] = self.is_release
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.net_type is not None:
            result['NetType'] = self.net_type
        if self.os_version is not None:
            result['OsVersion'] = self.os_version
        if self.package_info_id is not None:
            result['PackageInfoId'] = self.package_info_id
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.push_content is not None:
            result['PushContent'] = self.push_content
        if self.qrcode_url is not None:
            result['QrcodeUrl'] = self.qrcode_url
        result['RuleJsonList'] = []
        if self.rule_json_list is not None:
            for k in self.rule_json_list:
                result['RuleJsonList'].append(k.to_map() if k else None)
        if self.silent_type is not None:
            result['SilentType'] = self.silent_type
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.upgrade_content is not None:
            result['UpgradeContent'] = self.upgrade_content
        if self.upgrade_type is not None:
            result['UpgradeType'] = self.upgrade_type
        if self.upgrade_valid_time is not None:
            result['UpgradeValidTime'] = self.upgrade_valid_time
        result['Whitelist'] = []
        if self.whitelist is not None:
            for k in self.whitelist:
                result['Whitelist'].append(k.to_map() if k else None)
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppstoreUrl') is not None:
            self.appstore_url = m.get('AppstoreUrl')
        if m.get('Creater') is not None:
            self.creater = m.get('Creater')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('HistoryForce') is not None:
            self.history_force = m.get('HistoryForce')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsEnterprise') is not None:
            self.is_enterprise = m.get('IsEnterprise')
        if m.get('IsOfficial') is not None:
            self.is_official = m.get('IsOfficial')
        if m.get('IsRc') is not None:
            self.is_rc = m.get('IsRc')
        if m.get('IsRelease') is not None:
            self.is_release = m.get('IsRelease')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('NetType') is not None:
            self.net_type = m.get('NetType')
        if m.get('OsVersion') is not None:
            self.os_version = m.get('OsVersion')
        if m.get('PackageInfoId') is not None:
            self.package_info_id = m.get('PackageInfoId')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('PushContent') is not None:
            self.push_content = m.get('PushContent')
        if m.get('QrcodeUrl') is not None:
            self.qrcode_url = m.get('QrcodeUrl')
        self.rule_json_list = []
        if m.get('RuleJsonList') is not None:
            for k in m.get('RuleJsonList'):
                temp_model = GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList()
                self.rule_json_list.append(temp_model.from_map(k))
        if m.get('SilentType') is not None:
            self.silent_type = m.get('SilentType')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('UpgradeContent') is not None:
            self.upgrade_content = m.get('UpgradeContent')
        if m.get('UpgradeType') is not None:
            self.upgrade_type = m.get('UpgradeType')
        if m.get('UpgradeValidTime') is not None:
            self.upgrade_valid_time = m.get('UpgradeValidTime')
        self.whitelist = []
        if m.get('Whitelist') is not None:
            for k in m.get('Whitelist'):
                temp_model = GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist()
                self.whitelist.append(temp_model.from_map(k))
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult(TeaModel):
    def __init__(self, error_code=None, request_id=None, result_msg=None, success=None, task_info=None):
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.task_info = task_info  # type: GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo

    def validate(self):
        if self.task_info:
            self.task_info.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.task_info is not None:
            result['TaskInfo'] = self.task_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskInfo') is not None:
            temp_model = GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo()
            self.task_info = temp_model.from_map(m['TaskInfo'])
        return self


class GetMcubeUpgradeTaskInfoResponseBody(TeaModel):
    def __init__(self, get_task_result=None, request_id=None, result_code=None, result_message=None):
        self.get_task_result = get_task_result  # type: GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.get_task_result:
            self.get_task_result.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradeTaskInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.get_task_result is not None:
            result['GetTaskResult'] = self.get_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GetTaskResult') is not None:
            temp_model = GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult()
            self.get_task_result = temp_model.from_map(m['GetTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetMcubeUpgradeTaskInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMcubeUpgradeTaskInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMcubeUpgradeTaskInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMcubeUpgradeTaskInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMdsMiniConfigRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMdsMiniConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList(TeaModel):
    def __init__(self, app_code=None, config_status=None, config_type=None, config_value=None, description=None,
                 gmt_create=None, gmt_modified=None, h_5id=None, h_5name=None, id=None):
        self.app_code = app_code  # type: str
        self.config_status = config_status  # type: long
        self.config_type = config_type  # type: str
        self.config_value = config_value  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.config_status is not None:
            result['ConfigStatus'] = self.config_status
        if self.config_type is not None:
            result['ConfigType'] = self.config_type
        if self.config_value is not None:
            result['ConfigValue'] = self.config_value
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('ConfigStatus') is not None:
            self.config_status = m.get('ConfigStatus')
        if m.get('ConfigType') is not None:
            self.config_type = m.get('ConfigType')
        if m.get('ConfigValue') is not None:
            self.config_value = m.get('ConfigValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch(TeaModel):
    def __init__(self, app_code=None, config_status=None, config_type=None, config_value=None, description=None,
                 gmt_create=None, gmt_modified=None, h_5id=None, h_5name=None, id=None):
        self.app_code = app_code  # type: str
        self.config_status = config_status  # type: long
        self.config_type = config_type  # type: str
        self.config_value = config_value  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.config_status is not None:
            result['ConfigStatus'] = self.config_status
        if self.config_type is not None:
            result['ConfigType'] = self.config_type
        if self.config_value is not None:
            result['ConfigValue'] = self.config_value
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('ConfigStatus') is not None:
            self.config_status = m.get('ConfigStatus')
        if m.get('ConfigType') is not None:
            self.config_type = m.get('ConfigType')
        if m.get('ConfigValue') is not None:
            self.config_value = m.get('ConfigValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList(TeaModel):
    def __init__(self, app_code=None, config_status=None, config_type=None, config_value=None, description=None,
                 gmt_create=None, gmt_modified=None, h_5id=None, h_5name=None, id=None):
        self.app_code = app_code  # type: str
        self.config_status = config_status  # type: long
        self.config_type = config_type  # type: str
        self.config_value = config_value  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.config_status is not None:
            result['ConfigStatus'] = self.config_status
        if self.config_type is not None:
            result['ConfigType'] = self.config_type
        if self.config_value is not None:
            result['ConfigValue'] = self.config_value
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('ConfigStatus') is not None:
            self.config_status = m.get('ConfigStatus')
        if m.get('ConfigType') is not None:
            self.config_type = m.get('ConfigType')
        if m.get('ConfigValue') is not None:
            self.config_value = m.get('ConfigValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList(TeaModel):
    def __init__(self, app_code=None, config_status=None, config_type=None, config_value=None, description=None,
                 gmt_create=None, gmt_modified=None, h_5id=None, h_5name=None, id=None):
        self.app_code = app_code  # type: str
        self.config_status = config_status  # type: long
        self.config_type = config_type  # type: str
        self.config_value = config_value  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.config_status is not None:
            result['ConfigStatus'] = self.config_status
        if self.config_type is not None:
            result['ConfigType'] = self.config_type
        if self.config_value is not None:
            result['ConfigValue'] = self.config_value
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('ConfigStatus') is not None:
            self.config_status = m.get('ConfigStatus')
        if m.get('ConfigType') is not None:
            self.config_type = m.get('ConfigType')
        if m.get('ConfigValue') is not None:
            self.config_value = m.get('ConfigValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetMdsMiniConfigResponseBodyResultContentDataContent(TeaModel):
    def __init__(self, api_config_list=None, app_code=None, enable_server_domain_count=None, h_5id=None,
                 h_5name=None, privilege_switch=None, server_domain_config_list=None, webview_domain_config_list=None):
        self.api_config_list = api_config_list  # type: list[GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList]
        self.app_code = app_code  # type: str
        self.enable_server_domain_count = enable_server_domain_count  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.privilege_switch = privilege_switch  # type: GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch
        self.server_domain_config_list = server_domain_config_list  # type: list[GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList]
        self.webview_domain_config_list = webview_domain_config_list  # type: list[GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList]

    def validate(self):
        if self.api_config_list:
            for k in self.api_config_list:
                if k:
                    k.validate()
        if self.privilege_switch:
            self.privilege_switch.validate()
        if self.server_domain_config_list:
            for k in self.server_domain_config_list:
                if k:
                    k.validate()
        if self.webview_domain_config_list:
            for k in self.webview_domain_config_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBodyResultContentDataContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApiConfigList'] = []
        if self.api_config_list is not None:
            for k in self.api_config_list:
                result['ApiConfigList'].append(k.to_map() if k else None)
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.enable_server_domain_count is not None:
            result['EnableServerDomainCount'] = self.enable_server_domain_count
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.privilege_switch is not None:
            result['PrivilegeSwitch'] = self.privilege_switch.to_map()
        result['ServerDomainConfigList'] = []
        if self.server_domain_config_list is not None:
            for k in self.server_domain_config_list:
                result['ServerDomainConfigList'].append(k.to_map() if k else None)
        result['WebviewDomainConfigList'] = []
        if self.webview_domain_config_list is not None:
            for k in self.webview_domain_config_list:
                result['WebviewDomainConfigList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.api_config_list = []
        if m.get('ApiConfigList') is not None:
            for k in m.get('ApiConfigList'):
                temp_model = GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList()
                self.api_config_list.append(temp_model.from_map(k))
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('EnableServerDomainCount') is not None:
            self.enable_server_domain_count = m.get('EnableServerDomainCount')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('PrivilegeSwitch') is not None:
            temp_model = GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch()
            self.privilege_switch = temp_model.from_map(m['PrivilegeSwitch'])
        self.server_domain_config_list = []
        if m.get('ServerDomainConfigList') is not None:
            for k in m.get('ServerDomainConfigList'):
                temp_model = GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList()
                self.server_domain_config_list.append(temp_model.from_map(k))
        self.webview_domain_config_list = []
        if m.get('WebviewDomainConfigList') is not None:
            for k in m.get('WebviewDomainConfigList'):
                temp_model = GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList()
                self.webview_domain_config_list.append(temp_model.from_map(k))
        return self


class GetMdsMiniConfigResponseBodyResultContentData(TeaModel):
    def __init__(self, content=None, request_id=None, result_msg=None, success=None):
        self.content = content  # type: GetMdsMiniConfigResponseBodyResultContentDataContent
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = GetMdsMiniConfigResponseBodyResultContentDataContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMdsMiniConfigResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetMdsMiniConfigResponseBodyResultContentData
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetMdsMiniConfigResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetMdsMiniConfigResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: GetMdsMiniConfigResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(GetMdsMiniConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = GetMdsMiniConfigResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetMdsMiniConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMdsMiniConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMdsMiniConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMdsMiniConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserAppDonwloadUrlInMsaRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserAppDonwloadUrlInMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetUserAppDonwloadUrlInMsaResponseBodyResultContentData(TeaModel):
    def __init__(self, filename=None, url=None):
        self.filename = filename  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserAppDonwloadUrlInMsaResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.filename is not None:
            result['Filename'] = self.filename
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Filename') is not None:
            self.filename = m.get('Filename')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetUserAppDonwloadUrlInMsaResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: GetUserAppDonwloadUrlInMsaResponseBodyResultContentData
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetUserAppDonwloadUrlInMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetUserAppDonwloadUrlInMsaResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetUserAppDonwloadUrlInMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: GetUserAppDonwloadUrlInMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(GetUserAppDonwloadUrlInMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = GetUserAppDonwloadUrlInMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetUserAppDonwloadUrlInMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetUserAppDonwloadUrlInMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserAppDonwloadUrlInMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserAppDonwloadUrlInMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserAppEnhanceProcessInMsaRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserAppEnhanceProcessInMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping(TeaModel):
    def __init__(self, info=None, reason=None, type=None):
        self.info = info  # type: str
        self.reason = reason  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.info is not None:
            result['Info'] = self.info
        if self.reason is not None:
            result['Reason'] = self.reason
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Info') is not None:
            self.info = m.get('Info')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetUserAppEnhanceProcessInMsaResponseBodyResultContentData(TeaModel):
    def __init__(self, after_md_5=None, after_size=None, app_code=None, app_package=None, assets_file_list=None,
                 before_md_5=None, before_size=None, class_forest=None, enhance_mapping=None, enhance_rules=None,
                 enhanced_assets_files=None, enhanced_classes=None, enhanced_so_files=None, id=None, label=None, progress=None,
                 so_file_list=None, status=None, task_type=None, version_code=None, version_name=None):
        self.after_md_5 = after_md_5  # type: str
        self.after_size = after_size  # type: long
        self.app_code = app_code  # type: str
        self.app_package = app_package  # type: str
        self.assets_file_list = assets_file_list  # type: list[str]
        self.before_md_5 = before_md_5  # type: str
        self.before_size = before_size  # type: long
        self.class_forest = class_forest  # type: list[str]
        self.enhance_mapping = enhance_mapping  # type: list[GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping]
        self.enhance_rules = enhance_rules  # type: list[str]
        self.enhanced_assets_files = enhanced_assets_files  # type: list[str]
        self.enhanced_classes = enhanced_classes  # type: list[str]
        self.enhanced_so_files = enhanced_so_files  # type: list[str]
        self.id = id  # type: long
        self.label = label  # type: str
        self.progress = progress  # type: long
        self.so_file_list = so_file_list  # type: list[str]
        self.status = status  # type: long
        self.task_type = task_type  # type: str
        self.version_code = version_code  # type: str
        self.version_name = version_name  # type: str

    def validate(self):
        if self.enhance_mapping:
            for k in self.enhance_mapping:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetUserAppEnhanceProcessInMsaResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_md_5 is not None:
            result['AfterMd5'] = self.after_md_5
        if self.after_size is not None:
            result['AfterSize'] = self.after_size
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_package is not None:
            result['AppPackage'] = self.app_package
        if self.assets_file_list is not None:
            result['AssetsFileList'] = self.assets_file_list
        if self.before_md_5 is not None:
            result['BeforeMd5'] = self.before_md_5
        if self.before_size is not None:
            result['BeforeSize'] = self.before_size
        if self.class_forest is not None:
            result['ClassForest'] = self.class_forest
        result['EnhanceMapping'] = []
        if self.enhance_mapping is not None:
            for k in self.enhance_mapping:
                result['EnhanceMapping'].append(k.to_map() if k else None)
        if self.enhance_rules is not None:
            result['EnhanceRules'] = self.enhance_rules
        if self.enhanced_assets_files is not None:
            result['EnhancedAssetsFiles'] = self.enhanced_assets_files
        if self.enhanced_classes is not None:
            result['EnhancedClasses'] = self.enhanced_classes
        if self.enhanced_so_files is not None:
            result['EnhancedSoFiles'] = self.enhanced_so_files
        if self.id is not None:
            result['Id'] = self.id
        if self.label is not None:
            result['Label'] = self.label
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.so_file_list is not None:
            result['SoFileList'] = self.so_file_list
        if self.status is not None:
            result['Status'] = self.status
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.version_code is not None:
            result['VersionCode'] = self.version_code
        if self.version_name is not None:
            result['VersionName'] = self.version_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AfterMd5') is not None:
            self.after_md_5 = m.get('AfterMd5')
        if m.get('AfterSize') is not None:
            self.after_size = m.get('AfterSize')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppPackage') is not None:
            self.app_package = m.get('AppPackage')
        if m.get('AssetsFileList') is not None:
            self.assets_file_list = m.get('AssetsFileList')
        if m.get('BeforeMd5') is not None:
            self.before_md_5 = m.get('BeforeMd5')
        if m.get('BeforeSize') is not None:
            self.before_size = m.get('BeforeSize')
        if m.get('ClassForest') is not None:
            self.class_forest = m.get('ClassForest')
        self.enhance_mapping = []
        if m.get('EnhanceMapping') is not None:
            for k in m.get('EnhanceMapping'):
                temp_model = GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping()
                self.enhance_mapping.append(temp_model.from_map(k))
        if m.get('EnhanceRules') is not None:
            self.enhance_rules = m.get('EnhanceRules')
        if m.get('EnhancedAssetsFiles') is not None:
            self.enhanced_assets_files = m.get('EnhancedAssetsFiles')
        if m.get('EnhancedClasses') is not None:
            self.enhanced_classes = m.get('EnhancedClasses')
        if m.get('EnhancedSoFiles') is not None:
            self.enhanced_so_files = m.get('EnhancedSoFiles')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('SoFileList') is not None:
            self.so_file_list = m.get('SoFileList')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('VersionCode') is not None:
            self.version_code = m.get('VersionCode')
        if m.get('VersionName') is not None:
            self.version_name = m.get('VersionName')
        return self


class GetUserAppEnhanceProcessInMsaResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: GetUserAppEnhanceProcessInMsaResponseBodyResultContentData
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetUserAppEnhanceProcessInMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetUserAppEnhanceProcessInMsaResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetUserAppEnhanceProcessInMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: GetUserAppEnhanceProcessInMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(GetUserAppEnhanceProcessInMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = GetUserAppEnhanceProcessInMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetUserAppEnhanceProcessInMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetUserAppEnhanceProcessInMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserAppEnhanceProcessInMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserAppEnhanceProcessInMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserAppUploadProcessInMsaRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserAppUploadProcessInMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping(TeaModel):
    def __init__(self, info=None, reason=None, type=None):
        self.info = info  # type: str
        self.reason = reason  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.info is not None:
            result['Info'] = self.info
        if self.reason is not None:
            result['Reason'] = self.reason
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Info') is not None:
            self.info = m.get('Info')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo(TeaModel):
    def __init__(self, after_md_5=None, after_size=None, app_code=None, app_package=None, assets_file_list=None,
                 before_md_5=None, before_size=None, class_forest=None, enhance_mapping=None, enhance_rules=None,
                 enhanced_assets_files=None, enhanced_classes=None, enhanced_so_files=None, id=None, label=None, progress=None,
                 so_file_list=None, status=None, task_type=None, version_code=None, version_name=None):
        self.after_md_5 = after_md_5  # type: str
        self.after_size = after_size  # type: long
        self.app_code = app_code  # type: str
        self.app_package = app_package  # type: str
        self.assets_file_list = assets_file_list  # type: list[str]
        self.before_md_5 = before_md_5  # type: str
        self.before_size = before_size  # type: long
        self.class_forest = class_forest  # type: str
        self.enhance_mapping = enhance_mapping  # type: list[GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping]
        self.enhance_rules = enhance_rules  # type: list[str]
        self.enhanced_assets_files = enhanced_assets_files  # type: list[str]
        self.enhanced_classes = enhanced_classes  # type: list[str]
        self.enhanced_so_files = enhanced_so_files  # type: list[str]
        self.id = id  # type: long
        self.label = label  # type: str
        self.progress = progress  # type: long
        self.so_file_list = so_file_list  # type: list[str]
        self.status = status  # type: long
        self.task_type = task_type  # type: str
        self.version_code = version_code  # type: str
        self.version_name = version_name  # type: str

    def validate(self):
        if self.enhance_mapping:
            for k in self.enhance_mapping:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_md_5 is not None:
            result['AfterMd5'] = self.after_md_5
        if self.after_size is not None:
            result['AfterSize'] = self.after_size
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_package is not None:
            result['AppPackage'] = self.app_package
        if self.assets_file_list is not None:
            result['AssetsFileList'] = self.assets_file_list
        if self.before_md_5 is not None:
            result['BeforeMd5'] = self.before_md_5
        if self.before_size is not None:
            result['BeforeSize'] = self.before_size
        if self.class_forest is not None:
            result['ClassForest'] = self.class_forest
        result['EnhanceMapping'] = []
        if self.enhance_mapping is not None:
            for k in self.enhance_mapping:
                result['EnhanceMapping'].append(k.to_map() if k else None)
        if self.enhance_rules is not None:
            result['EnhanceRules'] = self.enhance_rules
        if self.enhanced_assets_files is not None:
            result['EnhancedAssetsFiles'] = self.enhanced_assets_files
        if self.enhanced_classes is not None:
            result['EnhancedClasses'] = self.enhanced_classes
        if self.enhanced_so_files is not None:
            result['EnhancedSoFiles'] = self.enhanced_so_files
        if self.id is not None:
            result['Id'] = self.id
        if self.label is not None:
            result['Label'] = self.label
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.so_file_list is not None:
            result['SoFileList'] = self.so_file_list
        if self.status is not None:
            result['Status'] = self.status
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.version_code is not None:
            result['VersionCode'] = self.version_code
        if self.version_name is not None:
            result['VersionName'] = self.version_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AfterMd5') is not None:
            self.after_md_5 = m.get('AfterMd5')
        if m.get('AfterSize') is not None:
            self.after_size = m.get('AfterSize')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppPackage') is not None:
            self.app_package = m.get('AppPackage')
        if m.get('AssetsFileList') is not None:
            self.assets_file_list = m.get('AssetsFileList')
        if m.get('BeforeMd5') is not None:
            self.before_md_5 = m.get('BeforeMd5')
        if m.get('BeforeSize') is not None:
            self.before_size = m.get('BeforeSize')
        if m.get('ClassForest') is not None:
            self.class_forest = m.get('ClassForest')
        self.enhance_mapping = []
        if m.get('EnhanceMapping') is not None:
            for k in m.get('EnhanceMapping'):
                temp_model = GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping()
                self.enhance_mapping.append(temp_model.from_map(k))
        if m.get('EnhanceRules') is not None:
            self.enhance_rules = m.get('EnhanceRules')
        if m.get('EnhancedAssetsFiles') is not None:
            self.enhanced_assets_files = m.get('EnhancedAssetsFiles')
        if m.get('EnhancedClasses') is not None:
            self.enhanced_classes = m.get('EnhancedClasses')
        if m.get('EnhancedSoFiles') is not None:
            self.enhanced_so_files = m.get('EnhancedSoFiles')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('SoFileList') is not None:
            self.so_file_list = m.get('SoFileList')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('VersionCode') is not None:
            self.version_code = m.get('VersionCode')
        if m.get('VersionName') is not None:
            self.version_name = m.get('VersionName')
        return self


class GetUserAppUploadProcessInMsaResponseBodyResultContentData(TeaModel):
    def __init__(self, apk_info=None, enhance_task_id=None, id=None, progress=None, status=None):
        self.apk_info = apk_info  # type: GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo
        self.enhance_task_id = enhance_task_id  # type: long
        self.id = id  # type: long
        self.progress = progress  # type: long
        self.status = status  # type: long

    def validate(self):
        if self.apk_info:
            self.apk_info.validate()

    def to_map(self):
        _map = super(GetUserAppUploadProcessInMsaResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apk_info is not None:
            result['ApkInfo'] = self.apk_info.to_map()
        if self.enhance_task_id is not None:
            result['EnhanceTaskId'] = self.enhance_task_id
        if self.id is not None:
            result['Id'] = self.id
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApkInfo') is not None:
            temp_model = GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo()
            self.apk_info = temp_model.from_map(m['ApkInfo'])
        if m.get('EnhanceTaskId') is not None:
            self.enhance_task_id = m.get('EnhanceTaskId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetUserAppUploadProcessInMsaResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: GetUserAppUploadProcessInMsaResponseBodyResultContentData
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetUserAppUploadProcessInMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetUserAppUploadProcessInMsaResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetUserAppUploadProcessInMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: GetUserAppUploadProcessInMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(GetUserAppUploadProcessInMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = GetUserAppUploadProcessInMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class GetUserAppUploadProcessInMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetUserAppUploadProcessInMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserAppUploadProcessInMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserAppUploadProcessInMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig(TeaModel):
    def __init__(self, cert_rsa=None, package_name=None):
        self.cert_rsa = cert_rsa  # type: str
        self.package_name = package_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_rsa is not None:
            result['CertRSA'] = self.cert_rsa
        if self.package_name is not None:
            result['PackageName'] = self.package_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CertRSA') is not None:
            self.cert_rsa = m.get('CertRSA')
        if m.get('PackageName') is not None:
            self.package_name = m.get('PackageName')
        return self


class ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig(TeaModel):
    def __init__(self, bundle_id=None):
        self.bundle_id = bundle_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bundle_id is not None:
            result['BundleId'] = self.bundle_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BundleId') is not None:
            self.bundle_id = m.get('BundleId')
        return self


class ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList(TeaModel):
    def __init__(self, android_config=None, app_desc=None, app_icon=None, app_id=None, app_name=None,
                 app_secret=None, creator=None, gmt_create=None, gmt_modified=None, id=None, ios_config=None, modifier=None,
                 monitor_json=None, status=None, tenant_id=None, type=None):
        self.android_config = android_config  # type: ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig
        self.app_desc = app_desc  # type: str
        self.app_icon = app_icon  # type: str
        self.app_id = app_id  # type: str
        self.app_name = app_name  # type: str
        self.app_secret = app_secret  # type: str
        self.creator = creator  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.ios_config = ios_config  # type: ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig
        self.modifier = modifier  # type: str
        self.monitor_json = monitor_json  # type: str
        self.status = status  # type: long
        self.tenant_id = tenant_id  # type: str
        self.type = type  # type: long

    def validate(self):
        if self.android_config:
            self.android_config.validate()
        if self.ios_config:
            self.ios_config.validate()

    def to_map(self):
        _map = super(ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.android_config is not None:
            result['AndroidConfig'] = self.android_config.to_map()
        if self.app_desc is not None:
            result['AppDesc'] = self.app_desc
        if self.app_icon is not None:
            result['AppIcon'] = self.app_icon
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.app_secret is not None:
            result['AppSecret'] = self.app_secret
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.ios_config is not None:
            result['IosConfig'] = self.ios_config.to_map()
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.monitor_json is not None:
            result['MonitorJson'] = self.monitor_json
        if self.status is not None:
            result['Status'] = self.status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AndroidConfig') is not None:
            temp_model = ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig()
            self.android_config = temp_model.from_map(m['AndroidConfig'])
        if m.get('AppDesc') is not None:
            self.app_desc = m.get('AppDesc')
        if m.get('AppIcon') is not None:
            self.app_icon = m.get('AppIcon')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('AppSecret') is not None:
            self.app_secret = m.get('AppSecret')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IosConfig') is not None:
            temp_model = ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig()
            self.ios_config = temp_model.from_map(m['IosConfig'])
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('MonitorJson') is not None:
            self.monitor_json = m.get('MonitorJson')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListMappCenterAppsResponseBodyListMappCenterAppResult(TeaModel):
    def __init__(self, mapp_center_app_list=None, result_msg=None, success=None):
        self.mapp_center_app_list = mapp_center_app_list  # type: list[ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList]
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.mapp_center_app_list:
            for k in self.mapp_center_app_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMappCenterAppsResponseBodyListMappCenterAppResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['MappCenterAppList'] = []
        if self.mapp_center_app_list is not None:
            for k in self.mapp_center_app_list:
                result['MappCenterAppList'].append(k.to_map() if k else None)
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.mapp_center_app_list = []
        if m.get('MappCenterAppList') is not None:
            for k in m.get('MappCenterAppList'):
                temp_model = ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList()
                self.mapp_center_app_list.append(temp_model.from_map(k))
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListMappCenterAppsResponseBody(TeaModel):
    def __init__(self, list_mapp_center_app_result=None, request_id=None, result_code=None, result_message=None):
        self.list_mapp_center_app_result = list_mapp_center_app_result  # type: ListMappCenterAppsResponseBodyListMappCenterAppResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mapp_center_app_result:
            self.list_mapp_center_app_result.validate()

    def to_map(self):
        _map = super(ListMappCenterAppsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mapp_center_app_result is not None:
            result['ListMappCenterAppResult'] = self.list_mapp_center_app_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMappCenterAppResult') is not None:
            temp_model = ListMappCenterAppsResponseBodyListMappCenterAppResult()
            self.list_mapp_center_app_result = temp_model.from_map(m['ListMappCenterAppResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMappCenterAppsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMappCenterAppsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMappCenterAppsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMappCenterAppsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList(TeaModel):
    def __init__(self, compatible_id=None, create_time=None, display_name=None, id=None, region=None, status=None,
                 tenant_id=None, type=None, uid=None, update_time=None, workspace_id=None, zones=None):
        self.compatible_id = compatible_id  # type: str
        self.create_time = create_time  # type: str
        self.display_name = display_name  # type: str
        self.id = id  # type: str
        self.region = region  # type: str
        self.status = status  # type: str
        self.tenant_id = tenant_id  # type: str
        self.type = type  # type: str
        self.uid = uid  # type: long
        self.update_time = update_time  # type: str
        self.workspace_id = workspace_id  # type: str
        self.zones = zones  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.compatible_id is not None:
            result['CompatibleId'] = self.compatible_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.id is not None:
            result['Id'] = self.id
        if self.region is not None:
            result['Region'] = self.region
        if self.status is not None:
            result['Status'] = self.status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.type is not None:
            result['Type'] = self.type
        if self.uid is not None:
            result['Uid'] = self.uid
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        if self.zones is not None:
            result['Zones'] = self.zones
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CompatibleId') is not None:
            self.compatible_id = m.get('CompatibleId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        if m.get('Zones') is not None:
            self.zones = m.get('Zones')
        return self


class ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult(TeaModel):
    def __init__(self, mapp_center_workspace_list=None, result_msg=None, success=None, user_id=None):
        self.mapp_center_workspace_list = mapp_center_workspace_list  # type: list[ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList]
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.user_id = user_id  # type: str

    def validate(self):
        if self.mapp_center_workspace_list:
            for k in self.mapp_center_workspace_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['MappCenterWorkspaceList'] = []
        if self.mapp_center_workspace_list is not None:
            for k in self.mapp_center_workspace_list:
                result['MappCenterWorkspaceList'].append(k.to_map() if k else None)
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.mapp_center_workspace_list = []
        if m.get('MappCenterWorkspaceList') is not None:
            for k in m.get('MappCenterWorkspaceList'):
                temp_model = ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList()
                self.mapp_center_workspace_list.append(temp_model.from_map(k))
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListMappCenterWorkspacesResponseBody(TeaModel):
    def __init__(self, list_mapp_center_workspace_result=None, request_id=None, result_code=None,
                 result_message=None):
        self.list_mapp_center_workspace_result = list_mapp_center_workspace_result  # type: ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mapp_center_workspace_result:
            self.list_mapp_center_workspace_result.validate()

    def to_map(self):
        _map = super(ListMappCenterWorkspacesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mapp_center_workspace_result is not None:
            result['ListMappCenterWorkspaceResult'] = self.list_mapp_center_workspace_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMappCenterWorkspaceResult') is not None:
            temp_model = ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult()
            self.list_mapp_center_workspace_result = temp_model.from_map(m['ListMappCenterWorkspaceResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMappCenterWorkspacesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMappCenterWorkspacesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMappCenterWorkspacesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMappCenterWorkspacesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcdpAimRequest(TeaModel):
    def __init__(self, app_id=None, empty_tag=None, keyword=None, name=None, page_no=None, page_size=None, sort=None,
                 sort_field=None, tenant_id=None, type=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.empty_tag = empty_tag  # type: str
        self.keyword = keyword  # type: str
        self.name = name  # type: str
        self.page_no = page_no  # type: long
        self.page_size = page_size  # type: long
        self.sort = sort  # type: str
        self.sort_field = sort_field  # type: str
        self.tenant_id = tenant_id  # type: str
        self.type = type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcdpAimRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.empty_tag is not None:
            result['EmptyTag'] = self.empty_tag
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.name is not None:
            result['Name'] = self.name
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.sort_field is not None:
            result['SortField'] = self.sort_field
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.type is not None:
            result['Type'] = self.type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('EmptyTag') is not None:
            self.empty_tag = m.get('EmptyTag')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('SortField') is not None:
            self.sort_field = m.get('SortField')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcdpAimResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcdpAimResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListMcdpAimResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: ListMcdpAimResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(ListMcdpAimResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = ListMcdpAimResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcdpAimResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcdpAimResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcdpAimResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcdpAimResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeMiniAppsRequest(TeaModel):
    def __init__(self, app_id=None, keyword=None, page_num=None, page_size=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.keyword = keyword  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeMiniAppsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList(TeaModel):
    def __init__(self, app_code=None, gmt_create=None, gmt_modified=None, h_5id=None, h_5name=None):
        self.app_code = app_code  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        return self


class ListMcubeMiniAppsResponseBodyListMiniResult(TeaModel):
    def __init__(self, current_page=None, has_more=None, mini_program_list=None, page_size=None, result_msg=None,
                 success=None, total_count=None):
        self.current_page = current_page  # type: int
        self.has_more = has_more  # type: bool
        self.mini_program_list = mini_program_list  # type: list[ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList]
        self.page_size = page_size  # type: int
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: long

    def validate(self):
        if self.mini_program_list:
            for k in self.mini_program_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeMiniAppsResponseBodyListMiniResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.has_more is not None:
            result['HasMore'] = self.has_more
        result['MiniProgramList'] = []
        if self.mini_program_list is not None:
            for k in self.mini_program_list:
                result['MiniProgramList'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('HasMore') is not None:
            self.has_more = m.get('HasMore')
        self.mini_program_list = []
        if m.get('MiniProgramList') is not None:
            for k in m.get('MiniProgramList'):
                temp_model = ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList()
                self.mini_program_list.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListMcubeMiniAppsResponseBody(TeaModel):
    def __init__(self, list_mini_result=None, request_id=None, result_code=None, result_message=None):
        self.list_mini_result = list_mini_result  # type: ListMcubeMiniAppsResponseBodyListMiniResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mini_result:
            self.list_mini_result.validate()

    def to_map(self):
        _map = super(ListMcubeMiniAppsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mini_result is not None:
            result['ListMiniResult'] = self.list_mini_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMiniResult') is not None:
            temp_model = ListMcubeMiniAppsResponseBodyListMiniResult()
            self.list_mini_result = temp_model.from_map(m['ListMiniResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeMiniAppsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeMiniAppsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeMiniAppsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeMiniAppsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeMiniPackagesRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, package_types=None, page_num=None, page_size=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.package_types = package_types  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeMiniPackagesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.package_types is not None:
            result['PackageTypes'] = self.package_types
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('PackageTypes') is not None:
            self.package_types = m.get('PackageTypes')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList(TeaModel):
    def __init__(self, app_code=None, auto_install=None, client_version_max=None, client_version_min=None,
                 download_url=None, extend_info=None, extra_data=None, fallback_base_url=None, gmt_create=None,
                 gmt_modified=None, h_5id=None, h_5name=None, h_5version=None, id=None, install_type=None, main_url=None,
                 memo=None, package_type=None, platform=None, publish_period=None, resource_type=None, status=None):
        self.app_code = app_code  # type: str
        self.auto_install = auto_install  # type: long
        self.client_version_max = client_version_max  # type: str
        self.client_version_min = client_version_min  # type: str
        self.download_url = download_url  # type: str
        self.extend_info = extend_info  # type: str
        self.extra_data = extra_data  # type: str
        self.fallback_base_url = fallback_base_url  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.h_5version = h_5version  # type: str
        self.id = id  # type: long
        self.install_type = install_type  # type: long
        self.main_url = main_url  # type: str
        self.memo = memo  # type: str
        self.package_type = package_type  # type: long
        self.platform = platform  # type: str
        self.publish_period = publish_period  # type: long
        self.resource_type = resource_type  # type: long
        self.status = status  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.auto_install is not None:
            result['AutoInstall'] = self.auto_install
        if self.client_version_max is not None:
            result['ClientVersionMax'] = self.client_version_max
        if self.client_version_min is not None:
            result['ClientVersionMin'] = self.client_version_min
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info
        if self.extra_data is not None:
            result['ExtraData'] = self.extra_data
        if self.fallback_base_url is not None:
            result['FallbackBaseUrl'] = self.fallback_base_url
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.h_5version is not None:
            result['H5Version'] = self.h_5version
        if self.id is not None:
            result['Id'] = self.id
        if self.install_type is not None:
            result['InstallType'] = self.install_type
        if self.main_url is not None:
            result['MainUrl'] = self.main_url
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.publish_period is not None:
            result['PublishPeriod'] = self.publish_period
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AutoInstall') is not None:
            self.auto_install = m.get('AutoInstall')
        if m.get('ClientVersionMax') is not None:
            self.client_version_max = m.get('ClientVersionMax')
        if m.get('ClientVersionMin') is not None:
            self.client_version_min = m.get('ClientVersionMin')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('ExtendInfo') is not None:
            self.extend_info = m.get('ExtendInfo')
        if m.get('ExtraData') is not None:
            self.extra_data = m.get('ExtraData')
        if m.get('FallbackBaseUrl') is not None:
            self.fallback_base_url = m.get('FallbackBaseUrl')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('H5Version') is not None:
            self.h_5version = m.get('H5Version')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstallType') is not None:
            self.install_type = m.get('InstallType')
        if m.get('MainUrl') is not None:
            self.main_url = m.get('MainUrl')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('PublishPeriod') is not None:
            self.publish_period = m.get('PublishPeriod')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListMcubeMiniPackagesResponseBodyListMiniPackageResult(TeaModel):
    def __init__(self, current_page=None, has_more=None, mini_package_list=None, page_size=None, result_msg=None,
                 success=None, total_count=None):
        self.current_page = current_page  # type: int
        self.has_more = has_more  # type: bool
        self.mini_package_list = mini_package_list  # type: list[ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList]
        self.page_size = page_size  # type: int
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: long

    def validate(self):
        if self.mini_package_list:
            for k in self.mini_package_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeMiniPackagesResponseBodyListMiniPackageResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.has_more is not None:
            result['HasMore'] = self.has_more
        result['MiniPackageList'] = []
        if self.mini_package_list is not None:
            for k in self.mini_package_list:
                result['MiniPackageList'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('HasMore') is not None:
            self.has_more = m.get('HasMore')
        self.mini_package_list = []
        if m.get('MiniPackageList') is not None:
            for k in m.get('MiniPackageList'):
                temp_model = ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList()
                self.mini_package_list.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListMcubeMiniPackagesResponseBody(TeaModel):
    def __init__(self, list_mini_package_result=None, request_id=None, result_code=None, result_message=None):
        self.list_mini_package_result = list_mini_package_result  # type: ListMcubeMiniPackagesResponseBodyListMiniPackageResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mini_package_result:
            self.list_mini_package_result.validate()

    def to_map(self):
        _map = super(ListMcubeMiniPackagesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mini_package_result is not None:
            result['ListMiniPackageResult'] = self.list_mini_package_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMiniPackageResult') is not None:
            temp_model = ListMcubeMiniPackagesResponseBodyListMiniPackageResult()
            self.list_mini_package_result = temp_model.from_map(m['ListMiniPackageResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeMiniPackagesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeMiniPackagesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeMiniPackagesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeMiniPackagesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeMiniTasksRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeMiniTasksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList(TeaModel):
    def __init__(self, app_code=None, gmt_create=None, gmt_modified=None, grey_config_info=None, grey_endtime=None,
                 grey_endtime_data=None, grey_num=None, id=None, memo=None, package_id=None, platform=None, product_version=None,
                 publish_mode=None, publish_type=None, status=None, task_status=None, whitelist_ids=None):
        self.app_code = app_code  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime = grey_endtime  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_num = grey_num  # type: long
        self.id = id  # type: long
        self.memo = memo  # type: str
        self.package_id = package_id  # type: long
        self.platform = platform  # type: str
        self.product_version = product_version  # type: str
        self.publish_mode = publish_mode  # type: long
        self.publish_type = publish_type  # type: long
        self.status = status  # type: str
        self.task_status = task_status  # type: long
        self.whitelist_ids = whitelist_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime is not None:
            result['GreyEndtime'] = self.grey_endtime
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.id is not None:
            result['Id'] = self.id
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.status is not None:
            result['Status'] = self.status
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtime') is not None:
            self.grey_endtime = m.get('GreyEndtime')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        return self


class ListMcubeMiniTasksResponseBodyListMiniTaskResult(TeaModel):
    def __init__(self, mini_task_list=None, result_msg=None, success=None):
        self.mini_task_list = mini_task_list  # type: list[ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList]
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.mini_task_list:
            for k in self.mini_task_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeMiniTasksResponseBodyListMiniTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['MiniTaskList'] = []
        if self.mini_task_list is not None:
            for k in self.mini_task_list:
                result['MiniTaskList'].append(k.to_map() if k else None)
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.mini_task_list = []
        if m.get('MiniTaskList') is not None:
            for k in m.get('MiniTaskList'):
                temp_model = ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList()
                self.mini_task_list.append(temp_model.from_map(k))
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListMcubeMiniTasksResponseBody(TeaModel):
    def __init__(self, list_mini_task_result=None, request_id=None, result_code=None, result_message=None):
        self.list_mini_task_result = list_mini_task_result  # type: ListMcubeMiniTasksResponseBodyListMiniTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mini_task_result:
            self.list_mini_task_result.validate()

    def to_map(self):
        _map = super(ListMcubeMiniTasksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mini_task_result is not None:
            result['ListMiniTaskResult'] = self.list_mini_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMiniTaskResult') is not None:
            temp_model = ListMcubeMiniTasksResponseBodyListMiniTaskResult()
            self.list_mini_task_result = temp_model.from_map(m['ListMiniTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeMiniTasksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeMiniTasksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeMiniTasksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeMiniTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeNebulaAppsRequest(TeaModel):
    def __init__(self, app_id=None, keyword=None, page_num=None, page_size=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.keyword = keyword  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeNebulaAppsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos(TeaModel):
    def __init__(self, h_5id=None, h_5name=None):
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        return self


class ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult(TeaModel):
    def __init__(self, current_page=None, error_code=None, has_more=None, nebula_app_infos=None, page_size=None,
                 request_id=None, result_msg=None, success=None, total_count=None):
        self.current_page = current_page  # type: int
        self.error_code = error_code  # type: str
        self.has_more = has_more  # type: bool
        self.nebula_app_infos = nebula_app_infos  # type: list[ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos]
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: long

    def validate(self):
        if self.nebula_app_infos:
            for k in self.nebula_app_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.has_more is not None:
            result['HasMore'] = self.has_more
        result['NebulaAppInfos'] = []
        if self.nebula_app_infos is not None:
            for k in self.nebula_app_infos:
                result['NebulaAppInfos'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('HasMore') is not None:
            self.has_more = m.get('HasMore')
        self.nebula_app_infos = []
        if m.get('NebulaAppInfos') is not None:
            for k in m.get('NebulaAppInfos'):
                temp_model = ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos()
                self.nebula_app_infos.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListMcubeNebulaAppsResponseBody(TeaModel):
    def __init__(self, list_mcube_nebula_apps_result=None, request_id=None, result_code=None, result_message=None):
        self.list_mcube_nebula_apps_result = list_mcube_nebula_apps_result  # type: ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mcube_nebula_apps_result:
            self.list_mcube_nebula_apps_result.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaAppsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mcube_nebula_apps_result is not None:
            result['ListMcubeNebulaAppsResult'] = self.list_mcube_nebula_apps_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMcubeNebulaAppsResult') is not None:
            temp_model = ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult()
            self.list_mcube_nebula_apps_result = temp_model.from_map(m['ListMcubeNebulaAppsResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeNebulaAppsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeNebulaAppsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaAppsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeNebulaAppsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeNebulaResourcesRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, page_num=None, page_size=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeNebulaResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo(TeaModel):
    def __init__(self, app_code=None, auto_install=None, client_version_max=None, client_version_min=None,
                 creator=None, debug_url=None, download_url=None, extend_info=None, extra_data=None, fallback_base_url=None,
                 file_size=None, gmt_create=None, gmt_modified=None, h_5id=None, h_5name=None, h_5version=None, id=None,
                 install_type=None, lazy_load=None, main_url=None, md_5=None, memo=None, meta_id=None, modifier=None,
                 package_type=None, platform=None, publish_period=None, release_version=None, resource_type=None, status=None,
                 vhost=None):
        self.app_code = app_code  # type: str
        self.auto_install = auto_install  # type: int
        self.client_version_max = client_version_max  # type: str
        self.client_version_min = client_version_min  # type: str
        self.creator = creator  # type: str
        self.debug_url = debug_url  # type: str
        self.download_url = download_url  # type: str
        self.extend_info = extend_info  # type: str
        self.extra_data = extra_data  # type: str
        self.fallback_base_url = fallback_base_url  # type: str
        self.file_size = file_size  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.h_5version = h_5version  # type: str
        self.id = id  # type: long
        self.install_type = install_type  # type: int
        self.lazy_load = lazy_load  # type: int
        self.main_url = main_url  # type: str
        self.md_5 = md_5  # type: str
        self.memo = memo  # type: str
        self.meta_id = meta_id  # type: long
        self.modifier = modifier  # type: str
        self.package_type = package_type  # type: int
        self.platform = platform  # type: str
        self.publish_period = publish_period  # type: int
        self.release_version = release_version  # type: str
        self.resource_type = resource_type  # type: str
        self.status = status  # type: int
        self.vhost = vhost  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.auto_install is not None:
            result['AutoInstall'] = self.auto_install
        if self.client_version_max is not None:
            result['ClientVersionMax'] = self.client_version_max
        if self.client_version_min is not None:
            result['ClientVersionMin'] = self.client_version_min
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.debug_url is not None:
            result['DebugUrl'] = self.debug_url
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info
        if self.extra_data is not None:
            result['ExtraData'] = self.extra_data
        if self.fallback_base_url is not None:
            result['FallbackBaseUrl'] = self.fallback_base_url
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.h_5version is not None:
            result['H5Version'] = self.h_5version
        if self.id is not None:
            result['Id'] = self.id
        if self.install_type is not None:
            result['InstallType'] = self.install_type
        if self.lazy_load is not None:
            result['LazyLoad'] = self.lazy_load
        if self.main_url is not None:
            result['MainUrl'] = self.main_url
        if self.md_5 is not None:
            result['Md5'] = self.md_5
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.meta_id is not None:
            result['MetaId'] = self.meta_id
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.publish_period is not None:
            result['PublishPeriod'] = self.publish_period
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.status is not None:
            result['Status'] = self.status
        if self.vhost is not None:
            result['Vhost'] = self.vhost
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AutoInstall') is not None:
            self.auto_install = m.get('AutoInstall')
        if m.get('ClientVersionMax') is not None:
            self.client_version_max = m.get('ClientVersionMax')
        if m.get('ClientVersionMin') is not None:
            self.client_version_min = m.get('ClientVersionMin')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DebugUrl') is not None:
            self.debug_url = m.get('DebugUrl')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('ExtendInfo') is not None:
            self.extend_info = m.get('ExtendInfo')
        if m.get('ExtraData') is not None:
            self.extra_data = m.get('ExtraData')
        if m.get('FallbackBaseUrl') is not None:
            self.fallback_base_url = m.get('FallbackBaseUrl')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('H5Version') is not None:
            self.h_5version = m.get('H5Version')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstallType') is not None:
            self.install_type = m.get('InstallType')
        if m.get('LazyLoad') is not None:
            self.lazy_load = m.get('LazyLoad')
        if m.get('MainUrl') is not None:
            self.main_url = m.get('MainUrl')
        if m.get('Md5') is not None:
            self.md_5 = m.get('Md5')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('MetaId') is not None:
            self.meta_id = m.get('MetaId')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('PublishPeriod') is not None:
            self.publish_period = m.get('PublishPeriod')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Vhost') is not None:
            self.vhost = m.get('Vhost')
        return self


class ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult(TeaModel):
    def __init__(self, current_page=None, error_code=None, has_more=None, nebula_resource_info=None, page_size=None,
                 request_id=None, result_msg=None, success=None, total_count=None):
        self.current_page = current_page  # type: int
        self.error_code = error_code  # type: str
        self.has_more = has_more  # type: bool
        self.nebula_resource_info = nebula_resource_info  # type: list[ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo]
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: long

    def validate(self):
        if self.nebula_resource_info:
            for k in self.nebula_resource_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.has_more is not None:
            result['HasMore'] = self.has_more
        result['NebulaResourceInfo'] = []
        if self.nebula_resource_info is not None:
            for k in self.nebula_resource_info:
                result['NebulaResourceInfo'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('HasMore') is not None:
            self.has_more = m.get('HasMore')
        self.nebula_resource_info = []
        if m.get('NebulaResourceInfo') is not None:
            for k in m.get('NebulaResourceInfo'):
                temp_model = ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo()
                self.nebula_resource_info.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListMcubeNebulaResourcesResponseBody(TeaModel):
    def __init__(self, list_mcube_nebula_resource_result=None, request_id=None, result_code=None,
                 result_message=None):
        self.list_mcube_nebula_resource_result = list_mcube_nebula_resource_result  # type: ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mcube_nebula_resource_result:
            self.list_mcube_nebula_resource_result.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mcube_nebula_resource_result is not None:
            result['ListMcubeNebulaResourceResult'] = self.list_mcube_nebula_resource_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMcubeNebulaResourceResult') is not None:
            temp_model = ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult()
            self.list_mcube_nebula_resource_result = temp_model.from_map(m['ListMcubeNebulaResourceResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeNebulaResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeNebulaResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeNebulaResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeNebulaTasksRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeNebulaTasksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo(TeaModel):
    def __init__(self, app_code=None, biz_type=None, creator=None, gmt_create=None, gmt_modified=None,
                 gmt_modified_str=None, grey_config_info=None, grey_endtime=None, grey_endtime_data=None, grey_endtime_str=None,
                 grey_num=None, grey_url=None, id=None, memo=None, modifier=None, package_id=None, percent=None, platform=None,
                 product_id=None, product_version=None, publish_mode=None, publish_type=None, release_version=None,
                 status=None, sync_result=None, task_name=None, task_status=None, task_type=None, task_version=None,
                 upgrade_notice_num=None, upgrade_progress=None, whitelist_ids=None):
        self.app_code = app_code  # type: str
        self.biz_type = biz_type  # type: str
        self.creator = creator  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.gmt_modified_str = gmt_modified_str  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime = grey_endtime  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_endtime_str = grey_endtime_str  # type: str
        self.grey_num = grey_num  # type: int
        self.grey_url = grey_url  # type: str
        self.id = id  # type: long
        self.memo = memo  # type: str
        self.modifier = modifier  # type: str
        self.package_id = package_id  # type: long
        self.percent = percent  # type: int
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.product_version = product_version  # type: str
        self.publish_mode = publish_mode  # type: int
        self.publish_type = publish_type  # type: int
        self.release_version = release_version  # type: str
        self.status = status  # type: int
        self.sync_result = sync_result  # type: str
        self.task_name = task_name  # type: str
        self.task_status = task_status  # type: int
        self.task_type = task_type  # type: int
        self.task_version = task_version  # type: long
        self.upgrade_notice_num = upgrade_notice_num  # type: long
        self.upgrade_progress = upgrade_progress  # type: str
        self.whitelist_ids = whitelist_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_modified_str is not None:
            result['GmtModifiedStr'] = self.gmt_modified_str
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime is not None:
            result['GreyEndtime'] = self.grey_endtime
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_endtime_str is not None:
            result['GreyEndtimeStr'] = self.grey_endtime_str
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.grey_url is not None:
            result['GreyUrl'] = self.grey_url
        if self.id is not None:
            result['Id'] = self.id
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.status is not None:
            result['Status'] = self.status
        if self.sync_result is not None:
            result['SyncResult'] = self.sync_result
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.task_version is not None:
            result['TaskVersion'] = self.task_version
        if self.upgrade_notice_num is not None:
            result['UpgradeNoticeNum'] = self.upgrade_notice_num
        if self.upgrade_progress is not None:
            result['UpgradeProgress'] = self.upgrade_progress
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtModifiedStr') is not None:
            self.gmt_modified_str = m.get('GmtModifiedStr')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtime') is not None:
            self.grey_endtime = m.get('GreyEndtime')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyEndtimeStr') is not None:
            self.grey_endtime_str = m.get('GreyEndtimeStr')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('GreyUrl') is not None:
            self.grey_url = m.get('GreyUrl')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SyncResult') is not None:
            self.sync_result = m.get('SyncResult')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('TaskVersion') is not None:
            self.task_version = m.get('TaskVersion')
        if m.get('UpgradeNoticeNum') is not None:
            self.upgrade_notice_num = m.get('UpgradeNoticeNum')
        if m.get('UpgradeProgress') is not None:
            self.upgrade_progress = m.get('UpgradeProgress')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        return self


class ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult(TeaModel):
    def __init__(self, error_code=None, nebula_task_info=None, request_id=None, result_msg=None, success=None):
        self.error_code = error_code  # type: str
        self.nebula_task_info = nebula_task_info  # type: list[ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo]
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.nebula_task_info:
            for k in self.nebula_task_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        result['NebulaTaskInfo'] = []
        if self.nebula_task_info is not None:
            for k in self.nebula_task_info:
                result['NebulaTaskInfo'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        self.nebula_task_info = []
        if m.get('NebulaTaskInfo') is not None:
            for k in m.get('NebulaTaskInfo'):
                temp_model = ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo()
                self.nebula_task_info.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListMcubeNebulaTasksResponseBody(TeaModel):
    def __init__(self, list_mcube_nebula_task_result=None, request_id=None, result_code=None, result_message=None):
        self.list_mcube_nebula_task_result = list_mcube_nebula_task_result  # type: ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_mcube_nebula_task_result:
            self.list_mcube_nebula_task_result.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaTasksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_mcube_nebula_task_result is not None:
            result['ListMcubeNebulaTaskResult'] = self.list_mcube_nebula_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListMcubeNebulaTaskResult') is not None:
            temp_model = ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult()
            self.list_mcube_nebula_task_result = temp_model.from_map(m['ListMcubeNebulaTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeNebulaTasksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeNebulaTasksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeNebulaTasksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeNebulaTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeUpgradePackagesRequest(TeaModel):
    def __init__(self, app_id=None, page_num=None, page_size=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeUpgradePackagesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages(TeaModel):
    def __init__(self, allow_create_task=None, app_code=None, appstore_url=None, back_log=None, change_log=None,
                 client_file_size=None, client_name=None, cp_id=None, creator=None, download_url=None, global_variables=None,
                 gmt_create=None, gmt_create_str=None, gmt_modified=None, gmt_modified_str=None, id=None, inner_version=None,
                 ios_symbol=None, is_enterprise=None, is_rc=None, is_release=None, max_version=None, md_5=None, modifier=None,
                 need_check=None, oss_path=None, package_type=None, platform=None, product_id=None, product_name=None,
                 product_version=None, publish_period=None, qrcode_url=None, release_type=None, release_window=None,
                 scm_download_url=None, server_version=None, verification_code=None, verify_result=None, version_code=None):
        self.allow_create_task = allow_create_task  # type: bool
        self.app_code = app_code  # type: str
        self.appstore_url = appstore_url  # type: str
        self.back_log = back_log  # type: str
        self.change_log = change_log  # type: str
        self.client_file_size = client_file_size  # type: int
        self.client_name = client_name  # type: str
        self.cp_id = cp_id  # type: str
        self.creator = creator  # type: str
        self.download_url = download_url  # type: str
        self.global_variables = global_variables  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_create_str = gmt_create_str  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.gmt_modified_str = gmt_modified_str  # type: str
        self.id = id  # type: long
        self.inner_version = inner_version  # type: str
        self.ios_symbol = ios_symbol  # type: str
        self.is_enterprise = is_enterprise  # type: int
        self.is_rc = is_rc  # type: int
        self.is_release = is_release  # type: int
        self.max_version = max_version  # type: str
        self.md_5 = md_5  # type: str
        self.modifier = modifier  # type: str
        self.need_check = need_check  # type: int
        self.oss_path = oss_path  # type: str
        self.package_type = package_type  # type: str
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.product_name = product_name  # type: str
        self.product_version = product_version  # type: str
        self.publish_period = publish_period  # type: int
        self.qrcode_url = qrcode_url  # type: str
        self.release_type = release_type  # type: str
        self.release_window = release_window  # type: str
        self.scm_download_url = scm_download_url  # type: str
        self.server_version = server_version  # type: int
        self.verification_code = verification_code  # type: str
        self.verify_result = verify_result  # type: int
        self.version_code = version_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_create_task is not None:
            result['AllowCreateTask'] = self.allow_create_task
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.appstore_url is not None:
            result['AppstoreUrl'] = self.appstore_url
        if self.back_log is not None:
            result['BackLog'] = self.back_log
        if self.change_log is not None:
            result['ChangeLog'] = self.change_log
        if self.client_file_size is not None:
            result['ClientFileSize'] = self.client_file_size
        if self.client_name is not None:
            result['ClientName'] = self.client_name
        if self.cp_id is not None:
            result['CpId'] = self.cp_id
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.global_variables is not None:
            result['GlobalVariables'] = self.global_variables
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_modified_str is not None:
            result['GmtModifiedStr'] = self.gmt_modified_str
        if self.id is not None:
            result['Id'] = self.id
        if self.inner_version is not None:
            result['InnerVersion'] = self.inner_version
        if self.ios_symbol is not None:
            result['IosSymbol'] = self.ios_symbol
        if self.is_enterprise is not None:
            result['IsEnterprise'] = self.is_enterprise
        if self.is_rc is not None:
            result['IsRc'] = self.is_rc
        if self.is_release is not None:
            result['IsRelease'] = self.is_release
        if self.max_version is not None:
            result['MaxVersion'] = self.max_version
        if self.md_5 is not None:
            result['Md5'] = self.md_5
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.need_check is not None:
            result['NeedCheck'] = self.need_check
        if self.oss_path is not None:
            result['OssPath'] = self.oss_path
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_period is not None:
            result['PublishPeriod'] = self.publish_period
        if self.qrcode_url is not None:
            result['QrcodeUrl'] = self.qrcode_url
        if self.release_type is not None:
            result['ReleaseType'] = self.release_type
        if self.release_window is not None:
            result['ReleaseWindow'] = self.release_window
        if self.scm_download_url is not None:
            result['ScmDownloadUrl'] = self.scm_download_url
        if self.server_version is not None:
            result['ServerVersion'] = self.server_version
        if self.verification_code is not None:
            result['VerificationCode'] = self.verification_code
        if self.verify_result is not None:
            result['VerifyResult'] = self.verify_result
        if self.version_code is not None:
            result['VersionCode'] = self.version_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowCreateTask') is not None:
            self.allow_create_task = m.get('AllowCreateTask')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppstoreUrl') is not None:
            self.appstore_url = m.get('AppstoreUrl')
        if m.get('BackLog') is not None:
            self.back_log = m.get('BackLog')
        if m.get('ChangeLog') is not None:
            self.change_log = m.get('ChangeLog')
        if m.get('ClientFileSize') is not None:
            self.client_file_size = m.get('ClientFileSize')
        if m.get('ClientName') is not None:
            self.client_name = m.get('ClientName')
        if m.get('CpId') is not None:
            self.cp_id = m.get('CpId')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('GlobalVariables') is not None:
            self.global_variables = m.get('GlobalVariables')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtModifiedStr') is not None:
            self.gmt_modified_str = m.get('GmtModifiedStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InnerVersion') is not None:
            self.inner_version = m.get('InnerVersion')
        if m.get('IosSymbol') is not None:
            self.ios_symbol = m.get('IosSymbol')
        if m.get('IsEnterprise') is not None:
            self.is_enterprise = m.get('IsEnterprise')
        if m.get('IsRc') is not None:
            self.is_rc = m.get('IsRc')
        if m.get('IsRelease') is not None:
            self.is_release = m.get('IsRelease')
        if m.get('MaxVersion') is not None:
            self.max_version = m.get('MaxVersion')
        if m.get('Md5') is not None:
            self.md_5 = m.get('Md5')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('NeedCheck') is not None:
            self.need_check = m.get('NeedCheck')
        if m.get('OssPath') is not None:
            self.oss_path = m.get('OssPath')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishPeriod') is not None:
            self.publish_period = m.get('PublishPeriod')
        if m.get('QrcodeUrl') is not None:
            self.qrcode_url = m.get('QrcodeUrl')
        if m.get('ReleaseType') is not None:
            self.release_type = m.get('ReleaseType')
        if m.get('ReleaseWindow') is not None:
            self.release_window = m.get('ReleaseWindow')
        if m.get('ScmDownloadUrl') is not None:
            self.scm_download_url = m.get('ScmDownloadUrl')
        if m.get('ServerVersion') is not None:
            self.server_version = m.get('ServerVersion')
        if m.get('VerificationCode') is not None:
            self.verification_code = m.get('VerificationCode')
        if m.get('VerifyResult') is not None:
            self.verify_result = m.get('VerifyResult')
        if m.get('VersionCode') is not None:
            self.version_code = m.get('VersionCode')
        return self


class ListMcubeUpgradePackagesResponseBodyListPackagesResult(TeaModel):
    def __init__(self, current_page=None, error_code=None, has_more=None, packages=None, page_size=None,
                 request_id=None, result_msg=None, success=None, total_count=None):
        self.current_page = current_page  # type: int
        self.error_code = error_code  # type: str
        self.has_more = has_more  # type: bool
        self.packages = packages  # type: list[ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages]
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: long

    def validate(self):
        if self.packages:
            for k in self.packages:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeUpgradePackagesResponseBodyListPackagesResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.has_more is not None:
            result['HasMore'] = self.has_more
        result['Packages'] = []
        if self.packages is not None:
            for k in self.packages:
                result['Packages'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('HasMore') is not None:
            self.has_more = m.get('HasMore')
        self.packages = []
        if m.get('Packages') is not None:
            for k in m.get('Packages'):
                temp_model = ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages()
                self.packages.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListMcubeUpgradePackagesResponseBody(TeaModel):
    def __init__(self, list_packages_result=None, request_id=None, result_code=None, result_message=None):
        self.list_packages_result = list_packages_result  # type: ListMcubeUpgradePackagesResponseBodyListPackagesResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_packages_result:
            self.list_packages_result.validate()

    def to_map(self):
        _map = super(ListMcubeUpgradePackagesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_packages_result is not None:
            result['ListPackagesResult'] = self.list_packages_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListPackagesResult') is not None:
            temp_model = ListMcubeUpgradePackagesResponseBodyListPackagesResult()
            self.list_packages_result = temp_model.from_map(m['ListPackagesResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeUpgradePackagesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeUpgradePackagesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeUpgradePackagesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeUpgradePackagesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeUpgradeTasksRequest(TeaModel):
    def __init__(self, app_id=None, package_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.package_id = package_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeUpgradeTasksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo(TeaModel):
    def __init__(self, app_code=None, creator=None, device_percent=None, execution_order=None, gmt_create=None,
                 gmt_create_str=None, gmt_modified=None, gmt_modified_str=None, grey_config_info=None, grey_endtime=None,
                 grey_notice=None, grey_num=None, grey_pause_point=None, grey_pause_type=None, grey_uv=None, history_force=None,
                 huoban_notice_id=None, huoban_url=None, id=None, inner_version=None, is_enterprise=None, is_official=None,
                 is_push=None, is_release=None, max_version=None, memo=None, modifier=None, package_info_id=None,
                 platform=None, product_id=None, product_version=None, publish_mode=None, publish_type=None,
                 push_content=None, real_grey_endtime=None, real_grey_endtime_str=None, real_grey_endtype=None,
                 real_grey_num=None, real_grey_uv=None, silent_type=None, sync_result=None, task_status=None,
                 upgrade_content=None, upgrade_type=None, upgrade_valid_time=None, whitelist_ids=None):
        self.app_code = app_code  # type: str
        self.creator = creator  # type: str
        self.device_percent = device_percent  # type: int
        self.execution_order = execution_order  # type: int
        self.gmt_create = gmt_create  # type: str
        self.gmt_create_str = gmt_create_str  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.gmt_modified_str = gmt_modified_str  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime = grey_endtime  # type: str
        self.grey_notice = grey_notice  # type: int
        self.grey_num = grey_num  # type: int
        self.grey_pause_point = grey_pause_point  # type: int
        self.grey_pause_type = grey_pause_type  # type: int
        self.grey_uv = grey_uv  # type: int
        self.history_force = history_force  # type: int
        self.huoban_notice_id = huoban_notice_id  # type: str
        self.huoban_url = huoban_url  # type: str
        self.id = id  # type: long
        self.inner_version = inner_version  # type: str
        self.is_enterprise = is_enterprise  # type: int
        self.is_official = is_official  # type: int
        self.is_push = is_push  # type: int
        self.is_release = is_release  # type: int
        self.max_version = max_version  # type: str
        self.memo = memo  # type: str
        self.modifier = modifier  # type: str
        self.package_info_id = package_info_id  # type: long
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.product_version = product_version  # type: str
        self.publish_mode = publish_mode  # type: int
        self.publish_type = publish_type  # type: int
        self.push_content = push_content  # type: str
        self.real_grey_endtime = real_grey_endtime  # type: str
        self.real_grey_endtime_str = real_grey_endtime_str  # type: str
        self.real_grey_endtype = real_grey_endtype  # type: int
        self.real_grey_num = real_grey_num  # type: int
        self.real_grey_uv = real_grey_uv  # type: int
        self.silent_type = silent_type  # type: int
        self.sync_result = sync_result  # type: str
        self.task_status = task_status  # type: int
        self.upgrade_content = upgrade_content  # type: str
        self.upgrade_type = upgrade_type  # type: int
        self.upgrade_valid_time = upgrade_valid_time  # type: int
        self.whitelist_ids = whitelist_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.device_percent is not None:
            result['DevicePercent'] = self.device_percent
        if self.execution_order is not None:
            result['ExecutionOrder'] = self.execution_order
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_modified_str is not None:
            result['GmtModifiedStr'] = self.gmt_modified_str
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime is not None:
            result['GreyEndtime'] = self.grey_endtime
        if self.grey_notice is not None:
            result['GreyNotice'] = self.grey_notice
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.grey_pause_point is not None:
            result['GreyPausePoint'] = self.grey_pause_point
        if self.grey_pause_type is not None:
            result['GreyPauseType'] = self.grey_pause_type
        if self.grey_uv is not None:
            result['GreyUv'] = self.grey_uv
        if self.history_force is not None:
            result['HistoryForce'] = self.history_force
        if self.huoban_notice_id is not None:
            result['HuobanNoticeId'] = self.huoban_notice_id
        if self.huoban_url is not None:
            result['HuobanUrl'] = self.huoban_url
        if self.id is not None:
            result['Id'] = self.id
        if self.inner_version is not None:
            result['InnerVersion'] = self.inner_version
        if self.is_enterprise is not None:
            result['IsEnterprise'] = self.is_enterprise
        if self.is_official is not None:
            result['IsOfficial'] = self.is_official
        if self.is_push is not None:
            result['IsPush'] = self.is_push
        if self.is_release is not None:
            result['IsRelease'] = self.is_release
        if self.max_version is not None:
            result['MaxVersion'] = self.max_version
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.package_info_id is not None:
            result['PackageInfoId'] = self.package_info_id
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.push_content is not None:
            result['PushContent'] = self.push_content
        if self.real_grey_endtime is not None:
            result['RealGreyEndtime'] = self.real_grey_endtime
        if self.real_grey_endtime_str is not None:
            result['RealGreyEndtimeStr'] = self.real_grey_endtime_str
        if self.real_grey_endtype is not None:
            result['RealGreyEndtype'] = self.real_grey_endtype
        if self.real_grey_num is not None:
            result['RealGreyNum'] = self.real_grey_num
        if self.real_grey_uv is not None:
            result['RealGreyUv'] = self.real_grey_uv
        if self.silent_type is not None:
            result['SilentType'] = self.silent_type
        if self.sync_result is not None:
            result['SyncResult'] = self.sync_result
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.upgrade_content is not None:
            result['UpgradeContent'] = self.upgrade_content
        if self.upgrade_type is not None:
            result['UpgradeType'] = self.upgrade_type
        if self.upgrade_valid_time is not None:
            result['UpgradeValidTime'] = self.upgrade_valid_time
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DevicePercent') is not None:
            self.device_percent = m.get('DevicePercent')
        if m.get('ExecutionOrder') is not None:
            self.execution_order = m.get('ExecutionOrder')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtModifiedStr') is not None:
            self.gmt_modified_str = m.get('GmtModifiedStr')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtime') is not None:
            self.grey_endtime = m.get('GreyEndtime')
        if m.get('GreyNotice') is not None:
            self.grey_notice = m.get('GreyNotice')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('GreyPausePoint') is not None:
            self.grey_pause_point = m.get('GreyPausePoint')
        if m.get('GreyPauseType') is not None:
            self.grey_pause_type = m.get('GreyPauseType')
        if m.get('GreyUv') is not None:
            self.grey_uv = m.get('GreyUv')
        if m.get('HistoryForce') is not None:
            self.history_force = m.get('HistoryForce')
        if m.get('HuobanNoticeId') is not None:
            self.huoban_notice_id = m.get('HuobanNoticeId')
        if m.get('HuobanUrl') is not None:
            self.huoban_url = m.get('HuobanUrl')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InnerVersion') is not None:
            self.inner_version = m.get('InnerVersion')
        if m.get('IsEnterprise') is not None:
            self.is_enterprise = m.get('IsEnterprise')
        if m.get('IsOfficial') is not None:
            self.is_official = m.get('IsOfficial')
        if m.get('IsPush') is not None:
            self.is_push = m.get('IsPush')
        if m.get('IsRelease') is not None:
            self.is_release = m.get('IsRelease')
        if m.get('MaxVersion') is not None:
            self.max_version = m.get('MaxVersion')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('PackageInfoId') is not None:
            self.package_info_id = m.get('PackageInfoId')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('PushContent') is not None:
            self.push_content = m.get('PushContent')
        if m.get('RealGreyEndtime') is not None:
            self.real_grey_endtime = m.get('RealGreyEndtime')
        if m.get('RealGreyEndtimeStr') is not None:
            self.real_grey_endtime_str = m.get('RealGreyEndtimeStr')
        if m.get('RealGreyEndtype') is not None:
            self.real_grey_endtype = m.get('RealGreyEndtype')
        if m.get('RealGreyNum') is not None:
            self.real_grey_num = m.get('RealGreyNum')
        if m.get('RealGreyUv') is not None:
            self.real_grey_uv = m.get('RealGreyUv')
        if m.get('SilentType') is not None:
            self.silent_type = m.get('SilentType')
        if m.get('SyncResult') is not None:
            self.sync_result = m.get('SyncResult')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('UpgradeContent') is not None:
            self.upgrade_content = m.get('UpgradeContent')
        if m.get('UpgradeType') is not None:
            self.upgrade_type = m.get('UpgradeType')
        if m.get('UpgradeValidTime') is not None:
            self.upgrade_valid_time = m.get('UpgradeValidTime')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        return self


class ListMcubeUpgradeTasksResponseBodyListTaskResult(TeaModel):
    def __init__(self, error_code=None, request_id=None, result_msg=None, success=None, task_info=None):
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.task_info = task_info  # type: list[ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo]

    def validate(self):
        if self.task_info:
            for k in self.task_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeUpgradeTasksResponseBodyListTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        result['TaskInfo'] = []
        if self.task_info is not None:
            for k in self.task_info:
                result['TaskInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.task_info = []
        if m.get('TaskInfo') is not None:
            for k in m.get('TaskInfo'):
                temp_model = ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo()
                self.task_info.append(temp_model.from_map(k))
        return self


class ListMcubeUpgradeTasksResponseBody(TeaModel):
    def __init__(self, list_task_result=None, request_id=None, result_code=None, result_message=None):
        self.list_task_result = list_task_result  # type: ListMcubeUpgradeTasksResponseBodyListTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_task_result:
            self.list_task_result.validate()

    def to_map(self):
        _map = super(ListMcubeUpgradeTasksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_task_result is not None:
            result['ListTaskResult'] = self.list_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListTaskResult') is not None:
            temp_model = ListMcubeUpgradeTasksResponseBodyListTaskResult()
            self.list_task_result = temp_model.from_map(m['ListTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeUpgradeTasksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeUpgradeTasksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeUpgradeTasksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeUpgradeTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMcubeWhitelistsRequest(TeaModel):
    def __init__(self, app_id=None, page_num=None, page_size=None, tenant_id=None, whitelist_name=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int
        self.tenant_id = tenant_id  # type: str
        self.whitelist_name = whitelist_name  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeWhitelistsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.whitelist_name is not None:
            result['WhitelistName'] = self.whitelist_name
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WhitelistName') is not None:
            self.whitelist_name = m.get('WhitelistName')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists(TeaModel):
    def __init__(self, app_code=None, gmt_create=None, gmt_modified=None, id=None, white_list_count=None,
                 white_list_name=None, whitelist_type=None):
        self.app_code = app_code  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.white_list_count = white_list_count  # type: long
        self.white_list_name = white_list_name  # type: str
        self.whitelist_type = whitelist_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.white_list_count is not None:
            result['WhiteListCount'] = self.white_list_count
        if self.white_list_name is not None:
            result['WhiteListName'] = self.white_list_name
        if self.whitelist_type is not None:
            result['WhitelistType'] = self.whitelist_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('WhiteListCount') is not None:
            self.white_list_count = m.get('WhiteListCount')
        if m.get('WhiteListName') is not None:
            self.white_list_name = m.get('WhiteListName')
        if m.get('WhitelistType') is not None:
            self.whitelist_type = m.get('WhitelistType')
        return self


class ListMcubeWhitelistsResponseBodyListWhitelistResult(TeaModel):
    def __init__(self, current_page=None, has_more=None, page_size=None, result_msg=None, success=None,
                 total_count=None, whitelists=None):
        self.current_page = current_page  # type: int
        self.has_more = has_more  # type: bool
        self.page_size = page_size  # type: int
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: long
        self.whitelists = whitelists  # type: list[ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists]

    def validate(self):
        if self.whitelists:
            for k in self.whitelists:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMcubeWhitelistsResponseBodyListWhitelistResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.has_more is not None:
            result['HasMore'] = self.has_more
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        result['Whitelists'] = []
        if self.whitelists is not None:
            for k in self.whitelists:
                result['Whitelists'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('HasMore') is not None:
            self.has_more = m.get('HasMore')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        self.whitelists = []
        if m.get('Whitelists') is not None:
            for k in m.get('Whitelists'):
                temp_model = ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists()
                self.whitelists.append(temp_model.from_map(k))
        return self


class ListMcubeWhitelistsResponseBody(TeaModel):
    def __init__(self, list_whitelist_result=None, request_id=None, result_code=None, result_message=None):
        self.list_whitelist_result = list_whitelist_result  # type: ListMcubeWhitelistsResponseBodyListWhitelistResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.list_whitelist_result:
            self.list_whitelist_result.validate()

    def to_map(self):
        _map = super(ListMcubeWhitelistsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list_whitelist_result is not None:
            result['ListWhitelistResult'] = self.list_whitelist_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ListWhitelistResult') is not None:
            temp_model = ListMcubeWhitelistsResponseBodyListWhitelistResult()
            self.list_whitelist_result = temp_model.from_map(m['ListWhitelistResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMcubeWhitelistsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMcubeWhitelistsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMcubeWhitelistsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMcubeWhitelistsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMgsApiRequest(TeaModel):
    def __init__(self, api_status=None, api_type=None, app_id=None, format=None, host=None, need_encrypt=None,
                 need_etag=None, need_sign=None, operation_type=None, opt_fuzzy=None, page_index=None, page_size=None,
                 sys_id=None, sys_name=None, tenant_id=None, workspace_id=None):
        self.api_status = api_status  # type: str
        self.api_type = api_type  # type: str
        self.app_id = app_id  # type: str
        self.format = format  # type: str
        self.host = host  # type: str
        self.need_encrypt = need_encrypt  # type: str
        self.need_etag = need_etag  # type: str
        self.need_sign = need_sign  # type: str
        self.operation_type = operation_type  # type: str
        self.opt_fuzzy = opt_fuzzy  # type: str
        self.page_index = page_index  # type: long
        self.page_size = page_size  # type: long
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_status is not None:
            result['ApiStatus'] = self.api_status
        if self.api_type is not None:
            result['ApiType'] = self.api_type
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.format is not None:
            result['Format'] = self.format
        if self.host is not None:
            result['Host'] = self.host
        if self.need_encrypt is not None:
            result['NeedEncrypt'] = self.need_encrypt
        if self.need_etag is not None:
            result['NeedEtag'] = self.need_etag
        if self.need_sign is not None:
            result['NeedSign'] = self.need_sign
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.opt_fuzzy is not None:
            result['OptFuzzy'] = self.opt_fuzzy
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiStatus') is not None:
            self.api_status = m.get('ApiStatus')
        if m.get('ApiType') is not None:
            self.api_type = m.get('ApiType')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Format') is not None:
            self.format = m.get('Format')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('NeedEncrypt') is not None:
            self.need_encrypt = m.get('NeedEncrypt')
        if m.get('NeedEtag') is not None:
            self.need_etag = m.get('NeedEtag')
        if m.get('NeedSign') is not None:
            self.need_sign = m.get('NeedSign')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('OptFuzzy') is not None:
            self.opt_fuzzy = m.get('OptFuzzy')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker(TeaModel):
    def __init__(self, charset=None, content_type=None, host=None, method=None, path=None):
        self.charset = charset  # type: str
        self.content_type = content_type  # type: str
        self.host = host  # type: str
        self.method = method  # type: str
        self.path = path  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.charset is not None:
            result['Charset'] = self.charset
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.host is not None:
            result['Host'] = self.host
        if self.method is not None:
            result['Method'] = self.method
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Charset') is not None:
            self.charset = m.get('Charset')
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class ListMgsApiResponseBodyResultContentValueApiInvoker(TeaModel):
    def __init__(self, http_invoker=None, rpc_invoker=None):
        self.http_invoker = http_invoker  # type: ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker
        self.rpc_invoker = rpc_invoker  # type: str

    def validate(self):
        if self.http_invoker:
            self.http_invoker.validate()

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueApiInvoker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.http_invoker is not None:
            result['HttpInvoker'] = self.http_invoker.to_map()
        if self.rpc_invoker is not None:
            result['RpcInvoker'] = self.rpc_invoker
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HttpInvoker') is not None:
            temp_model = ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker()
            self.http_invoker = temp_model.from_map(m['HttpInvoker'])
        if m.get('RpcInvoker') is not None:
            self.rpc_invoker = m.get('RpcInvoker')
        return self


class ListMgsApiResponseBodyResultContentValueCacheRule(TeaModel):
    def __init__(self, cache_key=None, need_cache=None, ttl=None):
        self.cache_key = cache_key  # type: str
        self.need_cache = need_cache  # type: bool
        self.ttl = ttl  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueCacheRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cache_key is not None:
            result['CacheKey'] = self.cache_key
        if self.need_cache is not None:
            result['NeedCache'] = self.need_cache
        if self.ttl is not None:
            result['Ttl'] = self.ttl
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CacheKey') is not None:
            self.cache_key = m.get('CacheKey')
        if m.get('NeedCache') is not None:
            self.need_cache = m.get('NeedCache')
        if m.get('Ttl') is not None:
            self.ttl = m.get('Ttl')
        return self


class ListMgsApiResponseBodyResultContentValueCircuitBreakerRule(TeaModel):
    def __init__(self, app_id=None, default_response=None, error_threshold=None, id=None, model=None,
                 open_timeout_seconds=None, slow_ratio_threshold=None, switch_status=None, windows_in_seconds=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.default_response = default_response  # type: str
        self.error_threshold = error_threshold  # type: long
        self.id = id  # type: long
        self.model = model  # type: str
        self.open_timeout_seconds = open_timeout_seconds  # type: long
        self.slow_ratio_threshold = slow_ratio_threshold  # type: float
        self.switch_status = switch_status  # type: str
        self.windows_in_seconds = windows_in_seconds  # type: long
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueCircuitBreakerRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.default_response is not None:
            result['DefaultResponse'] = self.default_response
        if self.error_threshold is not None:
            result['ErrorThreshold'] = self.error_threshold
        if self.id is not None:
            result['Id'] = self.id
        if self.model is not None:
            result['Model'] = self.model
        if self.open_timeout_seconds is not None:
            result['OpenTimeoutSeconds'] = self.open_timeout_seconds
        if self.slow_ratio_threshold is not None:
            result['SlowRatioThreshold'] = self.slow_ratio_threshold
        if self.switch_status is not None:
            result['SwitchStatus'] = self.switch_status
        if self.windows_in_seconds is not None:
            result['WindowsInSeconds'] = self.windows_in_seconds
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DefaultResponse') is not None:
            self.default_response = m.get('DefaultResponse')
        if m.get('ErrorThreshold') is not None:
            self.error_threshold = m.get('ErrorThreshold')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OpenTimeoutSeconds') is not None:
            self.open_timeout_seconds = m.get('OpenTimeoutSeconds')
        if m.get('SlowRatioThreshold') is not None:
            self.slow_ratio_threshold = m.get('SlowRatioThreshold')
        if m.get('SwitchStatus') is not None:
            self.switch_status = m.get('SwitchStatus')
        if m.get('WindowsInSeconds') is not None:
            self.windows_in_seconds = m.get('WindowsInSeconds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMgsApiResponseBodyResultContentValueHeaderRule(TeaModel):
    def __init__(self, header_key=None, location=None, type=None, value=None):
        self.header_key = header_key  # type: str
        self.location = location  # type: str
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueHeaderRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.header_key is not None:
            result['HeaderKey'] = self.header_key
        if self.location is not None:
            result['Location'] = self.location
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HeaderKey') is not None:
            self.header_key = m.get('HeaderKey')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListMgsApiResponseBodyResultContentValueHeaderRules(TeaModel):
    def __init__(self, header_key=None, location=None, type=None, value=None):
        self.header_key = header_key  # type: str
        self.location = location  # type: str
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueHeaderRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.header_key is not None:
            result['HeaderKey'] = self.header_key
        if self.location is not None:
            result['Location'] = self.location
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HeaderKey') is not None:
            self.header_key = m.get('HeaderKey')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListMgsApiResponseBodyResultContentValueLimitRule(TeaModel):
    def __init__(self, default_response=None, i_18n_response=None, interval=None, limit=None, mode=None):
        self.default_response = default_response  # type: str
        self.i_18n_response = i_18n_response  # type: str
        self.interval = interval  # type: long
        self.limit = limit  # type: long
        self.mode = mode  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueLimitRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.default_response is not None:
            result['DefaultResponse'] = self.default_response
        if self.i_18n_response is not None:
            result['I18nResponse'] = self.i_18n_response
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.mode is not None:
            result['Mode'] = self.mode
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DefaultResponse') is not None:
            self.default_response = m.get('DefaultResponse')
        if m.get('I18nResponse') is not None:
            self.i_18n_response = m.get('I18nResponse')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        return self


class ListMgsApiResponseBodyResultContentValueMigrateRule(TeaModel):
    def __init__(self, flow_percent=None, need_migrate=None, need_switch_completely=None, sys_id=None,
                 sys_name=None, upstream_type=None):
        self.flow_percent = flow_percent  # type: long
        self.need_migrate = need_migrate  # type: bool
        self.need_switch_completely = need_switch_completely  # type: bool
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.upstream_type = upstream_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueMigrateRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_percent is not None:
            result['FlowPercent'] = self.flow_percent
        if self.need_migrate is not None:
            result['NeedMigrate'] = self.need_migrate
        if self.need_switch_completely is not None:
            result['NeedSwitchCompletely'] = self.need_switch_completely
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.upstream_type is not None:
            result['UpstreamType'] = self.upstream_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowPercent') is not None:
            self.flow_percent = m.get('FlowPercent')
        if m.get('NeedMigrate') is not None:
            self.need_migrate = m.get('NeedMigrate')
        if m.get('NeedSwitchCompletely') is not None:
            self.need_switch_completely = m.get('NeedSwitchCompletely')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('UpstreamType') is not None:
            self.upstream_type = m.get('UpstreamType')
        return self


class ListMgsApiResponseBodyResultContentValueMockRule(TeaModel):
    def __init__(self, mock_data=None, need_mock=None, percentage=None, type=None):
        self.mock_data = mock_data  # type: str
        self.need_mock = need_mock  # type: bool
        self.percentage = percentage  # type: long
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueMockRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mock_data is not None:
            result['MockData'] = self.mock_data
        if self.need_mock is not None:
            result['NeedMock'] = self.need_mock
        if self.percentage is not None:
            result['Percentage'] = self.percentage
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MockData') is not None:
            self.mock_data = m.get('MockData')
        if m.get('NeedMock') is not None:
            self.need_mock = m.get('NeedMock')
        if m.get('Percentage') is not None:
            self.percentage = m.get('Percentage')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListMgsApiResponseBodyResultContentValueRequestParams(TeaModel):
    def __init__(self, api_id=None, app_id=None, default_value=None, description=None, id=None, location=None,
                 name=None, ref_type=None, type=None, workspace_id=None):
        self.api_id = api_id  # type: str
        self.app_id = app_id  # type: str
        self.default_value = default_value  # type: str
        self.description = description  # type: str
        self.id = id  # type: long
        self.location = location  # type: str
        self.name = name  # type: str
        self.ref_type = ref_type  # type: str
        self.type = type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValueRequestParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_id is not None:
            result['ApiId'] = self.api_id
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.default_value is not None:
            result['DefaultValue'] = self.default_value
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.location is not None:
            result['Location'] = self.location
        if self.name is not None:
            result['Name'] = self.name
        if self.ref_type is not None:
            result['RefType'] = self.ref_type
        if self.type is not None:
            result['Type'] = self.type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiId') is not None:
            self.api_id = m.get('ApiId')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DefaultValue') is not None:
            self.default_value = m.get('DefaultValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RefType') is not None:
            self.ref_type = m.get('RefType')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMgsApiResponseBodyResultContentValue(TeaModel):
    def __init__(self, api_invoker=None, api_name=None, api_status=None, api_type=None, app_id=None,
                 auth_rule_name=None, cache_rule=None, charset=None, circuit_breaker_rule=None, content_type=None,
                 description=None, gmt_create=None, gmt_modified=None, header_rule=None, header_rules=None, host=None, id=None,
                 interface_type=None, limit_rule=None, method=None, method_name=None, migrate_rule=None, mock_rule=None,
                 need_etag=None, need_encrypt=None, need_jsonp=None, need_sign=None, operation_type=None,
                 param_get_method=None, path=None, request_body_model=None, request_params=None, response_body_model=None,
                 sys_id=None, sys_name=None, timeout=None, workspace_id=None):
        self.api_invoker = api_invoker  # type: ListMgsApiResponseBodyResultContentValueApiInvoker
        self.api_name = api_name  # type: str
        self.api_status = api_status  # type: str
        self.api_type = api_type  # type: str
        self.app_id = app_id  # type: str
        self.auth_rule_name = auth_rule_name  # type: str
        self.cache_rule = cache_rule  # type: ListMgsApiResponseBodyResultContentValueCacheRule
        self.charset = charset  # type: str
        self.circuit_breaker_rule = circuit_breaker_rule  # type: ListMgsApiResponseBodyResultContentValueCircuitBreakerRule
        self.content_type = content_type  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.header_rule = header_rule  # type: list[ListMgsApiResponseBodyResultContentValueHeaderRule]
        self.header_rules = header_rules  # type: list[ListMgsApiResponseBodyResultContentValueHeaderRules]
        self.host = host  # type: str
        self.id = id  # type: long
        self.interface_type = interface_type  # type: str
        self.limit_rule = limit_rule  # type: ListMgsApiResponseBodyResultContentValueLimitRule
        self.method = method  # type: str
        self.method_name = method_name  # type: str
        self.migrate_rule = migrate_rule  # type: ListMgsApiResponseBodyResultContentValueMigrateRule
        self.mock_rule = mock_rule  # type: ListMgsApiResponseBodyResultContentValueMockRule
        self.need_etag = need_etag  # type: str
        self.need_encrypt = need_encrypt  # type: str
        self.need_jsonp = need_jsonp  # type: str
        self.need_sign = need_sign  # type: str
        self.operation_type = operation_type  # type: str
        self.param_get_method = param_get_method  # type: str
        self.path = path  # type: str
        self.request_body_model = request_body_model  # type: str
        self.request_params = request_params  # type: list[ListMgsApiResponseBodyResultContentValueRequestParams]
        self.response_body_model = response_body_model  # type: str
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.timeout = timeout  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.api_invoker:
            self.api_invoker.validate()
        if self.cache_rule:
            self.cache_rule.validate()
        if self.circuit_breaker_rule:
            self.circuit_breaker_rule.validate()
        if self.header_rule:
            for k in self.header_rule:
                if k:
                    k.validate()
        if self.header_rules:
            for k in self.header_rules:
                if k:
                    k.validate()
        if self.limit_rule:
            self.limit_rule.validate()
        if self.migrate_rule:
            self.migrate_rule.validate()
        if self.mock_rule:
            self.mock_rule.validate()
        if self.request_params:
            for k in self.request_params:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContentValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_invoker is not None:
            result['ApiInvoker'] = self.api_invoker.to_map()
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.api_status is not None:
            result['ApiStatus'] = self.api_status
        if self.api_type is not None:
            result['ApiType'] = self.api_type
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.auth_rule_name is not None:
            result['AuthRuleName'] = self.auth_rule_name
        if self.cache_rule is not None:
            result['CacheRule'] = self.cache_rule.to_map()
        if self.charset is not None:
            result['Charset'] = self.charset
        if self.circuit_breaker_rule is not None:
            result['CircuitBreakerRule'] = self.circuit_breaker_rule.to_map()
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        result['HeaderRule'] = []
        if self.header_rule is not None:
            for k in self.header_rule:
                result['HeaderRule'].append(k.to_map() if k else None)
        result['HeaderRules'] = []
        if self.header_rules is not None:
            for k in self.header_rules:
                result['HeaderRules'].append(k.to_map() if k else None)
        if self.host is not None:
            result['Host'] = self.host
        if self.id is not None:
            result['Id'] = self.id
        if self.interface_type is not None:
            result['InterfaceType'] = self.interface_type
        if self.limit_rule is not None:
            result['LimitRule'] = self.limit_rule.to_map()
        if self.method is not None:
            result['Method'] = self.method
        if self.method_name is not None:
            result['MethodName'] = self.method_name
        if self.migrate_rule is not None:
            result['MigrateRule'] = self.migrate_rule.to_map()
        if self.mock_rule is not None:
            result['MockRule'] = self.mock_rule.to_map()
        if self.need_etag is not None:
            result['NeedETag'] = self.need_etag
        if self.need_encrypt is not None:
            result['NeedEncrypt'] = self.need_encrypt
        if self.need_jsonp is not None:
            result['NeedJsonp'] = self.need_jsonp
        if self.need_sign is not None:
            result['NeedSign'] = self.need_sign
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.param_get_method is not None:
            result['ParamGetMethod'] = self.param_get_method
        if self.path is not None:
            result['Path'] = self.path
        if self.request_body_model is not None:
            result['RequestBodyModel'] = self.request_body_model
        result['RequestParams'] = []
        if self.request_params is not None:
            for k in self.request_params:
                result['RequestParams'].append(k.to_map() if k else None)
        if self.response_body_model is not None:
            result['ResponseBodyModel'] = self.response_body_model
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiInvoker') is not None:
            temp_model = ListMgsApiResponseBodyResultContentValueApiInvoker()
            self.api_invoker = temp_model.from_map(m['ApiInvoker'])
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('ApiStatus') is not None:
            self.api_status = m.get('ApiStatus')
        if m.get('ApiType') is not None:
            self.api_type = m.get('ApiType')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AuthRuleName') is not None:
            self.auth_rule_name = m.get('AuthRuleName')
        if m.get('CacheRule') is not None:
            temp_model = ListMgsApiResponseBodyResultContentValueCacheRule()
            self.cache_rule = temp_model.from_map(m['CacheRule'])
        if m.get('Charset') is not None:
            self.charset = m.get('Charset')
        if m.get('CircuitBreakerRule') is not None:
            temp_model = ListMgsApiResponseBodyResultContentValueCircuitBreakerRule()
            self.circuit_breaker_rule = temp_model.from_map(m['CircuitBreakerRule'])
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        self.header_rule = []
        if m.get('HeaderRule') is not None:
            for k in m.get('HeaderRule'):
                temp_model = ListMgsApiResponseBodyResultContentValueHeaderRule()
                self.header_rule.append(temp_model.from_map(k))
        self.header_rules = []
        if m.get('HeaderRules') is not None:
            for k in m.get('HeaderRules'):
                temp_model = ListMgsApiResponseBodyResultContentValueHeaderRules()
                self.header_rules.append(temp_model.from_map(k))
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InterfaceType') is not None:
            self.interface_type = m.get('InterfaceType')
        if m.get('LimitRule') is not None:
            temp_model = ListMgsApiResponseBodyResultContentValueLimitRule()
            self.limit_rule = temp_model.from_map(m['LimitRule'])
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('MethodName') is not None:
            self.method_name = m.get('MethodName')
        if m.get('MigrateRule') is not None:
            temp_model = ListMgsApiResponseBodyResultContentValueMigrateRule()
            self.migrate_rule = temp_model.from_map(m['MigrateRule'])
        if m.get('MockRule') is not None:
            temp_model = ListMgsApiResponseBodyResultContentValueMockRule()
            self.mock_rule = temp_model.from_map(m['MockRule'])
        if m.get('NeedETag') is not None:
            self.need_etag = m.get('NeedETag')
        if m.get('NeedEncrypt') is not None:
            self.need_encrypt = m.get('NeedEncrypt')
        if m.get('NeedJsonp') is not None:
            self.need_jsonp = m.get('NeedJsonp')
        if m.get('NeedSign') is not None:
            self.need_sign = m.get('NeedSign')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('ParamGetMethod') is not None:
            self.param_get_method = m.get('ParamGetMethod')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('RequestBodyModel') is not None:
            self.request_body_model = m.get('RequestBodyModel')
        self.request_params = []
        if m.get('RequestParams') is not None:
            for k in m.get('RequestParams'):
                temp_model = ListMgsApiResponseBodyResultContentValueRequestParams()
                self.request_params.append(temp_model.from_map(k))
        if m.get('ResponseBodyModel') is not None:
            self.response_body_model = m.get('ResponseBodyModel')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class ListMgsApiResponseBodyResultContent(TeaModel):
    def __init__(self, error_message=None, success=None, value=None):
        self.error_message = error_message  # type: str
        self.success = success  # type: bool
        self.value = value  # type: list[ListMgsApiResponseBodyResultContentValue]

    def validate(self):
        if self.value:
            for k in self.value:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMgsApiResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.success is not None:
            result['Success'] = self.success
        result['Value'] = []
        if self.value is not None:
            for k in self.value:
                result['Value'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.value = []
        if m.get('Value') is not None:
            for k in m.get('Value'):
                temp_model = ListMgsApiResponseBodyResultContentValue()
                self.value.append(temp_model.from_map(k))
        return self


class ListMgsApiResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: ListMgsApiResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(ListMgsApiResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = ListMgsApiResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class ListMgsApiResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMgsApiResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMgsApiResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMgsApiResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class LogMsaQueryRequest(TeaModel):
    def __init__(self, app_id=None, id=None, onex_flag=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: str
        self.onex_flag = onex_flag  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(LogMsaQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class LogMsaQueryResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(LogMsaQueryResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class LogMsaQueryResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: LogMsaQueryResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(LogMsaQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = LogMsaQueryResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class LogMsaQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: LogMsaQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(LogMsaQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = LogMsaQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiAddActiveCodeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_add_active_code_req_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_add_active_code_req_json_str = mpaas_mqcp_open_api_add_active_code_req_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiAddActiveCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_add_active_code_req_json_str is not None:
            result['MpaasMqcpOpenApiAddActiveCodeReqJsonStr'] = self.mpaas_mqcp_open_api_add_active_code_req_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiAddActiveCodeReqJsonStr') is not None:
            self.mpaas_mqcp_open_api_add_active_code_req_json_str = m.get('MpaasMqcpOpenApiAddActiveCodeReqJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiAddActiveCodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiAddActiveCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiAddActiveCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiAddActiveCodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiAddActiveCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiAddActiveCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiAddActiveSceneRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_add_active_scene_req_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_add_active_scene_req_json_str = mpaas_mqcp_open_api_add_active_scene_req_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiAddActiveSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_add_active_scene_req_json_str is not None:
            result['MpaasMqcpOpenApiAddActiveSceneReqJsonStr'] = self.mpaas_mqcp_open_api_add_active_scene_req_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiAddActiveSceneReqJsonStr') is not None:
            self.mpaas_mqcp_open_api_add_active_scene_req_json_str = m.get('MpaasMqcpOpenApiAddActiveSceneReqJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiAddActiveSceneResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiAddActiveSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiAddActiveSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiAddActiveSceneResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiAddActiveSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiAddActiveSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiCallbackRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_callback_request_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_callback_request_json_str = mpaas_mqcp_open_api_callback_request_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiCallbackRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_callback_request_json_str is not None:
            result['MpaasMqcpOpenApiCallbackRequestJsonStr'] = self.mpaas_mqcp_open_api_callback_request_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiCallbackRequestJsonStr') is not None:
            self.mpaas_mqcp_open_api_callback_request_json_str = m.get('MpaasMqcpOpenApiCallbackRequestJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiCallbackResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiCallbackResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiCallbackResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiCallbackResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiCallbackResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiCallbackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiDecodeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_decode_request_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_decode_request_json_str = mpaas_mqcp_open_api_decode_request_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiDecodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_decode_request_json_str is not None:
            result['MpaasMqcpOpenApiDecodeRequestJsonStr'] = self.mpaas_mqcp_open_api_decode_request_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiDecodeRequestJsonStr') is not None:
            self.mpaas_mqcp_open_api_decode_request_json_str = m.get('MpaasMqcpOpenApiDecodeRequestJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiDecodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiDecodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiDecodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiDecodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiDecodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiDecodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiDeleteActiveCodeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_delete_active_code_req_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_delete_active_code_req_json_str = mpaas_mqcp_open_api_delete_active_code_req_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiDeleteActiveCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_delete_active_code_req_json_str is not None:
            result['MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr'] = self.mpaas_mqcp_open_api_delete_active_code_req_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr') is not None:
            self.mpaas_mqcp_open_api_delete_active_code_req_json_str = m.get('MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiDeleteActiveCodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiDeleteActiveCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiDeleteActiveCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiDeleteActiveCodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiDeleteActiveCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiDeleteActiveCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiEncodeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_encode_request_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_encode_request_json_str = mpaas_mqcp_open_api_encode_request_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiEncodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_encode_request_json_str is not None:
            result['MpaasMqcpOpenApiEncodeRequestJsonStr'] = self.mpaas_mqcp_open_api_encode_request_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiEncodeRequestJsonStr') is not None:
            self.mpaas_mqcp_open_api_encode_request_json_str = m.get('MpaasMqcpOpenApiEncodeRequestJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiEncodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiEncodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiEncodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiEncodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiEncodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiEncodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiQueryActiveCodeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_query_active_code_req_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_query_active_code_req_json_str = mpaas_mqcp_open_api_query_active_code_req_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiQueryActiveCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_query_active_code_req_json_str is not None:
            result['MpaasMqcpOpenApiQueryActiveCodeReqJsonStr'] = self.mpaas_mqcp_open_api_query_active_code_req_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiQueryActiveCodeReqJsonStr') is not None:
            self.mpaas_mqcp_open_api_query_active_code_req_json_str = m.get('MpaasMqcpOpenApiQueryActiveCodeReqJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiQueryActiveCodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiQueryActiveCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class OpenApiQueryActiveCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiQueryActiveCodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiQueryActiveCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiQueryActiveCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiQueryActiveSceneRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_query_active_scene_req_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_query_active_scene_req_json_str = mpaas_mqcp_open_api_query_active_scene_req_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiQueryActiveSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_query_active_scene_req_json_str is not None:
            result['MpaasMqcpOpenApiQueryActiveSceneReqJsonStr'] = self.mpaas_mqcp_open_api_query_active_scene_req_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiQueryActiveSceneReqJsonStr') is not None:
            self.mpaas_mqcp_open_api_query_active_scene_req_json_str = m.get('MpaasMqcpOpenApiQueryActiveSceneReqJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiQueryActiveSceneResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiQueryActiveSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiQueryActiveSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiQueryActiveSceneResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiQueryActiveSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiQueryActiveSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiUniqueEncodeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_unique_encode_request_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_unique_encode_request_json_str = mpaas_mqcp_open_api_unique_encode_request_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiUniqueEncodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_unique_encode_request_json_str is not None:
            result['MpaasMqcpOpenApiUniqueEncodeRequestJsonStr'] = self.mpaas_mqcp_open_api_unique_encode_request_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiUniqueEncodeRequestJsonStr') is not None:
            self.mpaas_mqcp_open_api_unique_encode_request_json_str = m.get('MpaasMqcpOpenApiUniqueEncodeRequestJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiUniqueEncodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiUniqueEncodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiUniqueEncodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiUniqueEncodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiUniqueEncodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiUniqueEncodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiUpdateActiveCodeRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_update_active_code_req_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_update_active_code_req_json_str = mpaas_mqcp_open_api_update_active_code_req_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiUpdateActiveCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_update_active_code_req_json_str is not None:
            result['MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr'] = self.mpaas_mqcp_open_api_update_active_code_req_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr') is not None:
            self.mpaas_mqcp_open_api_update_active_code_req_json_str = m.get('MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiUpdateActiveCodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiUpdateActiveCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiUpdateActiveCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiUpdateActiveCodeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiUpdateActiveCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiUpdateActiveCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiUpdateActiveSceneRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mqcp_open_api_update_active_scene_req_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mqcp_open_api_update_active_scene_req_json_str = mpaas_mqcp_open_api_update_active_scene_req_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiUpdateActiveSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mqcp_open_api_update_active_scene_req_json_str is not None:
            result['MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr'] = self.mpaas_mqcp_open_api_update_active_scene_req_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr') is not None:
            self.mpaas_mqcp_open_api_update_active_scene_req_json_str = m.get('MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class OpenApiUpdateActiveSceneResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenApiUpdateActiveSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        return self


class OpenApiUpdateActiveSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenApiUpdateActiveSceneResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenApiUpdateActiveSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiUpdateActiveSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PushBindRequest(TeaModel):
    def __init__(self, app_id=None, delivery_token=None, os_type=None, phone_number=None, user_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.delivery_token = delivery_token  # type: str
        self.os_type = os_type  # type: int
        self.phone_number = phone_number  # type: str
        self.user_id = user_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushBindRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.delivery_token is not None:
            result['DeliveryToken'] = self.delivery_token
        if self.os_type is not None:
            result['OsType'] = self.os_type
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DeliveryToken') is not None:
            self.delivery_token = m.get('DeliveryToken')
        if m.get('OsType') is not None:
            self.os_type = m.get('OsType')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushBindResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushBindResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PushBindResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: PushBindResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(PushBindResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = PushBindResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class PushBindResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PushBindResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PushBindResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PushBindResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PushBroadcastRequest(TeaModel):
    def __init__(self, android_channel=None, app_id=None, bind_period=None, channel_id=None, classification=None,
                 delivery_type=None, expired_seconds=None, extended_params=None, mi_channel_id=None, msgkey=None,
                 notify_type=None, push_action=None, push_status=None, silent=None, strategy_content=None, strategy_type=None,
                 task_name=None, template_key_value=None, template_name=None, third_channel_category=None,
                 un_bind_period=None, workspace_id=None):
        self.android_channel = android_channel  # type: int
        self.app_id = app_id  # type: str
        self.bind_period = bind_period  # type: int
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.msgkey = msgkey  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.push_status = push_status  # type: long
        self.silent = silent  # type: long
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.task_name = task_name  # type: str
        self.template_key_value = template_key_value  # type: str
        self.template_name = template_name  # type: str
        self.third_channel_category = third_channel_category  # type: dict[str, any]
        self.un_bind_period = un_bind_period  # type: long
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushBroadcastRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.android_channel is not None:
            result['AndroidChannel'] = self.android_channel
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.bind_period is not None:
            result['BindPeriod'] = self.bind_period
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.msgkey is not None:
            result['Msgkey'] = self.msgkey
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.push_status is not None:
            result['PushStatus'] = self.push_status
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_key_value is not None:
            result['TemplateKeyValue'] = self.template_key_value
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.third_channel_category is not None:
            result['ThirdChannelCategory'] = self.third_channel_category
        if self.un_bind_period is not None:
            result['UnBindPeriod'] = self.un_bind_period
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AndroidChannel') is not None:
            self.android_channel = m.get('AndroidChannel')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('BindPeriod') is not None:
            self.bind_period = m.get('BindPeriod')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('Msgkey') is not None:
            self.msgkey = m.get('Msgkey')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('PushStatus') is not None:
            self.push_status = m.get('PushStatus')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateKeyValue') is not None:
            self.template_key_value = m.get('TemplateKeyValue')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category = m.get('ThirdChannelCategory')
        if m.get('UnBindPeriod') is not None:
            self.un_bind_period = m.get('UnBindPeriod')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushBroadcastShrinkRequest(TeaModel):
    def __init__(self, android_channel=None, app_id=None, bind_period=None, channel_id=None, classification=None,
                 delivery_type=None, expired_seconds=None, extended_params=None, mi_channel_id=None, msgkey=None,
                 notify_type=None, push_action=None, push_status=None, silent=None, strategy_content=None, strategy_type=None,
                 task_name=None, template_key_value=None, template_name=None, third_channel_category_shrink=None,
                 un_bind_period=None, workspace_id=None):
        self.android_channel = android_channel  # type: int
        self.app_id = app_id  # type: str
        self.bind_period = bind_period  # type: int
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.msgkey = msgkey  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.push_status = push_status  # type: long
        self.silent = silent  # type: long
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.task_name = task_name  # type: str
        self.template_key_value = template_key_value  # type: str
        self.template_name = template_name  # type: str
        self.third_channel_category_shrink = third_channel_category_shrink  # type: str
        self.un_bind_period = un_bind_period  # type: long
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushBroadcastShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.android_channel is not None:
            result['AndroidChannel'] = self.android_channel
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.bind_period is not None:
            result['BindPeriod'] = self.bind_period
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.msgkey is not None:
            result['Msgkey'] = self.msgkey
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.push_status is not None:
            result['PushStatus'] = self.push_status
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_key_value is not None:
            result['TemplateKeyValue'] = self.template_key_value
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.third_channel_category_shrink is not None:
            result['ThirdChannelCategory'] = self.third_channel_category_shrink
        if self.un_bind_period is not None:
            result['UnBindPeriod'] = self.un_bind_period
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AndroidChannel') is not None:
            self.android_channel = m.get('AndroidChannel')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('BindPeriod') is not None:
            self.bind_period = m.get('BindPeriod')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('Msgkey') is not None:
            self.msgkey = m.get('Msgkey')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('PushStatus') is not None:
            self.push_status = m.get('PushStatus')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateKeyValue') is not None:
            self.template_key_value = m.get('TemplateKeyValue')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category_shrink = m.get('ThirdChannelCategory')
        if m.get('UnBindPeriod') is not None:
            self.un_bind_period = m.get('UnBindPeriod')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushBroadcastResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushBroadcastResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PushBroadcastResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: PushBroadcastResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(PushBroadcastResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = PushBroadcastResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class PushBroadcastResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PushBroadcastResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PushBroadcastResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PushBroadcastResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PushMultipleRequestTargetMsg(TeaModel):
    def __init__(self, extended_params=None, msg_key=None, target=None, template_key_value=None):
        self.extended_params = extended_params  # type: str
        self.msg_key = msg_key  # type: str
        self.target = target  # type: str
        self.template_key_value = template_key_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushMultipleRequestTargetMsg, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.msg_key is not None:
            result['MsgKey'] = self.msg_key
        if self.target is not None:
            result['Target'] = self.target
        if self.template_key_value is not None:
            result['TemplateKeyValue'] = self.template_key_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MsgKey') is not None:
            self.msg_key = m.get('MsgKey')
        if m.get('Target') is not None:
            self.target = m.get('Target')
        if m.get('TemplateKeyValue') is not None:
            self.template_key_value = m.get('TemplateKeyValue')
        return self


class PushMultipleRequest(TeaModel):
    def __init__(self, app_id=None, channel_id=None, classification=None, delivery_type=None, expired_seconds=None,
                 extended_params=None, mi_channel_id=None, notify_type=None, push_action=None, silent=None, strategy_content=None,
                 strategy_type=None, target_msg=None, task_name=None, template_name=None, third_channel_category=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.silent = silent  # type: long
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.target_msg = target_msg  # type: list[PushMultipleRequestTargetMsg]
        self.task_name = task_name  # type: str
        self.template_name = template_name  # type: str
        self.third_channel_category = third_channel_category  # type: dict[str, any]
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.target_msg:
            for k in self.target_msg:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PushMultipleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        result['TargetMsg'] = []
        if self.target_msg is not None:
            for k in self.target_msg:
                result['TargetMsg'].append(k.to_map() if k else None)
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.third_channel_category is not None:
            result['ThirdChannelCategory'] = self.third_channel_category
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        self.target_msg = []
        if m.get('TargetMsg') is not None:
            for k in m.get('TargetMsg'):
                temp_model = PushMultipleRequestTargetMsg()
                self.target_msg.append(temp_model.from_map(k))
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category = m.get('ThirdChannelCategory')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushMultipleShrinkRequestTargetMsg(TeaModel):
    def __init__(self, extended_params=None, msg_key=None, target=None, template_key_value=None):
        self.extended_params = extended_params  # type: str
        self.msg_key = msg_key  # type: str
        self.target = target  # type: str
        self.template_key_value = template_key_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushMultipleShrinkRequestTargetMsg, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.msg_key is not None:
            result['MsgKey'] = self.msg_key
        if self.target is not None:
            result['Target'] = self.target
        if self.template_key_value is not None:
            result['TemplateKeyValue'] = self.template_key_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MsgKey') is not None:
            self.msg_key = m.get('MsgKey')
        if m.get('Target') is not None:
            self.target = m.get('Target')
        if m.get('TemplateKeyValue') is not None:
            self.template_key_value = m.get('TemplateKeyValue')
        return self


class PushMultipleShrinkRequest(TeaModel):
    def __init__(self, app_id=None, channel_id=None, classification=None, delivery_type=None, expired_seconds=None,
                 extended_params=None, mi_channel_id=None, notify_type=None, push_action=None, silent=None, strategy_content=None,
                 strategy_type=None, target_msg=None, task_name=None, template_name=None, third_channel_category_shrink=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.silent = silent  # type: long
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.target_msg = target_msg  # type: list[PushMultipleShrinkRequestTargetMsg]
        self.task_name = task_name  # type: str
        self.template_name = template_name  # type: str
        self.third_channel_category_shrink = third_channel_category_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.target_msg:
            for k in self.target_msg:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PushMultipleShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        result['TargetMsg'] = []
        if self.target_msg is not None:
            for k in self.target_msg:
                result['TargetMsg'].append(k.to_map() if k else None)
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.third_channel_category_shrink is not None:
            result['ThirdChannelCategory'] = self.third_channel_category_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        self.target_msg = []
        if m.get('TargetMsg') is not None:
            for k in m.get('TargetMsg'):
                temp_model = PushMultipleShrinkRequestTargetMsg()
                self.target_msg.append(temp_model.from_map(k))
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category_shrink = m.get('ThirdChannelCategory')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushMultipleResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushMultipleResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PushMultipleResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: PushMultipleResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(PushMultipleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = PushMultipleResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class PushMultipleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PushMultipleResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PushMultipleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PushMultipleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PushReportRequest(TeaModel):
    def __init__(self, app_id=None, app_version=None, channel=None, connect_type=None, delivery_token=None,
                 imei=None, imsi=None, model=None, os_type=None, push_version=None, third_channel=None,
                 third_channel_device_token=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.app_version = app_version  # type: str
        self.channel = channel  # type: str
        self.connect_type = connect_type  # type: str
        self.delivery_token = delivery_token  # type: str
        self.imei = imei  # type: str
        self.imsi = imsi  # type: str
        self.model = model  # type: str
        self.os_type = os_type  # type: int
        self.push_version = push_version  # type: str
        self.third_channel = third_channel  # type: int
        self.third_channel_device_token = third_channel_device_token  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_version is not None:
            result['AppVersion'] = self.app_version
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.connect_type is not None:
            result['ConnectType'] = self.connect_type
        if self.delivery_token is not None:
            result['DeliveryToken'] = self.delivery_token
        if self.imei is not None:
            result['Imei'] = self.imei
        if self.imsi is not None:
            result['Imsi'] = self.imsi
        if self.model is not None:
            result['Model'] = self.model
        if self.os_type is not None:
            result['OsType'] = self.os_type
        if self.push_version is not None:
            result['PushVersion'] = self.push_version
        if self.third_channel is not None:
            result['ThirdChannel'] = self.third_channel
        if self.third_channel_device_token is not None:
            result['ThirdChannelDeviceToken'] = self.third_channel_device_token
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppVersion') is not None:
            self.app_version = m.get('AppVersion')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ConnectType') is not None:
            self.connect_type = m.get('ConnectType')
        if m.get('DeliveryToken') is not None:
            self.delivery_token = m.get('DeliveryToken')
        if m.get('Imei') is not None:
            self.imei = m.get('Imei')
        if m.get('Imsi') is not None:
            self.imsi = m.get('Imsi')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OsType') is not None:
            self.os_type = m.get('OsType')
        if m.get('PushVersion') is not None:
            self.push_version = m.get('PushVersion')
        if m.get('ThirdChannel') is not None:
            self.third_channel = m.get('ThirdChannel')
        if m.get('ThirdChannelDeviceToken') is not None:
            self.third_channel_device_token = m.get('ThirdChannelDeviceToken')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushReportResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushReportResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PushReportResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: PushReportResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(PushReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = PushReportResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class PushReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PushReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PushReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PushReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PushSimpleRequest(TeaModel):
    def __init__(self, app_id=None, channel_id=None, classification=None, content=None, delivery_type=None,
                 expired_seconds=None, extended_params=None, icon_urls=None, image_urls=None, mi_channel_id=None, notify_type=None,
                 push_action=None, push_style=None, silent=None, sms_sign_name=None, sms_strategy=None, sms_template_code=None,
                 sms_template_param=None, strategy_content=None, strategy_type=None, target_msgkey=None, task_name=None,
                 third_channel_category=None, title=None, uri=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.content = content  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.icon_urls = icon_urls  # type: str
        self.image_urls = image_urls  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.push_style = push_style  # type: int
        self.silent = silent  # type: long
        self.sms_sign_name = sms_sign_name  # type: str
        self.sms_strategy = sms_strategy  # type: int
        self.sms_template_code = sms_template_code  # type: str
        self.sms_template_param = sms_template_param  # type: str
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.target_msgkey = target_msgkey  # type: str
        self.task_name = task_name  # type: str
        self.third_channel_category = third_channel_category  # type: dict[str, any]
        self.title = title  # type: str
        self.uri = uri  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushSimpleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.content is not None:
            result['Content'] = self.content
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.icon_urls is not None:
            result['IconUrls'] = self.icon_urls
        if self.image_urls is not None:
            result['ImageUrls'] = self.image_urls
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.push_style is not None:
            result['PushStyle'] = self.push_style
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.sms_sign_name is not None:
            result['SmsSignName'] = self.sms_sign_name
        if self.sms_strategy is not None:
            result['SmsStrategy'] = self.sms_strategy
        if self.sms_template_code is not None:
            result['SmsTemplateCode'] = self.sms_template_code
        if self.sms_template_param is not None:
            result['SmsTemplateParam'] = self.sms_template_param
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.target_msgkey is not None:
            result['TargetMsgkey'] = self.target_msgkey
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.third_channel_category is not None:
            result['ThirdChannelCategory'] = self.third_channel_category
        if self.title is not None:
            result['Title'] = self.title
        if self.uri is not None:
            result['Uri'] = self.uri
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('IconUrls') is not None:
            self.icon_urls = m.get('IconUrls')
        if m.get('ImageUrls') is not None:
            self.image_urls = m.get('ImageUrls')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('PushStyle') is not None:
            self.push_style = m.get('PushStyle')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('SmsSignName') is not None:
            self.sms_sign_name = m.get('SmsSignName')
        if m.get('SmsStrategy') is not None:
            self.sms_strategy = m.get('SmsStrategy')
        if m.get('SmsTemplateCode') is not None:
            self.sms_template_code = m.get('SmsTemplateCode')
        if m.get('SmsTemplateParam') is not None:
            self.sms_template_param = m.get('SmsTemplateParam')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('TargetMsgkey') is not None:
            self.target_msgkey = m.get('TargetMsgkey')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category = m.get('ThirdChannelCategory')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Uri') is not None:
            self.uri = m.get('Uri')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushSimpleShrinkRequest(TeaModel):
    def __init__(self, app_id=None, channel_id=None, classification=None, content=None, delivery_type=None,
                 expired_seconds=None, extended_params=None, icon_urls=None, image_urls=None, mi_channel_id=None, notify_type=None,
                 push_action=None, push_style=None, silent=None, sms_sign_name=None, sms_strategy=None, sms_template_code=None,
                 sms_template_param=None, strategy_content=None, strategy_type=None, target_msgkey=None, task_name=None,
                 third_channel_category_shrink=None, title=None, uri=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.content = content  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.icon_urls = icon_urls  # type: str
        self.image_urls = image_urls  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.push_style = push_style  # type: int
        self.silent = silent  # type: long
        self.sms_sign_name = sms_sign_name  # type: str
        self.sms_strategy = sms_strategy  # type: int
        self.sms_template_code = sms_template_code  # type: str
        self.sms_template_param = sms_template_param  # type: str
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.target_msgkey = target_msgkey  # type: str
        self.task_name = task_name  # type: str
        self.third_channel_category_shrink = third_channel_category_shrink  # type: str
        self.title = title  # type: str
        self.uri = uri  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushSimpleShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.content is not None:
            result['Content'] = self.content
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.icon_urls is not None:
            result['IconUrls'] = self.icon_urls
        if self.image_urls is not None:
            result['ImageUrls'] = self.image_urls
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.push_style is not None:
            result['PushStyle'] = self.push_style
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.sms_sign_name is not None:
            result['SmsSignName'] = self.sms_sign_name
        if self.sms_strategy is not None:
            result['SmsStrategy'] = self.sms_strategy
        if self.sms_template_code is not None:
            result['SmsTemplateCode'] = self.sms_template_code
        if self.sms_template_param is not None:
            result['SmsTemplateParam'] = self.sms_template_param
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.target_msgkey is not None:
            result['TargetMsgkey'] = self.target_msgkey
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.third_channel_category_shrink is not None:
            result['ThirdChannelCategory'] = self.third_channel_category_shrink
        if self.title is not None:
            result['Title'] = self.title
        if self.uri is not None:
            result['Uri'] = self.uri
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('IconUrls') is not None:
            self.icon_urls = m.get('IconUrls')
        if m.get('ImageUrls') is not None:
            self.image_urls = m.get('ImageUrls')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('PushStyle') is not None:
            self.push_style = m.get('PushStyle')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('SmsSignName') is not None:
            self.sms_sign_name = m.get('SmsSignName')
        if m.get('SmsStrategy') is not None:
            self.sms_strategy = m.get('SmsStrategy')
        if m.get('SmsTemplateCode') is not None:
            self.sms_template_code = m.get('SmsTemplateCode')
        if m.get('SmsTemplateParam') is not None:
            self.sms_template_param = m.get('SmsTemplateParam')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('TargetMsgkey') is not None:
            self.target_msgkey = m.get('TargetMsgkey')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category_shrink = m.get('ThirdChannelCategory')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('Uri') is not None:
            self.uri = m.get('Uri')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushSimpleResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushSimpleResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PushSimpleResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: PushSimpleResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(PushSimpleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = PushSimpleResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class PushSimpleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PushSimpleResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PushSimpleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PushSimpleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PushTemplateRequest(TeaModel):
    def __init__(self, app_id=None, channel_id=None, classification=None, delivery_type=None, expired_seconds=None,
                 extended_params=None, mi_channel_id=None, notify_type=None, push_action=None, silent=None, sms_sign_name=None,
                 sms_strategy=None, sms_template_code=None, sms_template_param=None, strategy_content=None, strategy_type=None,
                 target_msgkey=None, task_name=None, template_key_value=None, template_name=None, third_channel_category=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.silent = silent  # type: long
        self.sms_sign_name = sms_sign_name  # type: str
        self.sms_strategy = sms_strategy  # type: int
        self.sms_template_code = sms_template_code  # type: str
        self.sms_template_param = sms_template_param  # type: str
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.target_msgkey = target_msgkey  # type: str
        self.task_name = task_name  # type: str
        self.template_key_value = template_key_value  # type: str
        self.template_name = template_name  # type: str
        self.third_channel_category = third_channel_category  # type: dict[str, any]
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushTemplateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.sms_sign_name is not None:
            result['SmsSignName'] = self.sms_sign_name
        if self.sms_strategy is not None:
            result['SmsStrategy'] = self.sms_strategy
        if self.sms_template_code is not None:
            result['SmsTemplateCode'] = self.sms_template_code
        if self.sms_template_param is not None:
            result['SmsTemplateParam'] = self.sms_template_param
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.target_msgkey is not None:
            result['TargetMsgkey'] = self.target_msgkey
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_key_value is not None:
            result['TemplateKeyValue'] = self.template_key_value
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.third_channel_category is not None:
            result['ThirdChannelCategory'] = self.third_channel_category
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('SmsSignName') is not None:
            self.sms_sign_name = m.get('SmsSignName')
        if m.get('SmsStrategy') is not None:
            self.sms_strategy = m.get('SmsStrategy')
        if m.get('SmsTemplateCode') is not None:
            self.sms_template_code = m.get('SmsTemplateCode')
        if m.get('SmsTemplateParam') is not None:
            self.sms_template_param = m.get('SmsTemplateParam')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('TargetMsgkey') is not None:
            self.target_msgkey = m.get('TargetMsgkey')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateKeyValue') is not None:
            self.template_key_value = m.get('TemplateKeyValue')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category = m.get('ThirdChannelCategory')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushTemplateShrinkRequest(TeaModel):
    def __init__(self, app_id=None, channel_id=None, classification=None, delivery_type=None, expired_seconds=None,
                 extended_params=None, mi_channel_id=None, notify_type=None, push_action=None, silent=None, sms_sign_name=None,
                 sms_strategy=None, sms_template_code=None, sms_template_param=None, strategy_content=None, strategy_type=None,
                 target_msgkey=None, task_name=None, template_key_value=None, template_name=None,
                 third_channel_category_shrink=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.channel_id = channel_id  # type: str
        self.classification = classification  # type: str
        self.delivery_type = delivery_type  # type: long
        self.expired_seconds = expired_seconds  # type: long
        self.extended_params = extended_params  # type: str
        self.mi_channel_id = mi_channel_id  # type: str
        self.notify_type = notify_type  # type: str
        self.push_action = push_action  # type: long
        self.silent = silent  # type: long
        self.sms_sign_name = sms_sign_name  # type: str
        self.sms_strategy = sms_strategy  # type: int
        self.sms_template_code = sms_template_code  # type: str
        self.sms_template_param = sms_template_param  # type: str
        self.strategy_content = strategy_content  # type: str
        self.strategy_type = strategy_type  # type: int
        self.target_msgkey = target_msgkey  # type: str
        self.task_name = task_name  # type: str
        self.template_key_value = template_key_value  # type: str
        self.template_name = template_name  # type: str
        self.third_channel_category_shrink = third_channel_category_shrink  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushTemplateShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.classification is not None:
            result['Classification'] = self.classification
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.expired_seconds is not None:
            result['ExpiredSeconds'] = self.expired_seconds
        if self.extended_params is not None:
            result['ExtendedParams'] = self.extended_params
        if self.mi_channel_id is not None:
            result['MiChannelId'] = self.mi_channel_id
        if self.notify_type is not None:
            result['NotifyType'] = self.notify_type
        if self.push_action is not None:
            result['PushAction'] = self.push_action
        if self.silent is not None:
            result['Silent'] = self.silent
        if self.sms_sign_name is not None:
            result['SmsSignName'] = self.sms_sign_name
        if self.sms_strategy is not None:
            result['SmsStrategy'] = self.sms_strategy
        if self.sms_template_code is not None:
            result['SmsTemplateCode'] = self.sms_template_code
        if self.sms_template_param is not None:
            result['SmsTemplateParam'] = self.sms_template_param
        if self.strategy_content is not None:
            result['StrategyContent'] = self.strategy_content
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.target_msgkey is not None:
            result['TargetMsgkey'] = self.target_msgkey
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_key_value is not None:
            result['TemplateKeyValue'] = self.template_key_value
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.third_channel_category_shrink is not None:
            result['ThirdChannelCategory'] = self.third_channel_category_shrink
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Classification') is not None:
            self.classification = m.get('Classification')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExpiredSeconds') is not None:
            self.expired_seconds = m.get('ExpiredSeconds')
        if m.get('ExtendedParams') is not None:
            self.extended_params = m.get('ExtendedParams')
        if m.get('MiChannelId') is not None:
            self.mi_channel_id = m.get('MiChannelId')
        if m.get('NotifyType') is not None:
            self.notify_type = m.get('NotifyType')
        if m.get('PushAction') is not None:
            self.push_action = m.get('PushAction')
        if m.get('Silent') is not None:
            self.silent = m.get('Silent')
        if m.get('SmsSignName') is not None:
            self.sms_sign_name = m.get('SmsSignName')
        if m.get('SmsStrategy') is not None:
            self.sms_strategy = m.get('SmsStrategy')
        if m.get('SmsTemplateCode') is not None:
            self.sms_template_code = m.get('SmsTemplateCode')
        if m.get('SmsTemplateParam') is not None:
            self.sms_template_param = m.get('SmsTemplateParam')
        if m.get('StrategyContent') is not None:
            self.strategy_content = m.get('StrategyContent')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('TargetMsgkey') is not None:
            self.target_msgkey = m.get('TargetMsgkey')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateKeyValue') is not None:
            self.template_key_value = m.get('TemplateKeyValue')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('ThirdChannelCategory') is not None:
            self.third_channel_category_shrink = m.get('ThirdChannelCategory')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushTemplateResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushTemplateResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PushTemplateResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: PushTemplateResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(PushTemplateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = PushTemplateResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class PushTemplateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PushTemplateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PushTemplateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PushTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PushUnBindRequest(TeaModel):
    def __init__(self, app_id=None, delivery_token=None, user_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.delivery_token = delivery_token  # type: str
        self.user_id = user_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushUnBindRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.delivery_token is not None:
            result['DeliveryToken'] = self.delivery_token
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DeliveryToken') is not None:
            self.delivery_token = m.get('DeliveryToken')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class PushUnBindResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PushUnBindResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PushUnBindResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: PushUnBindResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(PushUnBindResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = PushUnBindResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class PushUnBindResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PushUnBindResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PushUnBindResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PushUnBindResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMappCenterAppRequest(TeaModel):
    def __init__(self, app_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMappCenterAppRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig(TeaModel):
    def __init__(self, cert_rsa=None, package_name=None):
        self.cert_rsa = cert_rsa  # type: str
        self.package_name = package_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_rsa is not None:
            result['CertRSA'] = self.cert_rsa
        if self.package_name is not None:
            result['PackageName'] = self.package_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CertRSA') is not None:
            self.cert_rsa = m.get('CertRSA')
        if m.get('PackageName') is not None:
            self.package_name = m.get('PackageName')
        return self


class QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig(TeaModel):
    def __init__(self, bundle_id=None):
        self.bundle_id = bundle_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bundle_id is not None:
            result['BundleId'] = self.bundle_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BundleId') is not None:
            self.bundle_id = m.get('BundleId')
        return self


class QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp(TeaModel):
    def __init__(self, android_config=None, app_desc=None, app_icon=None, app_id=None, app_name=None,
                 app_secret=None, creator=None, gmt_create=None, gmt_modified=None, id=None, ios_config=None, modifier=None,
                 monitor_json=None, status=None, tenant_id=None, type=None):
        self.android_config = android_config  # type: QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig
        self.app_desc = app_desc  # type: str
        self.app_icon = app_icon  # type: str
        self.app_id = app_id  # type: str
        self.app_name = app_name  # type: str
        self.app_secret = app_secret  # type: str
        self.creator = creator  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.ios_config = ios_config  # type: QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig
        self.modifier = modifier  # type: str
        self.monitor_json = monitor_json  # type: str
        self.status = status  # type: long
        self.tenant_id = tenant_id  # type: str
        self.type = type  # type: long

    def validate(self):
        if self.android_config:
            self.android_config.validate()
        if self.ios_config:
            self.ios_config.validate()

    def to_map(self):
        _map = super(QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.android_config is not None:
            result['AndroidConfig'] = self.android_config.to_map()
        if self.app_desc is not None:
            result['AppDesc'] = self.app_desc
        if self.app_icon is not None:
            result['AppIcon'] = self.app_icon
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.app_secret is not None:
            result['AppSecret'] = self.app_secret
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.ios_config is not None:
            result['IosConfig'] = self.ios_config.to_map()
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.monitor_json is not None:
            result['MonitorJson'] = self.monitor_json
        if self.status is not None:
            result['Status'] = self.status
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AndroidConfig') is not None:
            temp_model = QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig()
            self.android_config = temp_model.from_map(m['AndroidConfig'])
        if m.get('AppDesc') is not None:
            self.app_desc = m.get('AppDesc')
        if m.get('AppIcon') is not None:
            self.app_icon = m.get('AppIcon')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('AppSecret') is not None:
            self.app_secret = m.get('AppSecret')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IosConfig') is not None:
            temp_model = QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig()
            self.ios_config = temp_model.from_map(m['IosConfig'])
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('MonitorJson') is not None:
            self.monitor_json = m.get('MonitorJson')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryMappCenterAppResponseBodyQueryMappCenterAppResult(TeaModel):
    def __init__(self, mapp_center_app=None, result_msg=None, success=None):
        self.mapp_center_app = mapp_center_app  # type: QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.mapp_center_app:
            self.mapp_center_app.validate()

    def to_map(self):
        _map = super(QueryMappCenterAppResponseBodyQueryMappCenterAppResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mapp_center_app is not None:
            result['MappCenterApp'] = self.mapp_center_app.to_map()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MappCenterApp') is not None:
            temp_model = QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp()
            self.mapp_center_app = temp_model.from_map(m['MappCenterApp'])
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMappCenterAppResponseBody(TeaModel):
    def __init__(self, query_mapp_center_app_result=None, request_id=None, result_code=None, result_message=None):
        self.query_mapp_center_app_result = query_mapp_center_app_result  # type: QueryMappCenterAppResponseBodyQueryMappCenterAppResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.query_mapp_center_app_result:
            self.query_mapp_center_app_result.validate()

    def to_map(self):
        _map = super(QueryMappCenterAppResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.query_mapp_center_app_result is not None:
            result['QueryMappCenterAppResult'] = self.query_mapp_center_app_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('QueryMappCenterAppResult') is not None:
            temp_model = QueryMappCenterAppResponseBodyQueryMappCenterAppResult()
            self.query_mapp_center_app_result = temp_model.from_map(m['QueryMappCenterAppResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMappCenterAppResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMappCenterAppResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMappCenterAppResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMappCenterAppResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMcdpAimRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcdpAimRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMcdpAimResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcdpAimResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMcdpAimResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryMcdpAimResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryMcdpAimResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryMcdpAimResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMcdpAimResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMcdpAimResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMcdpAimResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMcdpAimResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMcdpZoneRequest(TeaModel):
    def __init__(self, app_id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcdpZoneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMcdpZoneResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcdpZoneResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMcdpZoneResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryMcdpZoneResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryMcdpZoneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryMcdpZoneResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMcdpZoneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMcdpZoneResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMcdpZoneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMcdpZoneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMcubeMiniPackageRequest(TeaModel):
    def __init__(self, app_id=None, h_5id=None, id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.h_5id = h_5id  # type: str
        self.id = id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcubeMiniPackageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo(TeaModel):
    def __init__(self, app_code=None, auto_install=None, client_version_max=None, client_version_min=None,
                 download_url=None, extend_info=None, extra_data=None, fallback_base_url=None, gmt_create=None,
                 gmt_modified=None, h_5id=None, h_5name=None, h_5version=None, id=None, install_type=None, main_url=None,
                 memo=None, package_type=None, platform=None, publish_period=None, resource_type=None, status=None):
        self.app_code = app_code  # type: str
        self.auto_install = auto_install  # type: long
        self.client_version_max = client_version_max  # type: str
        self.client_version_min = client_version_min  # type: str
        self.download_url = download_url  # type: str
        self.extend_info = extend_info  # type: str
        self.extra_data = extra_data  # type: str
        self.fallback_base_url = fallback_base_url  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.h_5version = h_5version  # type: str
        self.id = id  # type: long
        self.install_type = install_type  # type: long
        self.main_url = main_url  # type: str
        self.memo = memo  # type: str
        self.package_type = package_type  # type: long
        self.platform = platform  # type: str
        self.publish_period = publish_period  # type: long
        self.resource_type = resource_type  # type: long
        self.status = status  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.auto_install is not None:
            result['AutoInstall'] = self.auto_install
        if self.client_version_max is not None:
            result['ClientVersionMax'] = self.client_version_max
        if self.client_version_min is not None:
            result['ClientVersionMin'] = self.client_version_min
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info
        if self.extra_data is not None:
            result['ExtraData'] = self.extra_data
        if self.fallback_base_url is not None:
            result['FallbackBaseUrl'] = self.fallback_base_url
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.h_5version is not None:
            result['H5Version'] = self.h_5version
        if self.id is not None:
            result['Id'] = self.id
        if self.install_type is not None:
            result['InstallType'] = self.install_type
        if self.main_url is not None:
            result['MainUrl'] = self.main_url
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.publish_period is not None:
            result['PublishPeriod'] = self.publish_period
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AutoInstall') is not None:
            self.auto_install = m.get('AutoInstall')
        if m.get('ClientVersionMax') is not None:
            self.client_version_max = m.get('ClientVersionMax')
        if m.get('ClientVersionMin') is not None:
            self.client_version_min = m.get('ClientVersionMin')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('ExtendInfo') is not None:
            self.extend_info = m.get('ExtendInfo')
        if m.get('ExtraData') is not None:
            self.extra_data = m.get('ExtraData')
        if m.get('FallbackBaseUrl') is not None:
            self.fallback_base_url = m.get('FallbackBaseUrl')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('H5Version') is not None:
            self.h_5version = m.get('H5Version')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstallType') is not None:
            self.install_type = m.get('InstallType')
        if m.get('MainUrl') is not None:
            self.main_url = m.get('MainUrl')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('PublishPeriod') is not None:
            self.publish_period = m.get('PublishPeriod')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult(TeaModel):
    def __init__(self, mini_package_info=None, result_msg=None, success=None):
        self.mini_package_info = mini_package_info  # type: QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.mini_package_info:
            self.mini_package_info.validate()

    def to_map(self):
        _map = super(QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mini_package_info is not None:
            result['MiniPackageInfo'] = self.mini_package_info.to_map()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MiniPackageInfo') is not None:
            temp_model = QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo()
            self.mini_package_info = temp_model.from_map(m['MiniPackageInfo'])
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMcubeMiniPackageResponseBody(TeaModel):
    def __init__(self, query_mini_package_result=None, request_id=None, result_code=None, result_message=None):
        self.query_mini_package_result = query_mini_package_result  # type: QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.query_mini_package_result:
            self.query_mini_package_result.validate()

    def to_map(self):
        _map = super(QueryMcubeMiniPackageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.query_mini_package_result is not None:
            result['QueryMiniPackageResult'] = self.query_mini_package_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('QueryMiniPackageResult') is not None:
            temp_model = QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult()
            self.query_mini_package_result = temp_model.from_map(m['QueryMiniPackageResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMcubeMiniPackageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMcubeMiniPackageResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMcubeMiniPackageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMcubeMiniPackageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMcubeMiniTaskRequest(TeaModel):
    def __init__(self, app_id=None, task_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.task_id = task_id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcubeMiniTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo(TeaModel):
    def __init__(self, app_code=None, gmt_create=None, gmt_modified=None, grey_config_info=None, grey_endtime=None,
                 grey_endtime_data=None, grey_num=None, id=None, memo=None, package_id=None, platform=None, product_version=None,
                 publish_mode=None, publish_type=None, status=None, task_status=None, whitelist_ids=None):
        self.app_code = app_code  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime = grey_endtime  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_num = grey_num  # type: long
        self.id = id  # type: long
        self.memo = memo  # type: str
        self.package_id = package_id  # type: long
        self.platform = platform  # type: str
        self.product_version = product_version  # type: str
        self.publish_mode = publish_mode  # type: long
        self.publish_type = publish_type  # type: long
        self.status = status  # type: str
        self.task_status = task_status  # type: long
        self.whitelist_ids = whitelist_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime is not None:
            result['GreyEndtime'] = self.grey_endtime
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.id is not None:
            result['Id'] = self.id
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.status is not None:
            result['Status'] = self.status
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtime') is not None:
            self.grey_endtime = m.get('GreyEndtime')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        return self


class QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult(TeaModel):
    def __init__(self, mini_task_info=None, result_msg=None, success=None):
        self.mini_task_info = mini_task_info  # type: QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.mini_task_info:
            self.mini_task_info.validate()

    def to_map(self):
        _map = super(QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mini_task_info is not None:
            result['MiniTaskInfo'] = self.mini_task_info.to_map()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MiniTaskInfo') is not None:
            temp_model = QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo()
            self.mini_task_info = temp_model.from_map(m['MiniTaskInfo'])
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMcubeMiniTaskResponseBody(TeaModel):
    def __init__(self, query_mini_task_result=None, request_id=None, result_code=None, result_message=None):
        self.query_mini_task_result = query_mini_task_result  # type: QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.query_mini_task_result:
            self.query_mini_task_result.validate()

    def to_map(self):
        _map = super(QueryMcubeMiniTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.query_mini_task_result is not None:
            result['QueryMiniTaskResult'] = self.query_mini_task_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('QueryMiniTaskResult') is not None:
            temp_model = QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult()
            self.query_mini_task_result = temp_model.from_map(m['QueryMiniTaskResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMcubeMiniTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMcubeMiniTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMcubeMiniTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMcubeMiniTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMcubeVhostRequest(TeaModel):
    def __init__(self, app_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcubeVhostRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMcubeVhostResponseBodyQueryVhostResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMcubeVhostResponseBodyQueryVhostResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMcubeVhostResponseBody(TeaModel):
    def __init__(self, query_vhost_result=None, request_id=None, result_code=None, result_message=None):
        self.query_vhost_result = query_vhost_result  # type: QueryMcubeVhostResponseBodyQueryVhostResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.query_vhost_result:
            self.query_vhost_result.validate()

    def to_map(self):
        _map = super(QueryMcubeVhostResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.query_vhost_result is not None:
            result['QueryVhostResult'] = self.query_vhost_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('QueryVhostResult') is not None:
            temp_model = QueryMcubeVhostResponseBodyQueryVhostResult()
            self.query_vhost_result = temp_model.from_map(m['QueryVhostResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMcubeVhostResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMcubeVhostResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMcubeVhostResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMcubeVhostResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMdsUpgradeTaskDetailRequest(TeaModel):
    def __init__(self, app_id=None, task_id=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.task_id = task_id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList(TeaModel):
    def __init__(self, operation=None, rule_element=None, rule_type=None, value=None):
        self.operation = operation  # type: str
        self.rule_element = rule_element  # type: str
        self.rule_type = rule_type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation is not None:
            result['Operation'] = self.operation
        if self.rule_element is not None:
            result['RuleElement'] = self.rule_element
        if self.rule_type is not None:
            result['RuleType'] = self.rule_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Operation') is not None:
            self.operation = m.get('Operation')
        if m.get('RuleElement') is not None:
            self.rule_element = m.get('RuleElement')
        if m.get('RuleType') is not None:
            self.rule_type = m.get('RuleType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist(TeaModel):
    def __init__(self, app_code=None, business=None, gmt_modified=None, id=None, id_type=None, platform=None,
                 status=None, white_list_count=None, white_list_name=None):
        self.app_code = app_code  # type: str
        self.business = business  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.id_type = id_type  # type: str
        self.platform = platform  # type: str
        self.status = status  # type: long
        self.white_list_count = white_list_count  # type: long
        self.white_list_name = white_list_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.business is not None:
            result['Business'] = self.business
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.id_type is not None:
            result['IdType'] = self.id_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.status is not None:
            result['Status'] = self.status
        if self.white_list_count is not None:
            result['WhiteListCount'] = self.white_list_count
        if self.white_list_name is not None:
            result['WhiteListName'] = self.white_list_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('Business') is not None:
            self.business = m.get('Business')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IdType') is not None:
            self.id_type = m.get('IdType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('WhiteListCount') is not None:
            self.white_list_count = m.get('WhiteListCount')
        if m.get('WhiteListName') is not None:
            self.white_list_name = m.get('WhiteListName')
        return self


class QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent(TeaModel):
    def __init__(self, app_code=None, app_id=None, appstoreurl=None, channel_contains=None, channel_excludes=None,
                 city_contains=None, city_excludes=None, creator=None, device_grey_num=None, device_percent=None,
                 download_url=None, execution_order=None, gmt_create_str=None, grey_config_info=None, grey_endtime_data=None,
                 grey_notice=None, grey_num=None, grey_uv=None, id=None, inner_version=None, is_enterprise=None,
                 is_official=None, is_push=None, is_rc=None, is_release=None, memo=None, mobile_model_contains=None,
                 mobile_model_excludes=None, modifier=None, net_type=None, os_version=None, package_info_id=None, package_type=None,
                 platform=None, product_id=None, product_version=None, publish_mode=None, publish_type=None,
                 push_content=None, qrcode_url=None, release_type=None, rule_json_list=None, silent_type=None, sync_mode=None,
                 sync_result=None, task_status=None, upgrade_content=None, upgrade_type=None, upgrade_valid_time=None,
                 whitelist=None, whitelist_ids=None):
        self.app_code = app_code  # type: str
        self.app_id = app_id  # type: str
        self.appstoreurl = appstoreurl  # type: str
        self.channel_contains = channel_contains  # type: str
        self.channel_excludes = channel_excludes  # type: str
        self.city_contains = city_contains  # type: str
        self.city_excludes = city_excludes  # type: str
        self.creator = creator  # type: str
        self.device_grey_num = device_grey_num  # type: long
        self.device_percent = device_percent  # type: long
        self.download_url = download_url  # type: str
        self.execution_order = execution_order  # type: long
        self.gmt_create_str = gmt_create_str  # type: str
        self.grey_config_info = grey_config_info  # type: str
        self.grey_endtime_data = grey_endtime_data  # type: str
        self.grey_notice = grey_notice  # type: long
        self.grey_num = grey_num  # type: long
        self.grey_uv = grey_uv  # type: long
        self.id = id  # type: long
        self.inner_version = inner_version  # type: str
        self.is_enterprise = is_enterprise  # type: long
        self.is_official = is_official  # type: long
        self.is_push = is_push  # type: long
        self.is_rc = is_rc  # type: long
        self.is_release = is_release  # type: long
        self.memo = memo  # type: str
        self.mobile_model_contains = mobile_model_contains  # type: str
        self.mobile_model_excludes = mobile_model_excludes  # type: str
        self.modifier = modifier  # type: str
        self.net_type = net_type  # type: str
        self.os_version = os_version  # type: str
        self.package_info_id = package_info_id  # type: long
        self.package_type = package_type  # type: str
        self.platform = platform  # type: str
        self.product_id = product_id  # type: str
        self.product_version = product_version  # type: str
        self.publish_mode = publish_mode  # type: long
        self.publish_type = publish_type  # type: long
        self.push_content = push_content  # type: str
        self.qrcode_url = qrcode_url  # type: str
        self.release_type = release_type  # type: str
        self.rule_json_list = rule_json_list  # type: list[QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList]
        self.silent_type = silent_type  # type: long
        self.sync_mode = sync_mode  # type: str
        self.sync_result = sync_result  # type: str
        self.task_status = task_status  # type: long
        self.upgrade_content = upgrade_content  # type: str
        self.upgrade_type = upgrade_type  # type: long
        self.upgrade_valid_time = upgrade_valid_time  # type: long
        self.whitelist = whitelist  # type: list[QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist]
        self.whitelist_ids = whitelist_ids  # type: str

    def validate(self):
        if self.rule_json_list:
            for k in self.rule_json_list:
                if k:
                    k.validate()
        if self.whitelist:
            for k in self.whitelist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.appstoreurl is not None:
            result['Appstoreurl'] = self.appstoreurl
        if self.channel_contains is not None:
            result['ChannelContains'] = self.channel_contains
        if self.channel_excludes is not None:
            result['ChannelExcludes'] = self.channel_excludes
        if self.city_contains is not None:
            result['CityContains'] = self.city_contains
        if self.city_excludes is not None:
            result['CityExcludes'] = self.city_excludes
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.device_grey_num is not None:
            result['DeviceGreyNum'] = self.device_grey_num
        if self.device_percent is not None:
            result['DevicePercent'] = self.device_percent
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.execution_order is not None:
            result['ExecutionOrder'] = self.execution_order
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.grey_config_info is not None:
            result['GreyConfigInfo'] = self.grey_config_info
        if self.grey_endtime_data is not None:
            result['GreyEndtimeData'] = self.grey_endtime_data
        if self.grey_notice is not None:
            result['GreyNotice'] = self.grey_notice
        if self.grey_num is not None:
            result['GreyNum'] = self.grey_num
        if self.grey_uv is not None:
            result['GreyUv'] = self.grey_uv
        if self.id is not None:
            result['Id'] = self.id
        if self.inner_version is not None:
            result['InnerVersion'] = self.inner_version
        if self.is_enterprise is not None:
            result['IsEnterprise'] = self.is_enterprise
        if self.is_official is not None:
            result['IsOfficial'] = self.is_official
        if self.is_push is not None:
            result['IsPush'] = self.is_push
        if self.is_rc is not None:
            result['IsRc'] = self.is_rc
        if self.is_release is not None:
            result['IsRelease'] = self.is_release
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.mobile_model_contains is not None:
            result['MobileModelContains'] = self.mobile_model_contains
        if self.mobile_model_excludes is not None:
            result['MobileModelExcludes'] = self.mobile_model_excludes
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.net_type is not None:
            result['NetType'] = self.net_type
        if self.os_version is not None:
            result['OsVersion'] = self.os_version
        if self.package_info_id is not None:
            result['PackageInfoId'] = self.package_info_id
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_version is not None:
            result['ProductVersion'] = self.product_version
        if self.publish_mode is not None:
            result['PublishMode'] = self.publish_mode
        if self.publish_type is not None:
            result['PublishType'] = self.publish_type
        if self.push_content is not None:
            result['PushContent'] = self.push_content
        if self.qrcode_url is not None:
            result['QrcodeUrl'] = self.qrcode_url
        if self.release_type is not None:
            result['ReleaseType'] = self.release_type
        result['RuleJsonList'] = []
        if self.rule_json_list is not None:
            for k in self.rule_json_list:
                result['RuleJsonList'].append(k.to_map() if k else None)
        if self.silent_type is not None:
            result['SilentType'] = self.silent_type
        if self.sync_mode is not None:
            result['SyncMode'] = self.sync_mode
        if self.sync_result is not None:
            result['SyncResult'] = self.sync_result
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.upgrade_content is not None:
            result['UpgradeContent'] = self.upgrade_content
        if self.upgrade_type is not None:
            result['UpgradeType'] = self.upgrade_type
        if self.upgrade_valid_time is not None:
            result['UpgradeValidTime'] = self.upgrade_valid_time
        result['Whitelist'] = []
        if self.whitelist is not None:
            for k in self.whitelist:
                result['Whitelist'].append(k.to_map() if k else None)
        if self.whitelist_ids is not None:
            result['WhitelistIds'] = self.whitelist_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Appstoreurl') is not None:
            self.appstoreurl = m.get('Appstoreurl')
        if m.get('ChannelContains') is not None:
            self.channel_contains = m.get('ChannelContains')
        if m.get('ChannelExcludes') is not None:
            self.channel_excludes = m.get('ChannelExcludes')
        if m.get('CityContains') is not None:
            self.city_contains = m.get('CityContains')
        if m.get('CityExcludes') is not None:
            self.city_excludes = m.get('CityExcludes')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DeviceGreyNum') is not None:
            self.device_grey_num = m.get('DeviceGreyNum')
        if m.get('DevicePercent') is not None:
            self.device_percent = m.get('DevicePercent')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('ExecutionOrder') is not None:
            self.execution_order = m.get('ExecutionOrder')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('GreyConfigInfo') is not None:
            self.grey_config_info = m.get('GreyConfigInfo')
        if m.get('GreyEndtimeData') is not None:
            self.grey_endtime_data = m.get('GreyEndtimeData')
        if m.get('GreyNotice') is not None:
            self.grey_notice = m.get('GreyNotice')
        if m.get('GreyNum') is not None:
            self.grey_num = m.get('GreyNum')
        if m.get('GreyUv') is not None:
            self.grey_uv = m.get('GreyUv')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InnerVersion') is not None:
            self.inner_version = m.get('InnerVersion')
        if m.get('IsEnterprise') is not None:
            self.is_enterprise = m.get('IsEnterprise')
        if m.get('IsOfficial') is not None:
            self.is_official = m.get('IsOfficial')
        if m.get('IsPush') is not None:
            self.is_push = m.get('IsPush')
        if m.get('IsRc') is not None:
            self.is_rc = m.get('IsRc')
        if m.get('IsRelease') is not None:
            self.is_release = m.get('IsRelease')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('MobileModelContains') is not None:
            self.mobile_model_contains = m.get('MobileModelContains')
        if m.get('MobileModelExcludes') is not None:
            self.mobile_model_excludes = m.get('MobileModelExcludes')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('NetType') is not None:
            self.net_type = m.get('NetType')
        if m.get('OsVersion') is not None:
            self.os_version = m.get('OsVersion')
        if m.get('PackageInfoId') is not None:
            self.package_info_id = m.get('PackageInfoId')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductVersion') is not None:
            self.product_version = m.get('ProductVersion')
        if m.get('PublishMode') is not None:
            self.publish_mode = m.get('PublishMode')
        if m.get('PublishType') is not None:
            self.publish_type = m.get('PublishType')
        if m.get('PushContent') is not None:
            self.push_content = m.get('PushContent')
        if m.get('QrcodeUrl') is not None:
            self.qrcode_url = m.get('QrcodeUrl')
        if m.get('ReleaseType') is not None:
            self.release_type = m.get('ReleaseType')
        self.rule_json_list = []
        if m.get('RuleJsonList') is not None:
            for k in m.get('RuleJsonList'):
                temp_model = QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList()
                self.rule_json_list.append(temp_model.from_map(k))
        if m.get('SilentType') is not None:
            self.silent_type = m.get('SilentType')
        if m.get('SyncMode') is not None:
            self.sync_mode = m.get('SyncMode')
        if m.get('SyncResult') is not None:
            self.sync_result = m.get('SyncResult')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('UpgradeContent') is not None:
            self.upgrade_content = m.get('UpgradeContent')
        if m.get('UpgradeType') is not None:
            self.upgrade_type = m.get('UpgradeType')
        if m.get('UpgradeValidTime') is not None:
            self.upgrade_valid_time = m.get('UpgradeValidTime')
        self.whitelist = []
        if m.get('Whitelist') is not None:
            for k in m.get('Whitelist'):
                temp_model = QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist()
                self.whitelist.append(temp_model.from_map(k))
        if m.get('WhitelistIds') is not None:
            self.whitelist_ids = m.get('WhitelistIds')
        return self


class QueryMdsUpgradeTaskDetailResponseBodyResultContentData(TeaModel):
    def __init__(self, content=None, error_code=None, request_id=None, result_msg=None, success=None):
        self.content = content  # type: QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent
        self.error_code = error_code  # type: str
        self.request_id = request_id  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMdsUpgradeTaskDetailResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: QueryMdsUpgradeTaskDetailResponseBodyResultContentData
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = QueryMdsUpgradeTaskDetailResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryMdsUpgradeTaskDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryMdsUpgradeTaskDetailResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryMdsUpgradeTaskDetailResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMdsUpgradeTaskDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMdsUpgradeTaskDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMdsUpgradeTaskDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMdsUpgradeTaskDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMgsApipageRequest(TeaModel):
    def __init__(self, api_status=None, api_type=None, app_id=None, format=None, host=None, need_encrypt=None,
                 need_etag=None, need_sign=None, operation_type=None, opt_fuzzy=None, page_index=None, page_size=None,
                 sys_id=None, sys_name=None, tenant_id=None, workspace_id=None):
        self.api_status = api_status  # type: str
        self.api_type = api_type  # type: str
        self.app_id = app_id  # type: str
        self.format = format  # type: str
        self.host = host  # type: str
        self.need_encrypt = need_encrypt  # type: str
        self.need_etag = need_etag  # type: str
        self.need_sign = need_sign  # type: str
        self.operation_type = operation_type  # type: str
        self.opt_fuzzy = opt_fuzzy  # type: str
        self.page_index = page_index  # type: long
        self.page_size = page_size  # type: long
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_status is not None:
            result['ApiStatus'] = self.api_status
        if self.api_type is not None:
            result['ApiType'] = self.api_type
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.format is not None:
            result['Format'] = self.format
        if self.host is not None:
            result['Host'] = self.host
        if self.need_encrypt is not None:
            result['NeedEncrypt'] = self.need_encrypt
        if self.need_etag is not None:
            result['NeedEtag'] = self.need_etag
        if self.need_sign is not None:
            result['NeedSign'] = self.need_sign
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.opt_fuzzy is not None:
            result['OptFuzzy'] = self.opt_fuzzy
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiStatus') is not None:
            self.api_status = m.get('ApiStatus')
        if m.get('ApiType') is not None:
            self.api_type = m.get('ApiType')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Format') is not None:
            self.format = m.get('Format')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('NeedEncrypt') is not None:
            self.need_encrypt = m.get('NeedEncrypt')
        if m.get('NeedEtag') is not None:
            self.need_etag = m.get('NeedEtag')
        if m.get('NeedSign') is not None:
            self.need_sign = m.get('NeedSign')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('OptFuzzy') is not None:
            self.opt_fuzzy = m.get('OptFuzzy')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker(TeaModel):
    def __init__(self, charset=None, content_type=None, host=None, method=None, path=None):
        self.charset = charset  # type: str
        self.content_type = content_type  # type: str
        self.host = host  # type: str
        self.method = method  # type: str
        self.path = path  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.charset is not None:
            result['Charset'] = self.charset
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.host is not None:
            result['Host'] = self.host
        if self.method is not None:
            result['Method'] = self.method
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Charset') is not None:
            self.charset = m.get('Charset')
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class QueryMgsApipageResponseBodyResultContentListApiInvoker(TeaModel):
    def __init__(self, http_invoker=None, rpc_invoker=None):
        self.http_invoker = http_invoker  # type: QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker
        self.rpc_invoker = rpc_invoker  # type: str

    def validate(self):
        if self.http_invoker:
            self.http_invoker.validate()

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListApiInvoker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.http_invoker is not None:
            result['HttpInvoker'] = self.http_invoker.to_map()
        if self.rpc_invoker is not None:
            result['RpcInvoker'] = self.rpc_invoker
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HttpInvoker') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker()
            self.http_invoker = temp_model.from_map(m['HttpInvoker'])
        if m.get('RpcInvoker') is not None:
            self.rpc_invoker = m.get('RpcInvoker')
        return self


class QueryMgsApipageResponseBodyResultContentListCacheRule(TeaModel):
    def __init__(self, cache_key=None, need_cache=None, ttl=None):
        self.cache_key = cache_key  # type: str
        self.need_cache = need_cache  # type: bool
        self.ttl = ttl  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListCacheRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cache_key is not None:
            result['CacheKey'] = self.cache_key
        if self.need_cache is not None:
            result['NeedCache'] = self.need_cache
        if self.ttl is not None:
            result['Ttl'] = self.ttl
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CacheKey') is not None:
            self.cache_key = m.get('CacheKey')
        if m.get('NeedCache') is not None:
            self.need_cache = m.get('NeedCache')
        if m.get('Ttl') is not None:
            self.ttl = m.get('Ttl')
        return self


class QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule(TeaModel):
    def __init__(self, app_id=None, default_response=None, error_threshold=None, id=None, model=None,
                 open_timeout_seconds=None, slow_ratio_threshold=None, switch_status=None, windows_in_seconds=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.default_response = default_response  # type: str
        self.error_threshold = error_threshold  # type: long
        self.id = id  # type: long
        self.model = model  # type: str
        self.open_timeout_seconds = open_timeout_seconds  # type: long
        self.slow_ratio_threshold = slow_ratio_threshold  # type: float
        self.switch_status = switch_status  # type: str
        self.windows_in_seconds = windows_in_seconds  # type: long
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.default_response is not None:
            result['DefaultResponse'] = self.default_response
        if self.error_threshold is not None:
            result['ErrorThreshold'] = self.error_threshold
        if self.id is not None:
            result['Id'] = self.id
        if self.model is not None:
            result['Model'] = self.model
        if self.open_timeout_seconds is not None:
            result['OpenTimeoutSeconds'] = self.open_timeout_seconds
        if self.slow_ratio_threshold is not None:
            result['SlowRatioThreshold'] = self.slow_ratio_threshold
        if self.switch_status is not None:
            result['SwitchStatus'] = self.switch_status
        if self.windows_in_seconds is not None:
            result['WindowsInSeconds'] = self.windows_in_seconds
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DefaultResponse') is not None:
            self.default_response = m.get('DefaultResponse')
        if m.get('ErrorThreshold') is not None:
            self.error_threshold = m.get('ErrorThreshold')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OpenTimeoutSeconds') is not None:
            self.open_timeout_seconds = m.get('OpenTimeoutSeconds')
        if m.get('SlowRatioThreshold') is not None:
            self.slow_ratio_threshold = m.get('SlowRatioThreshold')
        if m.get('SwitchStatus') is not None:
            self.switch_status = m.get('SwitchStatus')
        if m.get('WindowsInSeconds') is not None:
            self.windows_in_seconds = m.get('WindowsInSeconds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApipageResponseBodyResultContentListHeaderRule(TeaModel):
    def __init__(self, header_key=None, location=None, type=None, value=None):
        self.header_key = header_key  # type: str
        self.location = location  # type: str
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListHeaderRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.header_key is not None:
            result['HeaderKey'] = self.header_key
        if self.location is not None:
            result['Location'] = self.location
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HeaderKey') is not None:
            self.header_key = m.get('HeaderKey')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryMgsApipageResponseBodyResultContentListHeaderRules(TeaModel):
    def __init__(self, header_key=None, location=None, type=None, value=None):
        self.header_key = header_key  # type: str
        self.location = location  # type: str
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListHeaderRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.header_key is not None:
            result['HeaderKey'] = self.header_key
        if self.location is not None:
            result['Location'] = self.location
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HeaderKey') is not None:
            self.header_key = m.get('HeaderKey')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryMgsApipageResponseBodyResultContentListLimitRule(TeaModel):
    def __init__(self, default_response=None, i_18n_response=None, interval=None, limit=None, mode=None):
        self.default_response = default_response  # type: str
        self.i_18n_response = i_18n_response  # type: str
        self.interval = interval  # type: long
        self.limit = limit  # type: long
        self.mode = mode  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListLimitRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.default_response is not None:
            result['DefaultResponse'] = self.default_response
        if self.i_18n_response is not None:
            result['I18nResponse'] = self.i_18n_response
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.mode is not None:
            result['Mode'] = self.mode
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DefaultResponse') is not None:
            self.default_response = m.get('DefaultResponse')
        if m.get('I18nResponse') is not None:
            self.i_18n_response = m.get('I18nResponse')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        return self


class QueryMgsApipageResponseBodyResultContentListMigrateRule(TeaModel):
    def __init__(self, flow_percent=None, need_migrate=None, need_switch_completely=None, sys_id=None,
                 sys_name=None, upstream_type=None):
        self.flow_percent = flow_percent  # type: long
        self.need_migrate = need_migrate  # type: bool
        self.need_switch_completely = need_switch_completely  # type: bool
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.upstream_type = upstream_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListMigrateRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_percent is not None:
            result['FlowPercent'] = self.flow_percent
        if self.need_migrate is not None:
            result['NeedMigrate'] = self.need_migrate
        if self.need_switch_completely is not None:
            result['NeedSwitchCompletely'] = self.need_switch_completely
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.upstream_type is not None:
            result['UpstreamType'] = self.upstream_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowPercent') is not None:
            self.flow_percent = m.get('FlowPercent')
        if m.get('NeedMigrate') is not None:
            self.need_migrate = m.get('NeedMigrate')
        if m.get('NeedSwitchCompletely') is not None:
            self.need_switch_completely = m.get('NeedSwitchCompletely')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('UpstreamType') is not None:
            self.upstream_type = m.get('UpstreamType')
        return self


class QueryMgsApipageResponseBodyResultContentListMockRule(TeaModel):
    def __init__(self, mock_data=None, need_mock=None, percentage=None, type=None):
        self.mock_data = mock_data  # type: str
        self.need_mock = need_mock  # type: bool
        self.percentage = percentage  # type: long
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListMockRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mock_data is not None:
            result['MockData'] = self.mock_data
        if self.need_mock is not None:
            result['NeedMock'] = self.need_mock
        if self.percentage is not None:
            result['Percentage'] = self.percentage
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MockData') is not None:
            self.mock_data = m.get('MockData')
        if m.get('NeedMock') is not None:
            self.need_mock = m.get('NeedMock')
        if m.get('Percentage') is not None:
            self.percentage = m.get('Percentage')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryMgsApipageResponseBodyResultContentListRequestParams(TeaModel):
    def __init__(self, api_id=None, app_id=None, default_value=None, description=None, id=None, location=None,
                 name=None, ref_type=None, type=None, workspace_id=None):
        self.api_id = api_id  # type: str
        self.app_id = app_id  # type: str
        self.default_value = default_value  # type: str
        self.description = description  # type: str
        self.id = id  # type: long
        self.location = location  # type: str
        self.name = name  # type: str
        self.ref_type = ref_type  # type: str
        self.type = type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentListRequestParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_id is not None:
            result['ApiId'] = self.api_id
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.default_value is not None:
            result['DefaultValue'] = self.default_value
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.location is not None:
            result['Location'] = self.location
        if self.name is not None:
            result['Name'] = self.name
        if self.ref_type is not None:
            result['RefType'] = self.ref_type
        if self.type is not None:
            result['Type'] = self.type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiId') is not None:
            self.api_id = m.get('ApiId')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DefaultValue') is not None:
            self.default_value = m.get('DefaultValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RefType') is not None:
            self.ref_type = m.get('RefType')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApipageResponseBodyResultContentList(TeaModel):
    def __init__(self, api_invoker=None, api_name=None, api_status=None, api_type=None, app_id=None,
                 auth_rule_name=None, cache_rule=None, charset=None, circuit_breaker_rule=None, content_type=None,
                 description=None, gmt_create=None, gmt_modified=None, header_rule=None, header_rules=None, host=None, id=None,
                 interface_type=None, limit_rule=None, method=None, method_name=None, migrate_rule=None, mock_rule=None,
                 need_etag=None, need_encrypt=None, need_jsonp=None, need_sign=None, operation_type=None,
                 param_get_method=None, path=None, request_body_model=None, request_params=None, response_body_model=None,
                 sys_id=None, sys_name=None, timeout=None, workspace_id=None):
        self.api_invoker = api_invoker  # type: QueryMgsApipageResponseBodyResultContentListApiInvoker
        self.api_name = api_name  # type: str
        self.api_status = api_status  # type: str
        self.api_type = api_type  # type: str
        self.app_id = app_id  # type: str
        self.auth_rule_name = auth_rule_name  # type: str
        self.cache_rule = cache_rule  # type: QueryMgsApipageResponseBodyResultContentListCacheRule
        self.charset = charset  # type: str
        self.circuit_breaker_rule = circuit_breaker_rule  # type: QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule
        self.content_type = content_type  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.header_rule = header_rule  # type: list[QueryMgsApipageResponseBodyResultContentListHeaderRule]
        self.header_rules = header_rules  # type: list[QueryMgsApipageResponseBodyResultContentListHeaderRules]
        self.host = host  # type: str
        self.id = id  # type: long
        self.interface_type = interface_type  # type: str
        self.limit_rule = limit_rule  # type: QueryMgsApipageResponseBodyResultContentListLimitRule
        self.method = method  # type: str
        self.method_name = method_name  # type: str
        self.migrate_rule = migrate_rule  # type: QueryMgsApipageResponseBodyResultContentListMigrateRule
        self.mock_rule = mock_rule  # type: QueryMgsApipageResponseBodyResultContentListMockRule
        self.need_etag = need_etag  # type: str
        self.need_encrypt = need_encrypt  # type: str
        self.need_jsonp = need_jsonp  # type: str
        self.need_sign = need_sign  # type: str
        self.operation_type = operation_type  # type: str
        self.param_get_method = param_get_method  # type: str
        self.path = path  # type: str
        self.request_body_model = request_body_model  # type: str
        self.request_params = request_params  # type: list[QueryMgsApipageResponseBodyResultContentListRequestParams]
        self.response_body_model = response_body_model  # type: str
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.timeout = timeout  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.api_invoker:
            self.api_invoker.validate()
        if self.cache_rule:
            self.cache_rule.validate()
        if self.circuit_breaker_rule:
            self.circuit_breaker_rule.validate()
        if self.header_rule:
            for k in self.header_rule:
                if k:
                    k.validate()
        if self.header_rules:
            for k in self.header_rules:
                if k:
                    k.validate()
        if self.limit_rule:
            self.limit_rule.validate()
        if self.migrate_rule:
            self.migrate_rule.validate()
        if self.mock_rule:
            self.mock_rule.validate()
        if self.request_params:
            for k in self.request_params:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContentList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_invoker is not None:
            result['ApiInvoker'] = self.api_invoker.to_map()
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.api_status is not None:
            result['ApiStatus'] = self.api_status
        if self.api_type is not None:
            result['ApiType'] = self.api_type
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.auth_rule_name is not None:
            result['AuthRuleName'] = self.auth_rule_name
        if self.cache_rule is not None:
            result['CacheRule'] = self.cache_rule.to_map()
        if self.charset is not None:
            result['Charset'] = self.charset
        if self.circuit_breaker_rule is not None:
            result['CircuitBreakerRule'] = self.circuit_breaker_rule.to_map()
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        result['HeaderRule'] = []
        if self.header_rule is not None:
            for k in self.header_rule:
                result['HeaderRule'].append(k.to_map() if k else None)
        result['HeaderRules'] = []
        if self.header_rules is not None:
            for k in self.header_rules:
                result['HeaderRules'].append(k.to_map() if k else None)
        if self.host is not None:
            result['Host'] = self.host
        if self.id is not None:
            result['Id'] = self.id
        if self.interface_type is not None:
            result['InterfaceType'] = self.interface_type
        if self.limit_rule is not None:
            result['LimitRule'] = self.limit_rule.to_map()
        if self.method is not None:
            result['Method'] = self.method
        if self.method_name is not None:
            result['MethodName'] = self.method_name
        if self.migrate_rule is not None:
            result['MigrateRule'] = self.migrate_rule.to_map()
        if self.mock_rule is not None:
            result['MockRule'] = self.mock_rule.to_map()
        if self.need_etag is not None:
            result['NeedETag'] = self.need_etag
        if self.need_encrypt is not None:
            result['NeedEncrypt'] = self.need_encrypt
        if self.need_jsonp is not None:
            result['NeedJsonp'] = self.need_jsonp
        if self.need_sign is not None:
            result['NeedSign'] = self.need_sign
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.param_get_method is not None:
            result['ParamGetMethod'] = self.param_get_method
        if self.path is not None:
            result['Path'] = self.path
        if self.request_body_model is not None:
            result['RequestBodyModel'] = self.request_body_model
        result['RequestParams'] = []
        if self.request_params is not None:
            for k in self.request_params:
                result['RequestParams'].append(k.to_map() if k else None)
        if self.response_body_model is not None:
            result['ResponseBodyModel'] = self.response_body_model
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiInvoker') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContentListApiInvoker()
            self.api_invoker = temp_model.from_map(m['ApiInvoker'])
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('ApiStatus') is not None:
            self.api_status = m.get('ApiStatus')
        if m.get('ApiType') is not None:
            self.api_type = m.get('ApiType')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AuthRuleName') is not None:
            self.auth_rule_name = m.get('AuthRuleName')
        if m.get('CacheRule') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContentListCacheRule()
            self.cache_rule = temp_model.from_map(m['CacheRule'])
        if m.get('Charset') is not None:
            self.charset = m.get('Charset')
        if m.get('CircuitBreakerRule') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule()
            self.circuit_breaker_rule = temp_model.from_map(m['CircuitBreakerRule'])
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        self.header_rule = []
        if m.get('HeaderRule') is not None:
            for k in m.get('HeaderRule'):
                temp_model = QueryMgsApipageResponseBodyResultContentListHeaderRule()
                self.header_rule.append(temp_model.from_map(k))
        self.header_rules = []
        if m.get('HeaderRules') is not None:
            for k in m.get('HeaderRules'):
                temp_model = QueryMgsApipageResponseBodyResultContentListHeaderRules()
                self.header_rules.append(temp_model.from_map(k))
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InterfaceType') is not None:
            self.interface_type = m.get('InterfaceType')
        if m.get('LimitRule') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContentListLimitRule()
            self.limit_rule = temp_model.from_map(m['LimitRule'])
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('MethodName') is not None:
            self.method_name = m.get('MethodName')
        if m.get('MigrateRule') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContentListMigrateRule()
            self.migrate_rule = temp_model.from_map(m['MigrateRule'])
        if m.get('MockRule') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContentListMockRule()
            self.mock_rule = temp_model.from_map(m['MockRule'])
        if m.get('NeedETag') is not None:
            self.need_etag = m.get('NeedETag')
        if m.get('NeedEncrypt') is not None:
            self.need_encrypt = m.get('NeedEncrypt')
        if m.get('NeedJsonp') is not None:
            self.need_jsonp = m.get('NeedJsonp')
        if m.get('NeedSign') is not None:
            self.need_sign = m.get('NeedSign')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('ParamGetMethod') is not None:
            self.param_get_method = m.get('ParamGetMethod')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('RequestBodyModel') is not None:
            self.request_body_model = m.get('RequestBodyModel')
        self.request_params = []
        if m.get('RequestParams') is not None:
            for k in m.get('RequestParams'):
                temp_model = QueryMgsApipageResponseBodyResultContentListRequestParams()
                self.request_params.append(temp_model.from_map(k))
        if m.get('ResponseBodyModel') is not None:
            self.response_body_model = m.get('ResponseBodyModel')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApipageResponseBodyResultContent(TeaModel):
    def __init__(self, current=None, list=None, page_size=None, total=None):
        self.current = current  # type: long
        self.list = list  # type: list[QueryMgsApipageResponseBodyResultContentList]
        self.page_size = page_size  # type: long
        self.total = total  # type: long

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMgsApipageResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryMgsApipageResponseBodyResultContentList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryMgsApipageResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryMgsApipageResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryMgsApipageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryMgsApipageResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMgsApipageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMgsApipageResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMgsApipageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMgsApipageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMgsApirestRequest(TeaModel):
    def __init__(self, app_id=None, format=None, id=None, tenant_id=None, type=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.format = format  # type: str
        self.id = id  # type: long
        self.tenant_id = tenant_id  # type: str
        self.type = type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.format is not None:
            result['Format'] = self.format
        if self.id is not None:
            result['Id'] = self.id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.type is not None:
            result['Type'] = self.type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Format') is not None:
            self.format = m.get('Format')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker(TeaModel):
    def __init__(self, charset=None, content_type=None, host=None, method=None, path=None):
        self.charset = charset  # type: str
        self.content_type = content_type  # type: str
        self.host = host  # type: str
        self.method = method  # type: str
        self.path = path  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.charset is not None:
            result['Charset'] = self.charset
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.host is not None:
            result['Host'] = self.host
        if self.method is not None:
            result['Method'] = self.method
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Charset') is not None:
            self.charset = m.get('Charset')
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class QueryMgsApirestResponseBodyResultContentValueApiInvoker(TeaModel):
    def __init__(self, http_invoker=None, rpc_invoker=None):
        self.http_invoker = http_invoker  # type: QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker
        self.rpc_invoker = rpc_invoker  # type: str

    def validate(self):
        if self.http_invoker:
            self.http_invoker.validate()

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueApiInvoker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.http_invoker is not None:
            result['HttpInvoker'] = self.http_invoker.to_map()
        if self.rpc_invoker is not None:
            result['RpcInvoker'] = self.rpc_invoker
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HttpInvoker') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker()
            self.http_invoker = temp_model.from_map(m['HttpInvoker'])
        if m.get('RpcInvoker') is not None:
            self.rpc_invoker = m.get('RpcInvoker')
        return self


class QueryMgsApirestResponseBodyResultContentValueCacheRule(TeaModel):
    def __init__(self, cache_key=None, need_cache=None, ttl=None):
        self.cache_key = cache_key  # type: str
        self.need_cache = need_cache  # type: bool
        self.ttl = ttl  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueCacheRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cache_key is not None:
            result['CacheKey'] = self.cache_key
        if self.need_cache is not None:
            result['NeedCache'] = self.need_cache
        if self.ttl is not None:
            result['Ttl'] = self.ttl
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CacheKey') is not None:
            self.cache_key = m.get('CacheKey')
        if m.get('NeedCache') is not None:
            self.need_cache = m.get('NeedCache')
        if m.get('Ttl') is not None:
            self.ttl = m.get('Ttl')
        return self


class QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule(TeaModel):
    def __init__(self, app_id=None, default_response=None, error_threshold=None, id=None, model=None,
                 open_timeout_seconds=None, slow_ratio_threshold=None, switch_status=None, windows_in_seconds=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.default_response = default_response  # type: str
        self.error_threshold = error_threshold  # type: long
        self.id = id  # type: long
        self.model = model  # type: str
        self.open_timeout_seconds = open_timeout_seconds  # type: long
        self.slow_ratio_threshold = slow_ratio_threshold  # type: float
        self.switch_status = switch_status  # type: str
        self.windows_in_seconds = windows_in_seconds  # type: long
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.default_response is not None:
            result['DefaultResponse'] = self.default_response
        if self.error_threshold is not None:
            result['ErrorThreshold'] = self.error_threshold
        if self.id is not None:
            result['Id'] = self.id
        if self.model is not None:
            result['Model'] = self.model
        if self.open_timeout_seconds is not None:
            result['OpenTimeoutSeconds'] = self.open_timeout_seconds
        if self.slow_ratio_threshold is not None:
            result['SlowRatioThreshold'] = self.slow_ratio_threshold
        if self.switch_status is not None:
            result['SwitchStatus'] = self.switch_status
        if self.windows_in_seconds is not None:
            result['WindowsInSeconds'] = self.windows_in_seconds
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DefaultResponse') is not None:
            self.default_response = m.get('DefaultResponse')
        if m.get('ErrorThreshold') is not None:
            self.error_threshold = m.get('ErrorThreshold')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OpenTimeoutSeconds') is not None:
            self.open_timeout_seconds = m.get('OpenTimeoutSeconds')
        if m.get('SlowRatioThreshold') is not None:
            self.slow_ratio_threshold = m.get('SlowRatioThreshold')
        if m.get('SwitchStatus') is not None:
            self.switch_status = m.get('SwitchStatus')
        if m.get('WindowsInSeconds') is not None:
            self.windows_in_seconds = m.get('WindowsInSeconds')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule(TeaModel):
    def __init__(self, config_id=None, default_limit=None):
        self.config_id = config_id  # type: int
        self.default_limit = default_limit  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_id is not None:
            result['ConfigId'] = self.config_id
        if self.default_limit is not None:
            result['DefaultLimit'] = self.default_limit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigId') is not None:
            self.config_id = m.get('ConfigId')
        if m.get('DefaultLimit') is not None:
            self.default_limit = m.get('DefaultLimit')
        return self


class QueryMgsApirestResponseBodyResultContentValueHeaderRule(TeaModel):
    def __init__(self, header_key=None, location=None, type=None, value=None):
        self.header_key = header_key  # type: str
        self.location = location  # type: str
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueHeaderRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.header_key is not None:
            result['HeaderKey'] = self.header_key
        if self.location is not None:
            result['Location'] = self.location
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HeaderKey') is not None:
            self.header_key = m.get('HeaderKey')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryMgsApirestResponseBodyResultContentValueHeaderRules(TeaModel):
    def __init__(self, header_key=None, location=None, type=None, value=None):
        self.header_key = header_key  # type: str
        self.location = location  # type: str
        self.type = type  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueHeaderRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.header_key is not None:
            result['HeaderKey'] = self.header_key
        if self.location is not None:
            result['Location'] = self.location
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HeaderKey') is not None:
            self.header_key = m.get('HeaderKey')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryMgsApirestResponseBodyResultContentValueLimitRule(TeaModel):
    def __init__(self, default_response=None, i_18n_response=None, interval=None, limit=None, mode=None):
        self.default_response = default_response  # type: str
        self.i_18n_response = i_18n_response  # type: str
        self.interval = interval  # type: long
        self.limit = limit  # type: long
        self.mode = mode  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueLimitRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.default_response is not None:
            result['DefaultResponse'] = self.default_response
        if self.i_18n_response is not None:
            result['I18nResponse'] = self.i_18n_response
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.mode is not None:
            result['Mode'] = self.mode
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DefaultResponse') is not None:
            self.default_response = m.get('DefaultResponse')
        if m.get('I18nResponse') is not None:
            self.i_18n_response = m.get('I18nResponse')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        return self


class QueryMgsApirestResponseBodyResultContentValueMigrateRule(TeaModel):
    def __init__(self, flow_percent=None, need_migrate=None, need_switch_completely=None, sys_id=None,
                 sys_name=None, upstream_type=None):
        self.flow_percent = flow_percent  # type: long
        self.need_migrate = need_migrate  # type: bool
        self.need_switch_completely = need_switch_completely  # type: bool
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.upstream_type = upstream_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueMigrateRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_percent is not None:
            result['FlowPercent'] = self.flow_percent
        if self.need_migrate is not None:
            result['NeedMigrate'] = self.need_migrate
        if self.need_switch_completely is not None:
            result['NeedSwitchCompletely'] = self.need_switch_completely
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.upstream_type is not None:
            result['UpstreamType'] = self.upstream_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowPercent') is not None:
            self.flow_percent = m.get('FlowPercent')
        if m.get('NeedMigrate') is not None:
            self.need_migrate = m.get('NeedMigrate')
        if m.get('NeedSwitchCompletely') is not None:
            self.need_switch_completely = m.get('NeedSwitchCompletely')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('UpstreamType') is not None:
            self.upstream_type = m.get('UpstreamType')
        return self


class QueryMgsApirestResponseBodyResultContentValueMockRule(TeaModel):
    def __init__(self, mock_data=None, need_mock=None, percentage=None, type=None):
        self.mock_data = mock_data  # type: str
        self.need_mock = need_mock  # type: bool
        self.percentage = percentage  # type: long
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueMockRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mock_data is not None:
            result['MockData'] = self.mock_data
        if self.need_mock is not None:
            result['NeedMock'] = self.need_mock
        if self.percentage is not None:
            result['Percentage'] = self.percentage
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MockData') is not None:
            self.mock_data = m.get('MockData')
        if m.get('NeedMock') is not None:
            self.need_mock = m.get('NeedMock')
        if m.get('Percentage') is not None:
            self.percentage = m.get('Percentage')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryMgsApirestResponseBodyResultContentValueRequestParams(TeaModel):
    def __init__(self, api_id=None, app_id=None, default_value=None, description=None, id=None, location=None,
                 name=None, ref_type=None, type=None, workspace_id=None):
        self.api_id = api_id  # type: str
        self.app_id = app_id  # type: str
        self.default_value = default_value  # type: str
        self.description = description  # type: str
        self.id = id  # type: long
        self.location = location  # type: str
        self.name = name  # type: str
        self.ref_type = ref_type  # type: str
        self.type = type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValueRequestParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_id is not None:
            result['ApiId'] = self.api_id
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.default_value is not None:
            result['DefaultValue'] = self.default_value
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.location is not None:
            result['Location'] = self.location
        if self.name is not None:
            result['Name'] = self.name
        if self.ref_type is not None:
            result['RefType'] = self.ref_type
        if self.type is not None:
            result['Type'] = self.type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiId') is not None:
            self.api_id = m.get('ApiId')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DefaultValue') is not None:
            self.default_value = m.get('DefaultValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RefType') is not None:
            self.ref_type = m.get('RefType')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApirestResponseBodyResultContentValue(TeaModel):
    def __init__(self, api_invoker=None, api_name=None, api_status=None, api_type=None, app_id=None,
                 auth_rule_name=None, cache_rule=None, charset=None, circuit_breaker_rule=None, content_type=None,
                 default_limit_rule=None, description=None, gmt_create=None, gmt_modified=None, header_rule=None, header_rules=None,
                 host=None, id=None, interface_type=None, limit_rule=None, method=None, method_name=None,
                 migrate_rule=None, mock_rule=None, need_etag=None, need_encrypt=None, need_jsonp=None, need_sign=None,
                 operation_type=None, param_get_method=None, path=None, request_body_model=None, request_params=None,
                 response_body_model=None, sys_id=None, sys_name=None, timeout=None, workspace_id=None):
        self.api_invoker = api_invoker  # type: QueryMgsApirestResponseBodyResultContentValueApiInvoker
        self.api_name = api_name  # type: str
        self.api_status = api_status  # type: str
        self.api_type = api_type  # type: str
        self.app_id = app_id  # type: str
        self.auth_rule_name = auth_rule_name  # type: str
        self.cache_rule = cache_rule  # type: QueryMgsApirestResponseBodyResultContentValueCacheRule
        self.charset = charset  # type: str
        self.circuit_breaker_rule = circuit_breaker_rule  # type: QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule
        self.content_type = content_type  # type: str
        self.default_limit_rule = default_limit_rule  # type: QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.header_rule = header_rule  # type: list[QueryMgsApirestResponseBodyResultContentValueHeaderRule]
        self.header_rules = header_rules  # type: list[QueryMgsApirestResponseBodyResultContentValueHeaderRules]
        self.host = host  # type: str
        self.id = id  # type: long
        self.interface_type = interface_type  # type: str
        self.limit_rule = limit_rule  # type: QueryMgsApirestResponseBodyResultContentValueLimitRule
        self.method = method  # type: str
        self.method_name = method_name  # type: str
        self.migrate_rule = migrate_rule  # type: QueryMgsApirestResponseBodyResultContentValueMigrateRule
        self.mock_rule = mock_rule  # type: QueryMgsApirestResponseBodyResultContentValueMockRule
        self.need_etag = need_etag  # type: str
        self.need_encrypt = need_encrypt  # type: str
        self.need_jsonp = need_jsonp  # type: str
        self.need_sign = need_sign  # type: str
        self.operation_type = operation_type  # type: str
        self.param_get_method = param_get_method  # type: str
        self.path = path  # type: str
        self.request_body_model = request_body_model  # type: str
        self.request_params = request_params  # type: list[QueryMgsApirestResponseBodyResultContentValueRequestParams]
        self.response_body_model = response_body_model  # type: str
        self.sys_id = sys_id  # type: long
        self.sys_name = sys_name  # type: str
        self.timeout = timeout  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        if self.api_invoker:
            self.api_invoker.validate()
        if self.cache_rule:
            self.cache_rule.validate()
        if self.circuit_breaker_rule:
            self.circuit_breaker_rule.validate()
        if self.default_limit_rule:
            self.default_limit_rule.validate()
        if self.header_rule:
            for k in self.header_rule:
                if k:
                    k.validate()
        if self.header_rules:
            for k in self.header_rules:
                if k:
                    k.validate()
        if self.limit_rule:
            self.limit_rule.validate()
        if self.migrate_rule:
            self.migrate_rule.validate()
        if self.mock_rule:
            self.mock_rule.validate()
        if self.request_params:
            for k in self.request_params:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContentValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_invoker is not None:
            result['ApiInvoker'] = self.api_invoker.to_map()
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.api_status is not None:
            result['ApiStatus'] = self.api_status
        if self.api_type is not None:
            result['ApiType'] = self.api_type
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.auth_rule_name is not None:
            result['AuthRuleName'] = self.auth_rule_name
        if self.cache_rule is not None:
            result['CacheRule'] = self.cache_rule.to_map()
        if self.charset is not None:
            result['Charset'] = self.charset
        if self.circuit_breaker_rule is not None:
            result['CircuitBreakerRule'] = self.circuit_breaker_rule.to_map()
        if self.content_type is not None:
            result['ContentType'] = self.content_type
        if self.default_limit_rule is not None:
            result['DefaultLimitRule'] = self.default_limit_rule.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        result['HeaderRule'] = []
        if self.header_rule is not None:
            for k in self.header_rule:
                result['HeaderRule'].append(k.to_map() if k else None)
        result['HeaderRules'] = []
        if self.header_rules is not None:
            for k in self.header_rules:
                result['HeaderRules'].append(k.to_map() if k else None)
        if self.host is not None:
            result['Host'] = self.host
        if self.id is not None:
            result['Id'] = self.id
        if self.interface_type is not None:
            result['InterfaceType'] = self.interface_type
        if self.limit_rule is not None:
            result['LimitRule'] = self.limit_rule.to_map()
        if self.method is not None:
            result['Method'] = self.method
        if self.method_name is not None:
            result['MethodName'] = self.method_name
        if self.migrate_rule is not None:
            result['MigrateRule'] = self.migrate_rule.to_map()
        if self.mock_rule is not None:
            result['MockRule'] = self.mock_rule.to_map()
        if self.need_etag is not None:
            result['NeedETag'] = self.need_etag
        if self.need_encrypt is not None:
            result['NeedEncrypt'] = self.need_encrypt
        if self.need_jsonp is not None:
            result['NeedJsonp'] = self.need_jsonp
        if self.need_sign is not None:
            result['NeedSign'] = self.need_sign
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.param_get_method is not None:
            result['ParamGetMethod'] = self.param_get_method
        if self.path is not None:
            result['Path'] = self.path
        if self.request_body_model is not None:
            result['RequestBodyModel'] = self.request_body_model
        result['RequestParams'] = []
        if self.request_params is not None:
            for k in self.request_params:
                result['RequestParams'].append(k.to_map() if k else None)
        if self.response_body_model is not None:
            result['ResponseBodyModel'] = self.response_body_model
        if self.sys_id is not None:
            result['SysId'] = self.sys_id
        if self.sys_name is not None:
            result['SysName'] = self.sys_name
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiInvoker') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueApiInvoker()
            self.api_invoker = temp_model.from_map(m['ApiInvoker'])
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('ApiStatus') is not None:
            self.api_status = m.get('ApiStatus')
        if m.get('ApiType') is not None:
            self.api_type = m.get('ApiType')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AuthRuleName') is not None:
            self.auth_rule_name = m.get('AuthRuleName')
        if m.get('CacheRule') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueCacheRule()
            self.cache_rule = temp_model.from_map(m['CacheRule'])
        if m.get('Charset') is not None:
            self.charset = m.get('Charset')
        if m.get('CircuitBreakerRule') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule()
            self.circuit_breaker_rule = temp_model.from_map(m['CircuitBreakerRule'])
        if m.get('ContentType') is not None:
            self.content_type = m.get('ContentType')
        if m.get('DefaultLimitRule') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule()
            self.default_limit_rule = temp_model.from_map(m['DefaultLimitRule'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        self.header_rule = []
        if m.get('HeaderRule') is not None:
            for k in m.get('HeaderRule'):
                temp_model = QueryMgsApirestResponseBodyResultContentValueHeaderRule()
                self.header_rule.append(temp_model.from_map(k))
        self.header_rules = []
        if m.get('HeaderRules') is not None:
            for k in m.get('HeaderRules'):
                temp_model = QueryMgsApirestResponseBodyResultContentValueHeaderRules()
                self.header_rules.append(temp_model.from_map(k))
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InterfaceType') is not None:
            self.interface_type = m.get('InterfaceType')
        if m.get('LimitRule') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueLimitRule()
            self.limit_rule = temp_model.from_map(m['LimitRule'])
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('MethodName') is not None:
            self.method_name = m.get('MethodName')
        if m.get('MigrateRule') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueMigrateRule()
            self.migrate_rule = temp_model.from_map(m['MigrateRule'])
        if m.get('MockRule') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValueMockRule()
            self.mock_rule = temp_model.from_map(m['MockRule'])
        if m.get('NeedETag') is not None:
            self.need_etag = m.get('NeedETag')
        if m.get('NeedEncrypt') is not None:
            self.need_encrypt = m.get('NeedEncrypt')
        if m.get('NeedJsonp') is not None:
            self.need_jsonp = m.get('NeedJsonp')
        if m.get('NeedSign') is not None:
            self.need_sign = m.get('NeedSign')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('ParamGetMethod') is not None:
            self.param_get_method = m.get('ParamGetMethod')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('RequestBodyModel') is not None:
            self.request_body_model = m.get('RequestBodyModel')
        self.request_params = []
        if m.get('RequestParams') is not None:
            for k in m.get('RequestParams'):
                temp_model = QueryMgsApirestResponseBodyResultContentValueRequestParams()
                self.request_params.append(temp_model.from_map(k))
        if m.get('ResponseBodyModel') is not None:
            self.response_body_model = m.get('ResponseBodyModel')
        if m.get('SysId') is not None:
            self.sys_id = m.get('SysId')
        if m.get('SysName') is not None:
            self.sys_name = m.get('SysName')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsApirestResponseBodyResultContent(TeaModel):
    def __init__(self, error_message=None, success=None, value=None):
        self.error_message = error_message  # type: str
        self.success = success  # type: bool
        self.value = value  # type: QueryMgsApirestResponseBodyResultContentValue

    def validate(self):
        if self.value:
            self.value.validate()

    def to_map(self):
        _map = super(QueryMgsApirestResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.success is not None:
            result['Success'] = self.success
        if self.value is not None:
            result['Value'] = self.value.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Value') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContentValue()
            self.value = temp_model.from_map(m['Value'])
        return self


class QueryMgsApirestResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryMgsApirestResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryMgsApirestResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryMgsApirestResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMgsApirestResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMgsApirestResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMgsApirestResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMgsApirestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMgsTestreqbodyautogenRequest(TeaModel):
    def __init__(self, app_id=None, format=None, mpaas_mappcenter_mgs_testreqbodyautogen_query_json_str=None,
                 tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.format = format  # type: str
        self.mpaas_mappcenter_mgs_testreqbodyautogen_query_json_str = mpaas_mappcenter_mgs_testreqbodyautogen_query_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsTestreqbodyautogenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.format is not None:
            result['Format'] = self.format
        if self.mpaas_mappcenter_mgs_testreqbodyautogen_query_json_str is not None:
            result['MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr'] = self.mpaas_mappcenter_mgs_testreqbodyautogen_query_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Format') is not None:
            self.format = m.get('Format')
        if m.get('MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr') is not None:
            self.mpaas_mappcenter_mgs_testreqbodyautogen_query_json_str = m.get('MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMgsTestreqbodyautogenResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMgsTestreqbodyautogenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            self.result_content = m.get('ResultContent')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMgsTestreqbodyautogenResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMgsTestreqbodyautogenResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMgsTestreqbodyautogenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMgsTestreqbodyautogenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMpsSchedulerListRequest(TeaModel):
    def __init__(self, app_id=None, end_time=None, page_number=None, page_size=None, start_time=None, type=None,
                 unique_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.end_time = end_time  # type: long
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long
        self.type = type  # type: int
        self.unique_id = unique_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMpsSchedulerListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        if self.unique_id is not None:
            result['UniqueId'] = self.unique_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UniqueId') is not None:
            self.unique_id = m.get('UniqueId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryMpsSchedulerListResponseBodyResultContentDataList(TeaModel):
    def __init__(self, create_type=None, delivery_type=None, executed_status=None, gmt_create=None, parent_id=None,
                 push_content=None, push_time=None, push_title=None, strategy_type=None, type=None, unique_id=None):
        self.create_type = create_type  # type: int
        self.delivery_type = delivery_type  # type: int
        self.executed_status = executed_status  # type: str
        self.gmt_create = gmt_create  # type: long
        self.parent_id = parent_id  # type: str
        self.push_content = push_content  # type: str
        self.push_time = push_time  # type: long
        self.push_title = push_title  # type: str
        self.strategy_type = strategy_type  # type: int
        self.type = type  # type: int
        self.unique_id = unique_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryMpsSchedulerListResponseBodyResultContentDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_type is not None:
            result['CreateType'] = self.create_type
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.executed_status is not None:
            result['ExecutedStatus'] = self.executed_status
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.push_content is not None:
            result['PushContent'] = self.push_content
        if self.push_time is not None:
            result['PushTime'] = self.push_time
        if self.push_title is not None:
            result['PushTitle'] = self.push_title
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.type is not None:
            result['Type'] = self.type
        if self.unique_id is not None:
            result['UniqueId'] = self.unique_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateType') is not None:
            self.create_type = m.get('CreateType')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExecutedStatus') is not None:
            self.executed_status = m.get('ExecutedStatus')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('PushContent') is not None:
            self.push_content = m.get('PushContent')
        if m.get('PushTime') is not None:
            self.push_time = m.get('PushTime')
        if m.get('PushTitle') is not None:
            self.push_title = m.get('PushTitle')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UniqueId') is not None:
            self.unique_id = m.get('UniqueId')
        return self


class QueryMpsSchedulerListResponseBodyResultContentData(TeaModel):
    def __init__(self, list=None, total_count=None):
        self.list = list  # type: list[QueryMpsSchedulerListResponseBodyResultContentDataList]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryMpsSchedulerListResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryMpsSchedulerListResponseBodyResultContentDataList()
                self.list.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryMpsSchedulerListResponseBodyResultContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: QueryMpsSchedulerListResponseBodyResultContentData

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(QueryMpsSchedulerListResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = QueryMpsSchedulerListResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        return self


class QueryMpsSchedulerListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryMpsSchedulerListResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryMpsSchedulerListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryMpsSchedulerListResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryMpsSchedulerListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryMpsSchedulerListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryMpsSchedulerListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMpsSchedulerListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPushAnalysisCoreIndexRequest(TeaModel):
    def __init__(self, app_id=None, channel=None, end_time=None, platform=None, start_time=None, task_id=None,
                 type=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.channel = channel  # type: str
        self.end_time = end_time  # type: long
        self.platform = platform  # type: str
        self.start_time = start_time  # type: long
        self.task_id = task_id  # type: str
        self.type = type  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushAnalysisCoreIndexRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryPushAnalysisCoreIndexResponseBodyResultContentData(TeaModel):
    def __init__(self, arrival_num=None, arrival_rate=None, ignore_num=None, ignore_rate=None, open_num=None,
                 open_rate=None, push_num=None, push_total_num=None):
        self.arrival_num = arrival_num  # type: float
        self.arrival_rate = arrival_rate  # type: float
        self.ignore_num = ignore_num  # type: float
        self.ignore_rate = ignore_rate  # type: float
        self.open_num = open_num  # type: float
        self.open_rate = open_rate  # type: float
        self.push_num = push_num  # type: float
        self.push_total_num = push_total_num  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushAnalysisCoreIndexResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arrival_num is not None:
            result['ArrivalNum'] = self.arrival_num
        if self.arrival_rate is not None:
            result['ArrivalRate'] = self.arrival_rate
        if self.ignore_num is not None:
            result['IgnoreNum'] = self.ignore_num
        if self.ignore_rate is not None:
            result['IgnoreRate'] = self.ignore_rate
        if self.open_num is not None:
            result['OpenNum'] = self.open_num
        if self.open_rate is not None:
            result['OpenRate'] = self.open_rate
        if self.push_num is not None:
            result['PushNum'] = self.push_num
        if self.push_total_num is not None:
            result['PushTotalNum'] = self.push_total_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArrivalNum') is not None:
            self.arrival_num = m.get('ArrivalNum')
        if m.get('ArrivalRate') is not None:
            self.arrival_rate = m.get('ArrivalRate')
        if m.get('IgnoreNum') is not None:
            self.ignore_num = m.get('IgnoreNum')
        if m.get('IgnoreRate') is not None:
            self.ignore_rate = m.get('IgnoreRate')
        if m.get('OpenNum') is not None:
            self.open_num = m.get('OpenNum')
        if m.get('OpenRate') is not None:
            self.open_rate = m.get('OpenRate')
        if m.get('PushNum') is not None:
            self.push_num = m.get('PushNum')
        if m.get('PushTotalNum') is not None:
            self.push_total_num = m.get('PushTotalNum')
        return self


class QueryPushAnalysisCoreIndexResponseBodyResultContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: QueryPushAnalysisCoreIndexResponseBodyResultContentData

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisCoreIndexResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = QueryPushAnalysisCoreIndexResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        return self


class QueryPushAnalysisCoreIndexResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryPushAnalysisCoreIndexResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisCoreIndexResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryPushAnalysisCoreIndexResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryPushAnalysisCoreIndexResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryPushAnalysisCoreIndexResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisCoreIndexResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPushAnalysisCoreIndexResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPushAnalysisTaskDetailRequest(TeaModel):
    def __init__(self, app_id=None, task_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.task_id = task_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushAnalysisTaskDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryPushAnalysisTaskDetailResponseBodyResultContentData(TeaModel):
    def __init__(self, duration=None, end_time=None, push_arrival_num=None, push_num=None, push_success_num=None,
                 start_time=None, task_id=None):
        self.duration = duration  # type: str
        self.end_time = end_time  # type: long
        self.push_arrival_num = push_arrival_num  # type: float
        self.push_num = push_num  # type: float
        self.push_success_num = push_success_num  # type: float
        self.start_time = start_time  # type: long
        self.task_id = task_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushAnalysisTaskDetailResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.push_arrival_num is not None:
            result['PushArrivalNum'] = self.push_arrival_num
        if self.push_num is not None:
            result['PushNum'] = self.push_num
        if self.push_success_num is not None:
            result['PushSuccessNum'] = self.push_success_num
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PushArrivalNum') is not None:
            self.push_arrival_num = m.get('PushArrivalNum')
        if m.get('PushNum') is not None:
            self.push_num = m.get('PushNum')
        if m.get('PushSuccessNum') is not None:
            self.push_success_num = m.get('PushSuccessNum')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class QueryPushAnalysisTaskDetailResponseBodyResultContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: QueryPushAnalysisTaskDetailResponseBodyResultContentData

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisTaskDetailResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = QueryPushAnalysisTaskDetailResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        return self


class QueryPushAnalysisTaskDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryPushAnalysisTaskDetailResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisTaskDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryPushAnalysisTaskDetailResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryPushAnalysisTaskDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryPushAnalysisTaskDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisTaskDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPushAnalysisTaskDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPushAnalysisTaskListRequest(TeaModel):
    def __init__(self, app_id=None, page_number=None, page_size=None, start_time=None, task_id=None, task_name=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long
        self.task_id = task_id  # type: str
        self.task_name = task_name  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushAnalysisTaskListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryPushAnalysisTaskListResponseBodyResultContentDataList(TeaModel):
    def __init__(self, gmt_create=None, task_id=None, task_name=None, template_id=None, template_name=None,
                 type=None):
        self.gmt_create = gmt_create  # type: long
        self.task_id = task_id  # type: str
        self.task_name = task_name  # type: str
        self.template_id = template_id  # type: str
        self.template_name = template_name  # type: str
        self.type = type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushAnalysisTaskListResponseBodyResultContentDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryPushAnalysisTaskListResponseBodyResultContentData(TeaModel):
    def __init__(self, gmt_create=None, list=None, task_id=None, task_name=None, template_id=None,
                 template_name=None, type=None):
        self.gmt_create = gmt_create  # type: long
        self.list = list  # type: list[QueryPushAnalysisTaskListResponseBodyResultContentDataList]
        self.task_id = task_id  # type: str
        self.task_name = task_name  # type: str
        self.template_id = template_id  # type: str
        self.template_name = template_name  # type: str
        self.type = type  # type: long

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisTaskListResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryPushAnalysisTaskListResponseBodyResultContentDataList()
                self.list.append(temp_model.from_map(k))
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryPushAnalysisTaskListResponseBodyResultContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[QueryPushAnalysisTaskListResponseBodyResultContentData]

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisTaskListResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = QueryPushAnalysisTaskListResponseBodyResultContentData()
                self.data.append(temp_model.from_map(k))
        return self


class QueryPushAnalysisTaskListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryPushAnalysisTaskListResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisTaskListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryPushAnalysisTaskListResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryPushAnalysisTaskListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryPushAnalysisTaskListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryPushAnalysisTaskListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPushAnalysisTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPushSchedulerListRequest(TeaModel):
    def __init__(self, app_id=None, end_time=None, page_number=None, page_size=None, start_time=None, type=None,
                 unique_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.end_time = end_time  # type: long
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long
        self.type = type  # type: int
        self.unique_id = unique_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushSchedulerListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        if self.unique_id is not None:
            result['UniqueId'] = self.unique_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UniqueId') is not None:
            self.unique_id = m.get('UniqueId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class QueryPushSchedulerListResponseBodyResultContentDataList(TeaModel):
    def __init__(self, create_type=None, delivery_type=None, executed_status=None, gmt_create=None, parent_id=None,
                 push_content=None, push_time=None, push_title=None, strategy_type=None, type=None, unique_id=None):
        self.create_type = create_type  # type: int
        self.delivery_type = delivery_type  # type: int
        self.executed_status = executed_status  # type: str
        self.gmt_create = gmt_create  # type: long
        self.parent_id = parent_id  # type: str
        self.push_content = push_content  # type: str
        self.push_time = push_time  # type: long
        self.push_title = push_title  # type: str
        self.strategy_type = strategy_type  # type: int
        self.type = type  # type: int
        self.unique_id = unique_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryPushSchedulerListResponseBodyResultContentDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_type is not None:
            result['CreateType'] = self.create_type
        if self.delivery_type is not None:
            result['DeliveryType'] = self.delivery_type
        if self.executed_status is not None:
            result['ExecutedStatus'] = self.executed_status
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.push_content is not None:
            result['PushContent'] = self.push_content
        if self.push_time is not None:
            result['PushTime'] = self.push_time
        if self.push_title is not None:
            result['PushTitle'] = self.push_title
        if self.strategy_type is not None:
            result['StrategyType'] = self.strategy_type
        if self.type is not None:
            result['Type'] = self.type
        if self.unique_id is not None:
            result['UniqueId'] = self.unique_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateType') is not None:
            self.create_type = m.get('CreateType')
        if m.get('DeliveryType') is not None:
            self.delivery_type = m.get('DeliveryType')
        if m.get('ExecutedStatus') is not None:
            self.executed_status = m.get('ExecutedStatus')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('PushContent') is not None:
            self.push_content = m.get('PushContent')
        if m.get('PushTime') is not None:
            self.push_time = m.get('PushTime')
        if m.get('PushTitle') is not None:
            self.push_title = m.get('PushTitle')
        if m.get('StrategyType') is not None:
            self.strategy_type = m.get('StrategyType')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UniqueId') is not None:
            self.unique_id = m.get('UniqueId')
        return self


class QueryPushSchedulerListResponseBodyResultContentData(TeaModel):
    def __init__(self, list=None, total_count=None):
        self.list = list  # type: list[QueryPushSchedulerListResponseBodyResultContentDataList]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryPushSchedulerListResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryPushSchedulerListResponseBodyResultContentDataList()
                self.list.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryPushSchedulerListResponseBodyResultContent(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: QueryPushSchedulerListResponseBodyResultContentData

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(QueryPushSchedulerListResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = QueryPushSchedulerListResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        return self


class QueryPushSchedulerListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: QueryPushSchedulerListResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(QueryPushSchedulerListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = QueryPushSchedulerListResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class QueryPushSchedulerListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryPushSchedulerListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryPushSchedulerListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPushSchedulerListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RevokePushMessageRequest(TeaModel):
    def __init__(self, app_id=None, message_id=None, target_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.message_id = message_id  # type: str
        self.target_id = target_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RevokePushMessageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.message_id is not None:
            result['MessageId'] = self.message_id
        if self.target_id is not None:
            result['TargetId'] = self.target_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MessageId') is not None:
            self.message_id = m.get('MessageId')
        if m.get('TargetId') is not None:
            self.target_id = m.get('TargetId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class RevokePushMessageResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RevokePushMessageResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RevokePushMessageResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: RevokePushMessageResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(RevokePushMessageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = RevokePushMessageResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class RevokePushMessageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RevokePushMessageResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RevokePushMessageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RevokePushMessageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RevokePushTaskRequest(TeaModel):
    def __init__(self, app_id=None, task_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.task_id = task_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RevokePushTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class RevokePushTaskResponseBodyPushResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RevokePushTaskResponseBodyPushResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RevokePushTaskResponseBody(TeaModel):
    def __init__(self, push_result=None, request_id=None, result_code=None, result_message=None):
        self.push_result = push_result  # type: RevokePushTaskResponseBodyPushResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.push_result:
            self.push_result.validate()

    def to_map(self):
        _map = super(RevokePushTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_result is not None:
            result['PushResult'] = self.push_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PushResult') is not None:
            temp_model = RevokePushTaskResponseBodyPushResult()
            self.push_result = temp_model.from_map(m['PushResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class RevokePushTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RevokePushTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RevokePushTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RevokePushTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunMsaDiffRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_msa_diff_run_json_str=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_msa_diff_run_json_str = mpaas_mappcenter_msa_diff_run_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunMsaDiffRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_msa_diff_run_json_str is not None:
            result['MpaasMappcenterMsaDiffRunJsonStr'] = self.mpaas_mappcenter_msa_diff_run_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMsaDiffRunJsonStr') is not None:
            self.mpaas_mappcenter_msa_diff_run_json_str = m.get('MpaasMappcenterMsaDiffRunJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class RunMsaDiffResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunMsaDiffResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RunMsaDiffResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: RunMsaDiffResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(RunMsaDiffResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = RunMsaDiffResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class RunMsaDiffResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunMsaDiffResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunMsaDiffResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunMsaDiffResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveMgsApirestRequest(TeaModel):
    def __init__(self, app_id=None, mpaas_mappcenter_mgs_apirest_save_json_str=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.mpaas_mappcenter_mgs_apirest_save_json_str = mpaas_mappcenter_mgs_apirest_save_json_str  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveMgsApirestRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.mpaas_mappcenter_mgs_apirest_save_json_str is not None:
            result['MpaasMappcenterMgsApirestSaveJsonStr'] = self.mpaas_mappcenter_mgs_apirest_save_json_str
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('MpaasMappcenterMgsApirestSaveJsonStr') is not None:
            self.mpaas_mappcenter_mgs_apirest_save_json_str = m.get('MpaasMappcenterMgsApirestSaveJsonStr')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class SaveMgsApirestResponseBodyResultContent(TeaModel):
    def __init__(self, error_message=None, success=None, value=None):
        self.error_message = error_message  # type: str
        self.success = success  # type: bool
        self.value = value  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveMgsApirestResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.success is not None:
            result['Success'] = self.success
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class SaveMgsApirestResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: SaveMgsApirestResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(SaveMgsApirestResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = SaveMgsApirestResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class SaveMgsApirestResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveMgsApirestResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveMgsApirestResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveMgsApirestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartUserAppAsyncEnhanceInMsaRequest(TeaModel):
    def __init__(self, apk_protector=None, app_id=None, assets_file_list=None, classes=None, dalvik_debugger=None,
                 emulator_environment=None, id=None, java_hook=None, memory_dump=None, native_debugger=None, native_hook=None,
                 package_tampered=None, root=None, run_mode=None, so_file_list=None, task_type=None, tenant_id=None,
                 total_switch=None, use_ashield=None, workspace_id=None):
        self.apk_protector = apk_protector  # type: bool
        self.app_id = app_id  # type: str
        self.assets_file_list = assets_file_list  # type: str
        self.classes = classes  # type: str
        self.dalvik_debugger = dalvik_debugger  # type: int
        self.emulator_environment = emulator_environment  # type: int
        self.id = id  # type: long
        self.java_hook = java_hook  # type: int
        self.memory_dump = memory_dump  # type: int
        self.native_debugger = native_debugger  # type: int
        self.native_hook = native_hook  # type: int
        self.package_tampered = package_tampered  # type: int
        self.root = root  # type: int
        self.run_mode = run_mode  # type: str
        self.so_file_list = so_file_list  # type: str
        self.task_type = task_type  # type: str
        self.tenant_id = tenant_id  # type: str
        self.total_switch = total_switch  # type: bool
        self.use_ashield = use_ashield  # type: bool
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartUserAppAsyncEnhanceInMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apk_protector is not None:
            result['ApkProtector'] = self.apk_protector
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.assets_file_list is not None:
            result['AssetsFileList'] = self.assets_file_list
        if self.classes is not None:
            result['Classes'] = self.classes
        if self.dalvik_debugger is not None:
            result['DalvikDebugger'] = self.dalvik_debugger
        if self.emulator_environment is not None:
            result['EmulatorEnvironment'] = self.emulator_environment
        if self.id is not None:
            result['Id'] = self.id
        if self.java_hook is not None:
            result['JavaHook'] = self.java_hook
        if self.memory_dump is not None:
            result['MemoryDump'] = self.memory_dump
        if self.native_debugger is not None:
            result['NativeDebugger'] = self.native_debugger
        if self.native_hook is not None:
            result['NativeHook'] = self.native_hook
        if self.package_tampered is not None:
            result['PackageTampered'] = self.package_tampered
        if self.root is not None:
            result['Root'] = self.root
        if self.run_mode is not None:
            result['RunMode'] = self.run_mode
        if self.so_file_list is not None:
            result['SoFileList'] = self.so_file_list
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.total_switch is not None:
            result['TotalSwitch'] = self.total_switch
        if self.use_ashield is not None:
            result['UseAShield'] = self.use_ashield
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApkProtector') is not None:
            self.apk_protector = m.get('ApkProtector')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AssetsFileList') is not None:
            self.assets_file_list = m.get('AssetsFileList')
        if m.get('Classes') is not None:
            self.classes = m.get('Classes')
        if m.get('DalvikDebugger') is not None:
            self.dalvik_debugger = m.get('DalvikDebugger')
        if m.get('EmulatorEnvironment') is not None:
            self.emulator_environment = m.get('EmulatorEnvironment')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JavaHook') is not None:
            self.java_hook = m.get('JavaHook')
        if m.get('MemoryDump') is not None:
            self.memory_dump = m.get('MemoryDump')
        if m.get('NativeDebugger') is not None:
            self.native_debugger = m.get('NativeDebugger')
        if m.get('NativeHook') is not None:
            self.native_hook = m.get('NativeHook')
        if m.get('PackageTampered') is not None:
            self.package_tampered = m.get('PackageTampered')
        if m.get('Root') is not None:
            self.root = m.get('Root')
        if m.get('RunMode') is not None:
            self.run_mode = m.get('RunMode')
        if m.get('SoFileList') is not None:
            self.so_file_list = m.get('SoFileList')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('TotalSwitch') is not None:
            self.total_switch = m.get('TotalSwitch')
        if m.get('UseAShield') is not None:
            self.use_ashield = m.get('UseAShield')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping(TeaModel):
    def __init__(self, info=None, reason=None, type=None):
        self.info = info  # type: str
        self.reason = reason  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.info is not None:
            result['Info'] = self.info
        if self.reason is not None:
            result['Reason'] = self.reason
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Info') is not None:
            self.info = m.get('Info')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData(TeaModel):
    def __init__(self, after_md_5=None, after_size=None, app_code=None, app_package=None, assets_file_list=None,
                 before_md_5=None, before_size=None, class_forest=None, enhance_mapping=None, enhance_rules=None,
                 enhanced_assets_files=None, enhanced_classes=None, enhanced_so_files=None, id=None, label=None, progress=None,
                 so_file_list=None, status=None, task_type=None, version_code=None, version_name=None):
        self.after_md_5 = after_md_5  # type: str
        self.after_size = after_size  # type: long
        self.app_code = app_code  # type: str
        self.app_package = app_package  # type: str
        self.assets_file_list = assets_file_list  # type: list[str]
        self.before_md_5 = before_md_5  # type: str
        self.before_size = before_size  # type: long
        self.class_forest = class_forest  # type: str
        self.enhance_mapping = enhance_mapping  # type: list[StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping]
        self.enhance_rules = enhance_rules  # type: list[str]
        self.enhanced_assets_files = enhanced_assets_files  # type: list[str]
        self.enhanced_classes = enhanced_classes  # type: list[str]
        self.enhanced_so_files = enhanced_so_files  # type: list[str]
        self.id = id  # type: long
        self.label = label  # type: str
        self.progress = progress  # type: long
        self.so_file_list = so_file_list  # type: list[str]
        self.status = status  # type: long
        self.task_type = task_type  # type: str
        self.version_code = version_code  # type: str
        self.version_name = version_name  # type: str

    def validate(self):
        if self.enhance_mapping:
            for k in self.enhance_mapping:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_md_5 is not None:
            result['AfterMd5'] = self.after_md_5
        if self.after_size is not None:
            result['AfterSize'] = self.after_size
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_package is not None:
            result['AppPackage'] = self.app_package
        if self.assets_file_list is not None:
            result['AssetsFileList'] = self.assets_file_list
        if self.before_md_5 is not None:
            result['BeforeMd5'] = self.before_md_5
        if self.before_size is not None:
            result['BeforeSize'] = self.before_size
        if self.class_forest is not None:
            result['ClassForest'] = self.class_forest
        result['EnhanceMapping'] = []
        if self.enhance_mapping is not None:
            for k in self.enhance_mapping:
                result['EnhanceMapping'].append(k.to_map() if k else None)
        if self.enhance_rules is not None:
            result['EnhanceRules'] = self.enhance_rules
        if self.enhanced_assets_files is not None:
            result['EnhancedAssetsFiles'] = self.enhanced_assets_files
        if self.enhanced_classes is not None:
            result['EnhancedClasses'] = self.enhanced_classes
        if self.enhanced_so_files is not None:
            result['EnhancedSoFiles'] = self.enhanced_so_files
        if self.id is not None:
            result['Id'] = self.id
        if self.label is not None:
            result['Label'] = self.label
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.so_file_list is not None:
            result['SoFileList'] = self.so_file_list
        if self.status is not None:
            result['Status'] = self.status
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.version_code is not None:
            result['VersionCode'] = self.version_code
        if self.version_name is not None:
            result['VersionName'] = self.version_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AfterMd5') is not None:
            self.after_md_5 = m.get('AfterMd5')
        if m.get('AfterSize') is not None:
            self.after_size = m.get('AfterSize')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppPackage') is not None:
            self.app_package = m.get('AppPackage')
        if m.get('AssetsFileList') is not None:
            self.assets_file_list = m.get('AssetsFileList')
        if m.get('BeforeMd5') is not None:
            self.before_md_5 = m.get('BeforeMd5')
        if m.get('BeforeSize') is not None:
            self.before_size = m.get('BeforeSize')
        if m.get('ClassForest') is not None:
            self.class_forest = m.get('ClassForest')
        self.enhance_mapping = []
        if m.get('EnhanceMapping') is not None:
            for k in m.get('EnhanceMapping'):
                temp_model = StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping()
                self.enhance_mapping.append(temp_model.from_map(k))
        if m.get('EnhanceRules') is not None:
            self.enhance_rules = m.get('EnhanceRules')
        if m.get('EnhancedAssetsFiles') is not None:
            self.enhanced_assets_files = m.get('EnhancedAssetsFiles')
        if m.get('EnhancedClasses') is not None:
            self.enhanced_classes = m.get('EnhancedClasses')
        if m.get('EnhancedSoFiles') is not None:
            self.enhanced_so_files = m.get('EnhancedSoFiles')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('SoFileList') is not None:
            self.so_file_list = m.get('SoFileList')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('VersionCode') is not None:
            self.version_code = m.get('VersionCode')
        if m.get('VersionName') is not None:
            self.version_name = m.get('VersionName')
        return self


class StartUserAppAsyncEnhanceInMsaResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(StartUserAppAsyncEnhanceInMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartUserAppAsyncEnhanceInMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: StartUserAppAsyncEnhanceInMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(StartUserAppAsyncEnhanceInMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = StartUserAppAsyncEnhanceInMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class StartUserAppAsyncEnhanceInMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StartUserAppAsyncEnhanceInMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartUserAppAsyncEnhanceInMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartUserAppAsyncEnhanceInMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMcubeWhitelistRequest(TeaModel):
    def __init__(self, app_id=None, id=None, key_ids=None, onex_flag=None, oss_url=None, tenant_id=None,
                 workspace_id=None):
        self.app_id = app_id  # type: str
        self.id = id  # type: str
        self.key_ids = key_ids  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.oss_url = oss_url  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMcubeWhitelistRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.id is not None:
            result['Id'] = self.id
        if self.key_ids is not None:
            result['KeyIds'] = self.key_ids
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.oss_url is not None:
            result['OssUrl'] = self.oss_url
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('KeyIds') is not None:
            self.key_ids = m.get('KeyIds')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('OssUrl') is not None:
            self.oss_url = m.get('OssUrl')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo(TeaModel):
    def __init__(self, fail_num=None, fail_user_ids=None, success_num=None):
        self.fail_num = fail_num  # type: long
        self.fail_user_ids = fail_user_ids  # type: str
        self.success_num = success_num  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_num is not None:
            result['FailNum'] = self.fail_num
        if self.fail_user_ids is not None:
            result['FailUserIds'] = self.fail_user_ids
        if self.success_num is not None:
            result['SuccessNum'] = self.success_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FailNum') is not None:
            self.fail_num = m.get('FailNum')
        if m.get('FailUserIds') is not None:
            self.fail_user_ids = m.get('FailUserIds')
        if m.get('SuccessNum') is not None:
            self.success_num = m.get('SuccessNum')
        return self


class UpdateMcubeWhitelistResponseBodyAddWhitelistResult(TeaModel):
    def __init__(self, add_whitelist_info=None, result_msg=None, success=None):
        self.add_whitelist_info = add_whitelist_info  # type: UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.add_whitelist_info:
            self.add_whitelist_info.validate()

    def to_map(self):
        _map = super(UpdateMcubeWhitelistResponseBodyAddWhitelistResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_whitelist_info is not None:
            result['AddWhitelistInfo'] = self.add_whitelist_info.to_map()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AddWhitelistInfo') is not None:
            temp_model = UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo()
            self.add_whitelist_info = temp_model.from_map(m['AddWhitelistInfo'])
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateMcubeWhitelistResponseBody(TeaModel):
    def __init__(self, add_whitelist_result=None, request_id=None, result_code=None, result_message=None):
        self.add_whitelist_result = add_whitelist_result  # type: UpdateMcubeWhitelistResponseBodyAddWhitelistResult
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str

    def validate(self):
        if self.add_whitelist_result:
            self.add_whitelist_result.validate()

    def to_map(self):
        _map = super(UpdateMcubeWhitelistResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_whitelist_result is not None:
            result['AddWhitelistResult'] = self.add_whitelist_result.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AddWhitelistResult') is not None:
            temp_model = UpdateMcubeWhitelistResponseBodyAddWhitelistResult()
            self.add_whitelist_result = temp_model.from_map(m['AddWhitelistResult'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class UpdateMcubeWhitelistResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateMcubeWhitelistResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateMcubeWhitelistResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateMcubeWhitelistResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMpaasAppInfoRequest(TeaModel):
    def __init__(self, app_id=None, app_name=None, icon_file_url=None, identifier=None, onex_flag=None,
                 system_type=None, tenant_id=None):
        self.app_id = app_id  # type: str
        self.app_name = app_name  # type: str
        self.icon_file_url = icon_file_url  # type: str
        self.identifier = identifier  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.system_type = system_type  # type: str
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMpaasAppInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.icon_file_url is not None:
            result['IconFileUrl'] = self.icon_file_url
        if self.identifier is not None:
            result['Identifier'] = self.identifier
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.system_type is not None:
            result['SystemType'] = self.system_type
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('IconFileUrl') is not None:
            self.icon_file_url = m.get('IconFileUrl')
        if m.get('Identifier') is not None:
            self.identifier = m.get('Identifier')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('SystemType') is not None:
            self.system_type = m.get('SystemType')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class UpdateMpaasAppInfoResponseBodyResultContentData(TeaModel):
    def __init__(self, app_id=None, code=None, data=None, message=None, success=None):
        self.app_id = app_id  # type: str
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateMpaasAppInfoResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateMpaasAppInfoResponseBodyResultContent(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: UpdateMpaasAppInfoResponseBodyResultContentData
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(UpdateMpaasAppInfoResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = UpdateMpaasAppInfoResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateMpaasAppInfoResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: UpdateMpaasAppInfoResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(UpdateMpaasAppInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = UpdateMpaasAppInfoResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class UpdateMpaasAppInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateMpaasAppInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateMpaasAppInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateMpaasAppInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadBitcodeToMsaRequest(TeaModel):
    def __init__(self, app_id=None, bitcode=None, code_version=None, license=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.bitcode = bitcode  # type: str
        self.code_version = code_version  # type: str
        self.license = license  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadBitcodeToMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.bitcode is not None:
            result['Bitcode'] = self.bitcode
        if self.code_version is not None:
            result['CodeVersion'] = self.code_version
        if self.license is not None:
            result['License'] = self.license
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Bitcode') is not None:
            self.bitcode = m.get('Bitcode')
        if m.get('CodeVersion') is not None:
            self.code_version = m.get('CodeVersion')
        if m.get('License') is not None:
            self.license = m.get('License')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UploadBitcodeToMsaResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadBitcodeToMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UploadBitcodeToMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: UploadBitcodeToMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(UploadBitcodeToMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = UploadBitcodeToMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class UploadBitcodeToMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UploadBitcodeToMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UploadBitcodeToMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadBitcodeToMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadMcubeMiniPackageRequest(TeaModel):
    def __init__(self, app_id=None, auto_install=None, client_version_max=None, client_version_min=None,
                 enable_keep_alive=None, enable_option_menu=None, enable_tab_bar=None, extend_info=None, h_5id=None, h_5name=None,
                 h_5version=None, icon_file_url=None, icon_url=None, install_type=None, main_url=None, onex_flag=None,
                 package_type=None, platform=None, resource_file_url=None, resource_type=None, tenant_id=None, user_id=None,
                 uuid=None, vhost=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.auto_install = auto_install  # type: long
        self.client_version_max = client_version_max  # type: str
        self.client_version_min = client_version_min  # type: str
        self.enable_keep_alive = enable_keep_alive  # type: str
        self.enable_option_menu = enable_option_menu  # type: str
        self.enable_tab_bar = enable_tab_bar  # type: long
        self.extend_info = extend_info  # type: str
        self.h_5id = h_5id  # type: str
        self.h_5name = h_5name  # type: str
        self.h_5version = h_5version  # type: str
        self.icon_file_url = icon_file_url  # type: str
        self.icon_url = icon_url  # type: str
        self.install_type = install_type  # type: long
        self.main_url = main_url  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.package_type = package_type  # type: long
        self.platform = platform  # type: str
        self.resource_file_url = resource_file_url  # type: str
        self.resource_type = resource_type  # type: long
        self.tenant_id = tenant_id  # type: str
        self.user_id = user_id  # type: str
        self.uuid = uuid  # type: str
        self.vhost = vhost  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMcubeMiniPackageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.auto_install is not None:
            result['AutoInstall'] = self.auto_install
        if self.client_version_max is not None:
            result['ClientVersionMax'] = self.client_version_max
        if self.client_version_min is not None:
            result['ClientVersionMin'] = self.client_version_min
        if self.enable_keep_alive is not None:
            result['EnableKeepAlive'] = self.enable_keep_alive
        if self.enable_option_menu is not None:
            result['EnableOptionMenu'] = self.enable_option_menu
        if self.enable_tab_bar is not None:
            result['EnableTabBar'] = self.enable_tab_bar
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info
        if self.h_5id is not None:
            result['H5Id'] = self.h_5id
        if self.h_5name is not None:
            result['H5Name'] = self.h_5name
        if self.h_5version is not None:
            result['H5Version'] = self.h_5version
        if self.icon_file_url is not None:
            result['IconFileUrl'] = self.icon_file_url
        if self.icon_url is not None:
            result['IconUrl'] = self.icon_url
        if self.install_type is not None:
            result['InstallType'] = self.install_type
        if self.main_url is not None:
            result['MainUrl'] = self.main_url
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.platform is not None:
            result['Platform'] = self.platform
        if self.resource_file_url is not None:
            result['ResourceFileUrl'] = self.resource_file_url
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        if self.vhost is not None:
            result['Vhost'] = self.vhost
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AutoInstall') is not None:
            self.auto_install = m.get('AutoInstall')
        if m.get('ClientVersionMax') is not None:
            self.client_version_max = m.get('ClientVersionMax')
        if m.get('ClientVersionMin') is not None:
            self.client_version_min = m.get('ClientVersionMin')
        if m.get('EnableKeepAlive') is not None:
            self.enable_keep_alive = m.get('EnableKeepAlive')
        if m.get('EnableOptionMenu') is not None:
            self.enable_option_menu = m.get('EnableOptionMenu')
        if m.get('EnableTabBar') is not None:
            self.enable_tab_bar = m.get('EnableTabBar')
        if m.get('ExtendInfo') is not None:
            self.extend_info = m.get('ExtendInfo')
        if m.get('H5Id') is not None:
            self.h_5id = m.get('H5Id')
        if m.get('H5Name') is not None:
            self.h_5name = m.get('H5Name')
        if m.get('H5Version') is not None:
            self.h_5version = m.get('H5Version')
        if m.get('IconFileUrl') is not None:
            self.icon_file_url = m.get('IconFileUrl')
        if m.get('IconUrl') is not None:
            self.icon_url = m.get('IconUrl')
        if m.get('InstallType') is not None:
            self.install_type = m.get('InstallType')
        if m.get('MainUrl') is not None:
            self.main_url = m.get('MainUrl')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('Platform') is not None:
            self.platform = m.get('Platform')
        if m.get('ResourceFileUrl') is not None:
            self.resource_file_url = m.get('ResourceFileUrl')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        if m.get('Vhost') is not None:
            self.vhost = m.get('Vhost')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult(TeaModel):
    def __init__(self, debug_url=None, package_id=None, user_id=None):
        self.debug_url = debug_url  # type: str
        self.package_id = package_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_url is not None:
            result['DebugUrl'] = self.debug_url
        if self.package_id is not None:
            result['PackageId'] = self.package_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DebugUrl') is not None:
            self.debug_url = m.get('DebugUrl')
        if m.get('PackageId') is not None:
            self.package_id = m.get('PackageId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult(TeaModel):
    def __init__(self, result_msg=None, return_package_result=None, success=None):
        self.result_msg = result_msg  # type: str
        self.return_package_result = return_package_result  # type: UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult
        self.success = success  # type: bool

    def validate(self):
        if self.return_package_result:
            self.return_package_result.validate()

    def to_map(self):
        _map = super(UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.return_package_result is not None:
            result['ReturnPackageResult'] = self.return_package_result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('ReturnPackageResult') is not None:
            temp_model = UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult()
            self.return_package_result = temp_model.from_map(m['ReturnPackageResult'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UploadMcubeMiniPackageResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_message=None, upload_mini_package_result=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str
        self.upload_mini_package_result = upload_mini_package_result  # type: UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult

    def validate(self):
        if self.upload_mini_package_result:
            self.upload_mini_package_result.validate()

    def to_map(self):
        _map = super(UploadMcubeMiniPackageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.upload_mini_package_result is not None:
            result['UploadMiniPackageResult'] = self.upload_mini_package_result.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('UploadMiniPackageResult') is not None:
            temp_model = UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult()
            self.upload_mini_package_result = temp_model.from_map(m['UploadMiniPackageResult'])
        return self


class UploadMcubeMiniPackageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UploadMcubeMiniPackageResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UploadMcubeMiniPackageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadMcubeMiniPackageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadMcubeRsaKeyRequest(TeaModel):
    def __init__(self, app_id=None, file_url=None, onex_flag=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.file_url = file_url  # type: str
        self.onex_flag = onex_flag  # type: bool
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMcubeRsaKeyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.onex_flag is not None:
            result['OnexFlag'] = self.onex_flag
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('OnexFlag') is not None:
            self.onex_flag = m.get('OnexFlag')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UploadMcubeRsaKeyResponseBodyUploadRsaResult(TeaModel):
    def __init__(self, data=None, result_msg=None, success=None):
        self.data = data  # type: str
        self.result_msg = result_msg  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadMcubeRsaKeyResponseBodyUploadRsaResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.result_msg is not None:
            result['ResultMsg'] = self.result_msg
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('ResultMsg') is not None:
            self.result_msg = m.get('ResultMsg')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UploadMcubeRsaKeyResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_message=None, upload_rsa_result=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_message = result_message  # type: str
        self.upload_rsa_result = upload_rsa_result  # type: UploadMcubeRsaKeyResponseBodyUploadRsaResult

    def validate(self):
        if self.upload_rsa_result:
            self.upload_rsa_result.validate()

    def to_map(self):
        _map = super(UploadMcubeRsaKeyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.upload_rsa_result is not None:
            result['UploadRsaResult'] = self.upload_rsa_result.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('UploadRsaResult') is not None:
            temp_model = UploadMcubeRsaKeyResponseBodyUploadRsaResult()
            self.upload_rsa_result = temp_model.from_map(m['UploadRsaResult'])
        return self


class UploadMcubeRsaKeyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UploadMcubeRsaKeyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UploadMcubeRsaKeyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadMcubeRsaKeyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadUserAppToMsaRequest(TeaModel):
    def __init__(self, app_id=None, file_url=None, tenant_id=None, workspace_id=None):
        self.app_id = app_id  # type: str
        self.file_url = file_url  # type: str
        self.tenant_id = tenant_id  # type: str
        self.workspace_id = workspace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadUserAppToMsaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.workspace_id is not None:
            result['WorkspaceId'] = self.workspace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('WorkspaceId') is not None:
            self.workspace_id = m.get('WorkspaceId')
        return self


class UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping(TeaModel):
    def __init__(self, info=None, reason=None, type=None):
        self.info = info  # type: str
        self.reason = reason  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.info is not None:
            result['Info'] = self.info
        if self.reason is not None:
            result['Reason'] = self.reason
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Info') is not None:
            self.info = m.get('Info')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UploadUserAppToMsaResponseBodyResultContentDataApkInfo(TeaModel):
    def __init__(self, after_md_5=None, after_size=None, app_code=None, app_package=None, before_md_5=None,
                 before_size=None, class_forest=None, enhance_mapping=None, enhance_rules=None, enhanced_classes=None, id=None,
                 label=None, progress=None, status=None, task_type=None, version_code=None, version_name=None):
        self.after_md_5 = after_md_5  # type: str
        self.after_size = after_size  # type: long
        self.app_code = app_code  # type: str
        self.app_package = app_package  # type: str
        self.before_md_5 = before_md_5  # type: str
        self.before_size = before_size  # type: long
        self.class_forest = class_forest  # type: str
        self.enhance_mapping = enhance_mapping  # type: UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping
        self.enhance_rules = enhance_rules  # type: list[str]
        self.enhanced_classes = enhanced_classes  # type: list[str]
        self.id = id  # type: long
        self.label = label  # type: str
        self.progress = progress  # type: long
        self.status = status  # type: long
        self.task_type = task_type  # type: str
        self.version_code = version_code  # type: str
        self.version_name = version_name  # type: str

    def validate(self):
        if self.enhance_mapping:
            self.enhance_mapping.validate()

    def to_map(self):
        _map = super(UploadUserAppToMsaResponseBodyResultContentDataApkInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_md_5 is not None:
            result['AfterMd5'] = self.after_md_5
        if self.after_size is not None:
            result['AfterSize'] = self.after_size
        if self.app_code is not None:
            result['AppCode'] = self.app_code
        if self.app_package is not None:
            result['AppPackage'] = self.app_package
        if self.before_md_5 is not None:
            result['BeforeMd5'] = self.before_md_5
        if self.before_size is not None:
            result['BeforeSize'] = self.before_size
        if self.class_forest is not None:
            result['ClassForest'] = self.class_forest
        if self.enhance_mapping is not None:
            result['EnhanceMapping'] = self.enhance_mapping.to_map()
        if self.enhance_rules is not None:
            result['EnhanceRules'] = self.enhance_rules
        if self.enhanced_classes is not None:
            result['EnhancedClasses'] = self.enhanced_classes
        if self.id is not None:
            result['Id'] = self.id
        if self.label is not None:
            result['Label'] = self.label
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        if self.version_code is not None:
            result['VersionCode'] = self.version_code
        if self.version_name is not None:
            result['VersionName'] = self.version_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AfterMd5') is not None:
            self.after_md_5 = m.get('AfterMd5')
        if m.get('AfterSize') is not None:
            self.after_size = m.get('AfterSize')
        if m.get('AppCode') is not None:
            self.app_code = m.get('AppCode')
        if m.get('AppPackage') is not None:
            self.app_package = m.get('AppPackage')
        if m.get('BeforeMd5') is not None:
            self.before_md_5 = m.get('BeforeMd5')
        if m.get('BeforeSize') is not None:
            self.before_size = m.get('BeforeSize')
        if m.get('ClassForest') is not None:
            self.class_forest = m.get('ClassForest')
        if m.get('EnhanceMapping') is not None:
            temp_model = UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping()
            self.enhance_mapping = temp_model.from_map(m['EnhanceMapping'])
        if m.get('EnhanceRules') is not None:
            self.enhance_rules = m.get('EnhanceRules')
        if m.get('EnhancedClasses') is not None:
            self.enhanced_classes = m.get('EnhancedClasses')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        if m.get('VersionCode') is not None:
            self.version_code = m.get('VersionCode')
        if m.get('VersionName') is not None:
            self.version_name = m.get('VersionName')
        return self


class UploadUserAppToMsaResponseBodyResultContentData(TeaModel):
    def __init__(self, apk_info=None, enhance_task_id=None, id=None, progress=None, status=None):
        self.apk_info = apk_info  # type: UploadUserAppToMsaResponseBodyResultContentDataApkInfo
        self.enhance_task_id = enhance_task_id  # type: long
        self.id = id  # type: long
        self.progress = progress  # type: long
        self.status = status  # type: long

    def validate(self):
        if self.apk_info:
            self.apk_info.validate()

    def to_map(self):
        _map = super(UploadUserAppToMsaResponseBodyResultContentData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apk_info is not None:
            result['ApkInfo'] = self.apk_info.to_map()
        if self.enhance_task_id is not None:
            result['EnhanceTaskId'] = self.enhance_task_id
        if self.id is not None:
            result['Id'] = self.id
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApkInfo') is not None:
            temp_model = UploadUserAppToMsaResponseBodyResultContentDataApkInfo()
            self.apk_info = temp_model.from_map(m['ApkInfo'])
        if m.get('EnhanceTaskId') is not None:
            self.enhance_task_id = m.get('EnhanceTaskId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UploadUserAppToMsaResponseBodyResultContent(TeaModel):
    def __init__(self, code=None, data=None, extra=None, message=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: UploadUserAppToMsaResponseBodyResultContentData
        self.extra = extra  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(UploadUserAppToMsaResponseBodyResultContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = UploadUserAppToMsaResponseBodyResultContentData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UploadUserAppToMsaResponseBody(TeaModel):
    def __init__(self, request_id=None, result_code=None, result_content=None, result_message=None):
        self.request_id = request_id  # type: str
        self.result_code = result_code  # type: str
        self.result_content = result_content  # type: UploadUserAppToMsaResponseBodyResultContent
        self.result_message = result_message  # type: str

    def validate(self):
        if self.result_content:
            self.result_content.validate()

    def to_map(self):
        _map = super(UploadUserAppToMsaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_content is not None:
            result['ResultContent'] = self.result_content.to_map()
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultContent') is not None:
            temp_model = UploadUserAppToMsaResponseBodyResultContent()
            self.result_content = temp_model.from_map(m['ResultContent'])
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        return self


class UploadUserAppToMsaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UploadUserAppToMsaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UploadUserAppToMsaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadUserAppToMsaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


