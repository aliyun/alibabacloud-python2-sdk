# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class AckConfig(TeaModel):
    def __init__(self, ack_instance_id=None, custom_annotations=None, custom_labels=None, data_disk_size=None,
                 data_disk_storage_class=None, limit_cpu=None, limit_memory=None, mount_host_cgroup=None, namespace=None,
                 node_selectors=None, request_cpu=None, request_memory=None, tolerations=None):
        # ack集群id
        self.ack_instance_id = ack_instance_id  # type: str
        self.custom_annotations = custom_annotations  # type: list[Tag]
        self.custom_labels = custom_labels  # type: list[Tag]
        self.data_disk_size = data_disk_size  # type: int
        self.data_disk_storage_class = data_disk_storage_class  # type: str
        # Pod的CPU限制值。
        self.limit_cpu = limit_cpu  # type: float
        # Pod的内存限制值。
        self.limit_memory = limit_memory  # type: str
        self.mount_host_cgroup = mount_host_cgroup  # type: bool
        # ack 命名空间
        self.namespace = namespace  # type: str
        # ack的节点标签限制
        self.node_selectors = node_selectors  # type: list[Tag]
        # Pod的CPU请求值
        self.request_cpu = request_cpu  # type: float
        # Pod的内存请求值。
        self.request_memory = request_memory  # type: str
        # ack的节点污点容忍
        self.tolerations = tolerations  # type: list[Toleration]

    def validate(self):
        if self.custom_annotations:
            for k in self.custom_annotations:
                if k:
                    k.validate()
        if self.custom_labels:
            for k in self.custom_labels:
                if k:
                    k.validate()
        if self.node_selectors:
            for k in self.node_selectors:
                if k:
                    k.validate()
        if self.tolerations:
            for k in self.tolerations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AckConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ack_instance_id is not None:
            result['AckInstanceId'] = self.ack_instance_id
        result['CustomAnnotations'] = []
        if self.custom_annotations is not None:
            for k in self.custom_annotations:
                result['CustomAnnotations'].append(k.to_map() if k else None)
        result['CustomLabels'] = []
        if self.custom_labels is not None:
            for k in self.custom_labels:
                result['CustomLabels'].append(k.to_map() if k else None)
        if self.data_disk_size is not None:
            result['DataDiskSize'] = self.data_disk_size
        if self.data_disk_storage_class is not None:
            result['DataDiskStorageClass'] = self.data_disk_storage_class
        if self.limit_cpu is not None:
            result['LimitCpu'] = self.limit_cpu
        if self.limit_memory is not None:
            result['LimitMemory'] = self.limit_memory
        if self.mount_host_cgroup is not None:
            result['MountHostCgroup'] = self.mount_host_cgroup
        if self.namespace is not None:
            result['Namespace'] = self.namespace
        result['NodeSelectors'] = []
        if self.node_selectors is not None:
            for k in self.node_selectors:
                result['NodeSelectors'].append(k.to_map() if k else None)
        if self.request_cpu is not None:
            result['RequestCpu'] = self.request_cpu
        if self.request_memory is not None:
            result['RequestMemory'] = self.request_memory
        result['Tolerations'] = []
        if self.tolerations is not None:
            for k in self.tolerations:
                result['Tolerations'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AckInstanceId') is not None:
            self.ack_instance_id = m.get('AckInstanceId')
        self.custom_annotations = []
        if m.get('CustomAnnotations') is not None:
            for k in m.get('CustomAnnotations'):
                temp_model = Tag()
                self.custom_annotations.append(temp_model.from_map(k))
        self.custom_labels = []
        if m.get('CustomLabels') is not None:
            for k in m.get('CustomLabels'):
                temp_model = Tag()
                self.custom_labels.append(temp_model.from_map(k))
        if m.get('DataDiskSize') is not None:
            self.data_disk_size = m.get('DataDiskSize')
        if m.get('DataDiskStorageClass') is not None:
            self.data_disk_storage_class = m.get('DataDiskStorageClass')
        if m.get('LimitCpu') is not None:
            self.limit_cpu = m.get('LimitCpu')
        if m.get('LimitMemory') is not None:
            self.limit_memory = m.get('LimitMemory')
        if m.get('MountHostCgroup') is not None:
            self.mount_host_cgroup = m.get('MountHostCgroup')
        if m.get('Namespace') is not None:
            self.namespace = m.get('Namespace')
        self.node_selectors = []
        if m.get('NodeSelectors') is not None:
            for k in m.get('NodeSelectors'):
                temp_model = Tag()
                self.node_selectors.append(temp_model.from_map(k))
        if m.get('RequestCpu') is not None:
            self.request_cpu = m.get('RequestCpu')
        if m.get('RequestMemory') is not None:
            self.request_memory = m.get('RequestMemory')
        self.tolerations = []
        if m.get('Tolerations') is not None:
            for k in m.get('Tolerations'):
                temp_model = Toleration()
                self.tolerations.append(temp_model.from_map(k))
        return self


class AckNode(TeaModel):
    def __init__(self, node_id=None, node_selector=None):
        # 节点ID。
        self.node_id = node_id  # type: str
        # ACK节点选择器。
        self.node_selector = node_selector  # type: AckNodeSelector

    def validate(self):
        if self.node_selector:
            self.node_selector.validate()

    def to_map(self):
        _map = super(AckNode, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_selector is not None:
            result['NodeSelector'] = self.node_selector.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeSelector') is not None:
            temp_model = AckNodeSelector()
            self.node_selector = temp_model.from_map(m['NodeSelector'])
        return self


class AckNodePool(TeaModel):
    def __init__(self, node_pool_id=None, node_selector=None):
        # 节点池ID。
        self.node_pool_id = node_pool_id  # type: str
        # ACK节点选择器。
        self.node_selector = node_selector  # type: AckNodeSelector

    def validate(self):
        if self.node_selector:
            self.node_selector.validate()

    def to_map(self):
        _map = super(AckNodePool, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_pool_id is not None:
            result['NodePoolId'] = self.node_pool_id
        if self.node_selector is not None:
            result['NodeSelector'] = self.node_selector.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodePoolId') is not None:
            self.node_pool_id = m.get('NodePoolId')
        if m.get('NodeSelector') is not None:
            temp_model = AckNodeSelector()
            self.node_selector = temp_model.from_map(m['NodeSelector'])
        return self


class AckNodeSelectorLabels(TeaModel):
    def __init__(self, key=None, value=None):
        # 标签键。
        self.key = key  # type: str
        # 标签值。
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AckNodeSelectorLabels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AckNodeSelectorTaints(TeaModel):
    def __init__(self, effect=None, key=None, value=None):
        # 污点效果。
        self.effect = effect  # type: str
        # 污点键。
        self.key = key  # type: str
        # 污点值。
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AckNodeSelectorTaints, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effect is not None:
            result['Effect'] = self.effect
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Effect') is not None:
            self.effect = m.get('Effect')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AckNodeSelector(TeaModel):
    def __init__(self, labels=None, taints=None):
        # 污点列表。
        self.labels = labels  # type: list[AckNodeSelectorLabels]
        # 污点列表。
        self.taints = taints  # type: list[AckNodeSelectorTaints]

    def validate(self):
        if self.labels:
            for k in self.labels:
                if k:
                    k.validate()
        if self.taints:
            for k in self.taints:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AckNodeSelector, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Labels'] = []
        if self.labels is not None:
            for k in self.labels:
                result['Labels'].append(k.to_map() if k else None)
        result['Taints'] = []
        if self.taints is not None:
            for k in self.taints:
                result['Taints'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.labels = []
        if m.get('Labels') is not None:
            for k in m.get('Labels'):
                temp_model = AckNodeSelectorLabels()
                self.labels.append(temp_model.from_map(k))
        self.taints = []
        if m.get('Taints') is not None:
            for k in m.get('Taints'):
                temp_model = AckNodeSelectorTaints()
                self.taints.append(temp_model.from_map(k))
        return self


class Application(TeaModel):
    def __init__(self, application_name=None):
        # 应用名称。从EMR控制台集群创建页面可查看到指定发行版的应用名称列表。
        self.application_name = application_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Application, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        return self


class ApplicationConfig(TeaModel):
    def __init__(self, application_name=None, config_file_name=None, config_item_key=None, config_item_value=None,
                 config_scope=None, node_group_id=None, node_group_name=None):
        # 应用名称。从EMR控制台集群创建页面可查看到指定发行版的应用名称列表。
        self.application_name = application_name  # type: str
        # 应用配置文件名。
        self.config_file_name = config_file_name  # type: str
        # 配置项键。
        self.config_item_key = config_item_key  # type: str
        # 配置项值。
        self.config_item_value = config_item_value  # type: str
        # 配置范围。取值范围：
        # - CLUSTER：集群级别。
        # - NODE_GROUP：节点组级别。
        # 
        # 默认值：CLUSTER。
        self.config_scope = config_scope  # type: str
        # 节点组ID。ConfigScope取值NODE_GROUP时，该参数生效。NodeGroupId参数优先级高于NodeGroupName。
        self.node_group_id = node_group_id  # type: str
        # 节点组名称。ConfigScope取值NODE_GROUP时，且参数NodeGroupId为空时生效，该参数生效。
        self.node_group_name = node_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplicationConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.config_file_name is not None:
            result['ConfigFileName'] = self.config_file_name
        if self.config_item_key is not None:
            result['ConfigItemKey'] = self.config_item_key
        if self.config_item_value is not None:
            result['ConfigItemValue'] = self.config_item_value
        if self.config_scope is not None:
            result['ConfigScope'] = self.config_scope
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ConfigFileName') is not None:
            self.config_file_name = m.get('ConfigFileName')
        if m.get('ConfigItemKey') is not None:
            self.config_item_key = m.get('ConfigItemKey')
        if m.get('ConfigItemValue') is not None:
            self.config_item_value = m.get('ConfigItemValue')
        if m.get('ConfigScope') is not None:
            self.config_scope = m.get('ConfigScope')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        return self


class ApplicationConfigFile(TeaModel):
    def __init__(self, application_name=None, config_file_name=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 配置文件名称。
        self.config_file_name = config_file_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplicationConfigFile, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.config_file_name is not None:
            result['ConfigFileName'] = self.config_file_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ConfigFileName') is not None:
            self.config_file_name = m.get('ConfigFileName')
        return self


class ApplicationConfigParam(TeaModel):
    def __init__(self, config_action=None, config_file_name=None, config_item_description=None,
                 config_item_key=None, config_item_value=None, config_scope=None, effective_actions=None, effective_type=None,
                 node_group_id=None, node_id=None):
        self.config_action = config_action  # type: str
        self.config_file_name = config_file_name  # type: str
        self.config_item_description = config_item_description  # type: str
        self.config_item_key = config_item_key  # type: str
        self.config_item_value = config_item_value  # type: str
        self.config_scope = config_scope  # type: str
        self.effective_actions = effective_actions  # type: str
        self.effective_type = effective_type  # type: str
        self.node_group_id = node_group_id  # type: str
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplicationConfigParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_action is not None:
            result['ConfigAction'] = self.config_action
        if self.config_file_name is not None:
            result['ConfigFileName'] = self.config_file_name
        if self.config_item_description is not None:
            result['ConfigItemDescription'] = self.config_item_description
        if self.config_item_key is not None:
            result['ConfigItemKey'] = self.config_item_key
        if self.config_item_value is not None:
            result['ConfigItemValue'] = self.config_item_value
        if self.config_scope is not None:
            result['ConfigScope'] = self.config_scope
        if self.effective_actions is not None:
            result['EffectiveActions'] = self.effective_actions
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigAction') is not None:
            self.config_action = m.get('ConfigAction')
        if m.get('ConfigFileName') is not None:
            self.config_file_name = m.get('ConfigFileName')
        if m.get('ConfigItemDescription') is not None:
            self.config_item_description = m.get('ConfigItemDescription')
        if m.get('ConfigItemKey') is not None:
            self.config_item_key = m.get('ConfigItemKey')
        if m.get('ConfigItemValue') is not None:
            self.config_item_value = m.get('ConfigItemValue')
        if m.get('ConfigScope') is not None:
            self.config_scope = m.get('ConfigScope')
        if m.get('EffectiveActions') is not None:
            self.effective_actions = m.get('EffectiveActions')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class Attribute(TeaModel):
    def __init__(self, key=None, value=None):
        # 键。
        self.key = key  # type: str
        # 值。
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Attribute, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AutoRenewInstance(TeaModel):
    def __init__(self, auto_renew=None, auto_renew_duration=None, auto_renew_duration_unit=None,
                 emr_auto_renew_duration=None, emr_auto_renew_duration_unit=None, instance_id=None):
        # 自动续费。
        self.auto_renew = auto_renew  # type: bool
        # 自动续费时长。
        self.auto_renew_duration = auto_renew_duration  # type: int
        # 自动付费时长单位。
        self.auto_renew_duration_unit = auto_renew_duration_unit  # type: str
        # emr实例自动续费时长。
        self.emr_auto_renew_duration = emr_auto_renew_duration  # type: int
        # emr实例自动续费时长单位。
        self.emr_auto_renew_duration_unit = emr_auto_renew_duration_unit  # type: str
        # 节点ID。
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AutoRenewInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_renew is not None:
            result['AutoRenew'] = self.auto_renew
        if self.auto_renew_duration is not None:
            result['AutoRenewDuration'] = self.auto_renew_duration
        if self.auto_renew_duration_unit is not None:
            result['AutoRenewDurationUnit'] = self.auto_renew_duration_unit
        if self.emr_auto_renew_duration is not None:
            result['EmrAutoRenewDuration'] = self.emr_auto_renew_duration
        if self.emr_auto_renew_duration_unit is not None:
            result['EmrAutoRenewDurationUnit'] = self.emr_auto_renew_duration_unit
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AutoRenew') is not None:
            self.auto_renew = m.get('AutoRenew')
        if m.get('AutoRenewDuration') is not None:
            self.auto_renew_duration = m.get('AutoRenewDuration')
        if m.get('AutoRenewDurationUnit') is not None:
            self.auto_renew_duration_unit = m.get('AutoRenewDurationUnit')
        if m.get('EmrAutoRenewDuration') is not None:
            self.emr_auto_renew_duration = m.get('EmrAutoRenewDuration')
        if m.get('EmrAutoRenewDurationUnit') is not None:
            self.emr_auto_renew_duration_unit = m.get('EmrAutoRenewDurationUnit')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class AutoRenewInstanceParam(TeaModel):
    def __init__(self, auto_renew=None, auto_renew_duration=None, auto_renew_duration_unit=None, instance_id=None):
        self.auto_renew = auto_renew  # type: str
        self.auto_renew_duration = auto_renew_duration  # type: str
        self.auto_renew_duration_unit = auto_renew_duration_unit  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AutoRenewInstanceParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_renew is not None:
            result['AutoRenew'] = self.auto_renew
        if self.auto_renew_duration is not None:
            result['AutoRenewDuration'] = self.auto_renew_duration
        if self.auto_renew_duration_unit is not None:
            result['AutoRenewDurationUnit'] = self.auto_renew_duration_unit
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AutoRenew') is not None:
            self.auto_renew = m.get('AutoRenew')
        if m.get('AutoRenewDuration') is not None:
            self.auto_renew_duration = m.get('AutoRenewDuration')
        if m.get('AutoRenewDurationUnit') is not None:
            self.auto_renew_duration_unit = m.get('AutoRenewDurationUnit')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class AutoScalingConstraintsSupportMetricTags(TeaModel):
    def __init__(self, metric_name=None, tags=None):
        # 指标名称。
        self.metric_name = metric_name  # type: str
        # 指标Tag。
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AutoScalingConstraintsSupportMetricTags, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class AutoScalingConstraints(TeaModel):
    def __init__(self, auto_scaling_metric_units=None, default_metric_triggered_rules=None,
                 max_adjustment_value=None, max_by_load_rule_count=None, max_by_time_rule_count=None, support_metric_tags=None,
                 support_metrics=None, support_rule_types=None):
        # 按负载伸缩指标单位描述。
        self.auto_scaling_metric_units = auto_scaling_metric_units  # type: list[MetricUnitValue]
        # 默认按负载弹性伸缩规则列表
        self.default_metric_triggered_rules = default_metric_triggered_rules  # type: list[ScalingRule]
        # 单次伸缩活动最大扩缩容节点数量。
        self.max_adjustment_value = max_adjustment_value  # type: int
        # 按负载规则数量最大值。
        self.max_by_load_rule_count = max_by_load_rule_count  # type: int
        # 按时间规则数量最大值。
        self.max_by_time_rule_count = max_by_time_rule_count  # type: int
        # 支持的按负载弹性伸缩指标Tag列表。
        self.support_metric_tags = support_metric_tags  # type: list[AutoScalingConstraintsSupportMetricTags]
        # 支持的按负载弹性伸缩指标列表。
        self.support_metrics = support_metrics  # type: list[str]
        # 支持的弹性伸缩规则类型。
        self.support_rule_types = support_rule_types  # type: list[str]

    def validate(self):
        if self.auto_scaling_metric_units:
            for k in self.auto_scaling_metric_units:
                if k:
                    k.validate()
        if self.default_metric_triggered_rules:
            for k in self.default_metric_triggered_rules:
                if k:
                    k.validate()
        if self.support_metric_tags:
            for k in self.support_metric_tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AutoScalingConstraints, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AutoScalingMetricUnits'] = []
        if self.auto_scaling_metric_units is not None:
            for k in self.auto_scaling_metric_units:
                result['AutoScalingMetricUnits'].append(k.to_map() if k else None)
        result['DefaultMetricTriggeredRules'] = []
        if self.default_metric_triggered_rules is not None:
            for k in self.default_metric_triggered_rules:
                result['DefaultMetricTriggeredRules'].append(k.to_map() if k else None)
        if self.max_adjustment_value is not None:
            result['MaxAdjustmentValue'] = self.max_adjustment_value
        if self.max_by_load_rule_count is not None:
            result['MaxByLoadRuleCount'] = self.max_by_load_rule_count
        if self.max_by_time_rule_count is not None:
            result['MaxByTimeRuleCount'] = self.max_by_time_rule_count
        result['SupportMetricTags'] = []
        if self.support_metric_tags is not None:
            for k in self.support_metric_tags:
                result['SupportMetricTags'].append(k.to_map() if k else None)
        if self.support_metrics is not None:
            result['SupportMetrics'] = self.support_metrics
        if self.support_rule_types is not None:
            result['SupportRuleTypes'] = self.support_rule_types
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.auto_scaling_metric_units = []
        if m.get('AutoScalingMetricUnits') is not None:
            for k in m.get('AutoScalingMetricUnits'):
                temp_model = MetricUnitValue()
                self.auto_scaling_metric_units.append(temp_model.from_map(k))
        self.default_metric_triggered_rules = []
        if m.get('DefaultMetricTriggeredRules') is not None:
            for k in m.get('DefaultMetricTriggeredRules'):
                temp_model = ScalingRule()
                self.default_metric_triggered_rules.append(temp_model.from_map(k))
        if m.get('MaxAdjustmentValue') is not None:
            self.max_adjustment_value = m.get('MaxAdjustmentValue')
        if m.get('MaxByLoadRuleCount') is not None:
            self.max_by_load_rule_count = m.get('MaxByLoadRuleCount')
        if m.get('MaxByTimeRuleCount') is not None:
            self.max_by_time_rule_count = m.get('MaxByTimeRuleCount')
        self.support_metric_tags = []
        if m.get('SupportMetricTags') is not None:
            for k in m.get('SupportMetricTags'):
                temp_model = AutoScalingConstraintsSupportMetricTags()
                self.support_metric_tags.append(temp_model.from_map(k))
        if m.get('SupportMetrics') is not None:
            self.support_metrics = m.get('SupportMetrics')
        if m.get('SupportRuleTypes') is not None:
            self.support_rule_types = m.get('SupportRuleTypes')
        return self


class ByLoadScalingRule(TeaModel):
    def __init__(self, comparison_operator=None, cool_down_interval=None, evaluation_count=None, metric_name=None,
                 statistics=None, threshold=None, time_window=None):
        # 比较符。
        self.comparison_operator = comparison_operator  # type: str
        self.cool_down_interval = cool_down_interval  # type: int
        # 统计次数。
        self.evaluation_count = evaluation_count  # type: int
        # 指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。
        self.metric_name = metric_name  # type: str
        # 统计量名称。
        self.statistics = statistics  # type: str
        # 阈值。
        self.threshold = threshold  # type: float
        # 统计窗口。单位为秒。
        self.time_window = time_window  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ByLoadScalingRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comparison_operator is not None:
            result['ComparisonOperator'] = self.comparison_operator
        if self.cool_down_interval is not None:
            result['CoolDownInterval'] = self.cool_down_interval
        if self.evaluation_count is not None:
            result['EvaluationCount'] = self.evaluation_count
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.statistics is not None:
            result['Statistics'] = self.statistics
        if self.threshold is not None:
            result['Threshold'] = self.threshold
        if self.time_window is not None:
            result['TimeWindow'] = self.time_window
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComparisonOperator') is not None:
            self.comparison_operator = m.get('ComparisonOperator')
        if m.get('CoolDownInterval') is not None:
            self.cool_down_interval = m.get('CoolDownInterval')
        if m.get('EvaluationCount') is not None:
            self.evaluation_count = m.get('EvaluationCount')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('Statistics') is not None:
            self.statistics = m.get('Statistics')
        if m.get('Threshold') is not None:
            self.threshold = m.get('Threshold')
        if m.get('TimeWindow') is not None:
            self.time_window = m.get('TimeWindow')
        return self


class ByLoadScalingRuleSpec(TeaModel):
    def __init__(self, comparison_operator=None, evaluation_count=None, metric_name=None, statistics=None,
                 threshold=None, time_window=None):
        # 比较符。
        self.comparison_operator = comparison_operator  # type: str
        # 统计次数。
        self.evaluation_count = evaluation_count  # type: int
        # 指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。
        self.metric_name = metric_name  # type: str
        # 统计量名称。
        self.statistics = statistics  # type: str
        # 阈值。
        self.threshold = threshold  # type: float
        # 统计窗口。单位为秒。
        self.time_window = time_window  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ByLoadScalingRuleSpec, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comparison_operator is not None:
            result['ComparisonOperator'] = self.comparison_operator
        if self.evaluation_count is not None:
            result['EvaluationCount'] = self.evaluation_count
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.statistics is not None:
            result['Statistics'] = self.statistics
        if self.threshold is not None:
            result['Threshold'] = self.threshold
        if self.time_window is not None:
            result['TimeWindow'] = self.time_window
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComparisonOperator') is not None:
            self.comparison_operator = m.get('ComparisonOperator')
        if m.get('EvaluationCount') is not None:
            self.evaluation_count = m.get('EvaluationCount')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('Statistics') is not None:
            self.statistics = m.get('Statistics')
        if m.get('Threshold') is not None:
            self.threshold = m.get('Threshold')
        if m.get('TimeWindow') is not None:
            self.time_window = m.get('TimeWindow')
        return self


class ByTimeScalingRule(TeaModel):
    def __init__(self, end_time=None, launch_expiration_time=None, launch_time=None, recurrence_type=None,
                 recurrence_value=None):
        # 重复执行定时任务的结束时间戳。单位为毫秒。
        self.end_time = end_time  # type: long
        # 定时任务触发操作失败后，在此时间内重试。单位为秒，取值范围：0~3600。
        self.launch_expiration_time = launch_expiration_time  # type: int
        # 启动时间戳。单位为毫秒。
        self.launch_time = launch_time  # type: long
        # 指定时间规则的执行类型。
        self.recurrence_type = recurrence_type  # type: str
        # 重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。
        # - recurrenceType 取 MINUTELY 时，只能填一个数值，取值范围：1~1440。
        # - recurrenceType 取 HOURLY 时，只能填一个数值，取值范围：1~24。
        # - recurrenceType 取 DAILY 时，只能填一个数值，取值范围：1~31。
        # - recurrenceType 取 WEEKLY 时，可以填入多个值，填多个值时使用英文逗号（,）分隔。周一到周天分别用MON，TUE，WED，THU，FRI，SAT，SUN代替。 比如 MON,FRI,SUN 代表周一、周五、周天。
        # - recurrenceType 取 MONTHLY 时，格式为A-B或者A,B。A、B的取值范围为1~31，如果使用A-B时B必须大于A。
        self.recurrence_value = recurrence_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ByTimeScalingRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.launch_expiration_time is not None:
            result['LaunchExpirationTime'] = self.launch_expiration_time
        if self.launch_time is not None:
            result['LaunchTime'] = self.launch_time
        if self.recurrence_type is not None:
            result['RecurrenceType'] = self.recurrence_type
        if self.recurrence_value is not None:
            result['RecurrenceValue'] = self.recurrence_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('LaunchExpirationTime') is not None:
            self.launch_expiration_time = m.get('LaunchExpirationTime')
        if m.get('LaunchTime') is not None:
            self.launch_time = m.get('LaunchTime')
        if m.get('RecurrenceType') is not None:
            self.recurrence_type = m.get('RecurrenceType')
        if m.get('RecurrenceValue') is not None:
            self.recurrence_value = m.get('RecurrenceValue')
        return self


class ByTimeScalingRuleSpec(TeaModel):
    def __init__(self, end_time=None, launch_time=None, recurrence_type=None, recurrence_value=None):
        # 重复执行定时任务的结束时间戳。单位为毫秒。
        self.end_time = end_time  # type: long
        # 启动时间戳。单位为毫秒。
        self.launch_time = launch_time  # type: long
        # 指定时间规则的执行类型。
        self.recurrence_type = recurrence_type  # type: str
        # 重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。
        self.recurrence_value = recurrence_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ByTimeScalingRuleSpec, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.launch_time is not None:
            result['LaunchTime'] = self.launch_time
        if self.recurrence_type is not None:
            result['RecurrenceType'] = self.recurrence_type
        if self.recurrence_value is not None:
            result['RecurrenceValue'] = self.recurrence_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('LaunchTime') is not None:
            self.launch_time = m.get('LaunchTime')
        if m.get('RecurrenceType') is not None:
            self.recurrence_type = m.get('RecurrenceType')
        if m.get('RecurrenceValue') is not None:
            self.recurrence_value = m.get('RecurrenceValue')
        return self


class ClickhouseConf(TeaModel):
    def __init__(self, initial_replica=None, initial_shard=None, new_node_count=None, resize_type=None):
        self.initial_replica = initial_replica  # type: int
        self.initial_shard = initial_shard  # type: int
        self.new_node_count = new_node_count  # type: int
        self.resize_type = resize_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClickhouseConf, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.initial_replica is not None:
            result['InitialReplica'] = self.initial_replica
        if self.initial_shard is not None:
            result['InitialShard'] = self.initial_shard
        if self.new_node_count is not None:
            result['NewNodeCount'] = self.new_node_count
        if self.resize_type is not None:
            result['ResizeType'] = self.resize_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InitialReplica') is not None:
            self.initial_replica = m.get('InitialReplica')
        if m.get('InitialShard') is not None:
            self.initial_shard = m.get('InitialShard')
        if m.get('NewNodeCount') is not None:
            self.new_node_count = m.get('NewNodeCount')
        if m.get('ResizeType') is not None:
            self.resize_type = m.get('ResizeType')
        return self


class Cluster(TeaModel):
    def __init__(self, cluster_id=None, cluster_name=None, cluster_state=None, cluster_type=None, create_time=None,
                 deploy_mode=None, emr_default_role=None, end_time=None, expire_time=None, node_attributes=None,
                 payment_type=None, ready_time=None, region_id=None, release_version=None, resource_group_id=None,
                 security_mode=None, state_change_reason=None, status=None, subscription_config=None, tags=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 集群名称。
        self.cluster_name = cluster_name  # type: str
        # 集群状态。
        self.cluster_state = cluster_state  # type: str
        # 集群类型。
        self.cluster_type = cluster_type  # type: str
        # 创建时间。
        self.create_time = create_time  # type: long
        # 部署模式。
        self.deploy_mode = deploy_mode  # type: str
        # EMR默认角色。
        self.emr_default_role = emr_default_role  # type: str
        # 删除时间。
        self.end_time = end_time  # type: long
        # 过期时间。
        self.expire_time = expire_time  # type: long
        # 节点属性。
        self.node_attributes = node_attributes  # type: NodeAttributes
        # 付费类型。
        self.payment_type = payment_type  # type: str
        # 可用时间。
        self.ready_time = ready_time  # type: long
        # 地域ID。
        self.region_id = region_id  # type: str
        # EMR发行版。
        self.release_version = release_version  # type: str
        # 资源组ID。
        self.resource_group_id = resource_group_id  # type: str
        # Kerberos安全模式。
        self.security_mode = security_mode  # type: str
        self.state_change_reason = state_change_reason  # type: ClusterStateChangeReason
        # 集群状态，值同clusterState
        self.status = status  # type: str
        # 预付费配置。
        self.subscription_config = subscription_config  # type: SubscriptionConfig
        # 集群标签。
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.node_attributes:
            self.node_attributes.validate()
        if self.state_change_reason:
            self.state_change_reason.validate()
        if self.subscription_config:
            self.subscription_config.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(Cluster, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.cluster_name is not None:
            result['ClusterName'] = self.cluster_name
        if self.cluster_state is not None:
            result['ClusterState'] = self.cluster_state
        if self.cluster_type is not None:
            result['ClusterType'] = self.cluster_type
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_mode is not None:
            result['DeployMode'] = self.deploy_mode
        if self.emr_default_role is not None:
            result['EmrDefaultRole'] = self.emr_default_role
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.node_attributes is not None:
            result['NodeAttributes'] = self.node_attributes.to_map()
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        if self.ready_time is not None:
            result['ReadyTime'] = self.ready_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.security_mode is not None:
            result['SecurityMode'] = self.security_mode
        if self.state_change_reason is not None:
            result['StateChangeReason'] = self.state_change_reason.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.subscription_config is not None:
            result['SubscriptionConfig'] = self.subscription_config.to_map()
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ClusterName') is not None:
            self.cluster_name = m.get('ClusterName')
        if m.get('ClusterState') is not None:
            self.cluster_state = m.get('ClusterState')
        if m.get('ClusterType') is not None:
            self.cluster_type = m.get('ClusterType')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployMode') is not None:
            self.deploy_mode = m.get('DeployMode')
        if m.get('EmrDefaultRole') is not None:
            self.emr_default_role = m.get('EmrDefaultRole')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('NodeAttributes') is not None:
            temp_model = NodeAttributes()
            self.node_attributes = temp_model.from_map(m['NodeAttributes'])
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        if m.get('ReadyTime') is not None:
            self.ready_time = m.get('ReadyTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SecurityMode') is not None:
            self.security_mode = m.get('SecurityMode')
        if m.get('StateChangeReason') is not None:
            temp_model = ClusterStateChangeReason()
            self.state_change_reason = temp_model.from_map(m['StateChangeReason'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SubscriptionConfig') is not None:
            temp_model = SubscriptionConfig()
            self.subscription_config = temp_model.from_map(m['SubscriptionConfig'])
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class ClusterScript(TeaModel):
    def __init__(self, execution_fail_strategy=None, execution_moment=None, node_select=None, priority=None,
                 script_args=None, script_name=None, script_path=None):
        self.execution_fail_strategy = execution_fail_strategy  # type: str
        self.execution_moment = execution_moment  # type: str
        self.node_select = node_select  # type: NodeSelector
        self.priority = priority  # type: int
        self.script_args = script_args  # type: str
        self.script_name = script_name  # type: str
        self.script_path = script_path  # type: str

    def validate(self):
        if self.node_select:
            self.node_select.validate()

    def to_map(self):
        _map = super(ClusterScript, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.execution_fail_strategy is not None:
            result['ExecutionFailStrategy'] = self.execution_fail_strategy
        if self.execution_moment is not None:
            result['ExecutionMoment'] = self.execution_moment
        if self.node_select is not None:
            result['NodeSelect'] = self.node_select.to_map()
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.script_args is not None:
            result['ScriptArgs'] = self.script_args
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_path is not None:
            result['ScriptPath'] = self.script_path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExecutionFailStrategy') is not None:
            self.execution_fail_strategy = m.get('ExecutionFailStrategy')
        if m.get('ExecutionMoment') is not None:
            self.execution_moment = m.get('ExecutionMoment')
        if m.get('NodeSelect') is not None:
            temp_model = NodeSelector()
            self.node_select = temp_model.from_map(m['NodeSelect'])
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ScriptArgs') is not None:
            self.script_args = m.get('ScriptArgs')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptPath') is not None:
            self.script_path = m.get('ScriptPath')
        return self


class ClusterStateChangeReason(TeaModel):
    def __init__(self, code=None, message=None):
        # 状态码。取值范围：
        # - UserRequest：用户请求。
        # - OutOfStock：请求的ECS实例类型无库存。
        # - NotAuthorized：无权限。
        # - QuotaExceeded：Quota超出。
        # - OperationDenied：操作被拒绝。
        # - AccountException：账号异常。
        # - NodeFailure：ECS节点异常。
        # - BootstrapFailure：引导失败。
        # - ValidationFail：业务逻辑校验失败。
        # - ServiceFailure：依赖的其他服务失败。
        # - InternalError：内部错误。
        self.code = code  # type: str
        # 状态变化信息。
        self.message = message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClusterStateChangeReason, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class ClusterSummary(TeaModel):
    def __init__(self, cluster_id=None, cluster_name=None, cluster_state=None, cluster_type=None, create_time=None,
                 emr_default_role=None, end_time=None, expire_time=None, payment_type=None, ready_time=None, release_version=None,
                 resource_group_id=None, state_change_reason=None, status=None, tags=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 集群名称。
        self.cluster_name = cluster_name  # type: str
        # 集群状态。取值范围：
        # - STARTING：启动中。
        # - START_FAILED：启动失败。
        # - BOOTSTRAPPING：引导操作初始化。
        # - RUNNING：运行中。
        # - TERMINATING：终止中。
        # - TERMINATED：已终止。
        # - TERMINATED_WITH_ERRORS：发生异常导致终止。
        # - TERMINATE_FAILED：终止失败。
        self.cluster_state = cluster_state  # type: str
        # 集群类型。取值范围：
        # - DATALAKE：新版数据湖。
        # - OLAP：数据分析。
        # - DATAFLOW：实时数据流。
        # - DATASERVING：数据服务。
        self.cluster_type = cluster_type  # type: str
        # 创建时间。
        self.create_time = create_time  # type: long
        # EMR服务角色。
        self.emr_default_role = emr_default_role  # type: str
        # 删除时间。
        self.end_time = end_time  # type: long
        # 过期时间。
        self.expire_time = expire_time  # type: long
        # 付费类型。取值范围：
        # - PayAsYouGo：后付费。
        # - Subscription：预付费。
        self.payment_type = payment_type  # type: str
        # 可用时间。
        self.ready_time = ready_time  # type: long
        # EMR发行版。
        self.release_version = release_version  # type: str
        # 资源组ID。
        self.resource_group_id = resource_group_id  # type: str
        # 失败原因。
        self.state_change_reason = state_change_reason  # type: ClusterStateChangeReason
        # 集群状态。取值范围：
        # - STARTING：启动中。
        # - START_FAILED：启动失败。
        # - BOOTSTRAPPING：引导操作初始化。
        # - RUNNING：运行中。
        # - TERMINATING：终止中。
        # - TERMINATED：已终止。
        # - TERMINATED_WITH_ERRORS：发生异常导致终止。
        # - TERMINATE_FAILED：终止失败。
        self.status = status  # type: str
        # 标签列表。
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.state_change_reason:
            self.state_change_reason.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ClusterSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.cluster_name is not None:
            result['ClusterName'] = self.cluster_name
        if self.cluster_state is not None:
            result['ClusterState'] = self.cluster_state
        if self.cluster_type is not None:
            result['ClusterType'] = self.cluster_type
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.emr_default_role is not None:
            result['EmrDefaultRole'] = self.emr_default_role
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        if self.ready_time is not None:
            result['ReadyTime'] = self.ready_time
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.state_change_reason is not None:
            result['StateChangeReason'] = self.state_change_reason.to_map()
        if self.status is not None:
            result['Status'] = self.status
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ClusterName') is not None:
            self.cluster_name = m.get('ClusterName')
        if m.get('ClusterState') is not None:
            self.cluster_state = m.get('ClusterState')
        if m.get('ClusterType') is not None:
            self.cluster_type = m.get('ClusterType')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('EmrDefaultRole') is not None:
            self.emr_default_role = m.get('EmrDefaultRole')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        if m.get('ReadyTime') is not None:
            self.ready_time = m.get('ReadyTime')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StateChangeReason') is not None:
            temp_model = ClusterStateChangeReason()
            self.state_change_reason = temp_model.from_map(m['StateChangeReason'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class ComponentInstanceSelectorComponentInstances(TeaModel):
    def __init__(self, application_name=None, component_name=None, node_id=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 组件名称。
        self.component_name = component_name  # type: str
        # 节点ID。
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ComponentInstanceSelectorComponentInstances, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class ComponentInstanceSelectorComponents(TeaModel):
    def __init__(self, application_name=None, component_name=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 组件名称。
        self.component_name = component_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ComponentInstanceSelectorComponents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        return self


class ComponentInstanceSelector(TeaModel):
    def __init__(self, application_name=None, component_instances=None, components=None, run_action_scope=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 组件实例列表。actionScope为COPONENT_INSTANCE时使用。
        self.component_instances = component_instances  # type: list[ComponentInstanceSelectorComponentInstances]
        # 组件列表。
        # actionScope为COPONENT时使用。
        self.components = components  # type: list[ComponentInstanceSelectorComponents]
        # 执行范围。
        self.run_action_scope = run_action_scope  # type: str

    def validate(self):
        if self.component_instances:
            for k in self.component_instances:
                if k:
                    k.validate()
        if self.components:
            for k in self.components:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ComponentInstanceSelector, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        result['ComponentInstances'] = []
        if self.component_instances is not None:
            for k in self.component_instances:
                result['ComponentInstances'].append(k.to_map() if k else None)
        result['Components'] = []
        if self.components is not None:
            for k in self.components:
                result['Components'].append(k.to_map() if k else None)
        if self.run_action_scope is not None:
            result['RunActionScope'] = self.run_action_scope
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        self.component_instances = []
        if m.get('ComponentInstances') is not None:
            for k in m.get('ComponentInstances'):
                temp_model = ComponentInstanceSelectorComponentInstances()
                self.component_instances.append(temp_model.from_map(k))
        self.components = []
        if m.get('Components') is not None:
            for k in m.get('Components'):
                temp_model = ComponentInstanceSelectorComponents()
                self.components.append(temp_model.from_map(k))
        if m.get('RunActionScope') is not None:
            self.run_action_scope = m.get('RunActionScope')
        return self


class ComponentLayoutNodeSelector(TeaModel):
    def __init__(self, node_end_index=None, node_group_id=None, node_group_index=None, node_group_name=None,
                 node_group_types=None, node_names=None, node_select_type=None, node_start_index=None):
        # 节点结束编号，包含结束编号。
        self.node_end_index = node_end_index  # type: int
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 机器组下标编号。
        self.node_group_index = node_group_index  # type: int
        # 机器组名。
        self.node_group_name = node_group_name  # type: str
        # SelectType = NODE_GROUP 且 nodeGroupId 不存在时使用
        self.node_group_types = node_group_types  # type: list[str]
        # 节点名称列表。
        self.node_names = node_names  # type: list[str]
        # 节点选择类型。
        self.node_select_type = node_select_type  # type: str
        # 节点开始编号，包含开始编号。
        self.node_start_index = node_start_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ComponentLayoutNodeSelector, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_end_index is not None:
            result['NodeEndIndex'] = self.node_end_index
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_index is not None:
            result['NodeGroupIndex'] = self.node_group_index
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.node_group_types is not None:
            result['NodeGroupTypes'] = self.node_group_types
        if self.node_names is not None:
            result['NodeNames'] = self.node_names
        if self.node_select_type is not None:
            result['NodeSelectType'] = self.node_select_type
        if self.node_start_index is not None:
            result['NodeStartIndex'] = self.node_start_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeEndIndex') is not None:
            self.node_end_index = m.get('NodeEndIndex')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupIndex') is not None:
            self.node_group_index = m.get('NodeGroupIndex')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('NodeGroupTypes') is not None:
            self.node_group_types = m.get('NodeGroupTypes')
        if m.get('NodeNames') is not None:
            self.node_names = m.get('NodeNames')
        if m.get('NodeSelectType') is not None:
            self.node_select_type = m.get('NodeSelectType')
        if m.get('NodeStartIndex') is not None:
            self.node_start_index = m.get('NodeStartIndex')
        return self


class ComponentLayout(TeaModel):
    def __init__(self, application_name=None, component_name=None, node_selector=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 组件名称。
        self.component_name = component_name  # type: str
        # 节点选择器。
        self.node_selector = node_selector  # type: ComponentLayoutNodeSelector

    def validate(self):
        if self.node_selector:
            self.node_selector.validate()

    def to_map(self):
        _map = super(ComponentLayout, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        if self.node_selector is not None:
            result['NodeSelector'] = self.node_selector.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        if m.get('NodeSelector') is not None:
            temp_model = ComponentLayoutNodeSelector()
            self.node_selector = temp_model.from_map(m['NodeSelector'])
        return self


class ConfigEffectActions(TeaModel):
    def __init__(self, config_effect_action=None, config_files=None):
        # 配置生效动作。
        self.config_effect_action = config_effect_action  # type: str
        # 配置生效配置文件。
        self.config_files = config_files  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConfigEffectActions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_effect_action is not None:
            result['ConfigEffectAction'] = self.config_effect_action
        if self.config_files is not None:
            result['ConfigFiles'] = self.config_files
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigEffectAction') is not None:
            self.config_effect_action = m.get('ConfigEffectAction')
        if m.get('ConfigFiles') is not None:
            self.config_files = m.get('ConfigFiles')
        return self


class ConvertNodeGroup(TeaModel):
    def __init__(self, node_group_id=None, payment_duration=None, payment_duration_unit=None, payment_type=None):
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 付费时长。
        self.payment_duration = payment_duration  # type: int
        # 付费时长单位。
        self.payment_duration_unit = payment_duration_unit  # type: str
        # 付费类型。
        self.payment_type = payment_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConvertNodeGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        return self


class ConvertNodeGroupParam(TeaModel):
    def __init__(self, node_group_id=None, payment_duration=None, payment_duration_unit=None, payment_type=None):
        self.node_group_id = node_group_id  # type: str
        self.payment_duration = payment_duration  # type: long
        self.payment_duration_unit = payment_duration_unit  # type: str
        self.payment_type = payment_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConvertNodeGroupParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        return self


class CostOptimizedConfig(TeaModel):
    def __init__(self, on_demand_base_capacity=None, on_demand_percentage_above_base_capacity=None,
                 spot_instance_pools=None):
        # 按量实例个数的最小值。节点组所需要按量实例个数的最小值，取值范围：0~1000。当按量实例个数少于该值时，将优先创建按量实例。
        self.on_demand_base_capacity = on_demand_base_capacity  # type: int
        # 节点组满足最小按量实例OnDemandBaseCapacity要求后，超出的实例中按量实例应占的比例，取值范围：0～100。
        self.on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity  # type: int
        # 指定可用实例规格的个数，伸缩组将按成本最低的多个规格均衡创建抢占式实例。取值范围：0~10。
        self.spot_instance_pools = spot_instance_pools  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostOptimizedConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.on_demand_base_capacity is not None:
            result['OnDemandBaseCapacity'] = self.on_demand_base_capacity
        if self.on_demand_percentage_above_base_capacity is not None:
            result['OnDemandPercentageAboveBaseCapacity'] = self.on_demand_percentage_above_base_capacity
        if self.spot_instance_pools is not None:
            result['SpotInstancePools'] = self.spot_instance_pools
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OnDemandBaseCapacity') is not None:
            self.on_demand_base_capacity = m.get('OnDemandBaseCapacity')
        if m.get('OnDemandPercentageAboveBaseCapacity') is not None:
            self.on_demand_percentage_above_base_capacity = m.get('OnDemandPercentageAboveBaseCapacity')
        if m.get('SpotInstancePools') is not None:
            self.spot_instance_pools = m.get('SpotInstancePools')
        return self


class CreateNodeGroupParam(TeaModel):
    def __init__(self, auto_renew=None, auto_renew_duration=None, auto_renew_duration_unit=None, data_disks=None,
                 instance_types=None, node_count=None, node_group_name=None, node_group_type=None, node_key_pair_name=None,
                 node_ram_role=None, node_root_password=None, payment_duration=None, payment_duration_unit=None,
                 payment_type=None, security_group_id=None, spot_strategy=None, system_disk=None, v_switch_ids=None,
                 with_public_ip=None, zone_id=None):
        self.auto_renew = auto_renew  # type: bool
        self.auto_renew_duration = auto_renew_duration  # type: int
        self.auto_renew_duration_unit = auto_renew_duration_unit  # type: str
        self.data_disks = data_disks  # type: list[DiskInfo]
        self.instance_types = instance_types  # type: list[str]
        self.node_count = node_count  # type: int
        self.node_group_name = node_group_name  # type: str
        self.node_group_type = node_group_type  # type: str
        self.node_key_pair_name = node_key_pair_name  # type: str
        self.node_ram_role = node_ram_role  # type: str
        self.node_root_password = node_root_password  # type: str
        self.payment_duration = payment_duration  # type: int
        self.payment_duration_unit = payment_duration_unit  # type: str
        self.payment_type = payment_type  # type: str
        self.security_group_id = security_group_id  # type: str
        self.spot_strategy = spot_strategy  # type: str
        self.system_disk = system_disk  # type: SystemDiskParam
        self.v_switch_ids = v_switch_ids  # type: list[str]
        self.with_public_ip = with_public_ip  # type: bool
        self.zone_id = zone_id  # type: str

    def validate(self):
        if self.data_disks:
            for k in self.data_disks:
                if k:
                    k.validate()
        if self.system_disk:
            self.system_disk.validate()

    def to_map(self):
        _map = super(CreateNodeGroupParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_renew is not None:
            result['AutoRenew'] = self.auto_renew
        if self.auto_renew_duration is not None:
            result['AutoRenewDuration'] = self.auto_renew_duration
        if self.auto_renew_duration_unit is not None:
            result['AutoRenewDurationUnit'] = self.auto_renew_duration_unit
        result['DataDisks'] = []
        if self.data_disks is not None:
            for k in self.data_disks:
                result['DataDisks'].append(k.to_map() if k else None)
        if self.instance_types is not None:
            result['InstanceTypes'] = self.instance_types
        if self.node_count is not None:
            result['NodeCount'] = self.node_count
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.node_group_type is not None:
            result['NodeGroupType'] = self.node_group_type
        if self.node_key_pair_name is not None:
            result['NodeKeyPairName'] = self.node_key_pair_name
        if self.node_ram_role is not None:
            result['NodeRamRole'] = self.node_ram_role
        if self.node_root_password is not None:
            result['NodeRootPassword'] = self.node_root_password
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        if self.security_group_id is not None:
            result['SecurityGroupId'] = self.security_group_id
        if self.spot_strategy is not None:
            result['SpotStrategy'] = self.spot_strategy
        if self.system_disk is not None:
            result['SystemDisk'] = self.system_disk.to_map()
        if self.v_switch_ids is not None:
            result['VSwitchIds'] = self.v_switch_ids
        if self.with_public_ip is not None:
            result['WithPublicIp'] = self.with_public_ip
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AutoRenew') is not None:
            self.auto_renew = m.get('AutoRenew')
        if m.get('AutoRenewDuration') is not None:
            self.auto_renew_duration = m.get('AutoRenewDuration')
        if m.get('AutoRenewDurationUnit') is not None:
            self.auto_renew_duration_unit = m.get('AutoRenewDurationUnit')
        self.data_disks = []
        if m.get('DataDisks') is not None:
            for k in m.get('DataDisks'):
                temp_model = DiskInfo()
                self.data_disks.append(temp_model.from_map(k))
        if m.get('InstanceTypes') is not None:
            self.instance_types = m.get('InstanceTypes')
        if m.get('NodeCount') is not None:
            self.node_count = m.get('NodeCount')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('NodeGroupType') is not None:
            self.node_group_type = m.get('NodeGroupType')
        if m.get('NodeKeyPairName') is not None:
            self.node_key_pair_name = m.get('NodeKeyPairName')
        if m.get('NodeRamRole') is not None:
            self.node_ram_role = m.get('NodeRamRole')
        if m.get('NodeRootPassword') is not None:
            self.node_root_password = m.get('NodeRootPassword')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        if m.get('SecurityGroupId') is not None:
            self.security_group_id = m.get('SecurityGroupId')
        if m.get('SpotStrategy') is not None:
            self.spot_strategy = m.get('SpotStrategy')
        if m.get('SystemDisk') is not None:
            temp_model = SystemDiskParam()
            self.system_disk = temp_model.from_map(m['SystemDisk'])
        if m.get('VSwitchIds') is not None:
            self.v_switch_ids = m.get('VSwitchIds')
        if m.get('WithPublicIp') is not None:
            self.with_public_ip = m.get('WithPublicIp')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class DataDisk(TeaModel):
    def __init__(self, category=None, count=None, performance_level=None, size=None):
        # 磁盘类型。
        self.category = category  # type: str
        # 每个节点磁盘数量。
        self.count = count  # type: int
        # 创建ESSD云盘作为数据盘使用时，设置云盘的性能等级。取值范围：
        # - PL0：单盘最高随机读写IOPS 1万。
        # - PL1（默认）：单盘最高随机读写IOPS 5万。
        # - PL2：单盘最高随机读写IOPS 10万。
        # - PL3：单盘最高随机读写IOPS 100万。
        # 
        # 默认值：PL1。
        self.performance_level = performance_level  # type: str
        # 单位GB。
        self.size = size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DataDisk, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.count is not None:
            result['Count'] = self.count
        if self.performance_level is not None:
            result['PerformanceLevel'] = self.performance_level
        if self.size is not None:
            result['Size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('PerformanceLevel') is not None:
            self.performance_level = m.get('PerformanceLevel')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        return self


class DecreaseNodeGroupParam(TeaModel):
    def __init__(self, node_group_id=None, release_instance_ids=None):
        self.node_group_id = node_group_id  # type: str
        self.release_instance_ids = release_instance_ids  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DecreaseNodeGroupParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.release_instance_ids is not None:
            result['ReleaseInstanceIds'] = self.release_instance_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('ReleaseInstanceIds') is not None:
            self.release_instance_ids = m.get('ReleaseInstanceIds')
        return self


class DeploymentLayout(TeaModel):
    def __init__(self, application_name=None, component_name=None, node_selector=None):
        self.application_name = application_name  # type: str
        self.component_name = component_name  # type: str
        self.node_selector = node_selector  # type: NodeSelector

    def validate(self):
        if self.node_selector:
            self.node_selector.validate()

    def to_map(self):
        _map = super(DeploymentLayout, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        if self.node_selector is not None:
            result['NodeSelector'] = self.node_selector.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        if m.get('NodeSelector') is not None:
            temp_model = NodeSelector()
            self.node_selector = temp_model.from_map(m['NodeSelector'])
        return self


class DeploymentSetConstraints(TeaModel):
    def __init__(self, default_value=None, enable_state=None, replacement_strategy=None, values=None):
        # 默认值。
        self.default_value = default_value  # type: str
        self.enable_state = enable_state  # type: str
        # 替换策略。
        self.replacement_strategy = replacement_strategy  # type: ReplacementStrategy
        # 枚举值。
        self.values = values  # type: list[str]

    def validate(self):
        if self.replacement_strategy:
            self.replacement_strategy.validate()

    def to_map(self):
        _map = super(DeploymentSetConstraints, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.default_value is not None:
            result['DefaultValue'] = self.default_value
        if self.enable_state is not None:
            result['EnableState'] = self.enable_state
        if self.replacement_strategy is not None:
            result['ReplacementStrategy'] = self.replacement_strategy.to_map()
        if self.values is not None:
            result['Values'] = self.values
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DefaultValue') is not None:
            self.default_value = m.get('DefaultValue')
        if m.get('EnableState') is not None:
            self.enable_state = m.get('EnableState')
        if m.get('ReplacementStrategy') is not None:
            temp_model = ReplacementStrategy()
            self.replacement_strategy = temp_model.from_map(m['ReplacementStrategy'])
        if m.get('Values') is not None:
            self.values = m.get('Values')
        return self


class Disk(TeaModel):
    def __init__(self, category=None, count=None, performance_level=None, size=None):
        # 磁盘类型。
        self.category = category  # type: str
        # 每个节点磁盘数量。
        self.count = count  # type: int
        # 性能级别。
        self.performance_level = performance_level  # type: str
        # 单位GB。
        self.size = size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(Disk, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.count is not None:
            result['Count'] = self.count
        if self.performance_level is not None:
            result['PerformanceLevel'] = self.performance_level
        if self.size is not None:
            result['Size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('PerformanceLevel') is not None:
            self.performance_level = m.get('PerformanceLevel')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        return self


class DiskConstraints(TeaModel):
    def __init__(self, categories=None, count_constraint=None, size_constraint=None):
        # 支持的磁盘类型。
        self.categories = categories  # type: list[str]
        # 磁盘数量最小值。
        self.count_constraint = count_constraint  # type: ValueConstraints
        # 磁盘容量限制。
        self.size_constraint = size_constraint  # type: ValueConstraints

    def validate(self):
        if self.count_constraint:
            self.count_constraint.validate()
        if self.size_constraint:
            self.size_constraint.validate()

    def to_map(self):
        _map = super(DiskConstraints, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.categories is not None:
            result['Categories'] = self.categories
        if self.count_constraint is not None:
            result['CountConstraint'] = self.count_constraint.to_map()
        if self.size_constraint is not None:
            result['SizeConstraint'] = self.size_constraint.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Categories') is not None:
            self.categories = m.get('Categories')
        if m.get('CountConstraint') is not None:
            temp_model = ValueConstraints()
            self.count_constraint = temp_model.from_map(m['CountConstraint'])
        if m.get('SizeConstraint') is not None:
            temp_model = ValueConstraints()
            self.size_constraint = temp_model.from_map(m['SizeConstraint'])
        return self


class DiskInfo(TeaModel):
    def __init__(self, category=None, count=None, performance_level=None, size=None):
        self.category = category  # type: str
        self.count = count  # type: int
        self.performance_level = performance_level  # type: str
        self.size = size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DiskInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.count is not None:
            result['Count'] = self.count
        if self.performance_level is not None:
            result['PerformanceLevel'] = self.performance_level
        if self.size is not None:
            result['Size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('PerformanceLevel') is not None:
            self.performance_level = m.get('PerformanceLevel')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        return self


class DiskSize(TeaModel):
    def __init__(self, category=None, size=None):
        # 磁盘类型。
        self.category = category  # type: str
        # 单位GB。
        self.size = size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DiskSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.size is not None:
            result['Size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        return self


class FailedReason(TeaModel):
    def __init__(self, error_code=None, error_message=None, request_id=None):
        # 错误码。
        self.error_code = error_code  # type: str
        # 错误信息。
        self.error_message = error_message  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FailedReason, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class HealthSummary(TeaModel):
    def __init__(self, bad_count=None, good_count=None, none_count=None, stopped_count=None, total_count=None,
                 unknown_count=None, warning_count=None):
        self.bad_count = bad_count  # type: long
        self.good_count = good_count  # type: long
        self.none_count = none_count  # type: long
        self.stopped_count = stopped_count  # type: long
        self.total_count = total_count  # type: long
        self.unknown_count = unknown_count  # type: long
        self.warning_count = warning_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HealthSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bad_count is not None:
            result['BadCount'] = self.bad_count
        if self.good_count is not None:
            result['GoodCount'] = self.good_count
        if self.none_count is not None:
            result['NoneCount'] = self.none_count
        if self.stopped_count is not None:
            result['StoppedCount'] = self.stopped_count
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.unknown_count is not None:
            result['UnknownCount'] = self.unknown_count
        if self.warning_count is not None:
            result['WarningCount'] = self.warning_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BadCount') is not None:
            self.bad_count = m.get('BadCount')
        if m.get('GoodCount') is not None:
            self.good_count = m.get('GoodCount')
        if m.get('NoneCount') is not None:
            self.none_count = m.get('NoneCount')
        if m.get('StoppedCount') is not None:
            self.stopped_count = m.get('StoppedCount')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('UnknownCount') is not None:
            self.unknown_count = m.get('UnknownCount')
        if m.get('WarningCount') is not None:
            self.warning_count = m.get('WarningCount')
        return self


class IncreaseNodeGroup(TeaModel):
    def __init__(self, description=None, node_count=None, node_group_id=None, payment_duration=None,
                 payment_duration_unit=None, v_switch_id=None):
        # 描述。
        self.description = description  # type: str
        # 节点数量。
        self.node_count = node_count  # type: int
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 付费时长。
        self.payment_duration = payment_duration  # type: int
        # 付费时长单位。
        self.payment_duration_unit = payment_duration_unit  # type: str
        # 虚拟机交换机ID。
        self.v_switch_id = v_switch_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IncreaseNodeGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.node_count is not None:
            result['NodeCount'] = self.node_count
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        if self.v_switch_id is not None:
            result['VSwitchId'] = self.v_switch_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('NodeCount') is not None:
            self.node_count = m.get('NodeCount')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        if m.get('VSwitchId') is not None:
            self.v_switch_id = m.get('VSwitchId')
        return self


class IncreaseNodeGroupParam(TeaModel):
    def __init__(self, node_count=None, node_group_id=None, payment_duration=None, payment_duration_unit=None,
                 v_switch_id=None):
        self.node_count = node_count  # type: long
        self.node_group_id = node_group_id  # type: str
        self.payment_duration = payment_duration  # type: int
        self.payment_duration_unit = payment_duration_unit  # type: str
        self.v_switch_id = v_switch_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IncreaseNodeGroupParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_count is not None:
            result['NodeCount'] = self.node_count
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        if self.v_switch_id is not None:
            result['VSwitchId'] = self.v_switch_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeCount') is not None:
            self.node_count = m.get('NodeCount')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        if m.get('VSwitchId') is not None:
            self.v_switch_id = m.get('VSwitchId')
        return self


class InstanceCategory(TeaModel):
    def __init__(self, default_value=None, keys=None, values=None):
        # 默认值。
        self.default_value = default_value  # type: str
        self.keys = keys  # type: list[str]
        self.values = values  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(InstanceCategory, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.default_value is not None:
            result['DefaultValue'] = self.default_value
        if self.keys is not None:
            result['Keys'] = self.keys
        if self.values is not None:
            result['Values'] = self.values
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DefaultValue') is not None:
            self.default_value = m.get('DefaultValue')
        if m.get('Keys') is not None:
            self.keys = m.get('Keys')
        if m.get('Values') is not None:
            self.values = m.get('Values')
        return self


class InstanceType(TeaModel):
    def __init__(self, cpu_architecture=None, cpu_core=None, instance_category=None, instance_type=None,
                 instance_type_family=None, local_storage_amount=None, local_storage_capacity=None, optimized=None):
        # cpu架构。
        self.cpu_architecture = cpu_architecture  # type: str
        # vCPU内核数目。
        self.cpu_core = cpu_core  # type: int
        # 实例规格分类。取值范围：
        # - General-purpose： 通用型。
        # - Compute-optimized：计算型。
        # - Memory-optimized：内存型。
        # - Big data：大数据型。
        # - Local SSDs ：本地SSD型。
        # - High Clock Speed ：高主频型。
        # - Enhanced ：增强型。
        # - Shared：共享型。
        # - Compute-optimized with GPU ：GPU计算型。
        # - Visual Compute-optimized ：视觉计算型。
        # - Heterogeneous Service ：异构服务型。
        # - Compute-optimized with FPGA ：FPGA计算型。
        # - Compute-optimized with NPU ：NPU计算型。
        # - ECS Bare Metal ：弹性裸金属服务器。
        # - Super Computing Cluster：超级计算集群。
        self.instance_category = instance_category  # type: str
        # 实例规格。
        self.instance_type = instance_type  # type: str
        # 实例规格所属的实例规格族。取值请参见DescribeInstanceTypeFamilies。
        self.instance_type_family = instance_type_family  # type: str
        # 实例挂载的本地盘的数量。
        self.local_storage_amount = local_storage_amount  # type: int
        # 实例挂载的本地盘的单盘容量。单位：GiB
        self.local_storage_capacity = local_storage_capacity  # type: long
        # 是否IO优化类型。
        self.optimized = optimized  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(InstanceType, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu_architecture is not None:
            result['CpuArchitecture'] = self.cpu_architecture
        if self.cpu_core is not None:
            result['CpuCore'] = self.cpu_core
        if self.instance_category is not None:
            result['InstanceCategory'] = self.instance_category
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.instance_type_family is not None:
            result['InstanceTypeFamily'] = self.instance_type_family
        if self.local_storage_amount is not None:
            result['LocalStorageAmount'] = self.local_storage_amount
        if self.local_storage_capacity is not None:
            result['LocalStorageCapacity'] = self.local_storage_capacity
        if self.optimized is not None:
            result['Optimized'] = self.optimized
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CpuArchitecture') is not None:
            self.cpu_architecture = m.get('CpuArchitecture')
        if m.get('CpuCore') is not None:
            self.cpu_core = m.get('CpuCore')
        if m.get('InstanceCategory') is not None:
            self.instance_category = m.get('InstanceCategory')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('InstanceTypeFamily') is not None:
            self.instance_type_family = m.get('InstanceTypeFamily')
        if m.get('LocalStorageAmount') is not None:
            self.local_storage_amount = m.get('LocalStorageAmount')
        if m.get('LocalStorageCapacity') is not None:
            self.local_storage_capacity = m.get('LocalStorageCapacity')
        if m.get('Optimized') is not None:
            self.optimized = m.get('Optimized')
        return self


class KeyValue(TeaModel):
    def __init__(self, key=None, value=None):
        # 键。
        self.key = key  # type: str
        # 值。
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(KeyValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListApiTemplatesDTO(TeaModel):
    def __init__(self, api_name=None, content=None, gmt_create=None, gmt_modified=None, id=None, operator_id=None,
                 region_id=None, resource_group_id=None, status=None, template_id=None, template_name=None, user_id=None):
        self.api_name = api_name  # type: str
        self.content = content  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.operator_id = operator_id  # type: str
        self.region_id = region_id  # type: str
        self.resource_group_id = resource_group_id  # type: str
        self.status = status  # type: str
        self.template_id = template_id  # type: str
        self.template_name = template_name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListApiTemplatesDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.content is not None:
            result['Content'] = self.content
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.operator_id is not None:
            result['OperatorId'] = self.operator_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.status is not None:
            result['Status'] = self.status
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperatorId') is not None:
            self.operator_id = m.get('OperatorId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class MetaStoreConf(TeaModel):
    def __init__(self, db_password=None, db_url=None, db_user_name=None):
        self.db_password = db_password  # type: str
        self.db_url = db_url  # type: str
        self.db_user_name = db_user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MetaStoreConf, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.db_password is not None:
            result['DbPassword'] = self.db_password
        if self.db_url is not None:
            result['DbUrl'] = self.db_url
        if self.db_user_name is not None:
            result['DbUserName'] = self.db_user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DbPassword') is not None:
            self.db_password = m.get('DbPassword')
        if m.get('DbUrl') is not None:
            self.db_url = m.get('DbUrl')
        if m.get('DbUserName') is not None:
            self.db_user_name = m.get('DbUserName')
        return self


class MetricUnitValue(TeaModel):
    def __init__(self, metric_name=None, metric_unit=None):
        # 指标名称。
        self.metric_name = metric_name  # type: str
        # 指标单位。
        self.metric_unit = metric_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MetricUnitValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.metric_unit is not None:
            result['MetricUnit'] = self.metric_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('MetricUnit') is not None:
            self.metric_unit = m.get('MetricUnit')
        return self


class MetricsTrigger(TeaModel):
    def __init__(self, condition_logic_operator=None, conditions=None, cool_down_interval=None,
                 evaluation_count=None, time_constraints=None, time_window=None):
        # 多指标逻辑关系。默认：Or。取值范围：
        # - And:与
        # - Or：或
        self.condition_logic_operator = condition_logic_operator  # type: str
        # 指标触发条件列表。
        self.conditions = conditions  # type: list[TriggerCondition]
        # 冷却时间。 单位为秒
        self.cool_down_interval = cool_down_interval  # type: int
        # 统计次数。
        self.evaluation_count = evaluation_count  # type: int
        # 时间限制。
        self.time_constraints = time_constraints  # type: list[TimeConstraint]
        # 统计窗口。单位为秒。
        self.time_window = time_window  # type: int

    def validate(self):
        if self.conditions:
            for k in self.conditions:
                if k:
                    k.validate()
        if self.time_constraints:
            for k in self.time_constraints:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(MetricsTrigger, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.condition_logic_operator is not None:
            result['ConditionLogicOperator'] = self.condition_logic_operator
        result['Conditions'] = []
        if self.conditions is not None:
            for k in self.conditions:
                result['Conditions'].append(k.to_map() if k else None)
        if self.cool_down_interval is not None:
            result['CoolDownInterval'] = self.cool_down_interval
        if self.evaluation_count is not None:
            result['EvaluationCount'] = self.evaluation_count
        result['TimeConstraints'] = []
        if self.time_constraints is not None:
            for k in self.time_constraints:
                result['TimeConstraints'].append(k.to_map() if k else None)
        if self.time_window is not None:
            result['TimeWindow'] = self.time_window
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConditionLogicOperator') is not None:
            self.condition_logic_operator = m.get('ConditionLogicOperator')
        self.conditions = []
        if m.get('Conditions') is not None:
            for k in m.get('Conditions'):
                temp_model = TriggerCondition()
                self.conditions.append(temp_model.from_map(k))
        if m.get('CoolDownInterval') is not None:
            self.cool_down_interval = m.get('CoolDownInterval')
        if m.get('EvaluationCount') is not None:
            self.evaluation_count = m.get('EvaluationCount')
        self.time_constraints = []
        if m.get('TimeConstraints') is not None:
            for k in m.get('TimeConstraints'):
                temp_model = TimeConstraint()
                self.time_constraints.append(temp_model.from_map(k))
        if m.get('TimeWindow') is not None:
            self.time_window = m.get('TimeWindow')
        return self


class Node(TeaModel):
    def __init__(self, auto_renew=None, auto_renew_duration=None, auto_renew_duration_unit=None, expire_time=None,
                 instance_type=None, maintenance_status=None, node_group_id=None, node_group_type=None, node_id=None,
                 node_name=None, node_state=None, private_ip=None, public_ip=None, zone_id=None):
        # 节点是否自动续费。
        self.auto_renew = auto_renew  # type: bool
        # 节点自动续费时长。
        self.auto_renew_duration = auto_renew_duration  # type: int
        # 节点自动续费时长单位。
        self.auto_renew_duration_unit = auto_renew_duration_unit  # type: str
        # 节点过期时间。
        self.expire_time = expire_time  # type: long
        # 实例类型。
        self.instance_type = instance_type  # type: str
        # 运维模式状态。取值范围：
        # - ON：处于运维模式。
        # - OFF：处于非运维模式。
        # 
        # 为空表示处于非运维模式。
        self.maintenance_status = maintenance_status  # type: str
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点组类型。
        self.node_group_type = node_group_type  # type: str
        # 节点ID。
        self.node_id = node_id  # type: str
        # 节点名称。
        self.node_name = node_name  # type: str
        # 节点状态。取值范围：
        # - Pending：创建中。
        # - Starting：启动中。
        # - Running：运行中。
        # - Stopping：停止中。
        # - Stopped：已停止。
        # - Terminated：已终止。
        self.node_state = node_state  # type: str
        # 私网IP。
        self.private_ip = private_ip  # type: str
        # 公网IP。
        self.public_ip = public_ip  # type: str
        # 可用区ID。
        self.zone_id = zone_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Node, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_renew is not None:
            result['AutoRenew'] = self.auto_renew
        if self.auto_renew_duration is not None:
            result['AutoRenewDuration'] = self.auto_renew_duration
        if self.auto_renew_duration_unit is not None:
            result['AutoRenewDurationUnit'] = self.auto_renew_duration_unit
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.maintenance_status is not None:
            result['MaintenanceStatus'] = self.maintenance_status
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_type is not None:
            result['NodeGroupType'] = self.node_group_type
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.node_state is not None:
            result['NodeState'] = self.node_state
        if self.private_ip is not None:
            result['PrivateIp'] = self.private_ip
        if self.public_ip is not None:
            result['PublicIp'] = self.public_ip
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AutoRenew') is not None:
            self.auto_renew = m.get('AutoRenew')
        if m.get('AutoRenewDuration') is not None:
            self.auto_renew_duration = m.get('AutoRenewDuration')
        if m.get('AutoRenewDurationUnit') is not None:
            self.auto_renew_duration_unit = m.get('AutoRenewDurationUnit')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('MaintenanceStatus') is not None:
            self.maintenance_status = m.get('MaintenanceStatus')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupType') is not None:
            self.node_group_type = m.get('NodeGroupType')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('NodeState') is not None:
            self.node_state = m.get('NodeState')
        if m.get('PrivateIp') is not None:
            self.private_ip = m.get('PrivateIp')
        if m.get('PublicIp') is not None:
            self.public_ip = m.get('PublicIp')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class NodeAttributes(TeaModel):
    def __init__(self, key_pair_name=None, ram_role=None, security_group_id=None, vpc_id=None, zone_id=None):
        # ECS ssh登录秘钥。
        self.key_pair_name = key_pair_name  # type: str
        # ECS访问资源绑定的角色。
        self.ram_role = ram_role  # type: str
        # 安全组ID。EMR只支持普通安全组，不支持企业安全组。
        self.security_group_id = security_group_id  # type: str
        # 专有网络ID。
        self.vpc_id = vpc_id  # type: str
        # 可用区ID。
        self.zone_id = zone_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(NodeAttributes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key_pair_name is not None:
            result['KeyPairName'] = self.key_pair_name
        if self.ram_role is not None:
            result['RamRole'] = self.ram_role
        if self.security_group_id is not None:
            result['SecurityGroupId'] = self.security_group_id
        if self.vpc_id is not None:
            result['VpcId'] = self.vpc_id
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('KeyPairName') is not None:
            self.key_pair_name = m.get('KeyPairName')
        if m.get('RamRole') is not None:
            self.ram_role = m.get('RamRole')
        if m.get('SecurityGroupId') is not None:
            self.security_group_id = m.get('SecurityGroupId')
        if m.get('VpcId') is not None:
            self.vpc_id = m.get('VpcId')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class NodeCountConstraint(TeaModel):
    def __init__(self, max=None, min=None, type=None, values=None):
        self.max = max  # type: int
        self.min = min  # type: int
        self.type = type  # type: str
        self.values = values  # type: list[int]

    def validate(self):
        pass

    def to_map(self):
        _map = super(NodeCountConstraint, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max is not None:
            result['Max'] = self.max
        if self.min is not None:
            result['Min'] = self.min
        if self.type is not None:
            result['Type'] = self.type
        if self.values is not None:
            result['Values'] = self.values
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Max') is not None:
            self.max = m.get('Max')
        if m.get('Min') is not None:
            self.min = m.get('Min')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Values') is not None:
            self.values = m.get('Values')
        return self


class NodeGroup(TeaModel):
    def __init__(self, additional_security_group_ids=None, cost_optimized_config=None, data_disks=None,
                 deployment_set_strategy=None, graceful_shutdown=None, instance_types=None, node_group_id=None, node_group_name=None,
                 node_group_state=None, node_group_type=None, node_resize_strategy=None, payment_type=None, running_node_count=None,
                 spot_bid_prices=None, spot_instance_remedy=None, spot_strategy=None, state_change_reason=None, system_disk=None,
                 v_switch_ids=None, with_public_ip=None, zone_id=None):
        # 安全组ID。
        self.additional_security_group_ids = additional_security_group_ids  # type: list[str]
        # 成本优化模式配置。
        self.cost_optimized_config = cost_optimized_config  # type: CostOptimizedConfig
        # 数据盘列表。
        self.data_disks = data_disks  # type: list[DataDisk]
        # 部署集策略。取值范围：
        # - NONE：不适用部署集。
        # - CLUSTER：使用集群级别部署集。
        # - NODE_GROUP：使用节点组级别部署集。
        # 
        # 默认值：NONE。
        self.deployment_set_strategy = deployment_set_strategy  # type: str
        # 节点组上部署的组件是否开启优雅下线。取值范围：
        # - true：开启优雅下线。
        # - false：不开启优雅下线。
        self.graceful_shutdown = graceful_shutdown  # type: bool
        # 实例类型列表。
        self.instance_types = instance_types  # type: list[str]
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点组名称。最大长度128个字符。
        self.node_group_name = node_group_name  # type: str
        # 节点组状态。
        self.node_group_state = node_group_state  # type: str
        # 节点组类型。取值范围：
        # - MASTER：管理类型节点组。
        # - CORE：存储类型节点组。
        # - TASK：计算类型节点组。
        self.node_group_type = node_group_type  # type: str
        # - COST_OPTIMIZED：成本优化策略。
        # - PRIORITY：优先级策略。
        self.node_resize_strategy = node_resize_strategy  # type: str
        # 节点组付费类型。取值范围：
        # - PayAsYouGo：后付费，按量付费。
        # - Subscription：预付费，包年包月。
        self.payment_type = payment_type  # type: str
        # 存活节点数量。
        self.running_node_count = running_node_count  # type: int
        self.spot_bid_prices = spot_bid_prices  # type: list[SpotBidPrice]
        # 开启补齐抢占式实例后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例。取值范围：
        # - true：开启补齐抢占式实例。
        # - false：不开启补齐抢占式实例。
        # 
        # 默认值：false。
        self.spot_instance_remedy = spot_instance_remedy  # type: bool
        # 是否支持竞价实例。
        self.spot_strategy = spot_strategy  # type: str
        # 状态变化原因。
        self.state_change_reason = state_change_reason  # type: NodeGroupStateChangeReason
        # 系统盘信息。
        self.system_disk = system_disk  # type: SystemDisk
        # 虚拟机交换机ID列表。
        self.v_switch_ids = v_switch_ids  # type: list[str]
        # 是否开公网IP。取值范围：
        # - true：开公网。
        # - false：不开公网。
        self.with_public_ip = with_public_ip  # type: bool
        # 可用区ID。
        self.zone_id = zone_id  # type: str

    def validate(self):
        if self.cost_optimized_config:
            self.cost_optimized_config.validate()
        if self.data_disks:
            for k in self.data_disks:
                if k:
                    k.validate()
        if self.spot_bid_prices:
            for k in self.spot_bid_prices:
                if k:
                    k.validate()
        if self.state_change_reason:
            self.state_change_reason.validate()
        if self.system_disk:
            self.system_disk.validate()

    def to_map(self):
        _map = super(NodeGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.additional_security_group_ids is not None:
            result['AdditionalSecurityGroupIds'] = self.additional_security_group_ids
        if self.cost_optimized_config is not None:
            result['CostOptimizedConfig'] = self.cost_optimized_config.to_map()
        result['DataDisks'] = []
        if self.data_disks is not None:
            for k in self.data_disks:
                result['DataDisks'].append(k.to_map() if k else None)
        if self.deployment_set_strategy is not None:
            result['DeploymentSetStrategy'] = self.deployment_set_strategy
        if self.graceful_shutdown is not None:
            result['GracefulShutdown'] = self.graceful_shutdown
        if self.instance_types is not None:
            result['InstanceTypes'] = self.instance_types
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.node_group_state is not None:
            result['NodeGroupState'] = self.node_group_state
        if self.node_group_type is not None:
            result['NodeGroupType'] = self.node_group_type
        if self.node_resize_strategy is not None:
            result['NodeResizeStrategy'] = self.node_resize_strategy
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        if self.running_node_count is not None:
            result['RunningNodeCount'] = self.running_node_count
        result['SpotBidPrices'] = []
        if self.spot_bid_prices is not None:
            for k in self.spot_bid_prices:
                result['SpotBidPrices'].append(k.to_map() if k else None)
        if self.spot_instance_remedy is not None:
            result['SpotInstanceRemedy'] = self.spot_instance_remedy
        if self.spot_strategy is not None:
            result['SpotStrategy'] = self.spot_strategy
        if self.state_change_reason is not None:
            result['StateChangeReason'] = self.state_change_reason.to_map()
        if self.system_disk is not None:
            result['SystemDisk'] = self.system_disk.to_map()
        if self.v_switch_ids is not None:
            result['VSwitchIds'] = self.v_switch_ids
        if self.with_public_ip is not None:
            result['WithPublicIp'] = self.with_public_ip
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AdditionalSecurityGroupIds') is not None:
            self.additional_security_group_ids = m.get('AdditionalSecurityGroupIds')
        if m.get('CostOptimizedConfig') is not None:
            temp_model = CostOptimizedConfig()
            self.cost_optimized_config = temp_model.from_map(m['CostOptimizedConfig'])
        self.data_disks = []
        if m.get('DataDisks') is not None:
            for k in m.get('DataDisks'):
                temp_model = DataDisk()
                self.data_disks.append(temp_model.from_map(k))
        if m.get('DeploymentSetStrategy') is not None:
            self.deployment_set_strategy = m.get('DeploymentSetStrategy')
        if m.get('GracefulShutdown') is not None:
            self.graceful_shutdown = m.get('GracefulShutdown')
        if m.get('InstanceTypes') is not None:
            self.instance_types = m.get('InstanceTypes')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('NodeGroupState') is not None:
            self.node_group_state = m.get('NodeGroupState')
        if m.get('NodeGroupType') is not None:
            self.node_group_type = m.get('NodeGroupType')
        if m.get('NodeResizeStrategy') is not None:
            self.node_resize_strategy = m.get('NodeResizeStrategy')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        if m.get('RunningNodeCount') is not None:
            self.running_node_count = m.get('RunningNodeCount')
        self.spot_bid_prices = []
        if m.get('SpotBidPrices') is not None:
            for k in m.get('SpotBidPrices'):
                temp_model = SpotBidPrice()
                self.spot_bid_prices.append(temp_model.from_map(k))
        if m.get('SpotInstanceRemedy') is not None:
            self.spot_instance_remedy = m.get('SpotInstanceRemedy')
        if m.get('SpotStrategy') is not None:
            self.spot_strategy = m.get('SpotStrategy')
        if m.get('StateChangeReason') is not None:
            temp_model = NodeGroupStateChangeReason()
            self.state_change_reason = temp_model.from_map(m['StateChangeReason'])
        if m.get('SystemDisk') is not None:
            temp_model = SystemDisk()
            self.system_disk = temp_model.from_map(m['SystemDisk'])
        if m.get('VSwitchIds') is not None:
            self.v_switch_ids = m.get('VSwitchIds')
        if m.get('WithPublicIp') is not None:
            self.with_public_ip = m.get('WithPublicIp')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class NodeGroupConfig(TeaModel):
    def __init__(self, additional_security_group_ids=None, cost_optimized_config=None, data_disks=None,
                 deployment_set_strategy=None, graceful_shutdown=None, instance_types=None, node_count=None, node_group_name=None,
                 node_group_type=None, node_resize_strategy=None, payment_type=None, spot_bid_prices=None,
                 spot_instance_remedy=None, spot_strategy=None, subscription_config=None, system_disk=None, v_switch_ids=None,
                 with_public_ip=None):
        # 附加安全组。除集群设置的安全组外，为节点组单独设置的附加安全组。数组元数个数N的取值范围：0~2。
        self.additional_security_group_ids = additional_security_group_ids  # type: list[str]
        # 成本优化模式配置。
        self.cost_optimized_config = cost_optimized_config  # type: CostOptimizedConfig
        # 数据盘。当前数据盘只支持一种磁盘类型，即数组元数个数N的取值范围：1~1。
        self.data_disks = data_disks  # type: list[DataDisk]
        # 部署集策略。取值范围：
        # - NONE：不适用部署集。
        # - CLUSTER：使用集群级别部署集。
        # - NODE_GROUP：使用节点组级别部署集。
        # 
        # 默认值：NONE。
        self.deployment_set_strategy = deployment_set_strategy  # type: str
        # 节点组上部署的组件是否开启优雅下线。取值范围：
        # - true：开启优雅下线。
        # - false：不开启优雅下线。
        # 
        # 默认值：false。
        self.graceful_shutdown = graceful_shutdown  # type: bool
        # 节点实例类型列表。数组元数个数N的取值范围：1~100。
        self.instance_types = instance_types  # type: list[str]
        # 节点数量。取值范围：1~1000。
        self.node_count = node_count  # type: int
        # 节点组名称。最大长度128个字符。集群内要求节点组名称唯一。
        self.node_group_name = node_group_name  # type: str
        # 节点组类型。取值范围：
        # - MASTER：管理类型节点组。
        # - CORE：存储类型节点组。
        # - TASK：计算类型节点组。
        self.node_group_type = node_group_type  # type: str
        # 节点扩容策略。取值范围：
        # - COST_OPTIMIZED：成本优化策略。
        # - PRIORITY：优先级策略。
        # 
        # 默认值：PRIORITY。
        self.node_resize_strategy = node_resize_strategy  # type: str
        # 节点组付费类型。不传入时默认和集群付费类型一致。取值范围：
        # - PayAsYouGo：后付费，按量付费。
        # - Subscription：预付费，包年包月。
        # 
        # 默认值：PayAsYouGo。
        self.payment_type = payment_type  # type: str
        # 抢占式Spot实例出价价格。参数SpotStrategy取值为SpotWithPriceLimit时生效。数组元数个数N的取值范围：0~100。
        self.spot_bid_prices = spot_bid_prices  # type: list[SpotBidPrice]
        # 开启后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例。取值范围：
        # - true：开启补齐抢占式实例。
        # - false：不开启补齐抢占式实例。
        # 
        # 默认值：false。
        self.spot_instance_remedy = spot_instance_remedy  # type: bool
        # 抢占式Spot实例策略。取值范围：
        # - NoSpot：正常按量付费实例。
        # - SpotWithPriceLimit：设置最高出价的抢占式实例。
        # - SpotAsPriceGo：系统自动出价，最高按量付费价格的抢占式实例。
        # 
        # 默认值：NoSpot。
        self.spot_strategy = spot_strategy  # type: str
        # 节点组预付费配置。不传入时默认和集群预付费配置一致。
        self.subscription_config = subscription_config  # type: SubscriptionConfig
        # 系统盘。
        self.system_disk = system_disk  # type: SystemDisk
        # 虚拟机交换机ID列表。数组元数个数N的取值范围：1~20。
        self.v_switch_ids = v_switch_ids  # type: list[str]
        # 是否开公网IP。取值范围：
        # - true：开公网。
        # - false：不开公网。
        # 
        # 默认值：false。
        self.with_public_ip = with_public_ip  # type: bool

    def validate(self):
        if self.cost_optimized_config:
            self.cost_optimized_config.validate()
        if self.data_disks:
            for k in self.data_disks:
                if k:
                    k.validate()
        if self.spot_bid_prices:
            for k in self.spot_bid_prices:
                if k:
                    k.validate()
        if self.subscription_config:
            self.subscription_config.validate()
        if self.system_disk:
            self.system_disk.validate()

    def to_map(self):
        _map = super(NodeGroupConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.additional_security_group_ids is not None:
            result['AdditionalSecurityGroupIds'] = self.additional_security_group_ids
        if self.cost_optimized_config is not None:
            result['CostOptimizedConfig'] = self.cost_optimized_config.to_map()
        result['DataDisks'] = []
        if self.data_disks is not None:
            for k in self.data_disks:
                result['DataDisks'].append(k.to_map() if k else None)
        if self.deployment_set_strategy is not None:
            result['DeploymentSetStrategy'] = self.deployment_set_strategy
        if self.graceful_shutdown is not None:
            result['GracefulShutdown'] = self.graceful_shutdown
        if self.instance_types is not None:
            result['InstanceTypes'] = self.instance_types
        if self.node_count is not None:
            result['NodeCount'] = self.node_count
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.node_group_type is not None:
            result['NodeGroupType'] = self.node_group_type
        if self.node_resize_strategy is not None:
            result['NodeResizeStrategy'] = self.node_resize_strategy
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        result['SpotBidPrices'] = []
        if self.spot_bid_prices is not None:
            for k in self.spot_bid_prices:
                result['SpotBidPrices'].append(k.to_map() if k else None)
        if self.spot_instance_remedy is not None:
            result['SpotInstanceRemedy'] = self.spot_instance_remedy
        if self.spot_strategy is not None:
            result['SpotStrategy'] = self.spot_strategy
        if self.subscription_config is not None:
            result['SubscriptionConfig'] = self.subscription_config.to_map()
        if self.system_disk is not None:
            result['SystemDisk'] = self.system_disk.to_map()
        if self.v_switch_ids is not None:
            result['VSwitchIds'] = self.v_switch_ids
        if self.with_public_ip is not None:
            result['WithPublicIp'] = self.with_public_ip
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AdditionalSecurityGroupIds') is not None:
            self.additional_security_group_ids = m.get('AdditionalSecurityGroupIds')
        if m.get('CostOptimizedConfig') is not None:
            temp_model = CostOptimizedConfig()
            self.cost_optimized_config = temp_model.from_map(m['CostOptimizedConfig'])
        self.data_disks = []
        if m.get('DataDisks') is not None:
            for k in m.get('DataDisks'):
                temp_model = DataDisk()
                self.data_disks.append(temp_model.from_map(k))
        if m.get('DeploymentSetStrategy') is not None:
            self.deployment_set_strategy = m.get('DeploymentSetStrategy')
        if m.get('GracefulShutdown') is not None:
            self.graceful_shutdown = m.get('GracefulShutdown')
        if m.get('InstanceTypes') is not None:
            self.instance_types = m.get('InstanceTypes')
        if m.get('NodeCount') is not None:
            self.node_count = m.get('NodeCount')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('NodeGroupType') is not None:
            self.node_group_type = m.get('NodeGroupType')
        if m.get('NodeResizeStrategy') is not None:
            self.node_resize_strategy = m.get('NodeResizeStrategy')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        self.spot_bid_prices = []
        if m.get('SpotBidPrices') is not None:
            for k in m.get('SpotBidPrices'):
                temp_model = SpotBidPrice()
                self.spot_bid_prices.append(temp_model.from_map(k))
        if m.get('SpotInstanceRemedy') is not None:
            self.spot_instance_remedy = m.get('SpotInstanceRemedy')
        if m.get('SpotStrategy') is not None:
            self.spot_strategy = m.get('SpotStrategy')
        if m.get('SubscriptionConfig') is not None:
            temp_model = SubscriptionConfig()
            self.subscription_config = temp_model.from_map(m['SubscriptionConfig'])
        if m.get('SystemDisk') is not None:
            temp_model = SystemDisk()
            self.system_disk = temp_model.from_map(m['SystemDisk'])
        if m.get('VSwitchIds') is not None:
            self.v_switch_ids = m.get('VSwitchIds')
        if m.get('WithPublicIp') is not None:
            self.with_public_ip = m.get('WithPublicIp')
        return self


class NodeGroupParam(TeaModel):
    def __init__(self, auto_pay_order=None, auto_renew=None, auto_renew_duration=None,
                 auto_renew_duration_unit=None, data_disks=None, description=None, instance_types=None, node_count=None,
                 node_group_index=None, node_group_name=None, node_group_type=None, payment_duration=None,
                 payment_duration_unit=None, payment_type=None, system_disk=None, v_switch_ids=None, zone_id=None):
        self.auto_pay_order = auto_pay_order  # type: bool
        self.auto_renew = auto_renew  # type: bool
        self.auto_renew_duration = auto_renew_duration  # type: int
        self.auto_renew_duration_unit = auto_renew_duration_unit  # type: str
        self.data_disks = data_disks  # type: list[DiskInfo]
        self.description = description  # type: str
        self.instance_types = instance_types  # type: list[str]
        self.node_count = node_count  # type: int
        self.node_group_index = node_group_index  # type: int
        self.node_group_name = node_group_name  # type: str
        self.node_group_type = node_group_type  # type: str
        self.payment_duration = payment_duration  # type: int
        self.payment_duration_unit = payment_duration_unit  # type: str
        self.payment_type = payment_type  # type: str
        self.system_disk = system_disk  # type: SystemDiskParam
        self.v_switch_ids = v_switch_ids  # type: list[str]
        self.zone_id = zone_id  # type: str

    def validate(self):
        if self.data_disks:
            for k in self.data_disks:
                if k:
                    k.validate()
        if self.system_disk:
            self.system_disk.validate()

    def to_map(self):
        _map = super(NodeGroupParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_pay_order is not None:
            result['AutoPayOrder'] = self.auto_pay_order
        if self.auto_renew is not None:
            result['AutoRenew'] = self.auto_renew
        if self.auto_renew_duration is not None:
            result['AutoRenewDuration'] = self.auto_renew_duration
        if self.auto_renew_duration_unit is not None:
            result['AutoRenewDurationUnit'] = self.auto_renew_duration_unit
        result['DataDisks'] = []
        if self.data_disks is not None:
            for k in self.data_disks:
                result['DataDisks'].append(k.to_map() if k else None)
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_types is not None:
            result['InstanceTypes'] = self.instance_types
        if self.node_count is not None:
            result['NodeCount'] = self.node_count
        if self.node_group_index is not None:
            result['NodeGroupIndex'] = self.node_group_index
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.node_group_type is not None:
            result['NodeGroupType'] = self.node_group_type
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        if self.system_disk is not None:
            result['SystemDisk'] = self.system_disk.to_map()
        if self.v_switch_ids is not None:
            result['VSwitchIds'] = self.v_switch_ids
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AutoPayOrder') is not None:
            self.auto_pay_order = m.get('AutoPayOrder')
        if m.get('AutoRenew') is not None:
            self.auto_renew = m.get('AutoRenew')
        if m.get('AutoRenewDuration') is not None:
            self.auto_renew_duration = m.get('AutoRenewDuration')
        if m.get('AutoRenewDurationUnit') is not None:
            self.auto_renew_duration_unit = m.get('AutoRenewDurationUnit')
        self.data_disks = []
        if m.get('DataDisks') is not None:
            for k in m.get('DataDisks'):
                temp_model = DiskInfo()
                self.data_disks.append(temp_model.from_map(k))
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceTypes') is not None:
            self.instance_types = m.get('InstanceTypes')
        if m.get('NodeCount') is not None:
            self.node_count = m.get('NodeCount')
        if m.get('NodeGroupIndex') is not None:
            self.node_group_index = m.get('NodeGroupIndex')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('NodeGroupType') is not None:
            self.node_group_type = m.get('NodeGroupType')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        if m.get('SystemDisk') is not None:
            temp_model = SystemDiskParam()
            self.system_disk = temp_model.from_map(m['SystemDisk'])
        if m.get('VSwitchIds') is not None:
            self.v_switch_ids = m.get('VSwitchIds')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class NodeGroupStateChangeReason(TeaModel):
    def __init__(self, code=None, message=None):
        # 状态码。
        self.code = code  # type: str
        # 描述信息。
        self.message = message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(NodeGroupStateChangeReason, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class NodeSelector(TeaModel):
    def __init__(self, node_group_id=None, node_group_name=None, node_group_types=None, node_names=None,
                 node_select_type=None):
        # 节点组ID。当NodeSelectType取值NodeGroup时，该参数生效。
        self.node_group_id = node_group_id  # type: str
        # 节点组名称。当NodeSelectType取值NodeGroup，且参数NodeGroupId为空时生效，该参数生效。
        self.node_group_name = node_group_name  # type: str
        # 节点组类型。当NodeSelectType取值NodeGroup，且参数NodeGroupId为空时生效。数组元数个数N取值范围：0~10。
        self.node_group_types = node_group_types  # type: list[str]
        # 节点名称列表。当NodeSelectType取值Node时，该参数生效。
        self.node_names = node_names  # type: list[str]
        # 节点选择类型。取值范围：
        # - CLUSTER：集群。
        # - NODE_GROUP：节点组。
        # - NODE：节点。
        self.node_select_type = node_select_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(NodeSelector, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.node_group_types is not None:
            result['NodeGroupTypes'] = self.node_group_types
        if self.node_names is not None:
            result['NodeNames'] = self.node_names
        if self.node_select_type is not None:
            result['NodeSelectType'] = self.node_select_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('NodeGroupTypes') is not None:
            self.node_group_types = m.get('NodeGroupTypes')
        if m.get('NodeNames') is not None:
            self.node_names = m.get('NodeNames')
        if m.get('NodeSelectType') is not None:
            self.node_select_type = m.get('NodeSelectType')
        return self


class OSUser(TeaModel):
    def __init__(self, group=None, password=None, user=None):
        # 用户组。
        self.group = group  # type: str
        # 用户密码。
        self.password = password  # type: str
        # 用户名称。
        self.user = user  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OSUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group is not None:
            result['Group'] = self.group
        if self.password is not None:
            result['Password'] = self.password
        if self.user is not None:
            result['User'] = self.user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Group') is not None:
            self.group = m.get('Group')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('User') is not None:
            self.user = m.get('User')
        return self


class OnKubeClusterResource(TeaModel):
    def __init__(self, cpu=None, memory=None):
        self.cpu = cpu  # type: str
        self.memory = memory  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OnKubeClusterResource, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu is not None:
            result['Cpu'] = self.cpu
        if self.memory is not None:
            result['Memory'] = self.memory
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cpu') is not None:
            self.cpu = m.get('Cpu')
        if m.get('Memory') is not None:
            self.memory = m.get('Memory')
        return self


class Operation(TeaModel):
    def __init__(self, cluster_id=None, create_time=None, description=None, end_time=None, operation_id=None,
                 operation_state=None, operation_type=None, start_time=None, state_change_reason=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 创建时间。
        self.create_time = create_time  # type: long
        # 描述。
        self.description = description  # type: str
        # 结束时间。
        self.end_time = end_time  # type: long
        # 操作ID。
        self.operation_id = operation_id  # type: str
        # 操作状态。
        self.operation_state = operation_state  # type: str
        # 操作类型。
        self.operation_type = operation_type  # type: str
        # 开始时间。
        self.start_time = start_time  # type: long
        # 状态转换原因。
        self.state_change_reason = state_change_reason  # type: OperationStateChangeReason

    def validate(self):
        if self.state_change_reason:
            self.state_change_reason.validate()

    def to_map(self):
        _map = super(Operation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.operation_state is not None:
            result['OperationState'] = self.operation_state
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.state_change_reason is not None:
            result['StateChangeReason'] = self.state_change_reason.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('OperationState') is not None:
            self.operation_state = m.get('OperationState')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StateChangeReason') is not None:
            temp_model = OperationStateChangeReason()
            self.state_change_reason = temp_model.from_map(m['StateChangeReason'])
        return self


class OperationStateChangeReason(TeaModel):
    def __init__(self, code=None, message=None):
        # 状态码。
        self.code = code  # type: str
        # 状态变化信息。
        self.message = message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OperationStateChangeReason, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class Order(TeaModel):
    def __init__(self, create_time=None, order_id=None):
        self.create_time = create_time  # type: str
        self.order_id = order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Order, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        return self


class Page(TeaModel):
    def __init__(self, items=None, max_results=None, next_token=None, total_count=None):
        self.items = items  # type: list[str]
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: str
        self.total_count = total_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(Page, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.items is not None:
            result['Items'] = self.items
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Items') is not None:
            self.items = m.get('Items')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class Pod(TeaModel):
    def __init__(self, message=None, pod_name=None, pod_status=None, reason=None):
        self.message = message  # type: str
        self.pod_name = pod_name  # type: str
        self.pod_status = pod_status  # type: str
        self.reason = reason  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Pod, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.pod_name is not None:
            result['PodName'] = self.pod_name
        if self.pod_status is not None:
            result['PodStatus'] = self.pod_status
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PodName') is not None:
            self.pod_name = m.get('PodName')
        if m.get('PodStatus') is not None:
            self.pod_status = m.get('PodStatus')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class PriceInfo(TeaModel):
    def __init__(self, currency=None, discount_price=None, original_price=None, pay_type=None,
                 promotion_results=None, resource_type=None, spot_instance_type_original_price=None, spot_instance_type_price=None,
                 spot_original_price=None, spot_price=None, tax_price=None, trade_price=None):
        self.currency = currency  # type: str
        self.discount_price = discount_price  # type: str
        self.original_price = original_price  # type: str
        self.pay_type = pay_type  # type: str
        self.promotion_results = promotion_results  # type: list[PromotionInfo]
        self.resource_type = resource_type  # type: str
        self.spot_instance_type_original_price = spot_instance_type_original_price  # type: str
        self.spot_instance_type_price = spot_instance_type_price  # type: str
        self.spot_original_price = spot_original_price  # type: str
        self.spot_price = spot_price  # type: str
        self.tax_price = tax_price  # type: str
        self.trade_price = trade_price  # type: str

    def validate(self):
        if self.promotion_results:
            for k in self.promotion_results:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PriceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.currency is not None:
            result['Currency'] = self.currency
        if self.discount_price is not None:
            result['DiscountPrice'] = self.discount_price
        if self.original_price is not None:
            result['OriginalPrice'] = self.original_price
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        result['PromotionResults'] = []
        if self.promotion_results is not None:
            for k in self.promotion_results:
                result['PromotionResults'].append(k.to_map() if k else None)
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.spot_instance_type_original_price is not None:
            result['SpotInstanceTypeOriginalPrice'] = self.spot_instance_type_original_price
        if self.spot_instance_type_price is not None:
            result['SpotInstanceTypePrice'] = self.spot_instance_type_price
        if self.spot_original_price is not None:
            result['SpotOriginalPrice'] = self.spot_original_price
        if self.spot_price is not None:
            result['SpotPrice'] = self.spot_price
        if self.tax_price is not None:
            result['TaxPrice'] = self.tax_price
        if self.trade_price is not None:
            result['TradePrice'] = self.trade_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Currency') is not None:
            self.currency = m.get('Currency')
        if m.get('DiscountPrice') is not None:
            self.discount_price = m.get('DiscountPrice')
        if m.get('OriginalPrice') is not None:
            self.original_price = m.get('OriginalPrice')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        self.promotion_results = []
        if m.get('PromotionResults') is not None:
            for k in m.get('PromotionResults'):
                temp_model = PromotionInfo()
                self.promotion_results.append(temp_model.from_map(k))
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('SpotInstanceTypeOriginalPrice') is not None:
            self.spot_instance_type_original_price = m.get('SpotInstanceTypeOriginalPrice')
        if m.get('SpotInstanceTypePrice') is not None:
            self.spot_instance_type_price = m.get('SpotInstanceTypePrice')
        if m.get('SpotOriginalPrice') is not None:
            self.spot_original_price = m.get('SpotOriginalPrice')
        if m.get('SpotPrice') is not None:
            self.spot_price = m.get('SpotPrice')
        if m.get('TaxPrice') is not None:
            self.tax_price = m.get('TaxPrice')
        if m.get('TradePrice') is not None:
            self.trade_price = m.get('TradePrice')
        return self


class Promotion(TeaModel):
    def __init__(self, product_code=None, promotion_desc=None, promotion_name=None, promotion_option_code=None,
                 promotion_option_no=None):
        # 产品码。
        self.product_code = product_code  # type: str
        # 优惠券描述。
        self.promotion_desc = promotion_desc  # type: str
        # 优惠券名称。
        self.promotion_name = promotion_name  # type: str
        # 优惠券码。
        self.promotion_option_code = promotion_option_code  # type: str
        # 优惠券号。
        self.promotion_option_no = promotion_option_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Promotion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.promotion_desc is not None:
            result['PromotionDesc'] = self.promotion_desc
        if self.promotion_name is not None:
            result['PromotionName'] = self.promotion_name
        if self.promotion_option_code is not None:
            result['PromotionOptionCode'] = self.promotion_option_code
        if self.promotion_option_no is not None:
            result['PromotionOptionNo'] = self.promotion_option_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('PromotionDesc') is not None:
            self.promotion_desc = m.get('PromotionDesc')
        if m.get('PromotionName') is not None:
            self.promotion_name = m.get('PromotionName')
        if m.get('PromotionOptionCode') is not None:
            self.promotion_option_code = m.get('PromotionOptionCode')
        if m.get('PromotionOptionNo') is not None:
            self.promotion_option_no = m.get('PromotionOptionNo')
        return self


class PromotionInfo(TeaModel):
    def __init__(self, can_prom_fee=None, is_selected=None, promotion_desc=None, promotion_name=None,
                 promotion_option_code=None, promotion_option_no=None):
        self.can_prom_fee = can_prom_fee  # type: str
        self.is_selected = is_selected  # type: str
        self.promotion_desc = promotion_desc  # type: str
        self.promotion_name = promotion_name  # type: str
        self.promotion_option_code = promotion_option_code  # type: str
        self.promotion_option_no = promotion_option_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PromotionInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_prom_fee is not None:
            result['CanPromFee'] = self.can_prom_fee
        if self.is_selected is not None:
            result['IsSelected'] = self.is_selected
        if self.promotion_desc is not None:
            result['PromotionDesc'] = self.promotion_desc
        if self.promotion_name is not None:
            result['PromotionName'] = self.promotion_name
        if self.promotion_option_code is not None:
            result['PromotionOptionCode'] = self.promotion_option_code
        if self.promotion_option_no is not None:
            result['PromotionOptionNo'] = self.promotion_option_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CanPromFee') is not None:
            self.can_prom_fee = m.get('CanPromFee')
        if m.get('IsSelected') is not None:
            self.is_selected = m.get('IsSelected')
        if m.get('PromotionDesc') is not None:
            self.promotion_desc = m.get('PromotionDesc')
        if m.get('PromotionName') is not None:
            self.promotion_name = m.get('PromotionName')
        if m.get('PromotionOptionCode') is not None:
            self.promotion_option_code = m.get('PromotionOptionCode')
        if m.get('PromotionOptionNo') is not None:
            self.promotion_option_no = m.get('PromotionOptionNo')
        return self


class PromotionParam(TeaModel):
    def __init__(self, product_code=None, promotion_option_code=None, promotion_option_no=None):
        self.product_code = product_code  # type: str
        self.promotion_option_code = promotion_option_code  # type: str
        self.promotion_option_no = promotion_option_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PromotionParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.promotion_option_code is not None:
            result['PromotionOptionCode'] = self.promotion_option_code
        if self.promotion_option_no is not None:
            result['PromotionOptionNo'] = self.promotion_option_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('PromotionOptionCode') is not None:
            self.promotion_option_code = m.get('PromotionOptionCode')
        if m.get('PromotionOptionNo') is not None:
            self.promotion_option_no = m.get('PromotionOptionNo')
        return self


class RecommendScalingRule(TeaModel):
    def __init__(self, activity_type=None, adjustment_value=None, instance_type=None, max_save=None,
                 metrics_trigger=None, rule_name=None, time_trigger=None, trigger_type=None):
        # 伸缩活动类型。取值范围：
        # - SCALE_OUT：扩容。
        # - SCALE_IN：缩容。
        self.activity_type = activity_type  # type: str
        # 调整值。需要为正数，代表需要扩容或者缩容的实例数量。
        self.adjustment_value = adjustment_value  # type: int
        # 推荐的规格类型。
        self.instance_type = instance_type  # type: str
        # 最大节约成本。
        self.max_save = max_save  # type: float
        # 按照负载伸缩描述。
        # <p>
        self.metrics_trigger = metrics_trigger  # type: MetricsTrigger
        # 规则名称。
        self.rule_name = rule_name  # type: str
        # 按照时间伸缩描述。
        # <p>
        self.time_trigger = time_trigger  # type: TimeTrigger
        # 伸缩规则类型。 取值范围：
        # - TIME_TRIGGER: 按时间伸缩。
        # - METRICS_TRIGGER: 按负载伸缩。
        self.trigger_type = trigger_type  # type: str

    def validate(self):
        if self.metrics_trigger:
            self.metrics_trigger.validate()
        if self.time_trigger:
            self.time_trigger.validate()

    def to_map(self):
        _map = super(RecommendScalingRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_type is not None:
            result['ActivityType'] = self.activity_type
        if self.adjustment_value is not None:
            result['AdjustmentValue'] = self.adjustment_value
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.max_save is not None:
            result['MaxSave'] = self.max_save
        if self.metrics_trigger is not None:
            result['MetricsTrigger'] = self.metrics_trigger.to_map()
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.time_trigger is not None:
            result['TimeTrigger'] = self.time_trigger.to_map()
        if self.trigger_type is not None:
            result['TriggerType'] = self.trigger_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityType') is not None:
            self.activity_type = m.get('ActivityType')
        if m.get('AdjustmentValue') is not None:
            self.adjustment_value = m.get('AdjustmentValue')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('MaxSave') is not None:
            self.max_save = m.get('MaxSave')
        if m.get('MetricsTrigger') is not None:
            temp_model = MetricsTrigger()
            self.metrics_trigger = temp_model.from_map(m['MetricsTrigger'])
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('TimeTrigger') is not None:
            temp_model = TimeTrigger()
            self.time_trigger = temp_model.from_map(m['TimeTrigger'])
        if m.get('TriggerType') is not None:
            self.trigger_type = m.get('TriggerType')
        return self


class RenewInstance(TeaModel):
    def __init__(self, emr_renew_duration=None, emr_renew_duration_unit=None, instance_id=None,
                 renew_duration=None, renew_duration_unit=None):
        # emr实例续费时长。
        self.emr_renew_duration = emr_renew_duration  # type: int
        # emr实例续费时长单位。
        self.emr_renew_duration_unit = emr_renew_duration_unit  # type: str
        # 节点ID。
        self.instance_id = instance_id  # type: str
        # 续费时长。
        self.renew_duration = renew_duration  # type: int
        # 付费时长单位。
        self.renew_duration_unit = renew_duration_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RenewInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.emr_renew_duration is not None:
            result['EmrRenewDuration'] = self.emr_renew_duration
        if self.emr_renew_duration_unit is not None:
            result['EmrRenewDurationUnit'] = self.emr_renew_duration_unit
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.renew_duration is not None:
            result['RenewDuration'] = self.renew_duration
        if self.renew_duration_unit is not None:
            result['RenewDurationUnit'] = self.renew_duration_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EmrRenewDuration') is not None:
            self.emr_renew_duration = m.get('EmrRenewDuration')
        if m.get('EmrRenewDurationUnit') is not None:
            self.emr_renew_duration_unit = m.get('EmrRenewDurationUnit')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RenewDuration') is not None:
            self.renew_duration = m.get('RenewDuration')
        if m.get('RenewDurationUnit') is not None:
            self.renew_duration_unit = m.get('RenewDurationUnit')
        return self


class RenewInstanceParam(TeaModel):
    def __init__(self, instance_id=None, renew_duration=None, renew_duration_unit=None):
        self.instance_id = instance_id  # type: str
        self.renew_duration = renew_duration  # type: long
        self.renew_duration_unit = renew_duration_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RenewInstanceParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.renew_duration is not None:
            result['RenewDuration'] = self.renew_duration
        if self.renew_duration_unit is not None:
            result['RenewDurationUnit'] = self.renew_duration_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RenewDuration') is not None:
            self.renew_duration = m.get('RenewDuration')
        if m.get('RenewDurationUnit') is not None:
            self.renew_duration_unit = m.get('RenewDurationUnit')
        return self


class ReplacementStrategy(TeaModel):
    def __init__(self, instance_categories=None):
        self.instance_categories = instance_categories  # type: list[InstanceCategory]

    def validate(self):
        if self.instance_categories:
            for k in self.instance_categories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ReplacementStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InstanceCategories'] = []
        if self.instance_categories is not None:
            for k in self.instance_categories:
                result['InstanceCategories'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.instance_categories = []
        if m.get('InstanceCategories') is not None:
            for k in m.get('InstanceCategories'):
                temp_model = InstanceCategory()
                self.instance_categories.append(temp_model.from_map(k))
        return self


class RequestTag(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RequestTag, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ResizeDiskNodeGroupParam(TeaModel):
    def __init__(self, data_disk_capacity=None, node_group_id=None, rolling_restart=None):
        self.data_disk_capacity = data_disk_capacity  # type: long
        self.node_group_id = node_group_id  # type: str
        self.rolling_restart = rolling_restart  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResizeDiskNodeGroupParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_disk_capacity is not None:
            result['DataDiskCapacity'] = self.data_disk_capacity
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.rolling_restart is not None:
            result['RollingRestart'] = self.rolling_restart
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataDiskCapacity') is not None:
            self.data_disk_capacity = m.get('DataDiskCapacity')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('RollingRestart') is not None:
            self.rolling_restart = m.get('RollingRestart')
        return self


class ScalingActivity(TeaModel):
    def __init__(self, cause=None, description=None, end_time=None, ess_scaling_rule_id=None, expect_num=None,
                 host_group_name=None, id=None, instance_ids=None, scaling_group_id=None, scaling_rule_name=None, start_time=None,
                 status=None, total_capacity=None, transition=None):
        self.cause = cause  # type: str
        self.description = description  # type: str
        self.end_time = end_time  # type: long
        self.ess_scaling_rule_id = ess_scaling_rule_id  # type: str
        self.expect_num = expect_num  # type: int
        self.host_group_name = host_group_name  # type: str
        self.id = id  # type: str
        self.instance_ids = instance_ids  # type: str
        self.scaling_group_id = scaling_group_id  # type: str
        self.scaling_rule_name = scaling_rule_name  # type: str
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.total_capacity = total_capacity  # type: int
        self.transition = transition  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingActivity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cause is not None:
            result['Cause'] = self.cause
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.ess_scaling_rule_id is not None:
            result['EssScalingRuleId'] = self.ess_scaling_rule_id
        if self.expect_num is not None:
            result['ExpectNum'] = self.expect_num
        if self.host_group_name is not None:
            result['HostGroupName'] = self.host_group_name
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_ids is not None:
            result['InstanceIds'] = self.instance_ids
        if self.scaling_group_id is not None:
            result['ScalingGroupId'] = self.scaling_group_id
        if self.scaling_rule_name is not None:
            result['ScalingRuleName'] = self.scaling_rule_name
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_capacity is not None:
            result['TotalCapacity'] = self.total_capacity
        if self.transition is not None:
            result['Transition'] = self.transition
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cause') is not None:
            self.cause = m.get('Cause')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('EssScalingRuleId') is not None:
            self.ess_scaling_rule_id = m.get('EssScalingRuleId')
        if m.get('ExpectNum') is not None:
            self.expect_num = m.get('ExpectNum')
        if m.get('HostGroupName') is not None:
            self.host_group_name = m.get('HostGroupName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceIds') is not None:
            self.instance_ids = m.get('InstanceIds')
        if m.get('ScalingGroupId') is not None:
            self.scaling_group_id = m.get('ScalingGroupId')
        if m.get('ScalingRuleName') is not None:
            self.scaling_rule_name = m.get('ScalingRuleName')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCapacity') is not None:
            self.total_capacity = m.get('TotalCapacity')
        if m.get('Transition') is not None:
            self.transition = m.get('Transition')
        return self


class ScalingActivityResult(TeaModel):
    def __init__(self, instance_id=None):
        # 实例ID。
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingActivityResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ScalingActivityResultDTO(TeaModel):
    def __init__(self, instance_id=None):
        # 实例ID。
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingActivityResultDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ScalingAnalyzeResult(TeaModel):
    def __init__(self, actual_usage=None, ideal_usage=None, release_cores=None, reserved_cores=None):
        # 实际资源利用率。
        self.actual_usage = actual_usage  # type: float
        # 理想资源用量。
        self.ideal_usage = ideal_usage  # type: float
        # 固定资源释放核数（非master）core。
        self.release_cores = release_cores  # type: int
        # 固定资源保留核数（非master）core。
        self.reserved_cores = reserved_cores  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingAnalyzeResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_usage is not None:
            result['ActualUsage'] = self.actual_usage
        if self.ideal_usage is not None:
            result['IdealUsage'] = self.ideal_usage
        if self.release_cores is not None:
            result['ReleaseCores'] = self.release_cores
        if self.reserved_cores is not None:
            result['ReservedCores'] = self.reserved_cores
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualUsage') is not None:
            self.actual_usage = m.get('ActualUsage')
        if m.get('IdealUsage') is not None:
            self.ideal_usage = m.get('IdealUsage')
        if m.get('ReleaseCores') is not None:
            self.release_cores = m.get('ReleaseCores')
        if m.get('ReservedCores') is not None:
            self.reserved_cores = m.get('ReservedCores')
        return self


class ScalingAnalyzeTimeRange(TeaModel):
    def __init__(self, end_time=None, start_time=None, type=None):
        # 结束时间。
        self.end_time = end_time  # type: long
        # 起始时间。
        self.start_time = start_time  # type: long
        # 峰谷类型。 peak/valley
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingAnalyzeTimeRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ScalingConstraints(TeaModel):
    def __init__(self, max_capacity=None, min_capacity=None):
        # 最大值。
        self.max_capacity = max_capacity  # type: int
        # 最小值。
        self.min_capacity = min_capacity  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingConstraints, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_capacity is not None:
            result['MaxCapacity'] = self.max_capacity
        if self.min_capacity is not None:
            result['MinCapacity'] = self.min_capacity
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxCapacity') is not None:
            self.max_capacity = m.get('MaxCapacity')
        if m.get('MinCapacity') is not None:
            self.min_capacity = m.get('MinCapacity')
        return self


class ScalingGroupConfigInstanceTypeList(TeaModel):
    def __init__(self, instance_type=None, spot_price_limit=None):
        # Ecs类型。
        self.instance_type = instance_type  # type: str
        # 抢占价格上限,可空。
        self.spot_price_limit = spot_price_limit  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingGroupConfigInstanceTypeList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.spot_price_limit is not None:
            result['SpotPriceLimit'] = self.spot_price_limit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('SpotPriceLimit') is not None:
            self.spot_price_limit = m.get('SpotPriceLimit')
        return self


class ScalingGroupConfigMultiAvailablePolicyPolicyParam(TeaModel):
    def __init__(self, on_demand_base_capacity=None, on_demand_percentage_above_base_capacity=None,
                 spot_instance_pools=None, spot_instance_remedy=None):
        # 按需实例最小个数。
        self.on_demand_base_capacity = on_demand_base_capacity  # type: int
        # 按需实例百分比。
        self.on_demand_percentage_above_base_capacity = on_demand_percentage_above_base_capacity  # type: int
        # 抢占实例类型池规模。
        self.spot_instance_pools = spot_instance_pools  # type: int
        # 是否使用按量补偿。
        self.spot_instance_remedy = spot_instance_remedy  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingGroupConfigMultiAvailablePolicyPolicyParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.on_demand_base_capacity is not None:
            result['OnDemandBaseCapacity'] = self.on_demand_base_capacity
        if self.on_demand_percentage_above_base_capacity is not None:
            result['OnDemandPercentageAboveBaseCapacity'] = self.on_demand_percentage_above_base_capacity
        if self.spot_instance_pools is not None:
            result['SpotInstancePools'] = self.spot_instance_pools
        if self.spot_instance_remedy is not None:
            result['SpotInstanceRemedy'] = self.spot_instance_remedy
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OnDemandBaseCapacity') is not None:
            self.on_demand_base_capacity = m.get('OnDemandBaseCapacity')
        if m.get('OnDemandPercentageAboveBaseCapacity') is not None:
            self.on_demand_percentage_above_base_capacity = m.get('OnDemandPercentageAboveBaseCapacity')
        if m.get('SpotInstancePools') is not None:
            self.spot_instance_pools = m.get('SpotInstancePools')
        if m.get('SpotInstanceRemedy') is not None:
            self.spot_instance_remedy = m.get('SpotInstanceRemedy')
        return self


class ScalingGroupConfigMultiAvailablePolicy(TeaModel):
    def __init__(self, policy_param=None, policy_type=None):
        # 资源可用性策略(成本优化参数)。
        self.policy_param = policy_param  # type: ScalingGroupConfigMultiAvailablePolicyPolicyParam
        # 策略类型。
        self.policy_type = policy_type  # type: str

    def validate(self):
        if self.policy_param:
            self.policy_param.validate()

    def to_map(self):
        _map = super(ScalingGroupConfigMultiAvailablePolicy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.policy_param is not None:
            result['PolicyParam'] = self.policy_param.to_map()
        if self.policy_type is not None:
            result['PolicyType'] = self.policy_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PolicyParam') is not None:
            temp_model = ScalingGroupConfigMultiAvailablePolicyPolicyParam()
            self.policy_param = temp_model.from_map(m['PolicyParam'])
        if m.get('PolicyType') is not None:
            self.policy_type = m.get('PolicyType')
        return self


class ScalingGroupConfigNodeOfflinePolicy(TeaModel):
    def __init__(self, mode=None, timeout_ms=None):
        # 下线模式,是否为优雅下线。
        self.mode = mode  # type: str
        # 下线超时时间,单位毫秒。
        self.timeout_ms = timeout_ms  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingGroupConfigNodeOfflinePolicy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.timeout_ms is not None:
            result['TimeoutMs'] = self.timeout_ms
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('TimeoutMs') is not None:
            self.timeout_ms = m.get('TimeoutMs')
        return self


class ScalingGroupConfigPrivatePoolOptions(TeaModel):
    def __init__(self, id=None, match_criteria=None):
        # 私有池id。
        self.id = id  # type: str
        # 实例启动的私有池容量选项。。
        self.match_criteria = match_criteria  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingGroupConfigPrivatePoolOptions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.match_criteria is not None:
            result['MatchCriteria'] = self.match_criteria
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MatchCriteria') is not None:
            self.match_criteria = m.get('MatchCriteria')
        return self


class ScalingGroupConfig(TeaModel):
    def __init__(self, data_disk_category=None, data_disk_count=None, data_disk_size=None,
                 default_cool_down_time=None, instance_type_list=None, multi_available_policy=None, node_offline_policy=None,
                 private_pool_options=None, scaling_max_size=None, scaling_min_size=None, spot_strategy=None, sys_disk_category=None,
                 sys_disk_size=None, trigger_mode=None):
        # 数据盘类型。
        self.data_disk_category = data_disk_category  # type: str
        # 数据盘个数。
        self.data_disk_count = data_disk_count  # type: int
        # 数据盘大小,单位GB。
        self.data_disk_size = data_disk_size  # type: long
        # 默认冷却时间。
        self.default_cool_down_time = default_cool_down_time  # type: long
        # 抢占实例列表。
        self.instance_type_list = instance_type_list  # type: list[ScalingGroupConfigInstanceTypeList]
        # 资源可用性策略(成本优化参数)。
        self.multi_available_policy = multi_available_policy  # type: ScalingGroupConfigMultiAvailablePolicy
        # 节点下线策略。
        self.node_offline_policy = node_offline_policy  # type: ScalingGroupConfigNodeOfflinePolicy
        # 私有池选项	。
        self.private_pool_options = private_pool_options  # type: ScalingGroupConfigPrivatePoolOptions
        # 伸缩组节点最大个数。
        self.scaling_max_size = scaling_max_size  # type: int
        # 伸缩组节点最小个数。
        self.scaling_min_size = scaling_min_size  # type: int
        # 抢占式Spot实例策略。
        self.spot_strategy = spot_strategy  # type: str
        # 系统盘类型。
        self.sys_disk_category = sys_disk_category  # type: str
        # 系统盘大小,单位GB。
        self.sys_disk_size = sys_disk_size  # type: long
        # 伸缩活动触发模式。
        self.trigger_mode = trigger_mode  # type: str

    def validate(self):
        if self.instance_type_list:
            for k in self.instance_type_list:
                if k:
                    k.validate()
        if self.multi_available_policy:
            self.multi_available_policy.validate()
        if self.node_offline_policy:
            self.node_offline_policy.validate()
        if self.private_pool_options:
            self.private_pool_options.validate()

    def to_map(self):
        _map = super(ScalingGroupConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_disk_category is not None:
            result['DataDiskCategory'] = self.data_disk_category
        if self.data_disk_count is not None:
            result['DataDiskCount'] = self.data_disk_count
        if self.data_disk_size is not None:
            result['DataDiskSize'] = self.data_disk_size
        if self.default_cool_down_time is not None:
            result['DefaultCoolDownTime'] = self.default_cool_down_time
        result['InstanceTypeList'] = []
        if self.instance_type_list is not None:
            for k in self.instance_type_list:
                result['InstanceTypeList'].append(k.to_map() if k else None)
        if self.multi_available_policy is not None:
            result['MultiAvailablePolicy'] = self.multi_available_policy.to_map()
        if self.node_offline_policy is not None:
            result['NodeOfflinePolicy'] = self.node_offline_policy.to_map()
        if self.private_pool_options is not None:
            result['PrivatePoolOptions'] = self.private_pool_options.to_map()
        if self.scaling_max_size is not None:
            result['ScalingMaxSize'] = self.scaling_max_size
        if self.scaling_min_size is not None:
            result['ScalingMinSize'] = self.scaling_min_size
        if self.spot_strategy is not None:
            result['SpotStrategy'] = self.spot_strategy
        if self.sys_disk_category is not None:
            result['SysDiskCategory'] = self.sys_disk_category
        if self.sys_disk_size is not None:
            result['SysDiskSize'] = self.sys_disk_size
        if self.trigger_mode is not None:
            result['TriggerMode'] = self.trigger_mode
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataDiskCategory') is not None:
            self.data_disk_category = m.get('DataDiskCategory')
        if m.get('DataDiskCount') is not None:
            self.data_disk_count = m.get('DataDiskCount')
        if m.get('DataDiskSize') is not None:
            self.data_disk_size = m.get('DataDiskSize')
        if m.get('DefaultCoolDownTime') is not None:
            self.default_cool_down_time = m.get('DefaultCoolDownTime')
        self.instance_type_list = []
        if m.get('InstanceTypeList') is not None:
            for k in m.get('InstanceTypeList'):
                temp_model = ScalingGroupConfigInstanceTypeList()
                self.instance_type_list.append(temp_model.from_map(k))
        if m.get('MultiAvailablePolicy') is not None:
            temp_model = ScalingGroupConfigMultiAvailablePolicy()
            self.multi_available_policy = temp_model.from_map(m['MultiAvailablePolicy'])
        if m.get('NodeOfflinePolicy') is not None:
            temp_model = ScalingGroupConfigNodeOfflinePolicy()
            self.node_offline_policy = temp_model.from_map(m['NodeOfflinePolicy'])
        if m.get('PrivatePoolOptions') is not None:
            temp_model = ScalingGroupConfigPrivatePoolOptions()
            self.private_pool_options = temp_model.from_map(m['PrivatePoolOptions'])
        if m.get('ScalingMaxSize') is not None:
            self.scaling_max_size = m.get('ScalingMaxSize')
        if m.get('ScalingMinSize') is not None:
            self.scaling_min_size = m.get('ScalingMinSize')
        if m.get('SpotStrategy') is not None:
            self.spot_strategy = m.get('SpotStrategy')
        if m.get('SysDiskCategory') is not None:
            self.sys_disk_category = m.get('SysDiskCategory')
        if m.get('SysDiskSize') is not None:
            self.sys_disk_size = m.get('SysDiskSize')
        if m.get('TriggerMode') is not None:
            self.trigger_mode = m.get('TriggerMode')
        return self


class ScalingRule(TeaModel):
    def __init__(self, activity_type=None, adjustment_value=None, metrics_trigger=None, rule_name=None,
                 time_trigger=None, trigger_type=None):
        # 伸缩活动类型。取值范围：
        # - SCALE_OUT：扩容。
        # - SCALE_IN：缩容。
        self.activity_type = activity_type  # type: str
        # 调整值。需要为正数，代表需要扩容或者缩容的实例数量。
        self.adjustment_value = adjustment_value  # type: int
        # 按照负载伸缩描述。
        # <p>
        self.metrics_trigger = metrics_trigger  # type: MetricsTrigger
        # 规则名称。
        self.rule_name = rule_name  # type: str
        # 按照时间伸缩描述。
        # <p>
        self.time_trigger = time_trigger  # type: TimeTrigger
        # 伸缩规则类型。 取值范围：
        # - TIME_TRIGGER: 按时间伸缩。
        # - METRICS_TRIGGER: 按负载伸缩。
        self.trigger_type = trigger_type  # type: str

    def validate(self):
        if self.metrics_trigger:
            self.metrics_trigger.validate()
        if self.time_trigger:
            self.time_trigger.validate()

    def to_map(self):
        _map = super(ScalingRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_type is not None:
            result['ActivityType'] = self.activity_type
        if self.adjustment_value is not None:
            result['AdjustmentValue'] = self.adjustment_value
        if self.metrics_trigger is not None:
            result['MetricsTrigger'] = self.metrics_trigger.to_map()
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.time_trigger is not None:
            result['TimeTrigger'] = self.time_trigger.to_map()
        if self.trigger_type is not None:
            result['TriggerType'] = self.trigger_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityType') is not None:
            self.activity_type = m.get('ActivityType')
        if m.get('AdjustmentValue') is not None:
            self.adjustment_value = m.get('AdjustmentValue')
        if m.get('MetricsTrigger') is not None:
            temp_model = MetricsTrigger()
            self.metrics_trigger = temp_model.from_map(m['MetricsTrigger'])
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('TimeTrigger') is not None:
            temp_model = TimeTrigger()
            self.time_trigger = temp_model.from_map(m['TimeTrigger'])
        if m.get('TriggerType') is not None:
            self.trigger_type = m.get('TriggerType')
        return self


class ScalingRuleSpecByLoadScalingRuleSpec(TeaModel):
    def __init__(self, comparison_operator=None, evaluation_count=None, metric_name=None, statistics=None,
                 threshold=None, time_window=None):
        # 比较符。
        self.comparison_operator = comparison_operator  # type: str
        # 统计次数。
        self.evaluation_count = evaluation_count  # type: int
        # 指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。
        self.metric_name = metric_name  # type: str
        # 统计量名称。
        self.statistics = statistics  # type: str
        # 阈值。
        self.threshold = threshold  # type: float
        # 统计窗口。单位为秒。
        self.time_window = time_window  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingRuleSpecByLoadScalingRuleSpec, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comparison_operator is not None:
            result['ComparisonOperator'] = self.comparison_operator
        if self.evaluation_count is not None:
            result['EvaluationCount'] = self.evaluation_count
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.statistics is not None:
            result['Statistics'] = self.statistics
        if self.threshold is not None:
            result['Threshold'] = self.threshold
        if self.time_window is not None:
            result['TimeWindow'] = self.time_window
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComparisonOperator') is not None:
            self.comparison_operator = m.get('ComparisonOperator')
        if m.get('EvaluationCount') is not None:
            self.evaluation_count = m.get('EvaluationCount')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('Statistics') is not None:
            self.statistics = m.get('Statistics')
        if m.get('Threshold') is not None:
            self.threshold = m.get('Threshold')
        if m.get('TimeWindow') is not None:
            self.time_window = m.get('TimeWindow')
        return self


class ScalingRuleSpecByTimeScalingRuleSpec(TeaModel):
    def __init__(self, end_time=None, launch_time=None, recurrence_type=None, recurrence_value=None):
        # 重复执行定时任务的结束时间戳。单位为毫秒。
        self.end_time = end_time  # type: long
        # 启动时间戳。单位为毫秒。
        self.launch_time = launch_time  # type: long
        # 指定时间规则的执行类型。
        self.recurrence_type = recurrence_type  # type: str
        # 重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。
        self.recurrence_value = recurrence_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingRuleSpecByTimeScalingRuleSpec, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.launch_time is not None:
            result['LaunchTime'] = self.launch_time
        if self.recurrence_type is not None:
            result['RecurrenceType'] = self.recurrence_type
        if self.recurrence_value is not None:
            result['RecurrenceValue'] = self.recurrence_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('LaunchTime') is not None:
            self.launch_time = m.get('LaunchTime')
        if m.get('RecurrenceType') is not None:
            self.recurrence_type = m.get('RecurrenceType')
        if m.get('RecurrenceValue') is not None:
            self.recurrence_value = m.get('RecurrenceValue')
        return self


class ScalingRuleSpec(TeaModel):
    def __init__(self, adjustment_value=None, by_load_scaling_rule_spec=None, by_time_scaling_rule_spec=None,
                 cool_down_interval=None, scaling_activity_type=None, scaling_rule_name=None, scaling_rule_type=None):
        # 调整值。需要为正数，代表需要扩容或者缩容的实例数量。
        self.adjustment_value = adjustment_value  # type: int
        # 按照负载伸缩描述。
        self.by_load_scaling_rule_spec = by_load_scaling_rule_spec  # type: ScalingRuleSpecByLoadScalingRuleSpec
        # 按照时间伸缩描述。
        self.by_time_scaling_rule_spec = by_time_scaling_rule_spec  # type: ScalingRuleSpecByTimeScalingRuleSpec
        # 冷却时间。单位为秒，取值范围在30~10800秒之间。
        self.cool_down_interval = cool_down_interval  # type: int
        # 伸缩活动类型。
        self.scaling_activity_type = scaling_activity_type  # type: str
        # 规则名称。
        self.scaling_rule_name = scaling_rule_name  # type: str
        # 伸缩规则类型。
        self.scaling_rule_type = scaling_rule_type  # type: str

    def validate(self):
        if self.by_load_scaling_rule_spec:
            self.by_load_scaling_rule_spec.validate()
        if self.by_time_scaling_rule_spec:
            self.by_time_scaling_rule_spec.validate()

    def to_map(self):
        _map = super(ScalingRuleSpec, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adjustment_value is not None:
            result['AdjustmentValue'] = self.adjustment_value
        if self.by_load_scaling_rule_spec is not None:
            result['ByLoadScalingRuleSpec'] = self.by_load_scaling_rule_spec.to_map()
        if self.by_time_scaling_rule_spec is not None:
            result['ByTimeScalingRuleSpec'] = self.by_time_scaling_rule_spec.to_map()
        if self.cool_down_interval is not None:
            result['CoolDownInterval'] = self.cool_down_interval
        if self.scaling_activity_type is not None:
            result['ScalingActivityType'] = self.scaling_activity_type
        if self.scaling_rule_name is not None:
            result['ScalingRuleName'] = self.scaling_rule_name
        if self.scaling_rule_type is not None:
            result['ScalingRuleType'] = self.scaling_rule_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AdjustmentValue') is not None:
            self.adjustment_value = m.get('AdjustmentValue')
        if m.get('ByLoadScalingRuleSpec') is not None:
            temp_model = ScalingRuleSpecByLoadScalingRuleSpec()
            self.by_load_scaling_rule_spec = temp_model.from_map(m['ByLoadScalingRuleSpec'])
        if m.get('ByTimeScalingRuleSpec') is not None:
            temp_model = ScalingRuleSpecByTimeScalingRuleSpec()
            self.by_time_scaling_rule_spec = temp_model.from_map(m['ByTimeScalingRuleSpec'])
        if m.get('CoolDownInterval') is not None:
            self.cool_down_interval = m.get('CoolDownInterval')
        if m.get('ScalingActivityType') is not None:
            self.scaling_activity_type = m.get('ScalingActivityType')
        if m.get('ScalingRuleName') is not None:
            self.scaling_rule_name = m.get('ScalingRuleName')
        if m.get('ScalingRuleType') is not None:
            self.scaling_rule_type = m.get('ScalingRuleType')
        return self


class ScalingRuleV1RuleParam(TeaModel):
    def __init__(self, comparison_operator=None, evaluation_count=None, launch_expiration_time=None,
                 launch_time=None, metric_name=None, period=None, recurrence_end_time=None, recurrence_type=None,
                 recurrence_value=None, statistics=None, threshold=None):
        # [负载触发参数] 比较符。
        self.comparison_operator = comparison_operator  # type: str
        # [负载触发参数] 统计次数。
        self.evaluation_count = evaluation_count  # type: int
        # [时间调度参数] 周期类型周期过期时间。
        self.launch_expiration_time = launch_expiration_time  # type: int
        # [时间调度参数] 周期类型周期开始时间。
        self.launch_time = launch_time  # type: str
        # [负载触发参数] 度量名称。
        self.metric_name = metric_name  # type: str
        # [负载触发参数] 统计时长,单位分钟。
        self.period = period  # type: int
        # [时间调度参数] 周期类型周期结束时间。
        self.recurrence_end_time = recurrence_end_time  # type: str
        # [时间调度参数] 周期类型。
        self.recurrence_type = recurrence_type  # type: str
        # [时间调度参数] 周期类型周期值。
        self.recurrence_value = recurrence_value  # type: str
        # [负载触发参数] 统计方式。
        self.statistics = statistics  # type: str
        # [负载触发参数] 阈值。
        self.threshold = threshold  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScalingRuleV1RuleParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comparison_operator is not None:
            result['ComparisonOperator'] = self.comparison_operator
        if self.evaluation_count is not None:
            result['EvaluationCount'] = self.evaluation_count
        if self.launch_expiration_time is not None:
            result['LaunchExpirationTime'] = self.launch_expiration_time
        if self.launch_time is not None:
            result['LaunchTime'] = self.launch_time
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.period is not None:
            result['Period'] = self.period
        if self.recurrence_end_time is not None:
            result['RecurrenceEndTime'] = self.recurrence_end_time
        if self.recurrence_type is not None:
            result['RecurrenceType'] = self.recurrence_type
        if self.recurrence_value is not None:
            result['RecurrenceValue'] = self.recurrence_value
        if self.statistics is not None:
            result['Statistics'] = self.statistics
        if self.threshold is not None:
            result['Threshold'] = self.threshold
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComparisonOperator') is not None:
            self.comparison_operator = m.get('ComparisonOperator')
        if m.get('EvaluationCount') is not None:
            self.evaluation_count = m.get('EvaluationCount')
        if m.get('LaunchExpirationTime') is not None:
            self.launch_expiration_time = m.get('LaunchExpirationTime')
        if m.get('LaunchTime') is not None:
            self.launch_time = m.get('LaunchTime')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('RecurrenceEndTime') is not None:
            self.recurrence_end_time = m.get('RecurrenceEndTime')
        if m.get('RecurrenceType') is not None:
            self.recurrence_type = m.get('RecurrenceType')
        if m.get('RecurrenceValue') is not None:
            self.recurrence_value = m.get('RecurrenceValue')
        if m.get('Statistics') is not None:
            self.statistics = m.get('Statistics')
        if m.get('Threshold') is not None:
            self.threshold = m.get('Threshold')
        return self


class ScalingRuleV1(TeaModel):
    def __init__(self, adjustment_type=None, adjustment_value=None, cool_down_time=None, rule_name=None,
                 rule_param=None, rule_type=None, scaling_config_biz_id=None):
        # 调整类型。
        self.adjustment_type = adjustment_type  # type: str
        # 调整值,正数为扩容,负数为缩容。
        self.adjustment_value = adjustment_value  # type: int
        # 冷却时间,单位秒。
        self.cool_down_time = cool_down_time  # type: int
        # 规则名称。
        self.rule_name = rule_name  # type: str
        # 规则参数。
        self.rule_param = rule_param  # type: ScalingRuleV1RuleParam
        # 规则类型。
        self.rule_type = rule_type  # type: str
        # 弹性规则配置ID。
        self.scaling_config_biz_id = scaling_config_biz_id  # type: str

    def validate(self):
        if self.rule_param:
            self.rule_param.validate()

    def to_map(self):
        _map = super(ScalingRuleV1, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adjustment_type is not None:
            result['AdjustmentType'] = self.adjustment_type
        if self.adjustment_value is not None:
            result['AdjustmentValue'] = self.adjustment_value
        if self.cool_down_time is not None:
            result['CoolDownTime'] = self.cool_down_time
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.rule_param is not None:
            result['RuleParam'] = self.rule_param.to_map()
        if self.rule_type is not None:
            result['RuleType'] = self.rule_type
        if self.scaling_config_biz_id is not None:
            result['ScalingConfigBizId'] = self.scaling_config_biz_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AdjustmentType') is not None:
            self.adjustment_type = m.get('AdjustmentType')
        if m.get('AdjustmentValue') is not None:
            self.adjustment_value = m.get('AdjustmentValue')
        if m.get('CoolDownTime') is not None:
            self.cool_down_time = m.get('CoolDownTime')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('RuleParam') is not None:
            temp_model = ScalingRuleV1RuleParam()
            self.rule_param = temp_model.from_map(m['RuleParam'])
        if m.get('RuleType') is not None:
            self.rule_type = m.get('RuleType')
        if m.get('ScalingConfigBizId') is not None:
            self.scaling_config_biz_id = m.get('ScalingConfigBizId')
        return self


class Script(TeaModel):
    def __init__(self, execution_fail_strategy=None, execution_moment=None, node_selector=None, priority=None,
                 script_args=None, script_name=None, script_path=None):
        # 执行失败策略。
        self.execution_fail_strategy = execution_fail_strategy  # type: str
        # 脚本的执行时机。
        self.execution_moment = execution_moment  # type: str
        # 节点选择器。
        self.node_selector = node_selector  # type: NodeSelector
        # 脚本执行优先级。取值范围：1~100。
        self.priority = priority  # type: int
        # 脚本执行参数。
        self.script_args = script_args  # type: str
        # 脚本名称。长度为1~64个字符，必须以大小字母或中文开头，不能以http://和https://开头。可以包含中文、英文、数字、下划线（_）、或者短划线（-）
        self.script_name = script_name  # type: str
        # 脚本所在OSS路径。
        self.script_path = script_path  # type: str

    def validate(self):
        if self.node_selector:
            self.node_selector.validate()

    def to_map(self):
        _map = super(Script, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.execution_fail_strategy is not None:
            result['ExecutionFailStrategy'] = self.execution_fail_strategy
        if self.execution_moment is not None:
            result['ExecutionMoment'] = self.execution_moment
        if self.node_selector is not None:
            result['NodeSelector'] = self.node_selector.to_map()
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.script_args is not None:
            result['ScriptArgs'] = self.script_args
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_path is not None:
            result['ScriptPath'] = self.script_path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExecutionFailStrategy') is not None:
            self.execution_fail_strategy = m.get('ExecutionFailStrategy')
        if m.get('ExecutionMoment') is not None:
            self.execution_moment = m.get('ExecutionMoment')
        if m.get('NodeSelector') is not None:
            temp_model = NodeSelector()
            self.node_selector = temp_model.from_map(m['NodeSelector'])
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ScriptArgs') is not None:
            self.script_args = m.get('ScriptArgs')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptPath') is not None:
            self.script_path = m.get('ScriptPath')
        return self


class SpotBidPrice(TeaModel):
    def __init__(self, bid_price=None, instance_type=None):
        # 实例的每小时最高出价。支持最大3位小数，参数SpotStrategy=SpotWithPriceLimit时，该参数生效。
        self.bid_price = bid_price  # type: float
        # 实例类型。
        self.instance_type = instance_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SpotBidPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid_price is not None:
            result['BidPrice'] = self.bid_price
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BidPrice') is not None:
            self.bid_price = m.get('BidPrice')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        return self


class SpotPriceLimit(TeaModel):
    def __init__(self, instance_type=None, price_limit=None):
        self.instance_type = instance_type  # type: str
        self.price_limit = price_limit  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(SpotPriceLimit, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.price_limit is not None:
            result['PriceLimit'] = self.price_limit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('PriceLimit') is not None:
            self.price_limit = m.get('PriceLimit')
        return self


class StateChangeReason(TeaModel):
    def __init__(self, code=None, message=None):
        # 状态码。
        self.code = code  # type: str
        # 描述信息。
        self.message = message  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StateChangeReason, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class SubscriptionConfig(TeaModel):
    def __init__(self, auto_renew=None, auto_renew_duration=None, auto_renew_duration_unit=None,
                 payment_duration=None, payment_duration_unit=None):
        # 自动续费。取值范围：
        # - true：开启启动续费。
        # - false：不开启自动续费。
        # 默认值：false。
        self.auto_renew = auto_renew  # type: bool
        # 自动续费时长。当AutoRenew取值为true时生效。当AutoRenewDurationUnit取值为Month时，取值：1、2、3、4、5、6、7、8、9、12、24、36、48、60。
        self.auto_renew_duration = auto_renew_duration  # type: int
        # - Month：月。
        self.auto_renew_duration_unit = auto_renew_duration_unit  # type: str
        # 付费时长。PaymentDurationUnit取值为Month时，取值：1、2、3、4、5、6、7、8、9、12、24、36、48、60。
        self.payment_duration = payment_duration  # type: int
        # 付费时长单位。取值范围：
        # - Month：月。
        self.payment_duration_unit = payment_duration_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubscriptionConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_renew is not None:
            result['AutoRenew'] = self.auto_renew
        if self.auto_renew_duration is not None:
            result['AutoRenewDuration'] = self.auto_renew_duration
        if self.auto_renew_duration_unit is not None:
            result['AutoRenewDurationUnit'] = self.auto_renew_duration_unit
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AutoRenew') is not None:
            self.auto_renew = m.get('AutoRenew')
        if m.get('AutoRenewDuration') is not None:
            self.auto_renew_duration = m.get('AutoRenewDuration')
        if m.get('AutoRenewDurationUnit') is not None:
            self.auto_renew_duration_unit = m.get('AutoRenewDurationUnit')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        return self


class SystemDisk(TeaModel):
    def __init__(self, category=None, count=None, performance_level=None, size=None):
        # 磁盘类型。
        self.category = category  # type: str
        # 每个节点系统盘数量，默认值为1。
        self.count = count  # type: int
        # 创建ESSD云盘作为系统盘使用时，设置云盘的性能等级。取值范围：
        # - PL0：单盘最高随机读写IOPS 1万。
        # - PL1（默认）：单盘最高随机读写IOPS 5万。
        # - PL2：单盘最高随机读写IOPS 10万。
        # - PL3：单盘最高随机读写IOPS 100万。
        # 
        # 默认值：PL1。
        self.performance_level = performance_level  # type: str
        # 单位GB。
        self.size = size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(SystemDisk, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.count is not None:
            result['Count'] = self.count
        if self.performance_level is not None:
            result['PerformanceLevel'] = self.performance_level
        if self.size is not None:
            result['Size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('PerformanceLevel') is not None:
            self.performance_level = m.get('PerformanceLevel')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        return self


class SystemDiskParam(TeaModel):
    def __init__(self, category=None, performance_level=None, size=None):
        self.category = category  # type: str
        self.performance_level = performance_level  # type: str
        self.size = size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(SystemDiskParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.performance_level is not None:
            result['PerformanceLevel'] = self.performance_level
        if self.size is not None:
            result['Size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('PerformanceLevel') is not None:
            self.performance_level = m.get('PerformanceLevel')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        return self


class Tag(TeaModel):
    def __init__(self, key=None, value=None):
        # 标签键。必填参数，不允许为空字符串。最多支持128个字符，不能以aliyun和acs:开头，不能包含http://或https://。
        self.key = key  # type: str
        # 标签值。非必填，可以为空字符串。最多支持128个字符，不能以acs:开头，不能包含http://或者https://。
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Tag, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResource(TeaModel):
    def __init__(self, resource_id=None, resource_type=None, tag_key=None, tag_value=None):
        self.resource_id = resource_id  # type: str
        self.resource_type = resource_type  # type: str
        self.tag_key = tag_key  # type: str
        self.tag_value = tag_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TagResource, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class TimeConstraint(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        # 结束时间。取值范围：00:00:00至23:59:59
        self.end_time = end_time  # type: str
        # 开始时间。取值范围：00:00:00至23:59:59
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TimeConstraint, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class TimeRange(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        # 结束时间。
        self.end_time = end_time  # type: str
        # 起始时间。
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TimeRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class TimeTrigger(TeaModel):
    def __init__(self, end_time=None, launch_expiration_time=None, launch_time=None, recurrence_type=None,
                 recurrence_value=None, start_time=None):
        # 结束时间戳。单位为毫秒。
        self.end_time = end_time  # type: long
        # 定时任务触发操作失败后，在此时间内重试。单位为秒，取值范围：0~3600。
        self.launch_expiration_time = launch_expiration_time  # type: int
        # 启动时间。
        self.launch_time = launch_time  # type: str
        # 指定时间规则的执行类型。
        self.recurrence_type = recurrence_type  # type: str
        # 重复执行定时任务的数值。具体取值取决于 recurrenceType 设置。
        # - recurrenceType 取 MINUTELY 时，只能填一个数值，取值范围：1~1440。
        # - recurrenceType 取 HOURLY 时，只能填一个数值，取值范围：1~24。
        # - recurrenceType 取 DAILY 时，只能填一个数值，取值范围：1~31。
        # - recurrenceType 取 WEEKLY 时，可以填入多个值，填多个值时使用英文逗号（,）分隔。周一到周天分别用MON，TUE，WED，THU，FRI，SAT，SUN代替。 比如 MON,FRI,SUN 代表周一、周五、周天。
        # - recurrenceType 取 MONTHLY 时，格式为A-B或者A,B。A、B的取值范围为1~31，如果使用A-B时B必须大于A。
        self.recurrence_value = recurrence_value  # type: str
        # 开始时间戳。单位为毫秒。
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(TimeTrigger, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.launch_expiration_time is not None:
            result['LaunchExpirationTime'] = self.launch_expiration_time
        if self.launch_time is not None:
            result['LaunchTime'] = self.launch_time
        if self.recurrence_type is not None:
            result['RecurrenceType'] = self.recurrence_type
        if self.recurrence_value is not None:
            result['RecurrenceValue'] = self.recurrence_value
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('LaunchExpirationTime') is not None:
            self.launch_expiration_time = m.get('LaunchExpirationTime')
        if m.get('LaunchTime') is not None:
            self.launch_time = m.get('LaunchTime')
        if m.get('RecurrenceType') is not None:
            self.recurrence_type = m.get('RecurrenceType')
        if m.get('RecurrenceValue') is not None:
            self.recurrence_value = m.get('RecurrenceValue')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class Toleration(TeaModel):
    def __init__(self, effect=None, key=None, operator=None, value=None):
        self.effect = effect  # type: str
        self.key = key  # type: str
        self.operator = operator  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Toleration, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effect is not None:
            result['Effect'] = self.effect
        if self.key is not None:
            result['Key'] = self.key
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Effect') is not None:
            self.effect = m.get('Effect')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TriggerCondition(TeaModel):
    def __init__(self, comparison_operator=None, metric_name=None, statistics=None, tags=None, threshold=None):
        # 比较符。取值范围：
        # - EQ:等于。
        # - NE:不等于。
        # - GT:大于。
        # - LT:小于。
        # - GE:大于等于。
        # - LE:小于等于。
        self.comparison_operator = comparison_operator  # type: str
        # 指标名称。指标名称需要在 ListAutoScalingMetrics 接口返回的指标名称列表中。
        self.metric_name = metric_name  # type: str
        # 统计量名称。取值范围：
        # - MAX：最大值。
        # - MIN：最小值。
        # - AVG：平均值。
        self.statistics = statistics  # type: str
        # 指标Tag。
        self.tags = tags  # type: list[Tag]
        # 阈值。
        self.threshold = threshold  # type: float

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TriggerCondition, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comparison_operator is not None:
            result['ComparisonOperator'] = self.comparison_operator
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.statistics is not None:
            result['Statistics'] = self.statistics
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        if self.threshold is not None:
            result['Threshold'] = self.threshold
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComparisonOperator') is not None:
            self.comparison_operator = m.get('ComparisonOperator')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('Statistics') is not None:
            self.statistics = m.get('Statistics')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        if m.get('Threshold') is not None:
            self.threshold = m.get('Threshold')
        return self


class UpdateApplicationConfig(TeaModel):
    def __init__(self, config_description=None, config_file_name=None, config_item_key=None,
                 config_item_value=None):
        # 修改描述。
        self.config_description = config_description  # type: str
        # 应用配置文件名。
        self.config_file_name = config_file_name  # type: str
        # 配置项键。
        self.config_item_key = config_item_key  # type: str
        # 配置项值。
        self.config_item_value = config_item_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateApplicationConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_description is not None:
            result['ConfigDescription'] = self.config_description
        if self.config_file_name is not None:
            result['ConfigFileName'] = self.config_file_name
        if self.config_item_key is not None:
            result['ConfigItemKey'] = self.config_item_key
        if self.config_item_value is not None:
            result['ConfigItemValue'] = self.config_item_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigDescription') is not None:
            self.config_description = m.get('ConfigDescription')
        if m.get('ConfigFileName') is not None:
            self.config_file_name = m.get('ConfigFileName')
        if m.get('ConfigItemKey') is not None:
            self.config_item_key = m.get('ConfigItemKey')
        if m.get('ConfigItemValue') is not None:
            self.config_item_value = m.get('ConfigItemValue')
        return self


class UpdateSpecNodeGroup(TeaModel):
    def __init__(self, new_instance_type=None, node_group_id=None):
        # 新实例类型。
        self.new_instance_type = new_instance_type  # type: str
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSpecNodeGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.new_instance_type is not None:
            result['NewInstanceType'] = self.new_instance_type
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NewInstanceType') is not None:
            self.new_instance_type = m.get('NewInstanceType')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        return self


class UpdateSpecNodeGroupParam(TeaModel):
    def __init__(self, new_instance_type=None, node_group_id=None):
        self.new_instance_type = new_instance_type  # type: str
        self.node_group_id = node_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSpecNodeGroupParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.new_instance_type is not None:
            result['NewInstanceType'] = self.new_instance_type
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NewInstanceType') is not None:
            self.new_instance_type = m.get('NewInstanceType')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        return self


class User(TeaModel):
    def __init__(self, group=None, password=None, user_id=None, user_name=None, user_type=None):
        # 用户组。
        self.group = group  # type: str
        # 用户密码。
        self.password = password  # type: str
        # 用户ID。
        self.user_id = user_id  # type: str
        # 用户名称。
        self.user_name = user_name  # type: str
        # 用户类型。
        self.user_type = user_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(User, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group is not None:
            result['Group'] = self.group
        if self.password is not None:
            result['Password'] = self.password
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.user_type is not None:
            result['UserType'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Group') is not None:
            self.group = m.get('Group')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('UserType') is not None:
            self.user_type = m.get('UserType')
        return self


class UserParam(TeaModel):
    def __init__(self, password=None, user_id=None, user_name=None):
        self.password = password  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UserParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.password is not None:
            result['Password'] = self.password
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ValueConstraints(TeaModel):
    def __init__(self, default_value=None, end=None, start=None, step=None, type=None, values=None):
        # 默认值。
        self.default_value = default_value  # type: int
        # 结束值。
        self.end = end  # type: int
        # 起始值。
        self.start = start  # type: int
        # 步长。
        self.step = step  # type: int
        # 值限制类型。
        self.type = type  # type: str
        # 枚举值。
        self.values = values  # type: list[int]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ValueConstraints, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.default_value is not None:
            result['DefaultValue'] = self.default_value
        if self.end is not None:
            result['End'] = self.end
        if self.start is not None:
            result['Start'] = self.start
        if self.step is not None:
            result['Step'] = self.step
        if self.type is not None:
            result['Type'] = self.type
        if self.values is not None:
            result['Values'] = self.values
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DefaultValue') is not None:
            self.default_value = m.get('DefaultValue')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        if m.get('Step') is not None:
            self.step = m.get('Step')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Values') is not None:
            self.values = m.get('Values')
        return self


class CreateClusterRequest(TeaModel):
    def __init__(self, application_configs=None, applications=None, bootstrap_scripts=None, client_token=None,
                 cluster_name=None, cluster_type=None, deploy_mode=None, node_attributes=None, node_groups=None,
                 payment_type=None, region_id=None, release_version=None, resource_group_id=None, security_mode=None,
                 subscription_config=None, tags=None):
        # 应用配置。数组元素个数N的取值范围：1~1000。
        self.application_configs = application_configs  # type: list[ApplicationConfig]
        # 应用列表。数组元素个数N的取值范围：1~100。
        self.applications = applications  # type: list[Application]
        # 引导脚本。数组元素个数N的取值范围：1~10。
        self.bootstrap_scripts = bootstrap_scripts  # type: list[Script]
        # 幂等客户端TOKEN。同一个ClientToken多次调用的返回结果一致，同一个ClientToken最多只创建一个集群。
        self.client_token = client_token  # type: str
        # 集群名称。长度为1~128个字符，必须以大小字母或中文开头，不能以http://和https://开头。可以包含中文、英文、数字、半角冒号（:）、下划线（_）、半角句号（.）或者短划线（-）
        self.cluster_name = cluster_name  # type: str
        # 创建的EMR集群类型。取值范围：
        # - DATALAKE：新版数据湖。
        # - OLAP：数据分析。
        # - DATAFLOW：实时数据流。
        # - DATASERVING：数据服务。
        # - CUSTOM：自定义集群。
        # - HADOOP：旧版数据湖（不推荐使用，建议使用新版数据湖）。
        self.cluster_type = cluster_type  # type: str
        # 集群中的应用部署模式。取值范围：
        # - NORMAL：非高可用部署。集群1个MASTER节点。
        # - HA：高可用部署。高可用部署要求至少3个MASTER节点。
        # 
        # 默认值：NORMAL。
        self.deploy_mode = deploy_mode  # type: str
        # 节点属性。集群中的ECS节点基础属性。
        self.node_attributes = node_attributes  # type: NodeAttributes
        # 节点组。数组元素个数N的取值范围：1~100。
        # <p>
        self.node_groups = node_groups  # type: list[NodeGroupConfig]
        # 集群的付费类型。取值范围：
        # - PayAsYouGo：后付费。
        # - Subscription：预付费。
        # 
        # 默认值：PayAsYouGo。
        self.payment_type = payment_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        # EMR发行版。
        self.release_version = release_version  # type: str
        # 集群所在的企业资源组ID。
        self.resource_group_id = resource_group_id  # type: str
        # Kerberos安全模式。取值范围：
        # - NORMAL：普通模式，不开启Kerberos模式。
        # - KERBEROS：开启Kerberos模式。
        # 
        # 默认值：NORMAL
        self.security_mode = security_mode  # type: str
        # 预付费配置。当PaymentType取值Subscription时该参数生效。
        self.subscription_config = subscription_config  # type: SubscriptionConfig
        # 标签。数组元数个数N的取值范围：0~20。
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.application_configs:
            for k in self.application_configs:
                if k:
                    k.validate()
        if self.applications:
            for k in self.applications:
                if k:
                    k.validate()
        if self.bootstrap_scripts:
            for k in self.bootstrap_scripts:
                if k:
                    k.validate()
        if self.node_attributes:
            self.node_attributes.validate()
        if self.node_groups:
            for k in self.node_groups:
                if k:
                    k.validate()
        if self.subscription_config:
            self.subscription_config.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateClusterRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplicationConfigs'] = []
        if self.application_configs is not None:
            for k in self.application_configs:
                result['ApplicationConfigs'].append(k.to_map() if k else None)
        result['Applications'] = []
        if self.applications is not None:
            for k in self.applications:
                result['Applications'].append(k.to_map() if k else None)
        result['BootstrapScripts'] = []
        if self.bootstrap_scripts is not None:
            for k in self.bootstrap_scripts:
                result['BootstrapScripts'].append(k.to_map() if k else None)
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.cluster_name is not None:
            result['ClusterName'] = self.cluster_name
        if self.cluster_type is not None:
            result['ClusterType'] = self.cluster_type
        if self.deploy_mode is not None:
            result['DeployMode'] = self.deploy_mode
        if self.node_attributes is not None:
            result['NodeAttributes'] = self.node_attributes.to_map()
        result['NodeGroups'] = []
        if self.node_groups is not None:
            for k in self.node_groups:
                result['NodeGroups'].append(k.to_map() if k else None)
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.security_mode is not None:
            result['SecurityMode'] = self.security_mode
        if self.subscription_config is not None:
            result['SubscriptionConfig'] = self.subscription_config.to_map()
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.application_configs = []
        if m.get('ApplicationConfigs') is not None:
            for k in m.get('ApplicationConfigs'):
                temp_model = ApplicationConfig()
                self.application_configs.append(temp_model.from_map(k))
        self.applications = []
        if m.get('Applications') is not None:
            for k in m.get('Applications'):
                temp_model = Application()
                self.applications.append(temp_model.from_map(k))
        self.bootstrap_scripts = []
        if m.get('BootstrapScripts') is not None:
            for k in m.get('BootstrapScripts'):
                temp_model = Script()
                self.bootstrap_scripts.append(temp_model.from_map(k))
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('ClusterName') is not None:
            self.cluster_name = m.get('ClusterName')
        if m.get('ClusterType') is not None:
            self.cluster_type = m.get('ClusterType')
        if m.get('DeployMode') is not None:
            self.deploy_mode = m.get('DeployMode')
        if m.get('NodeAttributes') is not None:
            temp_model = NodeAttributes()
            self.node_attributes = temp_model.from_map(m['NodeAttributes'])
        self.node_groups = []
        if m.get('NodeGroups') is not None:
            for k in m.get('NodeGroups'):
                temp_model = NodeGroupConfig()
                self.node_groups.append(temp_model.from_map(k))
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SecurityMode') is not None:
            self.security_mode = m.get('SecurityMode')
        if m.get('SubscriptionConfig') is not None:
            temp_model = SubscriptionConfig()
            self.subscription_config = temp_model.from_map(m['SubscriptionConfig'])
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class CreateClusterResponseBody(TeaModel):
    def __init__(self, cluster_id=None, operation_id=None, request_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 操作ID。
        self.operation_id = operation_id  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateClusterResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateClusterResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateClusterResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateClusterResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateNodeGroupRequest(TeaModel):
    def __init__(self, cluster_id=None, node_group=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 节点组信息。
        self.node_group = node_group  # type: NodeGroupConfig
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        if self.node_group:
            self.node_group.validate()

    def to_map(self):
        _map = super(CreateNodeGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.node_group is not None:
            result['NodeGroup'] = self.node_group.to_map()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('NodeGroup') is not None:
            temp_model = NodeGroupConfig()
            self.node_group = temp_model.from_map(m['NodeGroup'])
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class CreateNodeGroupResponseBody(TeaModel):
    def __init__(self, node_group_id=None, request_id=None):
        self.node_group_id = node_group_id  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateNodeGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateNodeGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateNodeGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateNodeGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateNodeGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DecreaseNodesRequest(TeaModel):
    def __init__(self, cluster_id=None, decrease_node_count=None, node_group_id=None, node_ids=None, region_id=None):
        # The cluster ID.
        self.cluster_id = cluster_id  # type: str
        # The number of nodes to scale in. The number of nodes to be scaled in. The value should be less than the number of surviving nodes in the current node group.
        self.decrease_node_count = decrease_node_count  # type: int
        # The ID of the node group.
        self.node_group_id = node_group_id  # type: str
        # The array of node IDs. Valid values of array element N: 1 to 500.
        self.node_ids = node_ids  # type: list[str]
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DecreaseNodesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.decrease_node_count is not None:
            result['DecreaseNodeCount'] = self.decrease_node_count
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_ids is not None:
            result['NodeIds'] = self.node_ids
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DecreaseNodeCount') is not None:
            self.decrease_node_count = m.get('DecreaseNodeCount')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeIds') is not None:
            self.node_ids = m.get('NodeIds')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class DecreaseNodesResponseBody(TeaModel):
    def __init__(self, operation_id=None, request_id=None):
        # Operation ID.
        self.operation_id = operation_id  # type: str
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DecreaseNodesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DecreaseNodesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DecreaseNodesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DecreaseNodesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DecreaseNodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteClusterRequest(TeaModel):
    def __init__(self, cluster_id=None, region_id=None):
        # The ID of the cluster.
        self.cluster_id = cluster_id  # type: str
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteClusterRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class DeleteClusterResponseBody(TeaModel):
    def __init__(self, operation_id=None, request_id=None):
        # The ID of the operation.
        self.operation_id = operation_id  # type: str
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteClusterResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteClusterResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteClusterResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteClusterResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAutoScalingActivityRequest(TeaModel):
    def __init__(self, cluster_id=None, region_id=None, scaling_activity_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        # 伸缩活动ID。
        self.scaling_activity_id = scaling_activity_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAutoScalingActivityRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.scaling_activity_id is not None:
            result['ScalingActivityId'] = self.scaling_activity_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ScalingActivityId') is not None:
            self.scaling_activity_id = m.get('ScalingActivityId')
        return self


class GetAutoScalingActivityResponseBodyScalingActivity(TeaModel):
    def __init__(self, activity_id=None, activity_results=None, activity_state=None, activity_type=None,
                 cluster_id=None, description=None, end_time=None, expect_num=None, node_group_id=None, node_group_name=None,
                 operation_id=None, rule_detail=None, rule_name=None, start_time=None):
        # 伸缩活动ID。
        self.activity_id = activity_id  # type: str
        # 本次伸缩活动对应的实例列表。
        self.activity_results = activity_results  # type: list[ScalingActivityResult]
        # 伸缩活动状态。取值范围：
        # - REJECTED：拒绝
        # - SUCCESSFUL：成功
        # - FAILED：失败
        # - IN_PROGRESS：进行中
        self.activity_state = activity_state  # type: str
        # 伸缩活动类型。取值范围：
        # - SCALE_IN：缩容
        # - SCALE_OUT：扩容
        self.activity_type = activity_type  # type: str
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 伸缩活动描述。
        self.description = description  # type: str
        # 伸缩结束时间。
        self.end_time = end_time  # type: long
        # 本次扩缩数量。
        self.expect_num = expect_num  # type: int
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点组名称。
        self.node_group_name = node_group_name  # type: str
        # 操作ID。
        self.operation_id = operation_id  # type: str
        # 伸缩规则详述。
        self.rule_detail = rule_detail  # type: ScalingRule
        # 伸缩规则名称。
        self.rule_name = rule_name  # type: str
        # 伸缩启动时间。
        self.start_time = start_time  # type: long

    def validate(self):
        if self.activity_results:
            for k in self.activity_results:
                if k:
                    k.validate()
        if self.rule_detail:
            self.rule_detail.validate()

    def to_map(self):
        _map = super(GetAutoScalingActivityResponseBodyScalingActivity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_id is not None:
            result['ActivityId'] = self.activity_id
        result['ActivityResults'] = []
        if self.activity_results is not None:
            for k in self.activity_results:
                result['ActivityResults'].append(k.to_map() if k else None)
        if self.activity_state is not None:
            result['ActivityState'] = self.activity_state
        if self.activity_type is not None:
            result['ActivityType'] = self.activity_type
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.expect_num is not None:
            result['ExpectNum'] = self.expect_num
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.rule_detail is not None:
            result['RuleDetail'] = self.rule_detail.to_map()
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityId') is not None:
            self.activity_id = m.get('ActivityId')
        self.activity_results = []
        if m.get('ActivityResults') is not None:
            for k in m.get('ActivityResults'):
                temp_model = ScalingActivityResult()
                self.activity_results.append(temp_model.from_map(k))
        if m.get('ActivityState') is not None:
            self.activity_state = m.get('ActivityState')
        if m.get('ActivityType') is not None:
            self.activity_type = m.get('ActivityType')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ExpectNum') is not None:
            self.expect_num = m.get('ExpectNum')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RuleDetail') is not None:
            temp_model = ScalingRule()
            self.rule_detail = temp_model.from_map(m['RuleDetail'])
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetAutoScalingActivityResponseBody(TeaModel):
    def __init__(self, request_id=None, scaling_activity=None):
        # 请求ID。
        self.request_id = request_id  # type: str
        self.scaling_activity = scaling_activity  # type: GetAutoScalingActivityResponseBodyScalingActivity

    def validate(self):
        if self.scaling_activity:
            self.scaling_activity.validate()

    def to_map(self):
        _map = super(GetAutoScalingActivityResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scaling_activity is not None:
            result['ScalingActivity'] = self.scaling_activity.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScalingActivity') is not None:
            temp_model = GetAutoScalingActivityResponseBodyScalingActivity()
            self.scaling_activity = temp_model.from_map(m['ScalingActivity'])
        return self


class GetAutoScalingActivityResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAutoScalingActivityResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAutoScalingActivityResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAutoScalingActivityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAutoScalingPolicyRequest(TeaModel):
    def __init__(self, cluster_id=None, node_group_id=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 节点组ID。节点组 Id-针对 ACK 集群，此字段为空。
        self.node_group_id = node_group_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAutoScalingPolicyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetAutoScalingPolicyResponseBodyScalingPolicyConstraints(TeaModel):
    def __init__(self, max_capacity=None, min_capacity=None):
        # 最大值
        self.max_capacity = max_capacity  # type: int
        # 最小值
        self.min_capacity = min_capacity  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAutoScalingPolicyResponseBodyScalingPolicyConstraints, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_capacity is not None:
            result['MaxCapacity'] = self.max_capacity
        if self.min_capacity is not None:
            result['MinCapacity'] = self.min_capacity
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxCapacity') is not None:
            self.max_capacity = m.get('MaxCapacity')
        if m.get('MinCapacity') is not None:
            self.min_capacity = m.get('MinCapacity')
        return self


class GetAutoScalingPolicyResponseBodyScalingPolicyScalingRules(TeaModel):
    def __init__(self, activity_type=None, adjustment_type=None, adjustment_value=None, metrics_trigger=None,
                 rule_name=None, time_trigger=None, trigger_type=None):
        # 伸缩类型。取值范围：
        # - SCALE_OUT：扩容
        # - SCALE_IN：缩容
        self.activity_type = activity_type  # type: str
        # 调整类型。CHANGE_IN_CAPACITY/EXACT_CAPACITY。
        self.adjustment_type = adjustment_type  # type: str
        # 调整值。需要为正数，代表需要扩容或者缩容的实例数量。
        self.adjustment_value = adjustment_value  # type: int
        # 按照负载伸缩描述。
        self.metrics_trigger = metrics_trigger  # type: MetricsTrigger
        # 弹性伸缩规则名称。
        self.rule_name = rule_name  # type: str
        # 按照时间伸缩描述。
        self.time_trigger = time_trigger  # type: TimeTrigger
        # 伸缩规则类型。取值范围：
        # - TIME_TRIGGER: 按时间伸缩。
        # - METRICS_TRIGGER: 按负载伸缩。
        self.trigger_type = trigger_type  # type: str

    def validate(self):
        if self.metrics_trigger:
            self.metrics_trigger.validate()
        if self.time_trigger:
            self.time_trigger.validate()

    def to_map(self):
        _map = super(GetAutoScalingPolicyResponseBodyScalingPolicyScalingRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_type is not None:
            result['ActivityType'] = self.activity_type
        if self.adjustment_type is not None:
            result['AdjustmentType'] = self.adjustment_type
        if self.adjustment_value is not None:
            result['AdjustmentValue'] = self.adjustment_value
        if self.metrics_trigger is not None:
            result['MetricsTrigger'] = self.metrics_trigger.to_map()
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.time_trigger is not None:
            result['TimeTrigger'] = self.time_trigger.to_map()
        if self.trigger_type is not None:
            result['TriggerType'] = self.trigger_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityType') is not None:
            self.activity_type = m.get('ActivityType')
        if m.get('AdjustmentType') is not None:
            self.adjustment_type = m.get('AdjustmentType')
        if m.get('AdjustmentValue') is not None:
            self.adjustment_value = m.get('AdjustmentValue')
        if m.get('MetricsTrigger') is not None:
            temp_model = MetricsTrigger()
            self.metrics_trigger = temp_model.from_map(m['MetricsTrigger'])
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('TimeTrigger') is not None:
            temp_model = TimeTrigger()
            self.time_trigger = temp_model.from_map(m['TimeTrigger'])
        if m.get('TriggerType') is not None:
            self.trigger_type = m.get('TriggerType')
        return self


class GetAutoScalingPolicyResponseBodyScalingPolicy(TeaModel):
    def __init__(self, cluster_id=None, constraints=None, node_group_id=None, scaling_policy_id=None,
                 scaling_rules=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 最大最小值约束
        self.constraints = constraints  # type: GetAutoScalingPolicyResponseBodyScalingPolicyConstraints
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 伸缩策略ID。
        self.scaling_policy_id = scaling_policy_id  # type: str
        # 伸缩规则列表
        self.scaling_rules = scaling_rules  # type: list[GetAutoScalingPolicyResponseBodyScalingPolicyScalingRules]

    def validate(self):
        if self.constraints:
            self.constraints.validate()
        if self.scaling_rules:
            for k in self.scaling_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetAutoScalingPolicyResponseBodyScalingPolicy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.constraints is not None:
            result['Constraints'] = self.constraints.to_map()
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.scaling_policy_id is not None:
            result['ScalingPolicyId'] = self.scaling_policy_id
        result['ScalingRules'] = []
        if self.scaling_rules is not None:
            for k in self.scaling_rules:
                result['ScalingRules'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('Constraints') is not None:
            temp_model = GetAutoScalingPolicyResponseBodyScalingPolicyConstraints()
            self.constraints = temp_model.from_map(m['Constraints'])
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('ScalingPolicyId') is not None:
            self.scaling_policy_id = m.get('ScalingPolicyId')
        self.scaling_rules = []
        if m.get('ScalingRules') is not None:
            for k in m.get('ScalingRules'):
                temp_model = GetAutoScalingPolicyResponseBodyScalingPolicyScalingRules()
                self.scaling_rules.append(temp_model.from_map(k))
        return self


class GetAutoScalingPolicyResponseBody(TeaModel):
    def __init__(self, request_id=None, scaling_policy=None):
        # 请求ID。
        self.request_id = request_id  # type: str
        self.scaling_policy = scaling_policy  # type: GetAutoScalingPolicyResponseBodyScalingPolicy

    def validate(self):
        if self.scaling_policy:
            self.scaling_policy.validate()

    def to_map(self):
        _map = super(GetAutoScalingPolicyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scaling_policy is not None:
            result['ScalingPolicy'] = self.scaling_policy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScalingPolicy') is not None:
            temp_model = GetAutoScalingPolicyResponseBodyScalingPolicy()
            self.scaling_policy = temp_model.from_map(m['ScalingPolicy'])
        return self


class GetAutoScalingPolicyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAutoScalingPolicyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAutoScalingPolicyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAutoScalingPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetClusterRequest(TeaModel):
    def __init__(self, cluster_id=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 地域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetClusterRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetClusterResponseBody(TeaModel):
    def __init__(self, cluster=None, request_id=None):
        self.cluster = cluster  # type: Cluster
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.cluster:
            self.cluster.validate()

    def to_map(self):
        _map = super(GetClusterResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster is not None:
            result['Cluster'] = self.cluster.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Cluster') is not None:
            temp_model = Cluster()
            self.cluster = temp_model.from_map(m['Cluster'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetClusterResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetClusterResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetClusterResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorApplicationRequest(TeaModel):
    def __init__(self, app_id=None, cluster_id=None, date_time=None, region_id=None):
        # app id
        self.app_id = app_id  # type: str
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorApplicationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorApplicationResponseBodyDataAnalysis(TeaModel):
    def __init__(self, score=None, suggestion=None):
        self.score = score  # type: int
        self.suggestion = suggestion  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.score is not None:
            result['Score'] = self.score
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        return self


class GetDoctorApplicationResponseBodyDataMetricsMemSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBodyDataMetricsMemSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorApplicationResponseBodyDataMetricsMemUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBodyDataMetricsMemUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorApplicationResponseBodyDataMetricsVcoreSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBodyDataMetricsVcoreSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorApplicationResponseBodyDataMetricsVcoreUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBodyDataMetricsVcoreUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorApplicationResponseBodyDataMetrics(TeaModel):
    def __init__(self, mem_seconds=None, mem_utilization=None, vcore_seconds=None, vcore_utilization=None):
        self.mem_seconds = mem_seconds  # type: GetDoctorApplicationResponseBodyDataMetricsMemSeconds
        self.mem_utilization = mem_utilization  # type: GetDoctorApplicationResponseBodyDataMetricsMemUtilization
        self.vcore_seconds = vcore_seconds  # type: GetDoctorApplicationResponseBodyDataMetricsVcoreSeconds
        self.vcore_utilization = vcore_utilization  # type: GetDoctorApplicationResponseBodyDataMetricsVcoreUtilization

    def validate(self):
        if self.mem_seconds:
            self.mem_seconds.validate()
        if self.mem_utilization:
            self.mem_utilization.validate()
        if self.vcore_seconds:
            self.vcore_seconds.validate()
        if self.vcore_utilization:
            self.vcore_utilization.validate()

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mem_seconds is not None:
            result['MemSeconds'] = self.mem_seconds.to_map()
        if self.mem_utilization is not None:
            result['MemUtilization'] = self.mem_utilization.to_map()
        if self.vcore_seconds is not None:
            result['VcoreSeconds'] = self.vcore_seconds.to_map()
        if self.vcore_utilization is not None:
            result['VcoreUtilization'] = self.vcore_utilization.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemSeconds') is not None:
            temp_model = GetDoctorApplicationResponseBodyDataMetricsMemSeconds()
            self.mem_seconds = temp_model.from_map(m['MemSeconds'])
        if m.get('MemUtilization') is not None:
            temp_model = GetDoctorApplicationResponseBodyDataMetricsMemUtilization()
            self.mem_utilization = temp_model.from_map(m['MemUtilization'])
        if m.get('VcoreSeconds') is not None:
            temp_model = GetDoctorApplicationResponseBodyDataMetricsVcoreSeconds()
            self.vcore_seconds = temp_model.from_map(m['VcoreSeconds'])
        if m.get('VcoreUtilization') is not None:
            temp_model = GetDoctorApplicationResponseBodyDataMetricsVcoreUtilization()
            self.vcore_utilization = temp_model.from_map(m['VcoreUtilization'])
        return self


class GetDoctorApplicationResponseBodyData(TeaModel):
    def __init__(self, analysis=None, app_name=None, end_time=None, ids=None, metrics=None, query_sql=None,
                 queue=None, start_time=None, type=None, user=None):
        self.analysis = analysis  # type: GetDoctorApplicationResponseBodyDataAnalysis
        self.app_name = app_name  # type: str
        self.end_time = end_time  # type: long
        self.ids = ids  # type: list[str]
        self.metrics = metrics  # type: GetDoctorApplicationResponseBodyDataMetrics
        self.query_sql = query_sql  # type: str
        self.queue = queue  # type: str
        self.start_time = start_time  # type: long
        self.type = type  # type: str
        self.user = user  # type: str

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.query_sql is not None:
            result['QuerySql'] = self.query_sql
        if self.queue is not None:
            result['Queue'] = self.queue
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        if self.user is not None:
            result['User'] = self.user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorApplicationResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('Metrics') is not None:
            temp_model = GetDoctorApplicationResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('QuerySql') is not None:
            self.query_sql = m.get('QuerySql')
        if m.get('Queue') is not None:
            self.queue = m.get('Queue')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('User') is not None:
            self.user = m.get('User')
        return self


class GetDoctorApplicationResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorApplicationResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorApplicationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorApplicationResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorApplicationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorApplicationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorApplicationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorApplicationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorComputeSummaryRequestComponentInfo(TeaModel):
    def __init__(self, component_name=None, component_type=None):
        self.component_name = component_name  # type: str
        self.component_type = component_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryRequestComponentInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        if self.component_type is not None:
            result['ComponentType'] = self.component_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        if m.get('ComponentType') is not None:
            self.component_type = m.get('ComponentType')
        return self


class GetDoctorComputeSummaryRequest(TeaModel):
    def __init__(self, cluster_id=None, component_info=None, date_time=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.component_info = component_info  # type: GetDoctorComputeSummaryRequestComponentInfo
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        if self.component_info:
            self.component_info.validate()

    def to_map(self):
        _map = super(GetDoctorComputeSummaryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.component_info is not None:
            result['ComponentInfo'] = self.component_info.to_map()
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ComponentInfo') is not None:
            temp_model = GetDoctorComputeSummaryRequestComponentInfo()
            self.component_info = temp_model.from_map(m['ComponentInfo'])
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorComputeSummaryResponseBodyDataAnalysis(TeaModel):
    def __init__(self, healthy_job_count=None, need_attention_job_count=None, score=None,
                 score_day_growth_ratio=None, sub_healthy_job_count=None, unhealthy_job_count=None):
        self.healthy_job_count = healthy_job_count  # type: long
        self.need_attention_job_count = need_attention_job_count  # type: long
        self.score = score  # type: int
        self.score_day_growth_ratio = score_day_growth_ratio  # type: float
        self.sub_healthy_job_count = sub_healthy_job_count  # type: long
        self.unhealthy_job_count = unhealthy_job_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.healthy_job_count is not None:
            result['HealthyJobCount'] = self.healthy_job_count
        if self.need_attention_job_count is not None:
            result['NeedAttentionJobCount'] = self.need_attention_job_count
        if self.score is not None:
            result['Score'] = self.score
        if self.score_day_growth_ratio is not None:
            result['ScoreDayGrowthRatio'] = self.score_day_growth_ratio
        if self.sub_healthy_job_count is not None:
            result['SubHealthyJobCount'] = self.sub_healthy_job_count
        if self.unhealthy_job_count is not None:
            result['UnhealthyJobCount'] = self.unhealthy_job_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HealthyJobCount') is not None:
            self.healthy_job_count = m.get('HealthyJobCount')
        if m.get('NeedAttentionJobCount') is not None:
            self.need_attention_job_count = m.get('NeedAttentionJobCount')
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('ScoreDayGrowthRatio') is not None:
            self.score_day_growth_ratio = m.get('ScoreDayGrowthRatio')
        if m.get('SubHealthyJobCount') is not None:
            self.sub_healthy_job_count = m.get('SubHealthyJobCount')
        if m.get('UnhealthyJobCount') is not None:
            self.unhealthy_job_count = m.get('UnhealthyJobCount')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsMemSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsMemSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsMemUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsMemUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsReadSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsReadSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetricsWriteSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetricsWriteSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorComputeSummaryResponseBodyDataMetrics(TeaModel):
    def __init__(self, mem_seconds=None, mem_seconds_day_growth_ratio=None, mem_utilization=None, read_size=None,
                 vcore_seconds=None, vcore_seconds_day_growth_ratio=None, vcore_utilization=None, write_size=None):
        self.mem_seconds = mem_seconds  # type: GetDoctorComputeSummaryResponseBodyDataMetricsMemSeconds
        self.mem_seconds_day_growth_ratio = mem_seconds_day_growth_ratio  # type: GetDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio
        self.mem_utilization = mem_utilization  # type: GetDoctorComputeSummaryResponseBodyDataMetricsMemUtilization
        self.read_size = read_size  # type: GetDoctorComputeSummaryResponseBodyDataMetricsReadSize
        self.vcore_seconds = vcore_seconds  # type: GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds
        self.vcore_seconds_day_growth_ratio = vcore_seconds_day_growth_ratio  # type: GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio
        self.vcore_utilization = vcore_utilization  # type: GetDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization
        self.write_size = write_size  # type: GetDoctorComputeSummaryResponseBodyDataMetricsWriteSize

    def validate(self):
        if self.mem_seconds:
            self.mem_seconds.validate()
        if self.mem_seconds_day_growth_ratio:
            self.mem_seconds_day_growth_ratio.validate()
        if self.mem_utilization:
            self.mem_utilization.validate()
        if self.read_size:
            self.read_size.validate()
        if self.vcore_seconds:
            self.vcore_seconds.validate()
        if self.vcore_seconds_day_growth_ratio:
            self.vcore_seconds_day_growth_ratio.validate()
        if self.vcore_utilization:
            self.vcore_utilization.validate()
        if self.write_size:
            self.write_size.validate()

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mem_seconds is not None:
            result['MemSeconds'] = self.mem_seconds.to_map()
        if self.mem_seconds_day_growth_ratio is not None:
            result['MemSecondsDayGrowthRatio'] = self.mem_seconds_day_growth_ratio.to_map()
        if self.mem_utilization is not None:
            result['MemUtilization'] = self.mem_utilization.to_map()
        if self.read_size is not None:
            result['ReadSize'] = self.read_size.to_map()
        if self.vcore_seconds is not None:
            result['VcoreSeconds'] = self.vcore_seconds.to_map()
        if self.vcore_seconds_day_growth_ratio is not None:
            result['VcoreSecondsDayGrowthRatio'] = self.vcore_seconds_day_growth_ratio.to_map()
        if self.vcore_utilization is not None:
            result['VcoreUtilization'] = self.vcore_utilization.to_map()
        if self.write_size is not None:
            result['WriteSize'] = self.write_size.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemSeconds') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsMemSeconds()
            self.mem_seconds = temp_model.from_map(m['MemSeconds'])
        if m.get('MemSecondsDayGrowthRatio') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio()
            self.mem_seconds_day_growth_ratio = temp_model.from_map(m['MemSecondsDayGrowthRatio'])
        if m.get('MemUtilization') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsMemUtilization()
            self.mem_utilization = temp_model.from_map(m['MemUtilization'])
        if m.get('ReadSize') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsReadSize()
            self.read_size = temp_model.from_map(m['ReadSize'])
        if m.get('VcoreSeconds') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds()
            self.vcore_seconds = temp_model.from_map(m['VcoreSeconds'])
        if m.get('VcoreSecondsDayGrowthRatio') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio()
            self.vcore_seconds_day_growth_ratio = temp_model.from_map(m['VcoreSecondsDayGrowthRatio'])
        if m.get('VcoreUtilization') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization()
            self.vcore_utilization = temp_model.from_map(m['VcoreUtilization'])
        if m.get('WriteSize') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetricsWriteSize()
            self.write_size = temp_model.from_map(m['WriteSize'])
        return self


class GetDoctorComputeSummaryResponseBodyData(TeaModel):
    def __init__(self, analysis=None, metrics=None):
        self.analysis = analysis  # type: GetDoctorComputeSummaryResponseBodyDataAnalysis
        self.metrics = metrics  # type: GetDoctorComputeSummaryResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('Metrics') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorComputeSummaryResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorComputeSummaryResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorComputeSummaryResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorComputeSummaryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorComputeSummaryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorComputeSummaryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorComputeSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHBaseClusterRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorHBaseClusterResponseBodyDataAnalysis(TeaModel):
    def __init__(self, hbase_score=None):
        self.hbase_score = hbase_score  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hbase_score is not None:
            result['HbaseScore'] = self.hbase_score
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HbaseScore') is not None:
            self.hbase_score = m.get('HbaseScore')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsAvgLoad(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsAvgLoad, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsDailyReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsDailyReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsDailyWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsDailyWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsMemHeap(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsMemHeap, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsNormalAvgLoad(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsNormalAvgLoad, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsRegionBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsRegionBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsRegionCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsRegionCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsRegionServerCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsRegionServerCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsStoreFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsStoreFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsTableCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsTableCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsTotalReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsTotalReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsTotalRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsTotalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetricsTotalWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetricsTotalWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseClusterResponseBodyDataMetrics(TeaModel):
    def __init__(self, avg_load=None, daily_read_request=None, daily_write_request=None, mem_heap=None,
                 normal_avg_load=None, region_balance=None, region_count=None, region_server_count=None, store_file_count=None,
                 table_count=None, total_data_size=None, total_read_request=None, total_request=None, total_write_request=None):
        self.avg_load = avg_load  # type: GetDoctorHBaseClusterResponseBodyDataMetricsAvgLoad
        self.daily_read_request = daily_read_request  # type: GetDoctorHBaseClusterResponseBodyDataMetricsDailyReadRequest
        self.daily_write_request = daily_write_request  # type: GetDoctorHBaseClusterResponseBodyDataMetricsDailyWriteRequest
        self.mem_heap = mem_heap  # type: GetDoctorHBaseClusterResponseBodyDataMetricsMemHeap
        self.normal_avg_load = normal_avg_load  # type: GetDoctorHBaseClusterResponseBodyDataMetricsNormalAvgLoad
        self.region_balance = region_balance  # type: GetDoctorHBaseClusterResponseBodyDataMetricsRegionBalance
        self.region_count = region_count  # type: GetDoctorHBaseClusterResponseBodyDataMetricsRegionCount
        self.region_server_count = region_server_count  # type: GetDoctorHBaseClusterResponseBodyDataMetricsRegionServerCount
        self.store_file_count = store_file_count  # type: GetDoctorHBaseClusterResponseBodyDataMetricsStoreFileCount
        self.table_count = table_count  # type: GetDoctorHBaseClusterResponseBodyDataMetricsTableCount
        self.total_data_size = total_data_size  # type: GetDoctorHBaseClusterResponseBodyDataMetricsTotalDataSize
        self.total_read_request = total_read_request  # type: GetDoctorHBaseClusterResponseBodyDataMetricsTotalReadRequest
        self.total_request = total_request  # type: GetDoctorHBaseClusterResponseBodyDataMetricsTotalRequest
        self.total_write_request = total_write_request  # type: GetDoctorHBaseClusterResponseBodyDataMetricsTotalWriteRequest

    def validate(self):
        if self.avg_load:
            self.avg_load.validate()
        if self.daily_read_request:
            self.daily_read_request.validate()
        if self.daily_write_request:
            self.daily_write_request.validate()
        if self.mem_heap:
            self.mem_heap.validate()
        if self.normal_avg_load:
            self.normal_avg_load.validate()
        if self.region_balance:
            self.region_balance.validate()
        if self.region_count:
            self.region_count.validate()
        if self.region_server_count:
            self.region_server_count.validate()
        if self.store_file_count:
            self.store_file_count.validate()
        if self.table_count:
            self.table_count.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_read_request:
            self.total_read_request.validate()
        if self.total_request:
            self.total_request.validate()
        if self.total_write_request:
            self.total_write_request.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avg_load is not None:
            result['AvgLoad'] = self.avg_load.to_map()
        if self.daily_read_request is not None:
            result['DailyReadRequest'] = self.daily_read_request.to_map()
        if self.daily_write_request is not None:
            result['DailyWriteRequest'] = self.daily_write_request.to_map()
        if self.mem_heap is not None:
            result['MemHeap'] = self.mem_heap.to_map()
        if self.normal_avg_load is not None:
            result['NormalAvgLoad'] = self.normal_avg_load.to_map()
        if self.region_balance is not None:
            result['RegionBalance'] = self.region_balance.to_map()
        if self.region_count is not None:
            result['RegionCount'] = self.region_count.to_map()
        if self.region_server_count is not None:
            result['RegionServerCount'] = self.region_server_count.to_map()
        if self.store_file_count is not None:
            result['StoreFileCount'] = self.store_file_count.to_map()
        if self.table_count is not None:
            result['TableCount'] = self.table_count.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_read_request is not None:
            result['TotalReadRequest'] = self.total_read_request.to_map()
        if self.total_request is not None:
            result['TotalRequest'] = self.total_request.to_map()
        if self.total_write_request is not None:
            result['TotalWriteRequest'] = self.total_write_request.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AvgLoad') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsAvgLoad()
            self.avg_load = temp_model.from_map(m['AvgLoad'])
        if m.get('DailyReadRequest') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsDailyReadRequest()
            self.daily_read_request = temp_model.from_map(m['DailyReadRequest'])
        if m.get('DailyWriteRequest') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsDailyWriteRequest()
            self.daily_write_request = temp_model.from_map(m['DailyWriteRequest'])
        if m.get('MemHeap') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsMemHeap()
            self.mem_heap = temp_model.from_map(m['MemHeap'])
        if m.get('NormalAvgLoad') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsNormalAvgLoad()
            self.normal_avg_load = temp_model.from_map(m['NormalAvgLoad'])
        if m.get('RegionBalance') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsRegionBalance()
            self.region_balance = temp_model.from_map(m['RegionBalance'])
        if m.get('RegionCount') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsRegionCount()
            self.region_count = temp_model.from_map(m['RegionCount'])
        if m.get('RegionServerCount') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsRegionServerCount()
            self.region_server_count = temp_model.from_map(m['RegionServerCount'])
        if m.get('StoreFileCount') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsStoreFileCount()
            self.store_file_count = temp_model.from_map(m['StoreFileCount'])
        if m.get('TableCount') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsTableCount()
            self.table_count = temp_model.from_map(m['TableCount'])
        if m.get('TotalDataSize') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalReadRequest') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsTotalReadRequest()
            self.total_read_request = temp_model.from_map(m['TotalReadRequest'])
        if m.get('TotalRequest') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsTotalRequest()
            self.total_request = temp_model.from_map(m['TotalRequest'])
        if m.get('TotalWriteRequest') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetricsTotalWriteRequest()
            self.total_write_request = temp_model.from_map(m['TotalWriteRequest'])
        return self


class GetDoctorHBaseClusterResponseBodyData(TeaModel):
    def __init__(self, analysis=None, metrics=None):
        self.analysis = analysis  # type: GetDoctorHBaseClusterResponseBodyDataAnalysis
        self.metrics = metrics  # type: GetDoctorHBaseClusterResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorHBaseClusterResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHBaseClusterResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHBaseClusterResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHBaseClusterResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHBaseClusterResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseClusterResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHBaseClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHBaseRegionRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, hbase_region_id=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # Region ID。
        self.hbase_region_id = hbase_region_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.hbase_region_id is not None:
            result['HbaseRegionId'] = self.hbase_region_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('HbaseRegionId') is not None:
            self.hbase_region_id = m.get('HbaseRegionId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorHBaseRegionResponseBodyDataMetricsDailyReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBodyDataMetricsDailyReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionResponseBodyDataMetricsDailyWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBodyDataMetricsDailyWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionResponseBodyDataMetricsStoreFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBodyDataMetricsStoreFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionResponseBodyDataMetricsTotalReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBodyDataMetricsTotalReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionResponseBodyDataMetricsTotalWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBodyDataMetricsTotalWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionResponseBodyDataMetrics(TeaModel):
    def __init__(self, daily_read_request=None, daily_write_request=None, store_file_count=None,
                 total_read_request=None, total_write_request=None):
        self.daily_read_request = daily_read_request  # type: GetDoctorHBaseRegionResponseBodyDataMetricsDailyReadRequest
        self.daily_write_request = daily_write_request  # type: GetDoctorHBaseRegionResponseBodyDataMetricsDailyWriteRequest
        self.store_file_count = store_file_count  # type: GetDoctorHBaseRegionResponseBodyDataMetricsStoreFileCount
        self.total_read_request = total_read_request  # type: GetDoctorHBaseRegionResponseBodyDataMetricsTotalReadRequest
        self.total_write_request = total_write_request  # type: GetDoctorHBaseRegionResponseBodyDataMetricsTotalWriteRequest

    def validate(self):
        if self.daily_read_request:
            self.daily_read_request.validate()
        if self.daily_write_request:
            self.daily_write_request.validate()
        if self.store_file_count:
            self.store_file_count.validate()
        if self.total_read_request:
            self.total_read_request.validate()
        if self.total_write_request:
            self.total_write_request.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.daily_read_request is not None:
            result['DailyReadRequest'] = self.daily_read_request.to_map()
        if self.daily_write_request is not None:
            result['DailyWriteRequest'] = self.daily_write_request.to_map()
        if self.store_file_count is not None:
            result['StoreFileCount'] = self.store_file_count.to_map()
        if self.total_read_request is not None:
            result['TotalReadRequest'] = self.total_read_request.to_map()
        if self.total_write_request is not None:
            result['TotalWriteRequest'] = self.total_write_request.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DailyReadRequest') is not None:
            temp_model = GetDoctorHBaseRegionResponseBodyDataMetricsDailyReadRequest()
            self.daily_read_request = temp_model.from_map(m['DailyReadRequest'])
        if m.get('DailyWriteRequest') is not None:
            temp_model = GetDoctorHBaseRegionResponseBodyDataMetricsDailyWriteRequest()
            self.daily_write_request = temp_model.from_map(m['DailyWriteRequest'])
        if m.get('StoreFileCount') is not None:
            temp_model = GetDoctorHBaseRegionResponseBodyDataMetricsStoreFileCount()
            self.store_file_count = temp_model.from_map(m['StoreFileCount'])
        if m.get('TotalReadRequest') is not None:
            temp_model = GetDoctorHBaseRegionResponseBodyDataMetricsTotalReadRequest()
            self.total_read_request = temp_model.from_map(m['TotalReadRequest'])
        if m.get('TotalWriteRequest') is not None:
            temp_model = GetDoctorHBaseRegionResponseBodyDataMetricsTotalWriteRequest()
            self.total_write_request = temp_model.from_map(m['TotalWriteRequest'])
        return self


class GetDoctorHBaseRegionResponseBodyData(TeaModel):
    def __init__(self, metrics=None, region_server_host=None, table_name=None):
        self.metrics = metrics  # type: GetDoctorHBaseRegionResponseBodyDataMetrics
        self.region_server_host = region_server_host  # type: str
        self.table_name = table_name  # type: str

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.region_server_host is not None:
            result['RegionServerHost'] = self.region_server_host
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHBaseRegionResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('RegionServerHost') is not None:
            self.region_server_host = m.get('RegionServerHost')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class GetDoctorHBaseRegionResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHBaseRegionResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHBaseRegionResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHBaseRegionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHBaseRegionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHBaseRegionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHBaseRegionServerRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, region_id=None, region_server_host=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.region_server_host = region_server_host  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.region_server_host is not None:
            result['RegionServerHost'] = self.region_server_host
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RegionServerHost') is not None:
            self.region_server_host = m.get('RegionServerHost')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsAvgGc(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsAvgGc, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsCacheRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsCacheRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsRegionCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsRegionCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseRegionServerResponseBodyDataMetrics(TeaModel):
    def __init__(self, avg_gc=None, cache_ratio=None, daily_read_request=None,
                 daily_read_request_day_growth_ratio=None, daily_write_request=None, daily_write_request_day_growth_ratio=None, region_count=None,
                 total_read_request=None, total_request=None, total_write_request=None):
        self.avg_gc = avg_gc  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsAvgGc
        self.cache_ratio = cache_ratio  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsCacheRatio
        self.daily_read_request = daily_read_request  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequest
        self.daily_read_request_day_growth_ratio = daily_read_request_day_growth_ratio  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequestDayGrowthRatio
        self.daily_write_request = daily_write_request  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequest
        self.daily_write_request_day_growth_ratio = daily_write_request_day_growth_ratio  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio
        self.region_count = region_count  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsRegionCount
        self.total_read_request = total_read_request  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalReadRequest
        self.total_request = total_request  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalRequest
        self.total_write_request = total_write_request  # type: GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalWriteRequest

    def validate(self):
        if self.avg_gc:
            self.avg_gc.validate()
        if self.cache_ratio:
            self.cache_ratio.validate()
        if self.daily_read_request:
            self.daily_read_request.validate()
        if self.daily_read_request_day_growth_ratio:
            self.daily_read_request_day_growth_ratio.validate()
        if self.daily_write_request:
            self.daily_write_request.validate()
        if self.daily_write_request_day_growth_ratio:
            self.daily_write_request_day_growth_ratio.validate()
        if self.region_count:
            self.region_count.validate()
        if self.total_read_request:
            self.total_read_request.validate()
        if self.total_request:
            self.total_request.validate()
        if self.total_write_request:
            self.total_write_request.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avg_gc is not None:
            result['AvgGc'] = self.avg_gc.to_map()
        if self.cache_ratio is not None:
            result['CacheRatio'] = self.cache_ratio.to_map()
        if self.daily_read_request is not None:
            result['DailyReadRequest'] = self.daily_read_request.to_map()
        if self.daily_read_request_day_growth_ratio is not None:
            result['DailyReadRequestDayGrowthRatio'] = self.daily_read_request_day_growth_ratio.to_map()
        if self.daily_write_request is not None:
            result['DailyWriteRequest'] = self.daily_write_request.to_map()
        if self.daily_write_request_day_growth_ratio is not None:
            result['DailyWriteRequestDayGrowthRatio'] = self.daily_write_request_day_growth_ratio.to_map()
        if self.region_count is not None:
            result['RegionCount'] = self.region_count.to_map()
        if self.total_read_request is not None:
            result['TotalReadRequest'] = self.total_read_request.to_map()
        if self.total_request is not None:
            result['TotalRequest'] = self.total_request.to_map()
        if self.total_write_request is not None:
            result['TotalWriteRequest'] = self.total_write_request.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AvgGc') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsAvgGc()
            self.avg_gc = temp_model.from_map(m['AvgGc'])
        if m.get('CacheRatio') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsCacheRatio()
            self.cache_ratio = temp_model.from_map(m['CacheRatio'])
        if m.get('DailyReadRequest') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequest()
            self.daily_read_request = temp_model.from_map(m['DailyReadRequest'])
        if m.get('DailyReadRequestDayGrowthRatio') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyReadRequestDayGrowthRatio()
            self.daily_read_request_day_growth_ratio = temp_model.from_map(m['DailyReadRequestDayGrowthRatio'])
        if m.get('DailyWriteRequest') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequest()
            self.daily_write_request = temp_model.from_map(m['DailyWriteRequest'])
        if m.get('DailyWriteRequestDayGrowthRatio') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio()
            self.daily_write_request_day_growth_ratio = temp_model.from_map(m['DailyWriteRequestDayGrowthRatio'])
        if m.get('RegionCount') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsRegionCount()
            self.region_count = temp_model.from_map(m['RegionCount'])
        if m.get('TotalReadRequest') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalReadRequest()
            self.total_read_request = temp_model.from_map(m['TotalReadRequest'])
        if m.get('TotalRequest') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalRequest()
            self.total_request = temp_model.from_map(m['TotalRequest'])
        if m.get('TotalWriteRequest') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetricsTotalWriteRequest()
            self.total_write_request = temp_model.from_map(m['TotalWriteRequest'])
        return self


class GetDoctorHBaseRegionServerResponseBodyData(TeaModel):
    def __init__(self, metrics=None):
        self.metrics = metrics  # type: GetDoctorHBaseRegionServerResponseBodyDataMetrics

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorHBaseRegionServerResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHBaseRegionServerResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHBaseRegionServerResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHBaseRegionServerResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseRegionServerResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHBaseRegionServerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHBaseTableRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, region_id=None, table_name=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.table_name = table_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class GetDoctorHBaseTableResponseBodyDataAnalysis(TeaModel):
    def __init__(self, read_request_hotspot_region_list=None, read_request_unbalance_suggestion=None,
                 request_hotspot_region_list=None, request_unbalance_suggestion=None, table_score=None,
                 write_request_hotspot_region_list=None, write_request_unbalance_suggestion=None):
        self.read_request_hotspot_region_list = read_request_hotspot_region_list  # type: list[str]
        self.read_request_unbalance_suggestion = read_request_unbalance_suggestion  # type: str
        self.request_hotspot_region_list = request_hotspot_region_list  # type: list[str]
        self.request_unbalance_suggestion = request_unbalance_suggestion  # type: str
        self.table_score = table_score  # type: int
        self.write_request_hotspot_region_list = write_request_hotspot_region_list  # type: list[str]
        self.write_request_unbalance_suggestion = write_request_unbalance_suggestion  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.read_request_hotspot_region_list is not None:
            result['ReadRequestHotspotRegionList'] = self.read_request_hotspot_region_list
        if self.read_request_unbalance_suggestion is not None:
            result['ReadRequestUnbalanceSuggestion'] = self.read_request_unbalance_suggestion
        if self.request_hotspot_region_list is not None:
            result['RequestHotspotRegionList'] = self.request_hotspot_region_list
        if self.request_unbalance_suggestion is not None:
            result['RequestUnbalanceSuggestion'] = self.request_unbalance_suggestion
        if self.table_score is not None:
            result['TableScore'] = self.table_score
        if self.write_request_hotspot_region_list is not None:
            result['WriteRequestHotspotRegionList'] = self.write_request_hotspot_region_list
        if self.write_request_unbalance_suggestion is not None:
            result['WriteRequestUnbalanceSuggestion'] = self.write_request_unbalance_suggestion
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ReadRequestHotspotRegionList') is not None:
            self.read_request_hotspot_region_list = m.get('ReadRequestHotspotRegionList')
        if m.get('ReadRequestUnbalanceSuggestion') is not None:
            self.read_request_unbalance_suggestion = m.get('ReadRequestUnbalanceSuggestion')
        if m.get('RequestHotspotRegionList') is not None:
            self.request_hotspot_region_list = m.get('RequestHotspotRegionList')
        if m.get('RequestUnbalanceSuggestion') is not None:
            self.request_unbalance_suggestion = m.get('RequestUnbalanceSuggestion')
        if m.get('TableScore') is not None:
            self.table_score = m.get('TableScore')
        if m.get('WriteRequestHotspotRegionList') is not None:
            self.write_request_hotspot_region_list = m.get('WriteRequestHotspotRegionList')
        if m.get('WriteRequestUnbalanceSuggestion') is not None:
            self.write_request_unbalance_suggestion = m.get('WriteRequestUnbalanceSuggestion')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsColdAccessDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsColdAccessDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsColdConfigDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsColdConfigDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsFreezeConfigDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsFreezeConfigDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsLocality(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsLocality, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsReadRequestBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsReadRequestBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsRegionBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsRegionBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsRegionCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsRegionCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsRegionCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsRegionCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsRegionServerCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsRegionServerCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsRequestBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsRequestBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsTableSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsTableSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsTableSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsTableSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsWarmConfigDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsWarmConfigDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetricsWriteRequestBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetricsWriteRequestBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHBaseTableResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_access_day=None, cold_config_day=None, cold_data_size=None, daily_read_request=None,
                 daily_read_request_day_growth_ratio=None, daily_write_request=None, daily_write_request_day_growth_ratio=None,
                 freeze_config_day=None, freeze_data_size=None, hot_data_size=None, locality=None, read_request_balance=None,
                 region_balance=None, region_count=None, region_count_day_growth_ratio=None, region_server_count=None,
                 request_balance=None, store_file_count=None, store_file_count_day_growth_ratio=None, table_size=None,
                 table_size_day_growth_ratio=None, warm_config_day=None, warm_data_size=None, write_request_balance=None):
        self.cold_access_day = cold_access_day  # type: GetDoctorHBaseTableResponseBodyDataMetricsColdAccessDay
        self.cold_config_day = cold_config_day  # type: GetDoctorHBaseTableResponseBodyDataMetricsColdConfigDay
        self.cold_data_size = cold_data_size  # type: GetDoctorHBaseTableResponseBodyDataMetricsColdDataSize
        self.daily_read_request = daily_read_request  # type: GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequest
        self.daily_read_request_day_growth_ratio = daily_read_request_day_growth_ratio  # type: GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequestDayGrowthRatio
        self.daily_write_request = daily_write_request  # type: GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequest
        self.daily_write_request_day_growth_ratio = daily_write_request_day_growth_ratio  # type: GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio
        self.freeze_config_day = freeze_config_day  # type: GetDoctorHBaseTableResponseBodyDataMetricsFreezeConfigDay
        self.freeze_data_size = freeze_data_size  # type: GetDoctorHBaseTableResponseBodyDataMetricsFreezeDataSize
        self.hot_data_size = hot_data_size  # type: GetDoctorHBaseTableResponseBodyDataMetricsHotDataSize
        self.locality = locality  # type: GetDoctorHBaseTableResponseBodyDataMetricsLocality
        self.read_request_balance = read_request_balance  # type: GetDoctorHBaseTableResponseBodyDataMetricsReadRequestBalance
        self.region_balance = region_balance  # type: GetDoctorHBaseTableResponseBodyDataMetricsRegionBalance
        self.region_count = region_count  # type: GetDoctorHBaseTableResponseBodyDataMetricsRegionCount
        self.region_count_day_growth_ratio = region_count_day_growth_ratio  # type: GetDoctorHBaseTableResponseBodyDataMetricsRegionCountDayGrowthRatio
        self.region_server_count = region_server_count  # type: GetDoctorHBaseTableResponseBodyDataMetricsRegionServerCount
        self.request_balance = request_balance  # type: GetDoctorHBaseTableResponseBodyDataMetricsRequestBalance
        self.store_file_count = store_file_count  # type: GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCount
        self.store_file_count_day_growth_ratio = store_file_count_day_growth_ratio  # type: GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCountDayGrowthRatio
        self.table_size = table_size  # type: GetDoctorHBaseTableResponseBodyDataMetricsTableSize
        self.table_size_day_growth_ratio = table_size_day_growth_ratio  # type: GetDoctorHBaseTableResponseBodyDataMetricsTableSizeDayGrowthRatio
        self.warm_config_day = warm_config_day  # type: GetDoctorHBaseTableResponseBodyDataMetricsWarmConfigDay
        self.warm_data_size = warm_data_size  # type: GetDoctorHBaseTableResponseBodyDataMetricsWarmDataSize
        self.write_request_balance = write_request_balance  # type: GetDoctorHBaseTableResponseBodyDataMetricsWriteRequestBalance

    def validate(self):
        if self.cold_access_day:
            self.cold_access_day.validate()
        if self.cold_config_day:
            self.cold_config_day.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.daily_read_request:
            self.daily_read_request.validate()
        if self.daily_read_request_day_growth_ratio:
            self.daily_read_request_day_growth_ratio.validate()
        if self.daily_write_request:
            self.daily_write_request.validate()
        if self.daily_write_request_day_growth_ratio:
            self.daily_write_request_day_growth_ratio.validate()
        if self.freeze_config_day:
            self.freeze_config_day.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.locality:
            self.locality.validate()
        if self.read_request_balance:
            self.read_request_balance.validate()
        if self.region_balance:
            self.region_balance.validate()
        if self.region_count:
            self.region_count.validate()
        if self.region_count_day_growth_ratio:
            self.region_count_day_growth_ratio.validate()
        if self.region_server_count:
            self.region_server_count.validate()
        if self.request_balance:
            self.request_balance.validate()
        if self.store_file_count:
            self.store_file_count.validate()
        if self.store_file_count_day_growth_ratio:
            self.store_file_count_day_growth_ratio.validate()
        if self.table_size:
            self.table_size.validate()
        if self.table_size_day_growth_ratio:
            self.table_size_day_growth_ratio.validate()
        if self.warm_config_day:
            self.warm_config_day.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.write_request_balance:
            self.write_request_balance.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_access_day is not None:
            result['ColdAccessDay'] = self.cold_access_day.to_map()
        if self.cold_config_day is not None:
            result['ColdConfigDay'] = self.cold_config_day.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.daily_read_request is not None:
            result['DailyReadRequest'] = self.daily_read_request.to_map()
        if self.daily_read_request_day_growth_ratio is not None:
            result['DailyReadRequestDayGrowthRatio'] = self.daily_read_request_day_growth_ratio.to_map()
        if self.daily_write_request is not None:
            result['DailyWriteRequest'] = self.daily_write_request.to_map()
        if self.daily_write_request_day_growth_ratio is not None:
            result['DailyWriteRequestDayGrowthRatio'] = self.daily_write_request_day_growth_ratio.to_map()
        if self.freeze_config_day is not None:
            result['FreezeConfigDay'] = self.freeze_config_day.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.locality is not None:
            result['Locality'] = self.locality.to_map()
        if self.read_request_balance is not None:
            result['ReadRequestBalance'] = self.read_request_balance.to_map()
        if self.region_balance is not None:
            result['RegionBalance'] = self.region_balance.to_map()
        if self.region_count is not None:
            result['RegionCount'] = self.region_count.to_map()
        if self.region_count_day_growth_ratio is not None:
            result['RegionCountDayGrowthRatio'] = self.region_count_day_growth_ratio.to_map()
        if self.region_server_count is not None:
            result['RegionServerCount'] = self.region_server_count.to_map()
        if self.request_balance is not None:
            result['RequestBalance'] = self.request_balance.to_map()
        if self.store_file_count is not None:
            result['StoreFileCount'] = self.store_file_count.to_map()
        if self.store_file_count_day_growth_ratio is not None:
            result['StoreFileCountDayGrowthRatio'] = self.store_file_count_day_growth_ratio.to_map()
        if self.table_size is not None:
            result['TableSize'] = self.table_size.to_map()
        if self.table_size_day_growth_ratio is not None:
            result['TableSizeDayGrowthRatio'] = self.table_size_day_growth_ratio.to_map()
        if self.warm_config_day is not None:
            result['WarmConfigDay'] = self.warm_config_day.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.write_request_balance is not None:
            result['WriteRequestBalance'] = self.write_request_balance.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdAccessDay') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsColdAccessDay()
            self.cold_access_day = temp_model.from_map(m['ColdAccessDay'])
        if m.get('ColdConfigDay') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsColdConfigDay()
            self.cold_config_day = temp_model.from_map(m['ColdConfigDay'])
        if m.get('ColdDataSize') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('DailyReadRequest') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequest()
            self.daily_read_request = temp_model.from_map(m['DailyReadRequest'])
        if m.get('DailyReadRequestDayGrowthRatio') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsDailyReadRequestDayGrowthRatio()
            self.daily_read_request_day_growth_ratio = temp_model.from_map(m['DailyReadRequestDayGrowthRatio'])
        if m.get('DailyWriteRequest') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequest()
            self.daily_write_request = temp_model.from_map(m['DailyWriteRequest'])
        if m.get('DailyWriteRequestDayGrowthRatio') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio()
            self.daily_write_request_day_growth_ratio = temp_model.from_map(m['DailyWriteRequestDayGrowthRatio'])
        if m.get('FreezeConfigDay') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsFreezeConfigDay()
            self.freeze_config_day = temp_model.from_map(m['FreezeConfigDay'])
        if m.get('FreezeDataSize') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('HotDataSize') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('Locality') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsLocality()
            self.locality = temp_model.from_map(m['Locality'])
        if m.get('ReadRequestBalance') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsReadRequestBalance()
            self.read_request_balance = temp_model.from_map(m['ReadRequestBalance'])
        if m.get('RegionBalance') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsRegionBalance()
            self.region_balance = temp_model.from_map(m['RegionBalance'])
        if m.get('RegionCount') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsRegionCount()
            self.region_count = temp_model.from_map(m['RegionCount'])
        if m.get('RegionCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsRegionCountDayGrowthRatio()
            self.region_count_day_growth_ratio = temp_model.from_map(m['RegionCountDayGrowthRatio'])
        if m.get('RegionServerCount') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsRegionServerCount()
            self.region_server_count = temp_model.from_map(m['RegionServerCount'])
        if m.get('RequestBalance') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsRequestBalance()
            self.request_balance = temp_model.from_map(m['RequestBalance'])
        if m.get('StoreFileCount') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCount()
            self.store_file_count = temp_model.from_map(m['StoreFileCount'])
        if m.get('StoreFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsStoreFileCountDayGrowthRatio()
            self.store_file_count_day_growth_ratio = temp_model.from_map(m['StoreFileCountDayGrowthRatio'])
        if m.get('TableSize') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsTableSize()
            self.table_size = temp_model.from_map(m['TableSize'])
        if m.get('TableSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsTableSizeDayGrowthRatio()
            self.table_size_day_growth_ratio = temp_model.from_map(m['TableSizeDayGrowthRatio'])
        if m.get('WarmConfigDay') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsWarmConfigDay()
            self.warm_config_day = temp_model.from_map(m['WarmConfigDay'])
        if m.get('WarmDataSize') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WriteRequestBalance') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetricsWriteRequestBalance()
            self.write_request_balance = temp_model.from_map(m['WriteRequestBalance'])
        return self


class GetDoctorHBaseTableResponseBodyData(TeaModel):
    def __init__(self, analysis=None, metrics=None):
        self.analysis = analysis  # type: GetDoctorHBaseTableResponseBodyDataAnalysis
        self.metrics = metrics  # type: GetDoctorHBaseTableResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorHBaseTableResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHBaseTableResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHBaseTableResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHBaseTableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHBaseTableResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHBaseTableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHBaseTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHDFSClusterRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorHDFSClusterResponseBodyDataAnalysis(TeaModel):
    def __init__(self, hdfs_score=None):
        self.hdfs_score = hdfs_score  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hdfs_score is not None:
            result['HdfsScore'] = self.hdfs_score
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HdfsScore') is not None:
            self.hdfs_score = m.get('HdfsScore')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsColdDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsColdDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsHotDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsHotDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSClusterResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_ratio=None, cold_data_size=None,
                 cold_data_size_day_growth_ratio=None, empty_file_count=None, empty_file_count_day_growth_ratio=None,
                 empty_file_day_growth_count=None, empty_file_ratio=None, freeze_data_day_growth_size=None, freeze_data_ratio=None,
                 freeze_data_size=None, freeze_data_size_day_growth_ratio=None, hot_data_day_growth_size=None, hot_data_ratio=None,
                 hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, large_file_ratio=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, medium_file_ratio=None, small_file_count=None,
                 small_file_count_day_growth_ratio=None, small_file_day_growth_count=None, small_file_ratio=None, tiny_file_count=None,
                 tiny_file_count_day_growth_ratio=None, tiny_file_day_growth_count=None, tiny_file_ratio=None, total_data_day_growth_size=None,
                 total_data_size=None, total_data_size_day_growth_ratio=None, total_file_count=None,
                 total_file_count_day_growth_ratio=None, total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_ratio=None,
                 warm_data_size=None, warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_ratio = cold_data_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsColdDataRatio
        self.cold_data_size = cold_data_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.empty_file_count = empty_file_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.empty_file_ratio = empty_file_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileRatio
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_ratio = freeze_data_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataRatio
        self.freeze_data_size = freeze_data_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_ratio = hot_data_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsHotDataRatio
        self.hot_data_size = hot_data_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileDayGrowthCount
        self.large_file_ratio = large_file_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileRatio
        self.medium_file_count = medium_file_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileDayGrowthCount
        self.medium_file_ratio = medium_file_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileRatio
        self.small_file_count = small_file_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileDayGrowthCount
        self.small_file_ratio = small_file_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileRatio
        self.tiny_file_count = tiny_file_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileDayGrowthCount
        self.tiny_file_ratio = tiny_file_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileRatio
        self.total_data_day_growth_size = total_data_day_growth_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_ratio = warm_data_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataRatio
        self.warm_data_size = warm_data_size  # type: GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_ratio:
            self.cold_data_ratio.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.empty_file_ratio:
            self.empty_file_ratio.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_ratio:
            self.freeze_data_ratio.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_ratio:
            self.hot_data_ratio.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.large_file_ratio:
            self.large_file_ratio.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.medium_file_ratio:
            self.medium_file_ratio.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.small_file_ratio:
            self.small_file_ratio.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.tiny_file_ratio:
            self.tiny_file_ratio.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_ratio:
            self.warm_data_ratio.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_ratio is not None:
            result['ColdDataRatio'] = self.cold_data_ratio.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.empty_file_ratio is not None:
            result['EmptyFileRatio'] = self.empty_file_ratio.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_ratio is not None:
            result['FreezeDataRatio'] = self.freeze_data_ratio.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_ratio is not None:
            result['HotDataRatio'] = self.hot_data_ratio.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.large_file_ratio is not None:
            result['LargeFileRatio'] = self.large_file_ratio.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.medium_file_ratio is not None:
            result['MediumFileRatio'] = self.medium_file_ratio.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.small_file_ratio is not None:
            result['SmallFileRatio'] = self.small_file_ratio.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.tiny_file_ratio is not None:
            result['TinyFileRatio'] = self.tiny_file_ratio.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_ratio is not None:
            result['WarmDataRatio'] = self.warm_data_ratio.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsColdDataRatio()
            self.cold_data_ratio = temp_model.from_map(m['ColdDataRatio'])
        if m.get('ColdDataSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('EmptyFileCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('EmptyFileRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsEmptyFileRatio()
            self.empty_file_ratio = temp_model.from_map(m['EmptyFileRatio'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataRatio()
            self.freeze_data_ratio = temp_model.from_map(m['FreezeDataRatio'])
        if m.get('FreezeDataSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsHotDataRatio()
            self.hot_data_ratio = temp_model.from_map(m['HotDataRatio'])
        if m.get('HotDataSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('LargeFileRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsLargeFileRatio()
            self.large_file_ratio = temp_model.from_map(m['LargeFileRatio'])
        if m.get('MediumFileCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('MediumFileRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsMediumFileRatio()
            self.medium_file_ratio = temp_model.from_map(m['MediumFileRatio'])
        if m.get('SmallFileCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('SmallFileRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsSmallFileRatio()
            self.small_file_ratio = temp_model.from_map(m['SmallFileRatio'])
        if m.get('TinyFileCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TinyFileRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTinyFileRatio()
            self.tiny_file_ratio = temp_model.from_map(m['TinyFileRatio'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataRatio()
            self.warm_data_ratio = temp_model.from_map(m['WarmDataRatio'])
        if m.get('WarmDataSize') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class GetDoctorHDFSClusterResponseBodyData(TeaModel):
    def __init__(self, analysis=None, metrics=None):
        self.analysis = analysis  # type: GetDoctorHDFSClusterResponseBodyDataAnalysis
        self.metrics = metrics  # type: GetDoctorHDFSClusterResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorHDFSClusterResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHDFSClusterResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHDFSClusterResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHDFSClusterResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHDFSClusterResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSClusterResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHDFSClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHDFSDirectoryRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, dir_path=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        self.dir_path = dir_path  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.dir_path is not None:
            result['DirPath'] = self.dir_path
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('DirPath') is not None:
            self.dir_path = m.get('DirPath')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSDirectoryResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_size=None, cold_data_size_day_growth_ratio=None,
                 empty_file_count=None, empty_file_count_day_growth_ratio=None, empty_file_day_growth_count=None,
                 freeze_data_day_growth_size=None, freeze_data_size=None, freeze_data_size_day_growth_ratio=None,
                 hot_data_day_growth_size=None, hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, small_file_count=None,
                 small_file_count_day_growth_ratio=None, small_file_day_growth_count=None, tiny_file_count=None,
                 tiny_file_count_day_growth_ratio=None, tiny_file_day_growth_count=None, total_data_day_growth_size=None, total_data_size=None,
                 total_data_size_day_growth_ratio=None, total_file_count=None, total_file_count_day_growth_ratio=None,
                 total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_size=None, warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_size = cold_data_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.empty_file_count = empty_file_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_size = freeze_data_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_size = hot_data_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileDayGrowthCount
        self.medium_file_count = medium_file_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileDayGrowthCount
        self.small_file_count = small_file_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileDayGrowthCount
        self.tiny_file_count = tiny_file_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileDayGrowthCount
        self.total_data_day_growth_size = total_data_day_growth_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_size = warm_data_size  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('EmptyFileCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('MediumFileCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('SmallFileCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('TinyFileCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataSize') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class GetDoctorHDFSDirectoryResponseBodyData(TeaModel):
    def __init__(self, depth=None, group=None, metrics=None, user=None):
        self.depth = depth  # type: int
        self.group = group  # type: str
        self.metrics = metrics  # type: GetDoctorHDFSDirectoryResponseBodyDataMetrics
        self.user = user  # type: str

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depth is not None:
            result['Depth'] = self.depth
        if self.group is not None:
            result['Group'] = self.group
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.user is not None:
            result['User'] = self.user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Depth') is not None:
            self.depth = m.get('Depth')
        if m.get('Group') is not None:
            self.group = m.get('Group')
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('User') is not None:
            self.user = m.get('User')
        return self


class GetDoctorHDFSDirectoryResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHDFSDirectoryResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHDFSDirectoryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHDFSDirectoryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSDirectoryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHDFSDirectoryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHDFSUGIRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, name=None, region_id=None, type=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        self.name = name  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSUGIRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.name is not None:
            result['Name'] = self.name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHDFSUGIResponseBodyDataMetrics(TeaModel):
    def __init__(self, total_data_size=None, total_dir_count=None, total_file_count=None):
        self.total_data_size = total_data_size  # type: GetDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize
        self.total_dir_count = total_dir_count  # type: GetDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount
        self.total_file_count = total_file_count  # type: GetDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount

    def validate(self):
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_dir_count:
            self.total_dir_count.validate()
        if self.total_file_count:
            self.total_file_count.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSUGIResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_dir_count is not None:
            result['TotalDirCount'] = self.total_dir_count.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TotalDataSize') is not None:
            temp_model = GetDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDirCount') is not None:
            temp_model = GetDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount()
            self.total_dir_count = temp_model.from_map(m['TotalDirCount'])
        if m.get('TotalFileCount') is not None:
            temp_model = GetDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        return self


class GetDoctorHDFSUGIResponseBodyData(TeaModel):
    def __init__(self, metrics=None):
        self.metrics = metrics  # type: GetDoctorHDFSUGIResponseBodyDataMetrics

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSUGIResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHDFSUGIResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorHDFSUGIResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHDFSUGIResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSUGIResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHDFSUGIResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHDFSUGIResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHDFSUGIResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHDFSUGIResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHDFSUGIResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHiveClusterRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorHiveClusterResponseBodyDataAnalysis(TeaModel):
    def __init__(self, hive_distribution_score=None, hive_format_score=None, hive_frequency_score=None,
                 hive_score=None):
        self.hive_distribution_score = hive_distribution_score  # type: int
        self.hive_format_score = hive_format_score  # type: int
        self.hive_frequency_score = hive_frequency_score  # type: int
        self.hive_score = hive_score  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hive_distribution_score is not None:
            result['HiveDistributionScore'] = self.hive_distribution_score
        if self.hive_format_score is not None:
            result['HiveFormatScore'] = self.hive_format_score
        if self.hive_frequency_score is not None:
            result['HiveFrequencyScore'] = self.hive_frequency_score
        if self.hive_score is not None:
            result['HiveScore'] = self.hive_score
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HiveDistributionScore') is not None:
            self.hive_distribution_score = m.get('HiveDistributionScore')
        if m.get('HiveFormatScore') is not None:
            self.hive_format_score = m.get('HiveFormatScore')
        if m.get('HiveFrequencyScore') is not None:
            self.hive_frequency_score = m.get('HiveFrequencyScore')
        if m.get('HiveScore') is not None:
            self.hive_score = m.get('HiveScore')
        return self


class GetDoctorHiveClusterResponseBodyDataFormats(TeaModel):
    def __init__(self, format_name=None, format_ratio=None, format_size=None, format_size_unit=None):
        self.format_name = format_name  # type: str
        self.format_ratio = format_ratio  # type: float
        self.format_size = format_size  # type: long
        self.format_size_unit = format_size_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataFormats, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.format_name is not None:
            result['FormatName'] = self.format_name
        if self.format_ratio is not None:
            result['FormatRatio'] = self.format_ratio
        if self.format_size is not None:
            result['FormatSize'] = self.format_size
        if self.format_size_unit is not None:
            result['FormatSizeUnit'] = self.format_size_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FormatName') is not None:
            self.format_name = m.get('FormatName')
        if m.get('FormatRatio') is not None:
            self.format_ratio = m.get('FormatRatio')
        if m.get('FormatSize') is not None:
            self.format_size = m.get('FormatSize')
        if m.get('FormatSizeUnit') is not None:
            self.format_size_unit = m.get('FormatSizeUnit')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsColdDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsColdDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsDatabaseCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsDatabaseCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsHotDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsHotDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsLargeFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsLargeFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsMediumFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsMediumFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsPartitionNum(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsPartitionNum, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsSmallFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsSmallFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTableCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTableCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTinyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTinyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsWarmDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsWarmDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveClusterResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_ratio=None, cold_data_size=None,
                 cold_data_size_day_growth_ratio=None, database_count=None, empty_file_count=None, empty_file_count_day_growth_ratio=None,
                 empty_file_day_growth_count=None, empty_file_ratio=None, freeze_data_day_growth_size=None, freeze_data_ratio=None,
                 freeze_data_size=None, freeze_data_size_day_growth_ratio=None, hot_data_day_growth_size=None, hot_data_ratio=None,
                 hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, large_file_ratio=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, medium_file_ratio=None, partition_num=None,
                 small_file_count=None, small_file_count_day_growth_ratio=None, small_file_day_growth_count=None,
                 small_file_ratio=None, table_count=None, tiny_file_count=None, tiny_file_count_day_growth_ratio=None,
                 tiny_file_day_growth_count=None, tiny_file_ratio=None, total_data_day_growth_size=None, total_data_size=None,
                 total_data_size_day_growth_ratio=None, total_file_count=None, total_file_count_day_growth_ratio=None,
                 total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_ratio=None, warm_data_size=None,
                 warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_ratio = cold_data_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsColdDataRatio
        self.cold_data_size = cold_data_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.database_count = database_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsDatabaseCount
        self.empty_file_count = empty_file_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.empty_file_ratio = empty_file_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileRatio
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_ratio = freeze_data_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataRatio
        self.freeze_data_size = freeze_data_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_ratio = hot_data_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsHotDataRatio
        self.hot_data_size = hot_data_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsLargeFileDayGrowthCount
        self.large_file_ratio = large_file_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsLargeFileRatio
        self.medium_file_count = medium_file_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsMediumFileDayGrowthCount
        self.medium_file_ratio = medium_file_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsMediumFileRatio
        self.partition_num = partition_num  # type: GetDoctorHiveClusterResponseBodyDataMetricsPartitionNum
        self.small_file_count = small_file_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsSmallFileDayGrowthCount
        self.small_file_ratio = small_file_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsSmallFileRatio
        self.table_count = table_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsTableCount
        self.tiny_file_count = tiny_file_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsTinyFileDayGrowthCount
        self.tiny_file_ratio = tiny_file_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsTinyFileRatio
        self.total_data_day_growth_size = total_data_day_growth_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: GetDoctorHiveClusterResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_ratio = warm_data_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsWarmDataRatio
        self.warm_data_size = warm_data_size  # type: GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_ratio:
            self.cold_data_ratio.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.database_count:
            self.database_count.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.empty_file_ratio:
            self.empty_file_ratio.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_ratio:
            self.freeze_data_ratio.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_ratio:
            self.hot_data_ratio.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.large_file_ratio:
            self.large_file_ratio.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.medium_file_ratio:
            self.medium_file_ratio.validate()
        if self.partition_num:
            self.partition_num.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.small_file_ratio:
            self.small_file_ratio.validate()
        if self.table_count:
            self.table_count.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.tiny_file_ratio:
            self.tiny_file_ratio.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_ratio:
            self.warm_data_ratio.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_ratio is not None:
            result['ColdDataRatio'] = self.cold_data_ratio.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.database_count is not None:
            result['DatabaseCount'] = self.database_count.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.empty_file_ratio is not None:
            result['EmptyFileRatio'] = self.empty_file_ratio.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_ratio is not None:
            result['FreezeDataRatio'] = self.freeze_data_ratio.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_ratio is not None:
            result['HotDataRatio'] = self.hot_data_ratio.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.large_file_ratio is not None:
            result['LargeFileRatio'] = self.large_file_ratio.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.medium_file_ratio is not None:
            result['MediumFileRatio'] = self.medium_file_ratio.to_map()
        if self.partition_num is not None:
            result['PartitionNum'] = self.partition_num.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.small_file_ratio is not None:
            result['SmallFileRatio'] = self.small_file_ratio.to_map()
        if self.table_count is not None:
            result['TableCount'] = self.table_count.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.tiny_file_ratio is not None:
            result['TinyFileRatio'] = self.tiny_file_ratio.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_ratio is not None:
            result['WarmDataRatio'] = self.warm_data_ratio.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsColdDataRatio()
            self.cold_data_ratio = temp_model.from_map(m['ColdDataRatio'])
        if m.get('ColdDataSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('DatabaseCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsDatabaseCount()
            self.database_count = temp_model.from_map(m['DatabaseCount'])
        if m.get('EmptyFileCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('EmptyFileRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsEmptyFileRatio()
            self.empty_file_ratio = temp_model.from_map(m['EmptyFileRatio'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataRatio()
            self.freeze_data_ratio = temp_model.from_map(m['FreezeDataRatio'])
        if m.get('FreezeDataSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsHotDataRatio()
            self.hot_data_ratio = temp_model.from_map(m['HotDataRatio'])
        if m.get('HotDataSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('LargeFileRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsLargeFileRatio()
            self.large_file_ratio = temp_model.from_map(m['LargeFileRatio'])
        if m.get('MediumFileCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('MediumFileRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsMediumFileRatio()
            self.medium_file_ratio = temp_model.from_map(m['MediumFileRatio'])
        if m.get('PartitionNum') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsPartitionNum()
            self.partition_num = temp_model.from_map(m['PartitionNum'])
        if m.get('SmallFileCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('SmallFileRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsSmallFileRatio()
            self.small_file_ratio = temp_model.from_map(m['SmallFileRatio'])
        if m.get('TableCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTableCount()
            self.table_count = temp_model.from_map(m['TableCount'])
        if m.get('TinyFileCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TinyFileRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTinyFileRatio()
            self.tiny_file_ratio = temp_model.from_map(m['TinyFileRatio'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsWarmDataRatio()
            self.warm_data_ratio = temp_model.from_map(m['WarmDataRatio'])
        if m.get('WarmDataSize') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class GetDoctorHiveClusterResponseBodyData(TeaModel):
    def __init__(self, analysis=None, formats=None, metrics=None):
        self.analysis = analysis  # type: GetDoctorHiveClusterResponseBodyDataAnalysis
        self.formats = formats  # type: list[GetDoctorHiveClusterResponseBodyDataFormats]
        self.metrics = metrics  # type: GetDoctorHiveClusterResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.formats:
            for k in self.formats:
                if k:
                    k.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        result['Formats'] = []
        if self.formats is not None:
            for k in self.formats:
                result['Formats'].append(k.to_map() if k else None)
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        self.formats = []
        if m.get('Formats') is not None:
            for k in m.get('Formats'):
                temp_model = GetDoctorHiveClusterResponseBodyDataFormats()
                self.formats.append(temp_model.from_map(k))
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorHiveClusterResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHiveClusterResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHiveClusterResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHiveClusterResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHiveClusterResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHiveClusterResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHiveClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHiveDatabaseRequest(TeaModel):
    def __init__(self, cluster_id=None, database_name=None, date_time=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.database_name = database_name  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorHiveDatabaseResponseBodyDataAnalysis(TeaModel):
    def __init__(self, hive_distribution_score=None, hive_format_score=None, hive_frequency_score=None,
                 hive_score=None):
        self.hive_distribution_score = hive_distribution_score  # type: int
        self.hive_format_score = hive_format_score  # type: int
        self.hive_frequency_score = hive_frequency_score  # type: int
        self.hive_score = hive_score  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hive_distribution_score is not None:
            result['HiveDistributionScore'] = self.hive_distribution_score
        if self.hive_format_score is not None:
            result['HiveFormatScore'] = self.hive_format_score
        if self.hive_frequency_score is not None:
            result['HiveFrequencyScore'] = self.hive_frequency_score
        if self.hive_score is not None:
            result['HiveScore'] = self.hive_score
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HiveDistributionScore') is not None:
            self.hive_distribution_score = m.get('HiveDistributionScore')
        if m.get('HiveFormatScore') is not None:
            self.hive_format_score = m.get('HiveFormatScore')
        if m.get('HiveFrequencyScore') is not None:
            self.hive_frequency_score = m.get('HiveFrequencyScore')
        if m.get('HiveScore') is not None:
            self.hive_score = m.get('HiveScore')
        return self


class GetDoctorHiveDatabaseResponseBodyDataFormats(TeaModel):
    def __init__(self, format_day_growth_size=None, format_name=None, format_ratio=None, format_size=None,
                 format_size_day_growth_ratio=None, format_size_unit=None):
        self.format_day_growth_size = format_day_growth_size  # type: long
        self.format_name = format_name  # type: str
        self.format_ratio = format_ratio  # type: float
        self.format_size = format_size  # type: long
        self.format_size_day_growth_ratio = format_size_day_growth_ratio  # type: float
        self.format_size_unit = format_size_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataFormats, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.format_day_growth_size is not None:
            result['FormatDayGrowthSize'] = self.format_day_growth_size
        if self.format_name is not None:
            result['FormatName'] = self.format_name
        if self.format_ratio is not None:
            result['FormatRatio'] = self.format_ratio
        if self.format_size is not None:
            result['FormatSize'] = self.format_size
        if self.format_size_day_growth_ratio is not None:
            result['FormatSizeDayGrowthRatio'] = self.format_size_day_growth_ratio
        if self.format_size_unit is not None:
            result['FormatSizeUnit'] = self.format_size_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FormatDayGrowthSize') is not None:
            self.format_day_growth_size = m.get('FormatDayGrowthSize')
        if m.get('FormatName') is not None:
            self.format_name = m.get('FormatName')
        if m.get('FormatRatio') is not None:
            self.format_ratio = m.get('FormatRatio')
        if m.get('FormatSize') is not None:
            self.format_size = m.get('FormatSize')
        if m.get('FormatSizeDayGrowthRatio') is not None:
            self.format_size_day_growth_ratio = m.get('FormatSizeDayGrowthRatio')
        if m.get('FormatSizeUnit') is not None:
            self.format_size_unit = m.get('FormatSizeUnit')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsPartitionNum(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsPartitionNum, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTableCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTableCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveDatabaseResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_ratio=None, cold_data_size=None,
                 cold_data_size_day_growth_ratio=None, empty_file_count=None, empty_file_count_day_growth_ratio=None,
                 empty_file_day_growth_count=None, empty_file_ratio=None, freeze_data_day_growth_size=None, freeze_data_ratio=None,
                 freeze_data_size=None, freeze_data_size_day_growth_ratio=None, hot_data_day_growth_size=None, hot_data_ratio=None,
                 hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, large_file_ratio=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, medium_file_ratio=None, partition_num=None,
                 small_file_count=None, small_file_count_day_growth_ratio=None, small_file_day_growth_count=None,
                 small_file_ratio=None, table_count=None, tiny_file_count=None, tiny_file_count_day_growth_ratio=None,
                 tiny_file_day_growth_count=None, tiny_file_ratio=None, total_data_day_growth_size=None, total_data_size=None,
                 total_data_size_day_growth_ratio=None, total_file_count=None, total_file_count_day_growth_ratio=None,
                 total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_ratio=None, warm_data_size=None,
                 warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_ratio = cold_data_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataRatio
        self.cold_data_size = cold_data_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.empty_file_count = empty_file_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.empty_file_ratio = empty_file_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileRatio
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_ratio = freeze_data_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataRatio
        self.freeze_data_size = freeze_data_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_ratio = hot_data_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataRatio
        self.hot_data_size = hot_data_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileDayGrowthCount
        self.large_file_ratio = large_file_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileRatio
        self.medium_file_count = medium_file_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileDayGrowthCount
        self.medium_file_ratio = medium_file_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileRatio
        self.partition_num = partition_num  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsPartitionNum
        self.small_file_count = small_file_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileDayGrowthCount
        self.small_file_ratio = small_file_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileRatio
        self.table_count = table_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTableCount
        self.tiny_file_count = tiny_file_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileDayGrowthCount
        self.tiny_file_ratio = tiny_file_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileRatio
        self.total_data_day_growth_size = total_data_day_growth_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_ratio = warm_data_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataRatio
        self.warm_data_size = warm_data_size  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_ratio:
            self.cold_data_ratio.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.empty_file_ratio:
            self.empty_file_ratio.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_ratio:
            self.freeze_data_ratio.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_ratio:
            self.hot_data_ratio.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.large_file_ratio:
            self.large_file_ratio.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.medium_file_ratio:
            self.medium_file_ratio.validate()
        if self.partition_num:
            self.partition_num.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.small_file_ratio:
            self.small_file_ratio.validate()
        if self.table_count:
            self.table_count.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.tiny_file_ratio:
            self.tiny_file_ratio.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_ratio:
            self.warm_data_ratio.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_ratio is not None:
            result['ColdDataRatio'] = self.cold_data_ratio.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.empty_file_ratio is not None:
            result['EmptyFileRatio'] = self.empty_file_ratio.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_ratio is not None:
            result['FreezeDataRatio'] = self.freeze_data_ratio.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_ratio is not None:
            result['HotDataRatio'] = self.hot_data_ratio.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.large_file_ratio is not None:
            result['LargeFileRatio'] = self.large_file_ratio.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.medium_file_ratio is not None:
            result['MediumFileRatio'] = self.medium_file_ratio.to_map()
        if self.partition_num is not None:
            result['PartitionNum'] = self.partition_num.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.small_file_ratio is not None:
            result['SmallFileRatio'] = self.small_file_ratio.to_map()
        if self.table_count is not None:
            result['TableCount'] = self.table_count.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.tiny_file_ratio is not None:
            result['TinyFileRatio'] = self.tiny_file_ratio.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_ratio is not None:
            result['WarmDataRatio'] = self.warm_data_ratio.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataRatio()
            self.cold_data_ratio = temp_model.from_map(m['ColdDataRatio'])
        if m.get('ColdDataSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('EmptyFileCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('EmptyFileRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsEmptyFileRatio()
            self.empty_file_ratio = temp_model.from_map(m['EmptyFileRatio'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataRatio()
            self.freeze_data_ratio = temp_model.from_map(m['FreezeDataRatio'])
        if m.get('FreezeDataSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataRatio()
            self.hot_data_ratio = temp_model.from_map(m['HotDataRatio'])
        if m.get('HotDataSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('LargeFileRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsLargeFileRatio()
            self.large_file_ratio = temp_model.from_map(m['LargeFileRatio'])
        if m.get('MediumFileCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('MediumFileRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsMediumFileRatio()
            self.medium_file_ratio = temp_model.from_map(m['MediumFileRatio'])
        if m.get('PartitionNum') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsPartitionNum()
            self.partition_num = temp_model.from_map(m['PartitionNum'])
        if m.get('SmallFileCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('SmallFileRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsSmallFileRatio()
            self.small_file_ratio = temp_model.from_map(m['SmallFileRatio'])
        if m.get('TableCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTableCount()
            self.table_count = temp_model.from_map(m['TableCount'])
        if m.get('TinyFileCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TinyFileRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTinyFileRatio()
            self.tiny_file_ratio = temp_model.from_map(m['TinyFileRatio'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataRatio()
            self.warm_data_ratio = temp_model.from_map(m['WarmDataRatio'])
        if m.get('WarmDataSize') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class GetDoctorHiveDatabaseResponseBodyData(TeaModel):
    def __init__(self, analysis=None, formats=None, metrics=None):
        self.analysis = analysis  # type: GetDoctorHiveDatabaseResponseBodyDataAnalysis
        self.formats = formats  # type: list[GetDoctorHiveDatabaseResponseBodyDataFormats]
        self.metrics = metrics  # type: GetDoctorHiveDatabaseResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.formats:
            for k in self.formats:
                if k:
                    k.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        result['Formats'] = []
        if self.formats is not None:
            for k in self.formats:
                result['Formats'].append(k.to_map() if k else None)
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        self.formats = []
        if m.get('Formats') is not None:
            for k in m.get('Formats'):
                temp_model = GetDoctorHiveDatabaseResponseBodyDataFormats()
                self.formats.append(temp_model.from_map(k))
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class GetDoctorHiveDatabaseResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHiveDatabaseResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHiveDatabaseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHiveDatabaseResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHiveDatabaseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHiveDatabaseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorHiveTableRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, region_id=None, table_name=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.table_name = table_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class GetDoctorHiveTableResponseBodyDataAnalysis(TeaModel):
    def __init__(self, hive_distribution_score=None, hive_format_score=None, hive_frequency_score=None,
                 hive_score=None):
        self.hive_distribution_score = hive_distribution_score  # type: int
        self.hive_format_score = hive_format_score  # type: int
        self.hive_frequency_score = hive_frequency_score  # type: int
        self.hive_score = hive_score  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hive_distribution_score is not None:
            result['HiveDistributionScore'] = self.hive_distribution_score
        if self.hive_format_score is not None:
            result['HiveFormatScore'] = self.hive_format_score
        if self.hive_frequency_score is not None:
            result['HiveFrequencyScore'] = self.hive_frequency_score
        if self.hive_score is not None:
            result['HiveScore'] = self.hive_score
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HiveDistributionScore') is not None:
            self.hive_distribution_score = m.get('HiveDistributionScore')
        if m.get('HiveFormatScore') is not None:
            self.hive_format_score = m.get('HiveFormatScore')
        if m.get('HiveFrequencyScore') is not None:
            self.hive_frequency_score = m.get('HiveFrequencyScore')
        if m.get('HiveScore') is not None:
            self.hive_score = m.get('HiveScore')
        return self


class GetDoctorHiveTableResponseBodyDataFormats(TeaModel):
    def __init__(self, format_day_growth_size=None, format_name=None, format_ratio=None, format_size=None,
                 format_size_day_growth_ratio=None, format_size_unit=None):
        self.format_day_growth_size = format_day_growth_size  # type: long
        self.format_name = format_name  # type: str
        self.format_ratio = format_ratio  # type: float
        self.format_size = format_size  # type: long
        self.format_size_day_growth_ratio = format_size_day_growth_ratio  # type: float
        self.format_size_unit = format_size_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataFormats, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.format_day_growth_size is not None:
            result['FormatDayGrowthSize'] = self.format_day_growth_size
        if self.format_name is not None:
            result['FormatName'] = self.format_name
        if self.format_ratio is not None:
            result['FormatRatio'] = self.format_ratio
        if self.format_size is not None:
            result['FormatSize'] = self.format_size
        if self.format_size_day_growth_ratio is not None:
            result['FormatSizeDayGrowthRatio'] = self.format_size_day_growth_ratio
        if self.format_size_unit is not None:
            result['FormatSizeUnit'] = self.format_size_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FormatDayGrowthSize') is not None:
            self.format_day_growth_size = m.get('FormatDayGrowthSize')
        if m.get('FormatName') is not None:
            self.format_name = m.get('FormatName')
        if m.get('FormatRatio') is not None:
            self.format_ratio = m.get('FormatRatio')
        if m.get('FormatSize') is not None:
            self.format_size = m.get('FormatSize')
        if m.get('FormatSizeDayGrowthRatio') is not None:
            self.format_size_day_growth_ratio = m.get('FormatSizeDayGrowthRatio')
        if m.get('FormatSizeUnit') is not None:
            self.format_size_unit = m.get('FormatSizeUnit')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsColdDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsColdDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsEmptyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsEmptyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsFreezeDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsFreezeDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsHotDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsHotDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsLargeFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsLargeFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsMediumFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsMediumFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsPartitionNum(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsPartitionNum, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsSmallFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsSmallFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTinyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTinyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsWarmDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsWarmDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorHiveTableResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_ratio=None, cold_data_size=None,
                 cold_data_size_day_growth_ratio=None, empty_file_count=None, empty_file_count_day_growth_ratio=None,
                 empty_file_day_growth_count=None, empty_file_ratio=None, freeze_data_day_growth_size=None, freeze_data_ratio=None,
                 freeze_data_size=None, freeze_data_size_day_growth_ratio=None, hot_data_day_growth_size=None, hot_data_ratio=None,
                 hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, large_file_ratio=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, medium_file_ratio=None, partition_num=None,
                 small_file_count=None, small_file_count_day_growth_ratio=None, small_file_day_growth_count=None,
                 small_file_ratio=None, tiny_file_count=None, tiny_file_count_day_growth_ratio=None,
                 tiny_file_day_growth_count=None, tiny_file_ratio=None, total_data_day_growth_size=None, total_data_size=None,
                 total_data_size_day_growth_ratio=None, total_file_count=None, total_file_count_day_growth_ratio=None,
                 total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_ratio=None, warm_data_size=None,
                 warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: GetDoctorHiveTableResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_ratio = cold_data_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsColdDataRatio
        self.cold_data_size = cold_data_size  # type: GetDoctorHiveTableResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.empty_file_count = empty_file_count  # type: GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: GetDoctorHiveTableResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.empty_file_ratio = empty_file_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsEmptyFileRatio
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: GetDoctorHiveTableResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_ratio = freeze_data_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsFreezeDataRatio
        self.freeze_data_size = freeze_data_size  # type: GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: GetDoctorHiveTableResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_ratio = hot_data_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsHotDataRatio
        self.hot_data_size = hot_data_size  # type: GetDoctorHiveTableResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: GetDoctorHiveTableResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: GetDoctorHiveTableResponseBodyDataMetricsLargeFileDayGrowthCount
        self.large_file_ratio = large_file_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsLargeFileRatio
        self.medium_file_count = medium_file_count  # type: GetDoctorHiveTableResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: GetDoctorHiveTableResponseBodyDataMetricsMediumFileDayGrowthCount
        self.medium_file_ratio = medium_file_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsMediumFileRatio
        self.partition_num = partition_num  # type: GetDoctorHiveTableResponseBodyDataMetricsPartitionNum
        self.small_file_count = small_file_count  # type: GetDoctorHiveTableResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: GetDoctorHiveTableResponseBodyDataMetricsSmallFileDayGrowthCount
        self.small_file_ratio = small_file_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsSmallFileRatio
        self.tiny_file_count = tiny_file_count  # type: GetDoctorHiveTableResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: GetDoctorHiveTableResponseBodyDataMetricsTinyFileDayGrowthCount
        self.tiny_file_ratio = tiny_file_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsTinyFileRatio
        self.total_data_day_growth_size = total_data_day_growth_size  # type: GetDoctorHiveTableResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: GetDoctorHiveTableResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: GetDoctorHiveTableResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: GetDoctorHiveTableResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: GetDoctorHiveTableResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_ratio = warm_data_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsWarmDataRatio
        self.warm_data_size = warm_data_size  # type: GetDoctorHiveTableResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: GetDoctorHiveTableResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_ratio:
            self.cold_data_ratio.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.empty_file_ratio:
            self.empty_file_ratio.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_ratio:
            self.freeze_data_ratio.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_ratio:
            self.hot_data_ratio.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.large_file_ratio:
            self.large_file_ratio.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.medium_file_ratio:
            self.medium_file_ratio.validate()
        if self.partition_num:
            self.partition_num.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.small_file_ratio:
            self.small_file_ratio.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.tiny_file_ratio:
            self.tiny_file_ratio.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_ratio:
            self.warm_data_ratio.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_ratio is not None:
            result['ColdDataRatio'] = self.cold_data_ratio.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.empty_file_ratio is not None:
            result['EmptyFileRatio'] = self.empty_file_ratio.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_ratio is not None:
            result['FreezeDataRatio'] = self.freeze_data_ratio.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_ratio is not None:
            result['HotDataRatio'] = self.hot_data_ratio.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.large_file_ratio is not None:
            result['LargeFileRatio'] = self.large_file_ratio.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.medium_file_ratio is not None:
            result['MediumFileRatio'] = self.medium_file_ratio.to_map()
        if self.partition_num is not None:
            result['PartitionNum'] = self.partition_num.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.small_file_ratio is not None:
            result['SmallFileRatio'] = self.small_file_ratio.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.tiny_file_ratio is not None:
            result['TinyFileRatio'] = self.tiny_file_ratio.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_ratio is not None:
            result['WarmDataRatio'] = self.warm_data_ratio.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsColdDataRatio()
            self.cold_data_ratio = temp_model.from_map(m['ColdDataRatio'])
        if m.get('ColdDataSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('EmptyFileCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('EmptyFileRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsEmptyFileRatio()
            self.empty_file_ratio = temp_model.from_map(m['EmptyFileRatio'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsFreezeDataRatio()
            self.freeze_data_ratio = temp_model.from_map(m['FreezeDataRatio'])
        if m.get('FreezeDataSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsHotDataRatio()
            self.hot_data_ratio = temp_model.from_map(m['HotDataRatio'])
        if m.get('HotDataSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('LargeFileRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsLargeFileRatio()
            self.large_file_ratio = temp_model.from_map(m['LargeFileRatio'])
        if m.get('MediumFileCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('MediumFileRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsMediumFileRatio()
            self.medium_file_ratio = temp_model.from_map(m['MediumFileRatio'])
        if m.get('PartitionNum') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsPartitionNum()
            self.partition_num = temp_model.from_map(m['PartitionNum'])
        if m.get('SmallFileCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('SmallFileRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsSmallFileRatio()
            self.small_file_ratio = temp_model.from_map(m['SmallFileRatio'])
        if m.get('TinyFileCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TinyFileRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTinyFileRatio()
            self.tiny_file_ratio = temp_model.from_map(m['TinyFileRatio'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsWarmDataRatio()
            self.warm_data_ratio = temp_model.from_map(m['WarmDataRatio'])
        if m.get('WarmDataSize') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class GetDoctorHiveTableResponseBodyData(TeaModel):
    def __init__(self, analysis=None, formats=None, metrics=None, owner=None):
        self.analysis = analysis  # type: GetDoctorHiveTableResponseBodyDataAnalysis
        self.formats = formats  # type: list[GetDoctorHiveTableResponseBodyDataFormats]
        self.metrics = metrics  # type: GetDoctorHiveTableResponseBodyDataMetrics
        self.owner = owner  # type: str

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.formats:
            for k in self.formats:
                if k:
                    k.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        result['Formats'] = []
        if self.formats is not None:
            for k in self.formats:
                result['Formats'].append(k.to_map() if k else None)
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.owner is not None:
            result['Owner'] = self.owner
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        self.formats = []
        if m.get('Formats') is not None:
            for k in m.get('Formats'):
                temp_model = GetDoctorHiveTableResponseBodyDataFormats()
                self.formats.append(temp_model.from_map(k))
        if m.get('Metrics') is not None:
            temp_model = GetDoctorHiveTableResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        return self


class GetDoctorHiveTableResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorHiveTableResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorHiveTableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorHiveTableResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorHiveTableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorHiveTableResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorHiveTableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorHiveTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorJobRequest(TeaModel):
    def __init__(self, app_id=None, cluster_id=None, region_id=None):
        # app id
        self.app_id = app_id  # type: str
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorJobRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorJobResponseBodyDataMetricsMemSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorJobResponseBodyDataMetricsMemSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorJobResponseBodyDataMetricsVcoreSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorJobResponseBodyDataMetricsVcoreSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetDoctorJobResponseBodyDataMetrics(TeaModel):
    def __init__(self, mem_seconds=None, vcore_seconds=None):
        self.mem_seconds = mem_seconds  # type: GetDoctorJobResponseBodyDataMetricsMemSeconds
        self.vcore_seconds = vcore_seconds  # type: GetDoctorJobResponseBodyDataMetricsVcoreSeconds

    def validate(self):
        if self.mem_seconds:
            self.mem_seconds.validate()
        if self.vcore_seconds:
            self.vcore_seconds.validate()

    def to_map(self):
        _map = super(GetDoctorJobResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mem_seconds is not None:
            result['MemSeconds'] = self.mem_seconds.to_map()
        if self.vcore_seconds is not None:
            result['VcoreSeconds'] = self.vcore_seconds.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemSeconds') is not None:
            temp_model = GetDoctorJobResponseBodyDataMetricsMemSeconds()
            self.mem_seconds = temp_model.from_map(m['MemSeconds'])
        if m.get('VcoreSeconds') is not None:
            temp_model = GetDoctorJobResponseBodyDataMetricsVcoreSeconds()
            self.vcore_seconds = temp_model.from_map(m['VcoreSeconds'])
        return self


class GetDoctorJobResponseBodyData(TeaModel):
    def __init__(self, app_id=None, app_name=None, elapsed_time=None, final_status=None, finish_time=None,
                 launch_time=None, metrics=None, queue=None, start_time=None, state=None, type=None, user=None):
        self.app_id = app_id  # type: str
        self.app_name = app_name  # type: str
        self.elapsed_time = elapsed_time  # type: long
        self.final_status = final_status  # type: str
        self.finish_time = finish_time  # type: long
        self.launch_time = launch_time  # type: long
        self.metrics = metrics  # type: GetDoctorJobResponseBodyDataMetrics
        self.queue = queue  # type: str
        self.start_time = start_time  # type: long
        self.state = state  # type: str
        self.type = type  # type: str
        self.user = user  # type: str

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(GetDoctorJobResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.elapsed_time is not None:
            result['ElapsedTime'] = self.elapsed_time
        if self.final_status is not None:
            result['FinalStatus'] = self.final_status
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.launch_time is not None:
            result['LaunchTime'] = self.launch_time
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.queue is not None:
            result['Queue'] = self.queue
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.user is not None:
            result['User'] = self.user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('ElapsedTime') is not None:
            self.elapsed_time = m.get('ElapsedTime')
        if m.get('FinalStatus') is not None:
            self.final_status = m.get('FinalStatus')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('LaunchTime') is not None:
            self.launch_time = m.get('LaunchTime')
        if m.get('Metrics') is not None:
            temp_model = GetDoctorJobResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('Queue') is not None:
            self.queue = m.get('Queue')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('User') is not None:
            self.user = m.get('User')
        return self


class GetDoctorJobResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorJobResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorJobResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorJobResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorJobResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorJobResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorJobResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDoctorReportComponentSummaryRequest(TeaModel):
    def __init__(self, cluster_id=None, component_type=None, date_time=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # component type
        self.component_type = component_type  # type: str
        # dateTime for specify report
        self.date_time = date_time  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorReportComponentSummaryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.component_type is not None:
            result['ComponentType'] = self.component_type
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ComponentType') is not None:
            self.component_type = m.get('ComponentType')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetDoctorReportComponentSummaryResponseBodyData(TeaModel):
    def __init__(self, score=None, suggestion=None, summary=None):
        self.score = score  # type: int
        self.suggestion = suggestion  # type: str
        self.summary = summary  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDoctorReportComponentSummaryResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.score is not None:
            result['Score'] = self.score
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        if self.summary is not None:
            result['Summary'] = self.summary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        return self


class GetDoctorReportComponentSummaryResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: GetDoctorReportComponentSummaryResponseBodyData
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetDoctorReportComponentSummaryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            temp_model = GetDoctorReportComponentSummaryResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDoctorReportComponentSummaryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDoctorReportComponentSummaryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDoctorReportComponentSummaryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDoctorReportComponentSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNodeGroupRequest(TeaModel):
    def __init__(self, cluster_id=None, node_group_id=None, region_id=None):
        # The ID of the cluster.
        self.cluster_id = cluster_id  # type: str
        # The ID of the node group.
        self.node_group_id = node_group_id  # type: str
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNodeGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetNodeGroupResponseBody(TeaModel):
    def __init__(self, node_group=None, request_id=None):
        # The node group.
        self.node_group = node_group  # type: NodeGroup
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        if self.node_group:
            self.node_group.validate()

    def to_map(self):
        _map = super(GetNodeGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_group is not None:
            result['NodeGroup'] = self.node_group.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NodeGroup') is not None:
            temp_model = NodeGroup()
            self.node_group = temp_model.from_map(m['NodeGroup'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetNodeGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetNodeGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetNodeGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetNodeGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOperationRequest(TeaModel):
    def __init__(self, cluster_id=None, operation_id=None, region_id=None):
        # The ID of the cluster that you want to query.
        self.cluster_id = cluster_id  # type: str
        # The ID of the operation.
        self.operation_id = operation_id  # type: str
        # The district ID.
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOperationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class GetOperationResponseBody(TeaModel):
    def __init__(self, operation=None, request_id=None):
        # The operation that is performed.
        self.operation = operation  # type: Operation
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        if self.operation:
            self.operation.validate()

    def to_map(self):
        _map = super(GetOperationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation is not None:
            result['Operation'] = self.operation.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Operation') is not None:
            temp_model = Operation()
            self.operation = temp_model.from_map(m['Operation'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetOperationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetOperationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetOperationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOperationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IncreaseNodesRequest(TeaModel):
    def __init__(self, application_configs=None, auto_pay_order=None, cluster_id=None, increase_node_count=None,
                 node_group_id=None, payment_duration=None, payment_duration_unit=None, region_id=None):
        # The configurations of the applications. Valid values of N: 1 to 1000.
        self.application_configs = application_configs  # type: list[ApplicationConfig]
        # Indicates whether to automatically pay for the orders involved in the scale-out operation. This parameter takes effect only when the PaymentType parameter is set to Subscription. Valid values:
        # 
        # *   true: automatically pays for the order involved in this operation.
        # *   false: does not automatically pay for the orders involved in this operation.
        # 
        # Default value: false
        self.auto_pay_order = auto_pay_order  # type: bool
        # The ID of the cluster.
        self.cluster_id = cluster_id  # type: str
        # The number of nodes. The number of incremental nodes for this scale-out. Valid values: 1 to 500.
        self.increase_node_count = increase_node_count  # type: int
        # The ID of the node group. The target node group to which you want to scale out the cluster.
        self.node_group_id = node_group_id  # type: str
        # The subscription duration. Valid values when the PaymentDurationUnit value is Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.
        self.payment_duration = payment_duration  # type: int
        # The unit of the subscription duration. Valid values:
        # 
        # *   Month
        self.payment_duration_unit = payment_duration_unit  # type: str
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str

    def validate(self):
        if self.application_configs:
            for k in self.application_configs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IncreaseNodesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplicationConfigs'] = []
        if self.application_configs is not None:
            for k in self.application_configs:
                result['ApplicationConfigs'].append(k.to_map() if k else None)
        if self.auto_pay_order is not None:
            result['AutoPayOrder'] = self.auto_pay_order
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.increase_node_count is not None:
            result['IncreaseNodeCount'] = self.increase_node_count
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.payment_duration is not None:
            result['PaymentDuration'] = self.payment_duration
        if self.payment_duration_unit is not None:
            result['PaymentDurationUnit'] = self.payment_duration_unit
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.application_configs = []
        if m.get('ApplicationConfigs') is not None:
            for k in m.get('ApplicationConfigs'):
                temp_model = ApplicationConfig()
                self.application_configs.append(temp_model.from_map(k))
        if m.get('AutoPayOrder') is not None:
            self.auto_pay_order = m.get('AutoPayOrder')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('IncreaseNodeCount') is not None:
            self.increase_node_count = m.get('IncreaseNodeCount')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('PaymentDuration') is not None:
            self.payment_duration = m.get('PaymentDuration')
        if m.get('PaymentDurationUnit') is not None:
            self.payment_duration_unit = m.get('PaymentDurationUnit')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class IncreaseNodesResponseBody(TeaModel):
    def __init__(self, operation_id=None, request_id=None):
        # The ID of the operation.
        self.operation_id = operation_id  # type: str
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IncreaseNodesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class IncreaseNodesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: IncreaseNodesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(IncreaseNodesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IncreaseNodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class JoinResourceGroupRequest(TeaModel):
    def __init__(self, region_id=None, resource_group_id=None, resource_id=None, resource_type=None):
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str
        # The ID of the resource group.
        self.resource_group_id = resource_group_id  # type: str
        # The ID of the resource.
        self.resource_id = resource_id  # type: str
        # The type of the resource. Valid values:
        # 
        # *   cluster: cluster
        self.resource_type = resource_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(JoinResourceGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class JoinResourceGroupResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(JoinResourceGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class JoinResourceGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: JoinResourceGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(JoinResourceGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = JoinResourceGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListApplicationConfigsRequest(TeaModel):
    def __init__(self, application_name=None, cluster_id=None, config_file_name=None, config_item_key=None,
                 config_item_value=None, max_results=None, next_token=None, node_group_id=None, node_id=None, region_id=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 配置文件名称。
        self.config_file_name = config_file_name  # type: str
        # 配置键值，支持模糊查询。
        self.config_item_key = config_item_key  # type: str
        # 配置项值。
        self.config_item_value = config_item_value  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点ID。
        self.node_id = node_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListApplicationConfigsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.config_file_name is not None:
            result['ConfigFileName'] = self.config_file_name
        if self.config_item_key is not None:
            result['ConfigItemKey'] = self.config_item_key
        if self.config_item_value is not None:
            result['ConfigItemValue'] = self.config_item_value
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ConfigFileName') is not None:
            self.config_file_name = m.get('ConfigFileName')
        if m.get('ConfigItemKey') is not None:
            self.config_item_key = m.get('ConfigItemKey')
        if m.get('ConfigItemValue') is not None:
            self.config_item_value = m.get('ConfigItemValue')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListApplicationConfigsResponseBodyApplicationConfigs(TeaModel):
    def __init__(self, application_name=None, config_effect_state=None, config_file_name=None,
                 config_item_key=None, config_item_value=None, create_time=None, custom=None, description=None, init_value=None,
                 modifier=None, node_group_id=None, node_id=None, update_time=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 配置值生效状态。
        self.config_effect_state = config_effect_state  # type: str
        # 配置文件名称。
        self.config_file_name = config_file_name  # type: str
        # 配置项键。
        self.config_item_key = config_item_key  # type: str
        # 配置项值。
        self.config_item_value = config_item_value  # type: str
        # 创建时间。
        self.create_time = create_time  # type: long
        # 是否是自定义配置。
        self.custom = custom  # type: bool
        # 描述。
        self.description = description  # type: str
        # 初始值。
        self.init_value = init_value  # type: str
        # 修改人。
        self.modifier = modifier  # type: str
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点ID。
        self.node_id = node_id  # type: str
        # 更新时间。
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListApplicationConfigsResponseBodyApplicationConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.config_effect_state is not None:
            result['ConfigEffectState'] = self.config_effect_state
        if self.config_file_name is not None:
            result['ConfigFileName'] = self.config_file_name
        if self.config_item_key is not None:
            result['ConfigItemKey'] = self.config_item_key
        if self.config_item_value is not None:
            result['ConfigItemValue'] = self.config_item_value
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.custom is not None:
            result['Custom'] = self.custom
        if self.description is not None:
            result['Description'] = self.description
        if self.init_value is not None:
            result['InitValue'] = self.init_value
        if self.modifier is not None:
            result['Modifier'] = self.modifier
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ConfigEffectState') is not None:
            self.config_effect_state = m.get('ConfigEffectState')
        if m.get('ConfigFileName') is not None:
            self.config_file_name = m.get('ConfigFileName')
        if m.get('ConfigItemKey') is not None:
            self.config_item_key = m.get('ConfigItemKey')
        if m.get('ConfigItemValue') is not None:
            self.config_item_value = m.get('ConfigItemValue')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Custom') is not None:
            self.custom = m.get('Custom')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InitValue') is not None:
            self.init_value = m.get('InitValue')
        if m.get('Modifier') is not None:
            self.modifier = m.get('Modifier')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ListApplicationConfigsResponseBody(TeaModel):
    def __init__(self, application_configs=None, max_results=None, next_token=None, request_id=None,
                 total_count=None):
        self.application_configs = application_configs  # type: list[ListApplicationConfigsResponseBodyApplicationConfigs]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.application_configs:
            for k in self.application_configs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListApplicationConfigsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplicationConfigs'] = []
        if self.application_configs is not None:
            for k in self.application_configs:
                result['ApplicationConfigs'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.application_configs = []
        if m.get('ApplicationConfigs') is not None:
            for k in m.get('ApplicationConfigs'):
                temp_model = ListApplicationConfigsResponseBodyApplicationConfigs()
                self.application_configs.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListApplicationConfigsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListApplicationConfigsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListApplicationConfigsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListApplicationConfigsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListApplicationsRequest(TeaModel):
    def __init__(self, application_names=None, cluster_id=None, max_results=None, next_token=None, region_id=None):
        # 应用名称列表。
        self.application_names = application_names  # type: list[str]
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListApplicationsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_names is not None:
            result['ApplicationNames'] = self.application_names
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationNames') is not None:
            self.application_names = m.get('ApplicationNames')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListApplicationsResponseBodyApplications(TeaModel):
    def __init__(self, application_name=None, application_state=None, application_version=None,
                 community_version=None):
        # 应用名称。
        self.application_name = application_name  # type: str
        # 应用操作状态
        self.application_state = application_state  # type: str
        # 应用版本。
        self.application_version = application_version  # type: str
        # 社区版本。
        self.community_version = community_version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListApplicationsResponseBodyApplications, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.application_state is not None:
            result['ApplicationState'] = self.application_state
        if self.application_version is not None:
            result['ApplicationVersion'] = self.application_version
        if self.community_version is not None:
            result['CommunityVersion'] = self.community_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ApplicationState') is not None:
            self.application_state = m.get('ApplicationState')
        if m.get('ApplicationVersion') is not None:
            self.application_version = m.get('ApplicationVersion')
        if m.get('CommunityVersion') is not None:
            self.community_version = m.get('CommunityVersion')
        return self


class ListApplicationsResponseBody(TeaModel):
    def __init__(self, applications=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.applications = applications  # type: list[ListApplicationsResponseBodyApplications]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.applications:
            for k in self.applications:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListApplicationsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Applications'] = []
        if self.applications is not None:
            for k in self.applications:
                result['Applications'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.applications = []
        if m.get('Applications') is not None:
            for k in m.get('Applications'):
                temp_model = ListApplicationsResponseBodyApplications()
                self.applications.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListApplicationsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListApplicationsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListApplicationsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListApplicationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAutoScalingActivitiesRequest(TeaModel):
    def __init__(self, cluster_id=None, end_time=None, max_results=None, next_token=None, node_group_id=None,
                 region_id=None, scaling_activity_states=None, scaling_activity_type=None, scaling_rule_name=None,
                 start_time=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 查询伸缩活动创建时间的结束时间戳。单位为毫秒。
        self.end_time = end_time  # type: long
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        # 节点组ID。节点组 Id-针对 ACK 集群，此字段为空。
        self.node_group_id = node_group_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        # 伸缩活动状态。数组元数个数N的取值范围：1~20。默认取值：
        # - REJECTED：拒绝。
        # - SUCCESSFUL：成功。
        # - FAILED：失败。
        # - IN_PROGRESS：进行中。
        self.scaling_activity_states = scaling_activity_states  # type: list[str]
        # 伸缩活动类型。数组元数个数N的取值范围：1~20。取值范围：
        # - SCALE_OUT：扩容。
        # - SCALE_IN：缩容。
        self.scaling_activity_type = scaling_activity_type  # type: str
        # 伸缩规则名称。
        self.scaling_rule_name = scaling_rule_name  # type: str
        # 查询伸缩活动创建时间的时间戳。单位为毫秒。
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAutoScalingActivitiesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.scaling_activity_states is not None:
            result['ScalingActivityStates'] = self.scaling_activity_states
        if self.scaling_activity_type is not None:
            result['ScalingActivityType'] = self.scaling_activity_type
        if self.scaling_rule_name is not None:
            result['ScalingRuleName'] = self.scaling_rule_name
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ScalingActivityStates') is not None:
            self.scaling_activity_states = m.get('ScalingActivityStates')
        if m.get('ScalingActivityType') is not None:
            self.scaling_activity_type = m.get('ScalingActivityType')
        if m.get('ScalingRuleName') is not None:
            self.scaling_rule_name = m.get('ScalingRuleName')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListAutoScalingActivitiesResponseBodyScalingActivities(TeaModel):
    def __init__(self, activity_id=None, activity_state=None, activity_type=None, cluster_id=None, description=None,
                 end_time=None, expect_num=None, node_group_id=None, node_group_name=None, operation_id=None, rule_name=None,
                 start_time=None):
        # 伸缩活动ID。
        self.activity_id = activity_id  # type: str
        # 伸缩活动状态。取值范围：
        # - REJECTED：拒绝
        # - SUCCESSFUL：成功
        # - FAILED：失败
        # - IN_PROGRESS：进行中
        self.activity_state = activity_state  # type: str
        # 伸缩活动类型。取值范围：
        # - SCALE_IN：缩容
        # - SCALE_OUT：扩容
        self.activity_type = activity_type  # type: str
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 伸缩活动描述。
        self.description = description  # type: str
        # 伸缩结束时间。
        self.end_time = end_time  # type: long
        # 本次扩缩数量。
        self.expect_num = expect_num  # type: int
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点组名称。
        self.node_group_name = node_group_name  # type: str
        # 操作ID。
        self.operation_id = operation_id  # type: str
        # 伸缩规则名称。
        self.rule_name = rule_name  # type: str
        # 伸缩启动时间。
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAutoScalingActivitiesResponseBodyScalingActivities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activity_id is not None:
            result['ActivityId'] = self.activity_id
        if self.activity_state is not None:
            result['ActivityState'] = self.activity_state
        if self.activity_type is not None:
            result['ActivityType'] = self.activity_type
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.expect_num is not None:
            result['ExpectNum'] = self.expect_num
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_name is not None:
            result['NodeGroupName'] = self.node_group_name
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActivityId') is not None:
            self.activity_id = m.get('ActivityId')
        if m.get('ActivityState') is not None:
            self.activity_state = m.get('ActivityState')
        if m.get('ActivityType') is not None:
            self.activity_type = m.get('ActivityType')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ExpectNum') is not None:
            self.expect_num = m.get('ExpectNum')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupName') is not None:
            self.node_group_name = m.get('NodeGroupName')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListAutoScalingActivitiesResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, request_id=None, scaling_activities=None,
                 total_count=None):
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        self.scaling_activities = scaling_activities  # type: list[ListAutoScalingActivitiesResponseBodyScalingActivities]
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.scaling_activities:
            for k in self.scaling_activities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAutoScalingActivitiesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ScalingActivities'] = []
        if self.scaling_activities is not None:
            for k in self.scaling_activities:
                result['ScalingActivities'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.scaling_activities = []
        if m.get('ScalingActivities') is not None:
            for k in m.get('ScalingActivities'):
                temp_model = ListAutoScalingActivitiesResponseBodyScalingActivities()
                self.scaling_activities.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAutoScalingActivitiesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListAutoScalingActivitiesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAutoScalingActivitiesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAutoScalingActivitiesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListClustersRequest(TeaModel):
    def __init__(self, cluster_ids=None, cluster_name=None, cluster_states=None, cluster_types=None,
                 max_results=None, next_token=None, payment_types=None, region_id=None, resource_group_id=None, tags=None):
        # The IDs of the clusters. You can specify a maximum of 100 items.
        self.cluster_ids = cluster_ids  # type: list[str]
        # The name of the cluster.
        self.cluster_name = cluster_name  # type: str
        # The states of clusters. You can specify a maximum of 100 items.
        self.cluster_states = cluster_states  # type: list[str]
        # The types of the clusters. You can specify a maximum of 100 items.
        self.cluster_types = cluster_types  # type: list[str]
        # The number of entries to return on each page. Valid values: 1 to 100.
        self.max_results = max_results  # type: int
        # The starting point of the current query. If you do not configure this parameter, the query starts from the beginning.
        self.next_token = next_token  # type: str
        # The billing methods. You can specify a maximum of 2 items.
        self.payment_types = payment_types  # type: list[str]
        # The region ID.
        # 
        # Valid values:
        # 
        # *   center
        # *   cn-hangzhou
        # *   cn-shanghai
        # *   cn-qingdao
        # *   cn-beijing
        # *   cn-zhangjiakou
        # *   cn-huhehaote
        # *   cn-wulanchabu
        # *   cn-shenzhen
        # *   cn-chengdu
        # *   cn-hongkong
        # *   ap-southeast-1
        # *   ap-southeast-2
        # *   ap-southeast-3
        # *   ap-southeast-5
        # *   ap-northeast-1
        # *   eu-central-1
        # *   eu-west-1
        # *   us-west-1
        # *   us-east-1
        # *   ap-south-1
        # *   me-east-1
        # *   me-central-1
        self.region_id = region_id  # type: str
        # The ID of the resource group.
        self.resource_group_id = resource_group_id  # type: str
        # The tags. You can specify a maximum of 20 items.
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListClustersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_ids is not None:
            result['ClusterIds'] = self.cluster_ids
        if self.cluster_name is not None:
            result['ClusterName'] = self.cluster_name
        if self.cluster_states is not None:
            result['ClusterStates'] = self.cluster_states
        if self.cluster_types is not None:
            result['ClusterTypes'] = self.cluster_types
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.payment_types is not None:
            result['PaymentTypes'] = self.payment_types
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterIds') is not None:
            self.cluster_ids = m.get('ClusterIds')
        if m.get('ClusterName') is not None:
            self.cluster_name = m.get('ClusterName')
        if m.get('ClusterStates') is not None:
            self.cluster_states = m.get('ClusterStates')
        if m.get('ClusterTypes') is not None:
            self.cluster_types = m.get('ClusterTypes')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PaymentTypes') is not None:
            self.payment_types = m.get('PaymentTypes')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class ListClustersResponseBody(TeaModel):
    def __init__(self, clusters=None, max_results=None, next_token=None, request_id=None, total_count=None):
        # The list of clusters.
        self.clusters = clusters  # type: list[ClusterSummary]
        # The number of entries returned per page.
        self.max_results = max_results  # type: int
        # The page number of the next page returned.
        self.next_token = next_token  # type: str
        # The ID of the request.
        self.request_id = request_id  # type: str
        # The total number of pages.
        self.total_count = total_count  # type: int

    def validate(self):
        if self.clusters:
            for k in self.clusters:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListClustersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Clusters'] = []
        if self.clusters is not None:
            for k in self.clusters:
                result['Clusters'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.clusters = []
        if m.get('Clusters') is not None:
            for k in m.get('Clusters'):
                temp_model = ClusterSummary()
                self.clusters.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListClustersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListClustersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListClustersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListClustersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorApplicationsRequest(TeaModel):
    def __init__(self, app_ids=None, cluster_id=None, date_time=None, max_results=None, next_token=None,
                 order_by=None, order_type=None, queues=None, region_id=None, types=None, users=None):
        self.app_ids = app_ids  # type: list[str]
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        self.queues = queues  # type: list[str]
        # 区域ID。
        self.region_id = region_id  # type: str
        self.types = types  # type: list[str]
        self.users = users  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorApplicationsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_ids is not None:
            result['AppIds'] = self.app_ids
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.queues is not None:
            result['Queues'] = self.queues
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.types is not None:
            result['Types'] = self.types
        if self.users is not None:
            result['Users'] = self.users
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppIds') is not None:
            self.app_ids = m.get('AppIds')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('Queues') is not None:
            self.queues = m.get('Queues')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Types') is not None:
            self.types = m.get('Types')
        if m.get('Users') is not None:
            self.users = m.get('Users')
        return self


class ListDoctorApplicationsResponseBodyDataAnalysis(TeaModel):
    def __init__(self, score=None, suggestion=None):
        self.score = score  # type: int
        self.suggestion = suggestion  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.score is not None:
            result['Score'] = self.score
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        return self


class ListDoctorApplicationsResponseBodyDataMetricsMemSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBodyDataMetricsMemSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorApplicationsResponseBodyDataMetricsMemUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBodyDataMetricsMemUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorApplicationsResponseBodyDataMetricsVcoreSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBodyDataMetricsVcoreSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorApplicationsResponseBodyDataMetricsVcoreUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBodyDataMetricsVcoreUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorApplicationsResponseBodyDataMetrics(TeaModel):
    def __init__(self, mem_seconds=None, mem_utilization=None, vcore_seconds=None, vcore_utilization=None):
        self.mem_seconds = mem_seconds  # type: ListDoctorApplicationsResponseBodyDataMetricsMemSeconds
        self.mem_utilization = mem_utilization  # type: ListDoctorApplicationsResponseBodyDataMetricsMemUtilization
        self.vcore_seconds = vcore_seconds  # type: ListDoctorApplicationsResponseBodyDataMetricsVcoreSeconds
        self.vcore_utilization = vcore_utilization  # type: ListDoctorApplicationsResponseBodyDataMetricsVcoreUtilization

    def validate(self):
        if self.mem_seconds:
            self.mem_seconds.validate()
        if self.mem_utilization:
            self.mem_utilization.validate()
        if self.vcore_seconds:
            self.vcore_seconds.validate()
        if self.vcore_utilization:
            self.vcore_utilization.validate()

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mem_seconds is not None:
            result['MemSeconds'] = self.mem_seconds.to_map()
        if self.mem_utilization is not None:
            result['MemUtilization'] = self.mem_utilization.to_map()
        if self.vcore_seconds is not None:
            result['VcoreSeconds'] = self.vcore_seconds.to_map()
        if self.vcore_utilization is not None:
            result['VcoreUtilization'] = self.vcore_utilization.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemSeconds') is not None:
            temp_model = ListDoctorApplicationsResponseBodyDataMetricsMemSeconds()
            self.mem_seconds = temp_model.from_map(m['MemSeconds'])
        if m.get('MemUtilization') is not None:
            temp_model = ListDoctorApplicationsResponseBodyDataMetricsMemUtilization()
            self.mem_utilization = temp_model.from_map(m['MemUtilization'])
        if m.get('VcoreSeconds') is not None:
            temp_model = ListDoctorApplicationsResponseBodyDataMetricsVcoreSeconds()
            self.vcore_seconds = temp_model.from_map(m['VcoreSeconds'])
        if m.get('VcoreUtilization') is not None:
            temp_model = ListDoctorApplicationsResponseBodyDataMetricsVcoreUtilization()
            self.vcore_utilization = temp_model.from_map(m['VcoreUtilization'])
        return self


class ListDoctorApplicationsResponseBodyData(TeaModel):
    def __init__(self, analysis=None, app_id=None, app_name=None, end_time=None, ids=None, metrics=None,
                 query_sql=None, queue=None, start_time=None, type=None, user=None):
        self.analysis = analysis  # type: ListDoctorApplicationsResponseBodyDataAnalysis
        self.app_id = app_id  # type: str
        self.app_name = app_name  # type: str
        self.end_time = end_time  # type: long
        self.ids = ids  # type: list[str]
        self.metrics = metrics  # type: ListDoctorApplicationsResponseBodyDataMetrics
        self.query_sql = query_sql  # type: str
        self.queue = queue  # type: str
        self.start_time = start_time  # type: long
        self.type = type  # type: str
        self.user = user  # type: str

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.query_sql is not None:
            result['QuerySql'] = self.query_sql
        if self.queue is not None:
            result['Queue'] = self.queue
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        if self.user is not None:
            result['User'] = self.user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = ListDoctorApplicationsResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('Metrics') is not None:
            temp_model = ListDoctorApplicationsResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('QuerySql') is not None:
            self.query_sql = m.get('QuerySql')
        if m.get('Queue') is not None:
            self.queue = m.get('Queue')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('User') is not None:
            self.user = m.get('User')
        return self


class ListDoctorApplicationsResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorApplicationsResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorApplicationsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorApplicationsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorApplicationsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorApplicationsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorApplicationsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorApplicationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorComputeSummaryRequest(TeaModel):
    def __init__(self, cluster_id=None, component_types=None, date_time=None, max_results=None, next_token=None,
                 order_by=None, order_type=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.component_types = component_types  # type: list[str]
        self.date_time = date_time  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.component_types is not None:
            result['ComponentTypes'] = self.component_types
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ComponentTypes') is not None:
            self.component_types = m.get('ComponentTypes')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListDoctorComputeSummaryResponseBodyDataAnalysis(TeaModel):
    def __init__(self, healthy_job_count=None, need_attention_job_count=None, score=None,
                 score_day_growth_ratio=None, sub_healthy_job_count=None, unhealthy_job_count=None):
        self.healthy_job_count = healthy_job_count  # type: long
        self.need_attention_job_count = need_attention_job_count  # type: long
        self.score = score  # type: int
        self.score_day_growth_ratio = score_day_growth_ratio  # type: float
        self.sub_healthy_job_count = sub_healthy_job_count  # type: long
        self.unhealthy_job_count = unhealthy_job_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.healthy_job_count is not None:
            result['HealthyJobCount'] = self.healthy_job_count
        if self.need_attention_job_count is not None:
            result['NeedAttentionJobCount'] = self.need_attention_job_count
        if self.score is not None:
            result['Score'] = self.score
        if self.score_day_growth_ratio is not None:
            result['ScoreDayGrowthRatio'] = self.score_day_growth_ratio
        if self.sub_healthy_job_count is not None:
            result['SubHealthyJobCount'] = self.sub_healthy_job_count
        if self.unhealthy_job_count is not None:
            result['UnhealthyJobCount'] = self.unhealthy_job_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HealthyJobCount') is not None:
            self.healthy_job_count = m.get('HealthyJobCount')
        if m.get('NeedAttentionJobCount') is not None:
            self.need_attention_job_count = m.get('NeedAttentionJobCount')
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('ScoreDayGrowthRatio') is not None:
            self.score_day_growth_ratio = m.get('ScoreDayGrowthRatio')
        if m.get('SubHealthyJobCount') is not None:
            self.sub_healthy_job_count = m.get('SubHealthyJobCount')
        if m.get('UnhealthyJobCount') is not None:
            self.unhealthy_job_count = m.get('UnhealthyJobCount')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsMemSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsMemSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsMemUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsMemUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsReadSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsReadSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetricsWriteSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetricsWriteSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorComputeSummaryResponseBodyDataMetrics(TeaModel):
    def __init__(self, mem_seconds=None, mem_seconds_day_growth_ratio=None, mem_utilization=None, read_size=None,
                 vcore_seconds=None, vcore_seconds_day_growth_ratio=None, vcore_utilization=None, write_size=None):
        self.mem_seconds = mem_seconds  # type: ListDoctorComputeSummaryResponseBodyDataMetricsMemSeconds
        self.mem_seconds_day_growth_ratio = mem_seconds_day_growth_ratio  # type: ListDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio
        self.mem_utilization = mem_utilization  # type: ListDoctorComputeSummaryResponseBodyDataMetricsMemUtilization
        self.read_size = read_size  # type: ListDoctorComputeSummaryResponseBodyDataMetricsReadSize
        self.vcore_seconds = vcore_seconds  # type: ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds
        self.vcore_seconds_day_growth_ratio = vcore_seconds_day_growth_ratio  # type: ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio
        self.vcore_utilization = vcore_utilization  # type: ListDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization
        self.write_size = write_size  # type: ListDoctorComputeSummaryResponseBodyDataMetricsWriteSize

    def validate(self):
        if self.mem_seconds:
            self.mem_seconds.validate()
        if self.mem_seconds_day_growth_ratio:
            self.mem_seconds_day_growth_ratio.validate()
        if self.mem_utilization:
            self.mem_utilization.validate()
        if self.read_size:
            self.read_size.validate()
        if self.vcore_seconds:
            self.vcore_seconds.validate()
        if self.vcore_seconds_day_growth_ratio:
            self.vcore_seconds_day_growth_ratio.validate()
        if self.vcore_utilization:
            self.vcore_utilization.validate()
        if self.write_size:
            self.write_size.validate()

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mem_seconds is not None:
            result['MemSeconds'] = self.mem_seconds.to_map()
        if self.mem_seconds_day_growth_ratio is not None:
            result['MemSecondsDayGrowthRatio'] = self.mem_seconds_day_growth_ratio.to_map()
        if self.mem_utilization is not None:
            result['MemUtilization'] = self.mem_utilization.to_map()
        if self.read_size is not None:
            result['ReadSize'] = self.read_size.to_map()
        if self.vcore_seconds is not None:
            result['VcoreSeconds'] = self.vcore_seconds.to_map()
        if self.vcore_seconds_day_growth_ratio is not None:
            result['VcoreSecondsDayGrowthRatio'] = self.vcore_seconds_day_growth_ratio.to_map()
        if self.vcore_utilization is not None:
            result['VcoreUtilization'] = self.vcore_utilization.to_map()
        if self.write_size is not None:
            result['WriteSize'] = self.write_size.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemSeconds') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsMemSeconds()
            self.mem_seconds = temp_model.from_map(m['MemSeconds'])
        if m.get('MemSecondsDayGrowthRatio') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsMemSecondsDayGrowthRatio()
            self.mem_seconds_day_growth_ratio = temp_model.from_map(m['MemSecondsDayGrowthRatio'])
        if m.get('MemUtilization') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsMemUtilization()
            self.mem_utilization = temp_model.from_map(m['MemUtilization'])
        if m.get('ReadSize') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsReadSize()
            self.read_size = temp_model.from_map(m['ReadSize'])
        if m.get('VcoreSeconds') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSeconds()
            self.vcore_seconds = temp_model.from_map(m['VcoreSeconds'])
        if m.get('VcoreSecondsDayGrowthRatio') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsVcoreSecondsDayGrowthRatio()
            self.vcore_seconds_day_growth_ratio = temp_model.from_map(m['VcoreSecondsDayGrowthRatio'])
        if m.get('VcoreUtilization') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsVcoreUtilization()
            self.vcore_utilization = temp_model.from_map(m['VcoreUtilization'])
        if m.get('WriteSize') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetricsWriteSize()
            self.write_size = temp_model.from_map(m['WriteSize'])
        return self


class ListDoctorComputeSummaryResponseBodyData(TeaModel):
    def __init__(self, analysis=None, component_name=None, metrics=None):
        self.analysis = analysis  # type: ListDoctorComputeSummaryResponseBodyDataAnalysis
        self.component_name = component_name  # type: str
        self.metrics = metrics  # type: ListDoctorComputeSummaryResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.component_name is not None:
            result['ComponentName'] = self.component_name
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('ComponentName') is not None:
            self.component_name = m.get('ComponentName')
        if m.get('Metrics') is not None:
            temp_model = ListDoctorComputeSummaryResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class ListDoctorComputeSummaryResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorComputeSummaryResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorComputeSummaryResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorComputeSummaryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorComputeSummaryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorComputeSummaryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorComputeSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorHBaseRegionServersRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, max_results=None, next_token=None, order_by=None,
                 order_type=None, region_id=None, region_server_hosts=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.region_server_hosts = region_server_hosts  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.region_server_hosts is not None:
            result['RegionServerHosts'] = self.region_server_hosts
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RegionServerHosts') is not None:
            self.region_server_hosts = m.get('RegionServerHosts')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsAvgGc(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsAvgGc, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsCacheRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsCacheRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsRegionCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsRegionCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseRegionServersResponseBodyDataMetrics(TeaModel):
    def __init__(self, avg_gc=None, cache_ratio=None, daily_read_request=None,
                 daily_read_request_day_growth_ratio=None, daily_write_request=None, daily_write_request_day_growth_ratio=None, region_count=None,
                 total_read_request=None, total_request=None, total_write_request=None):
        self.avg_gc = avg_gc  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsAvgGc
        self.cache_ratio = cache_ratio  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsCacheRatio
        self.daily_read_request = daily_read_request  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequest
        self.daily_read_request_day_growth_ratio = daily_read_request_day_growth_ratio  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequestDayGrowthRatio
        self.daily_write_request = daily_write_request  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequest
        self.daily_write_request_day_growth_ratio = daily_write_request_day_growth_ratio  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio
        self.region_count = region_count  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsRegionCount
        self.total_read_request = total_read_request  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalReadRequest
        self.total_request = total_request  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalRequest
        self.total_write_request = total_write_request  # type: ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalWriteRequest

    def validate(self):
        if self.avg_gc:
            self.avg_gc.validate()
        if self.cache_ratio:
            self.cache_ratio.validate()
        if self.daily_read_request:
            self.daily_read_request.validate()
        if self.daily_read_request_day_growth_ratio:
            self.daily_read_request_day_growth_ratio.validate()
        if self.daily_write_request:
            self.daily_write_request.validate()
        if self.daily_write_request_day_growth_ratio:
            self.daily_write_request_day_growth_ratio.validate()
        if self.region_count:
            self.region_count.validate()
        if self.total_read_request:
            self.total_read_request.validate()
        if self.total_request:
            self.total_request.validate()
        if self.total_write_request:
            self.total_write_request.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avg_gc is not None:
            result['AvgGc'] = self.avg_gc.to_map()
        if self.cache_ratio is not None:
            result['CacheRatio'] = self.cache_ratio.to_map()
        if self.daily_read_request is not None:
            result['DailyReadRequest'] = self.daily_read_request.to_map()
        if self.daily_read_request_day_growth_ratio is not None:
            result['DailyReadRequestDayGrowthRatio'] = self.daily_read_request_day_growth_ratio.to_map()
        if self.daily_write_request is not None:
            result['DailyWriteRequest'] = self.daily_write_request.to_map()
        if self.daily_write_request_day_growth_ratio is not None:
            result['DailyWriteRequestDayGrowthRatio'] = self.daily_write_request_day_growth_ratio.to_map()
        if self.region_count is not None:
            result['RegionCount'] = self.region_count.to_map()
        if self.total_read_request is not None:
            result['TotalReadRequest'] = self.total_read_request.to_map()
        if self.total_request is not None:
            result['TotalRequest'] = self.total_request.to_map()
        if self.total_write_request is not None:
            result['TotalWriteRequest'] = self.total_write_request.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AvgGc') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsAvgGc()
            self.avg_gc = temp_model.from_map(m['AvgGc'])
        if m.get('CacheRatio') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsCacheRatio()
            self.cache_ratio = temp_model.from_map(m['CacheRatio'])
        if m.get('DailyReadRequest') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequest()
            self.daily_read_request = temp_model.from_map(m['DailyReadRequest'])
        if m.get('DailyReadRequestDayGrowthRatio') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyReadRequestDayGrowthRatio()
            self.daily_read_request_day_growth_ratio = temp_model.from_map(m['DailyReadRequestDayGrowthRatio'])
        if m.get('DailyWriteRequest') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequest()
            self.daily_write_request = temp_model.from_map(m['DailyWriteRequest'])
        if m.get('DailyWriteRequestDayGrowthRatio') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio()
            self.daily_write_request_day_growth_ratio = temp_model.from_map(m['DailyWriteRequestDayGrowthRatio'])
        if m.get('RegionCount') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsRegionCount()
            self.region_count = temp_model.from_map(m['RegionCount'])
        if m.get('TotalReadRequest') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalReadRequest()
            self.total_read_request = temp_model.from_map(m['TotalReadRequest'])
        if m.get('TotalRequest') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalRequest()
            self.total_request = temp_model.from_map(m['TotalRequest'])
        if m.get('TotalWriteRequest') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetricsTotalWriteRequest()
            self.total_write_request = temp_model.from_map(m['TotalWriteRequest'])
        return self


class ListDoctorHBaseRegionServersResponseBodyData(TeaModel):
    def __init__(self, metrics=None, region_server_host=None):
        self.metrics = metrics  # type: ListDoctorHBaseRegionServersResponseBodyDataMetrics
        self.region_server_host = region_server_host  # type: str

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.region_server_host is not None:
            result['RegionServerHost'] = self.region_server_host
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Metrics') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('RegionServerHost') is not None:
            self.region_server_host = m.get('RegionServerHost')
        return self


class ListDoctorHBaseRegionServersResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorHBaseRegionServersResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorHBaseRegionServersResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorHBaseRegionServersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorHBaseRegionServersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseRegionServersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorHBaseRegionServersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorHBaseTablesRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, max_results=None, next_token=None, order_by=None,
                 order_type=None, region_id=None, table_names=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.table_names = table_names  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.table_names is not None:
            result['TableNames'] = self.table_names
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('TableNames') is not None:
            self.table_names = m.get('TableNames')
        return self


class ListDoctorHBaseTablesResponseBodyDataAnalysis(TeaModel):
    def __init__(self, read_request_hotspot_region_list=None, read_request_unbalance_suggestion=None,
                 request_hotspot_region_list=None, request_unbalance_suggestion=None, table_score=None,
                 write_request_hotspot_region_list=None, write_request_unbalance_suggestion=None):
        self.read_request_hotspot_region_list = read_request_hotspot_region_list  # type: list[str]
        self.read_request_unbalance_suggestion = read_request_unbalance_suggestion  # type: str
        self.request_hotspot_region_list = request_hotspot_region_list  # type: list[str]
        self.request_unbalance_suggestion = request_unbalance_suggestion  # type: str
        self.table_score = table_score  # type: int
        self.write_request_hotspot_region_list = write_request_hotspot_region_list  # type: list[str]
        self.write_request_unbalance_suggestion = write_request_unbalance_suggestion  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.read_request_hotspot_region_list is not None:
            result['ReadRequestHotspotRegionList'] = self.read_request_hotspot_region_list
        if self.read_request_unbalance_suggestion is not None:
            result['ReadRequestUnbalanceSuggestion'] = self.read_request_unbalance_suggestion
        if self.request_hotspot_region_list is not None:
            result['RequestHotspotRegionList'] = self.request_hotspot_region_list
        if self.request_unbalance_suggestion is not None:
            result['RequestUnbalanceSuggestion'] = self.request_unbalance_suggestion
        if self.table_score is not None:
            result['TableScore'] = self.table_score
        if self.write_request_hotspot_region_list is not None:
            result['WriteRequestHotspotRegionList'] = self.write_request_hotspot_region_list
        if self.write_request_unbalance_suggestion is not None:
            result['WriteRequestUnbalanceSuggestion'] = self.write_request_unbalance_suggestion
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ReadRequestHotspotRegionList') is not None:
            self.read_request_hotspot_region_list = m.get('ReadRequestHotspotRegionList')
        if m.get('ReadRequestUnbalanceSuggestion') is not None:
            self.read_request_unbalance_suggestion = m.get('ReadRequestUnbalanceSuggestion')
        if m.get('RequestHotspotRegionList') is not None:
            self.request_hotspot_region_list = m.get('RequestHotspotRegionList')
        if m.get('RequestUnbalanceSuggestion') is not None:
            self.request_unbalance_suggestion = m.get('RequestUnbalanceSuggestion')
        if m.get('TableScore') is not None:
            self.table_score = m.get('TableScore')
        if m.get('WriteRequestHotspotRegionList') is not None:
            self.write_request_hotspot_region_list = m.get('WriteRequestHotspotRegionList')
        if m.get('WriteRequestUnbalanceSuggestion') is not None:
            self.write_request_unbalance_suggestion = m.get('WriteRequestUnbalanceSuggestion')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsColdAccessDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsColdAccessDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsColdConfigDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsColdConfigDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequest(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsFreezeConfigDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsFreezeConfigDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsLocality(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsLocality, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsReadRequestBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsReadRequestBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsRegionBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsRegionBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsRegionCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsRegionCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsRegionCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsRegionCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsRegionServerCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsRegionServerCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsRequestBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsRequestBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsTableSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsTableSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsTableSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsTableSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsWarmConfigDay(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsWarmConfigDay, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetricsWriteRequestBalance(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetricsWriteRequestBalance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHBaseTablesResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_access_day=None, cold_config_day=None, cold_data_size=None, daily_read_request=None,
                 daily_read_request_day_growth_ratio=None, daily_write_request=None, daily_write_request_day_growth_ratio=None,
                 freeze_config_day=None, freeze_data_size=None, hot_data_size=None, locality=None, read_request_balance=None,
                 region_balance=None, region_count=None, region_count_day_growth_ratio=None, region_server_count=None,
                 request_balance=None, store_file_count=None, store_file_count_day_growth_ratio=None, table_size=None,
                 table_size_day_growth_ratio=None, warm_config_day=None, warm_data_size=None, write_request_balance=None):
        self.cold_access_day = cold_access_day  # type: ListDoctorHBaseTablesResponseBodyDataMetricsColdAccessDay
        self.cold_config_day = cold_config_day  # type: ListDoctorHBaseTablesResponseBodyDataMetricsColdConfigDay
        self.cold_data_size = cold_data_size  # type: ListDoctorHBaseTablesResponseBodyDataMetricsColdDataSize
        self.daily_read_request = daily_read_request  # type: ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequest
        self.daily_read_request_day_growth_ratio = daily_read_request_day_growth_ratio  # type: ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequestDayGrowthRatio
        self.daily_write_request = daily_write_request  # type: ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequest
        self.daily_write_request_day_growth_ratio = daily_write_request_day_growth_ratio  # type: ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio
        self.freeze_config_day = freeze_config_day  # type: ListDoctorHBaseTablesResponseBodyDataMetricsFreezeConfigDay
        self.freeze_data_size = freeze_data_size  # type: ListDoctorHBaseTablesResponseBodyDataMetricsFreezeDataSize
        self.hot_data_size = hot_data_size  # type: ListDoctorHBaseTablesResponseBodyDataMetricsHotDataSize
        self.locality = locality  # type: ListDoctorHBaseTablesResponseBodyDataMetricsLocality
        self.read_request_balance = read_request_balance  # type: ListDoctorHBaseTablesResponseBodyDataMetricsReadRequestBalance
        self.region_balance = region_balance  # type: ListDoctorHBaseTablesResponseBodyDataMetricsRegionBalance
        self.region_count = region_count  # type: ListDoctorHBaseTablesResponseBodyDataMetricsRegionCount
        self.region_count_day_growth_ratio = region_count_day_growth_ratio  # type: ListDoctorHBaseTablesResponseBodyDataMetricsRegionCountDayGrowthRatio
        self.region_server_count = region_server_count  # type: ListDoctorHBaseTablesResponseBodyDataMetricsRegionServerCount
        self.request_balance = request_balance  # type: ListDoctorHBaseTablesResponseBodyDataMetricsRequestBalance
        self.store_file_count = store_file_count  # type: ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCount
        self.store_file_count_day_growth_ratio = store_file_count_day_growth_ratio  # type: ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCountDayGrowthRatio
        self.table_size = table_size  # type: ListDoctorHBaseTablesResponseBodyDataMetricsTableSize
        self.table_size_day_growth_ratio = table_size_day_growth_ratio  # type: ListDoctorHBaseTablesResponseBodyDataMetricsTableSizeDayGrowthRatio
        self.warm_config_day = warm_config_day  # type: ListDoctorHBaseTablesResponseBodyDataMetricsWarmConfigDay
        self.warm_data_size = warm_data_size  # type: ListDoctorHBaseTablesResponseBodyDataMetricsWarmDataSize
        self.write_request_balance = write_request_balance  # type: ListDoctorHBaseTablesResponseBodyDataMetricsWriteRequestBalance

    def validate(self):
        if self.cold_access_day:
            self.cold_access_day.validate()
        if self.cold_config_day:
            self.cold_config_day.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.daily_read_request:
            self.daily_read_request.validate()
        if self.daily_read_request_day_growth_ratio:
            self.daily_read_request_day_growth_ratio.validate()
        if self.daily_write_request:
            self.daily_write_request.validate()
        if self.daily_write_request_day_growth_ratio:
            self.daily_write_request_day_growth_ratio.validate()
        if self.freeze_config_day:
            self.freeze_config_day.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.locality:
            self.locality.validate()
        if self.read_request_balance:
            self.read_request_balance.validate()
        if self.region_balance:
            self.region_balance.validate()
        if self.region_count:
            self.region_count.validate()
        if self.region_count_day_growth_ratio:
            self.region_count_day_growth_ratio.validate()
        if self.region_server_count:
            self.region_server_count.validate()
        if self.request_balance:
            self.request_balance.validate()
        if self.store_file_count:
            self.store_file_count.validate()
        if self.store_file_count_day_growth_ratio:
            self.store_file_count_day_growth_ratio.validate()
        if self.table_size:
            self.table_size.validate()
        if self.table_size_day_growth_ratio:
            self.table_size_day_growth_ratio.validate()
        if self.warm_config_day:
            self.warm_config_day.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.write_request_balance:
            self.write_request_balance.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_access_day is not None:
            result['ColdAccessDay'] = self.cold_access_day.to_map()
        if self.cold_config_day is not None:
            result['ColdConfigDay'] = self.cold_config_day.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.daily_read_request is not None:
            result['DailyReadRequest'] = self.daily_read_request.to_map()
        if self.daily_read_request_day_growth_ratio is not None:
            result['DailyReadRequestDayGrowthRatio'] = self.daily_read_request_day_growth_ratio.to_map()
        if self.daily_write_request is not None:
            result['DailyWriteRequest'] = self.daily_write_request.to_map()
        if self.daily_write_request_day_growth_ratio is not None:
            result['DailyWriteRequestDayGrowthRatio'] = self.daily_write_request_day_growth_ratio.to_map()
        if self.freeze_config_day is not None:
            result['FreezeConfigDay'] = self.freeze_config_day.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.locality is not None:
            result['Locality'] = self.locality.to_map()
        if self.read_request_balance is not None:
            result['ReadRequestBalance'] = self.read_request_balance.to_map()
        if self.region_balance is not None:
            result['RegionBalance'] = self.region_balance.to_map()
        if self.region_count is not None:
            result['RegionCount'] = self.region_count.to_map()
        if self.region_count_day_growth_ratio is not None:
            result['RegionCountDayGrowthRatio'] = self.region_count_day_growth_ratio.to_map()
        if self.region_server_count is not None:
            result['RegionServerCount'] = self.region_server_count.to_map()
        if self.request_balance is not None:
            result['RequestBalance'] = self.request_balance.to_map()
        if self.store_file_count is not None:
            result['StoreFileCount'] = self.store_file_count.to_map()
        if self.store_file_count_day_growth_ratio is not None:
            result['StoreFileCountDayGrowthRatio'] = self.store_file_count_day_growth_ratio.to_map()
        if self.table_size is not None:
            result['TableSize'] = self.table_size.to_map()
        if self.table_size_day_growth_ratio is not None:
            result['TableSizeDayGrowthRatio'] = self.table_size_day_growth_ratio.to_map()
        if self.warm_config_day is not None:
            result['WarmConfigDay'] = self.warm_config_day.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.write_request_balance is not None:
            result['WriteRequestBalance'] = self.write_request_balance.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdAccessDay') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsColdAccessDay()
            self.cold_access_day = temp_model.from_map(m['ColdAccessDay'])
        if m.get('ColdConfigDay') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsColdConfigDay()
            self.cold_config_day = temp_model.from_map(m['ColdConfigDay'])
        if m.get('ColdDataSize') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('DailyReadRequest') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequest()
            self.daily_read_request = temp_model.from_map(m['DailyReadRequest'])
        if m.get('DailyReadRequestDayGrowthRatio') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsDailyReadRequestDayGrowthRatio()
            self.daily_read_request_day_growth_ratio = temp_model.from_map(m['DailyReadRequestDayGrowthRatio'])
        if m.get('DailyWriteRequest') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequest()
            self.daily_write_request = temp_model.from_map(m['DailyWriteRequest'])
        if m.get('DailyWriteRequestDayGrowthRatio') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsDailyWriteRequestDayGrowthRatio()
            self.daily_write_request_day_growth_ratio = temp_model.from_map(m['DailyWriteRequestDayGrowthRatio'])
        if m.get('FreezeConfigDay') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsFreezeConfigDay()
            self.freeze_config_day = temp_model.from_map(m['FreezeConfigDay'])
        if m.get('FreezeDataSize') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('HotDataSize') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('Locality') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsLocality()
            self.locality = temp_model.from_map(m['Locality'])
        if m.get('ReadRequestBalance') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsReadRequestBalance()
            self.read_request_balance = temp_model.from_map(m['ReadRequestBalance'])
        if m.get('RegionBalance') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsRegionBalance()
            self.region_balance = temp_model.from_map(m['RegionBalance'])
        if m.get('RegionCount') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsRegionCount()
            self.region_count = temp_model.from_map(m['RegionCount'])
        if m.get('RegionCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsRegionCountDayGrowthRatio()
            self.region_count_day_growth_ratio = temp_model.from_map(m['RegionCountDayGrowthRatio'])
        if m.get('RegionServerCount') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsRegionServerCount()
            self.region_server_count = temp_model.from_map(m['RegionServerCount'])
        if m.get('RequestBalance') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsRequestBalance()
            self.request_balance = temp_model.from_map(m['RequestBalance'])
        if m.get('StoreFileCount') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCount()
            self.store_file_count = temp_model.from_map(m['StoreFileCount'])
        if m.get('StoreFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsStoreFileCountDayGrowthRatio()
            self.store_file_count_day_growth_ratio = temp_model.from_map(m['StoreFileCountDayGrowthRatio'])
        if m.get('TableSize') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsTableSize()
            self.table_size = temp_model.from_map(m['TableSize'])
        if m.get('TableSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsTableSizeDayGrowthRatio()
            self.table_size_day_growth_ratio = temp_model.from_map(m['TableSizeDayGrowthRatio'])
        if m.get('WarmConfigDay') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsWarmConfigDay()
            self.warm_config_day = temp_model.from_map(m['WarmConfigDay'])
        if m.get('WarmDataSize') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WriteRequestBalance') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetricsWriteRequestBalance()
            self.write_request_balance = temp_model.from_map(m['WriteRequestBalance'])
        return self


class ListDoctorHBaseTablesResponseBodyData(TeaModel):
    def __init__(self, analysis=None, metrics=None, table_name=None):
        self.analysis = analysis  # type: ListDoctorHBaseTablesResponseBodyDataAnalysis
        self.metrics = metrics  # type: ListDoctorHBaseTablesResponseBodyDataMetrics
        self.table_name = table_name  # type: str

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('Metrics') is not None:
            temp_model = ListDoctorHBaseTablesResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class ListDoctorHBaseTablesResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorHBaseTablesResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorHBaseTablesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorHBaseTablesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorHBaseTablesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorHBaseTablesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorHBaseTablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorHDFSDirectoriesRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, dir_path=None, max_results=None, next_token=None,
                 order_by=None, order_type=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        self.dir_path = dir_path  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.dir_path is not None:
            result['DirPath'] = self.dir_path
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('DirPath') is not None:
            self.dir_path = m.get('DirPath')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSDirectoriesResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_size=None, cold_data_size_day_growth_ratio=None,
                 empty_file_count=None, empty_file_count_day_growth_ratio=None, empty_file_day_growth_count=None,
                 freeze_data_day_growth_size=None, freeze_data_size=None, freeze_data_size_day_growth_ratio=None,
                 hot_data_day_growth_size=None, hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, small_file_count=None,
                 small_file_count_day_growth_ratio=None, small_file_day_growth_count=None, tiny_file_count=None,
                 tiny_file_count_day_growth_ratio=None, tiny_file_day_growth_count=None, total_data_day_growth_size=None, total_data_size=None,
                 total_data_size_day_growth_ratio=None, total_file_count=None, total_file_count_day_growth_ratio=None,
                 total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_size=None, warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_size = cold_data_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.empty_file_count = empty_file_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_size = freeze_data_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_size = hot_data_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileDayGrowthCount
        self.medium_file_count = medium_file_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileDayGrowthCount
        self.small_file_count = small_file_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileDayGrowthCount
        self.tiny_file_count = tiny_file_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileDayGrowthCount
        self.total_data_day_growth_size = total_data_day_growth_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_size = warm_data_size  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('EmptyFileCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('MediumFileCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('SmallFileCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('TinyFileCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataSize') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class ListDoctorHDFSDirectoriesResponseBodyData(TeaModel):
    def __init__(self, depth=None, dir_path=None, group=None, metrics=None, user=None):
        self.depth = depth  # type: int
        self.dir_path = dir_path  # type: str
        self.group = group  # type: str
        self.metrics = metrics  # type: ListDoctorHDFSDirectoriesResponseBodyDataMetrics
        self.user = user  # type: str

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depth is not None:
            result['Depth'] = self.depth
        if self.dir_path is not None:
            result['DirPath'] = self.dir_path
        if self.group is not None:
            result['Group'] = self.group
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.user is not None:
            result['User'] = self.user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Depth') is not None:
            self.depth = m.get('Depth')
        if m.get('DirPath') is not None:
            self.dir_path = m.get('DirPath')
        if m.get('Group') is not None:
            self.group = m.get('Group')
        if m.get('Metrics') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('User') is not None:
            self.user = m.get('User')
        return self


class ListDoctorHDFSDirectoriesResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorHDFSDirectoriesResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorHDFSDirectoriesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorHDFSDirectoriesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorHDFSDirectoriesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSDirectoriesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorHDFSDirectoriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorHDFSUGIRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, max_results=None, next_token=None, order_by=None,
                 order_type=None, region_id=None, type=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSUGIRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHDFSUGIResponseBodyDataMetrics(TeaModel):
    def __init__(self, total_data_size=None, total_dir_count=None, total_file_count=None):
        self.total_data_size = total_data_size  # type: ListDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize
        self.total_dir_count = total_dir_count  # type: ListDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount
        self.total_file_count = total_file_count  # type: ListDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount

    def validate(self):
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_dir_count:
            self.total_dir_count.validate()
        if self.total_file_count:
            self.total_file_count.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSUGIResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_dir_count is not None:
            result['TotalDirCount'] = self.total_dir_count.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TotalDataSize') is not None:
            temp_model = ListDoctorHDFSUGIResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDirCount') is not None:
            temp_model = ListDoctorHDFSUGIResponseBodyDataMetricsTotalDirCount()
            self.total_dir_count = temp_model.from_map(m['TotalDirCount'])
        if m.get('TotalFileCount') is not None:
            temp_model = ListDoctorHDFSUGIResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        return self


class ListDoctorHDFSUGIResponseBodyData(TeaModel):
    def __init__(self, metrics=None, name=None):
        self.metrics = metrics  # type: ListDoctorHDFSUGIResponseBodyDataMetrics
        self.name = name  # type: str

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSUGIResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Metrics') is not None:
            temp_model = ListDoctorHDFSUGIResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class ListDoctorHDFSUGIResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorHDFSUGIResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSUGIResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorHDFSUGIResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorHDFSUGIResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorHDFSUGIResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorHDFSUGIResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorHDFSUGIResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorHiveDatabasesRequest(TeaModel):
    def __init__(self, cluster_id=None, database_names=None, date_time=None, max_results=None, next_token=None,
                 order_by=None, order_type=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.database_names = database_names  # type: list[str]
        self.date_time = date_time  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.database_names is not None:
            result['DatabaseNames'] = self.database_names
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DatabaseNames') is not None:
            self.database_names = m.get('DatabaseNames')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListDoctorHiveDatabasesResponseBodyDataAnalysis(TeaModel):
    def __init__(self, hive_distribution_score=None, hive_format_score=None, hive_frequency_score=None,
                 hive_score=None):
        self.hive_distribution_score = hive_distribution_score  # type: int
        self.hive_format_score = hive_format_score  # type: int
        self.hive_frequency_score = hive_frequency_score  # type: int
        self.hive_score = hive_score  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hive_distribution_score is not None:
            result['HiveDistributionScore'] = self.hive_distribution_score
        if self.hive_format_score is not None:
            result['HiveFormatScore'] = self.hive_format_score
        if self.hive_frequency_score is not None:
            result['HiveFrequencyScore'] = self.hive_frequency_score
        if self.hive_score is not None:
            result['HiveScore'] = self.hive_score
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HiveDistributionScore') is not None:
            self.hive_distribution_score = m.get('HiveDistributionScore')
        if m.get('HiveFormatScore') is not None:
            self.hive_format_score = m.get('HiveFormatScore')
        if m.get('HiveFrequencyScore') is not None:
            self.hive_frequency_score = m.get('HiveFrequencyScore')
        if m.get('HiveScore') is not None:
            self.hive_score = m.get('HiveScore')
        return self


class ListDoctorHiveDatabasesResponseBodyDataFormats(TeaModel):
    def __init__(self, format_day_growth_size=None, format_name=None, format_ratio=None, format_size=None,
                 format_size_day_growth_ratio=None, format_size_unit=None):
        self.format_day_growth_size = format_day_growth_size  # type: long
        self.format_name = format_name  # type: str
        self.format_ratio = format_ratio  # type: float
        self.format_size = format_size  # type: long
        self.format_size_day_growth_ratio = format_size_day_growth_ratio  # type: float
        self.format_size_unit = format_size_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataFormats, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.format_day_growth_size is not None:
            result['FormatDayGrowthSize'] = self.format_day_growth_size
        if self.format_name is not None:
            result['FormatName'] = self.format_name
        if self.format_ratio is not None:
            result['FormatRatio'] = self.format_ratio
        if self.format_size is not None:
            result['FormatSize'] = self.format_size
        if self.format_size_day_growth_ratio is not None:
            result['FormatSizeDayGrowthRatio'] = self.format_size_day_growth_ratio
        if self.format_size_unit is not None:
            result['FormatSizeUnit'] = self.format_size_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FormatDayGrowthSize') is not None:
            self.format_day_growth_size = m.get('FormatDayGrowthSize')
        if m.get('FormatName') is not None:
            self.format_name = m.get('FormatName')
        if m.get('FormatRatio') is not None:
            self.format_ratio = m.get('FormatRatio')
        if m.get('FormatSize') is not None:
            self.format_size = m.get('FormatSize')
        if m.get('FormatSizeDayGrowthRatio') is not None:
            self.format_size_day_growth_ratio = m.get('FormatSizeDayGrowthRatio')
        if m.get('FormatSizeUnit') is not None:
            self.format_size_unit = m.get('FormatSizeUnit')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsPartitionNum(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsPartitionNum, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTableCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTableCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveDatabasesResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_ratio=None, cold_data_size=None,
                 cold_data_size_day_growth_ratio=None, empty_file_count=None, empty_file_count_day_growth_ratio=None,
                 empty_file_day_growth_count=None, empty_file_ratio=None, freeze_data_day_growth_size=None, freeze_data_ratio=None,
                 freeze_data_size=None, freeze_data_size_day_growth_ratio=None, hot_data_day_growth_size=None, hot_data_ratio=None,
                 hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, large_file_ratio=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, medium_file_ratio=None, partition_num=None,
                 small_file_count=None, small_file_count_day_growth_ratio=None, small_file_day_growth_count=None,
                 small_file_ratio=None, table_count=None, tiny_file_count=None, tiny_file_count_day_growth_ratio=None,
                 tiny_file_day_growth_count=None, tiny_file_ratio=None, total_data_day_growth_size=None, total_data_size=None,
                 total_data_size_day_growth_ratio=None, total_file_count=None, total_file_count_day_growth_ratio=None,
                 total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_ratio=None, warm_data_size=None,
                 warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_ratio = cold_data_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataRatio
        self.cold_data_size = cold_data_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.empty_file_count = empty_file_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.empty_file_ratio = empty_file_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileRatio
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_ratio = freeze_data_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataRatio
        self.freeze_data_size = freeze_data_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_ratio = hot_data_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataRatio
        self.hot_data_size = hot_data_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileDayGrowthCount
        self.large_file_ratio = large_file_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileRatio
        self.medium_file_count = medium_file_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileDayGrowthCount
        self.medium_file_ratio = medium_file_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileRatio
        self.partition_num = partition_num  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsPartitionNum
        self.small_file_count = small_file_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileDayGrowthCount
        self.small_file_ratio = small_file_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileRatio
        self.table_count = table_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTableCount
        self.tiny_file_count = tiny_file_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileDayGrowthCount
        self.tiny_file_ratio = tiny_file_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileRatio
        self.total_data_day_growth_size = total_data_day_growth_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_ratio = warm_data_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataRatio
        self.warm_data_size = warm_data_size  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_ratio:
            self.cold_data_ratio.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.empty_file_ratio:
            self.empty_file_ratio.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_ratio:
            self.freeze_data_ratio.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_ratio:
            self.hot_data_ratio.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.large_file_ratio:
            self.large_file_ratio.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.medium_file_ratio:
            self.medium_file_ratio.validate()
        if self.partition_num:
            self.partition_num.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.small_file_ratio:
            self.small_file_ratio.validate()
        if self.table_count:
            self.table_count.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.tiny_file_ratio:
            self.tiny_file_ratio.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_ratio:
            self.warm_data_ratio.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_ratio is not None:
            result['ColdDataRatio'] = self.cold_data_ratio.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.empty_file_ratio is not None:
            result['EmptyFileRatio'] = self.empty_file_ratio.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_ratio is not None:
            result['FreezeDataRatio'] = self.freeze_data_ratio.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_ratio is not None:
            result['HotDataRatio'] = self.hot_data_ratio.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.large_file_ratio is not None:
            result['LargeFileRatio'] = self.large_file_ratio.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.medium_file_ratio is not None:
            result['MediumFileRatio'] = self.medium_file_ratio.to_map()
        if self.partition_num is not None:
            result['PartitionNum'] = self.partition_num.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.small_file_ratio is not None:
            result['SmallFileRatio'] = self.small_file_ratio.to_map()
        if self.table_count is not None:
            result['TableCount'] = self.table_count.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.tiny_file_ratio is not None:
            result['TinyFileRatio'] = self.tiny_file_ratio.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_ratio is not None:
            result['WarmDataRatio'] = self.warm_data_ratio.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataRatio()
            self.cold_data_ratio = temp_model.from_map(m['ColdDataRatio'])
        if m.get('ColdDataSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('EmptyFileCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('EmptyFileRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsEmptyFileRatio()
            self.empty_file_ratio = temp_model.from_map(m['EmptyFileRatio'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataRatio()
            self.freeze_data_ratio = temp_model.from_map(m['FreezeDataRatio'])
        if m.get('FreezeDataSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataRatio()
            self.hot_data_ratio = temp_model.from_map(m['HotDataRatio'])
        if m.get('HotDataSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('LargeFileRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsLargeFileRatio()
            self.large_file_ratio = temp_model.from_map(m['LargeFileRatio'])
        if m.get('MediumFileCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('MediumFileRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsMediumFileRatio()
            self.medium_file_ratio = temp_model.from_map(m['MediumFileRatio'])
        if m.get('PartitionNum') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsPartitionNum()
            self.partition_num = temp_model.from_map(m['PartitionNum'])
        if m.get('SmallFileCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('SmallFileRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsSmallFileRatio()
            self.small_file_ratio = temp_model.from_map(m['SmallFileRatio'])
        if m.get('TableCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTableCount()
            self.table_count = temp_model.from_map(m['TableCount'])
        if m.get('TinyFileCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TinyFileRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTinyFileRatio()
            self.tiny_file_ratio = temp_model.from_map(m['TinyFileRatio'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataRatio()
            self.warm_data_ratio = temp_model.from_map(m['WarmDataRatio'])
        if m.get('WarmDataSize') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class ListDoctorHiveDatabasesResponseBodyData(TeaModel):
    def __init__(self, analysis=None, database_name=None, formats=None, metrics=None):
        self.analysis = analysis  # type: ListDoctorHiveDatabasesResponseBodyDataAnalysis
        self.database_name = database_name  # type: str
        self.formats = formats  # type: list[ListDoctorHiveDatabasesResponseBodyDataFormats]
        self.metrics = metrics  # type: ListDoctorHiveDatabasesResponseBodyDataMetrics

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.formats:
            for k in self.formats:
                if k:
                    k.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        result['Formats'] = []
        if self.formats is not None:
            for k in self.formats:
                result['Formats'].append(k.to_map() if k else None)
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        self.formats = []
        if m.get('Formats') is not None:
            for k in m.get('Formats'):
                temp_model = ListDoctorHiveDatabasesResponseBodyDataFormats()
                self.formats.append(temp_model.from_map(k))
        if m.get('Metrics') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        return self


class ListDoctorHiveDatabasesResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorHiveDatabasesResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorHiveDatabasesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorHiveDatabasesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorHiveDatabasesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorHiveDatabasesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorHiveDatabasesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorHiveTablesRequest(TeaModel):
    def __init__(self, cluster_id=None, date_time=None, max_results=None, next_token=None, order_by=None,
                 order_type=None, region_id=None, table_names=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.date_time = date_time  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.table_names = table_names  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.table_names is not None:
            result['TableNames'] = self.table_names
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('TableNames') is not None:
            self.table_names = m.get('TableNames')
        return self


class ListDoctorHiveTablesResponseBodyDataAnalysis(TeaModel):
    def __init__(self, hive_distribution_score=None, hive_format_score=None, hive_frequency_score=None,
                 hive_score=None):
        self.hive_distribution_score = hive_distribution_score  # type: int
        self.hive_format_score = hive_format_score  # type: int
        self.hive_frequency_score = hive_frequency_score  # type: int
        self.hive_score = hive_score  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataAnalysis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hive_distribution_score is not None:
            result['HiveDistributionScore'] = self.hive_distribution_score
        if self.hive_format_score is not None:
            result['HiveFormatScore'] = self.hive_format_score
        if self.hive_frequency_score is not None:
            result['HiveFrequencyScore'] = self.hive_frequency_score
        if self.hive_score is not None:
            result['HiveScore'] = self.hive_score
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HiveDistributionScore') is not None:
            self.hive_distribution_score = m.get('HiveDistributionScore')
        if m.get('HiveFormatScore') is not None:
            self.hive_format_score = m.get('HiveFormatScore')
        if m.get('HiveFrequencyScore') is not None:
            self.hive_frequency_score = m.get('HiveFrequencyScore')
        if m.get('HiveScore') is not None:
            self.hive_score = m.get('HiveScore')
        return self


class ListDoctorHiveTablesResponseBodyDataFormats(TeaModel):
    def __init__(self, format_day_growth_size=None, format_name=None, format_ratio=None, format_size=None,
                 format_size_day_growth_ratio=None, format_size_unit=None):
        self.format_day_growth_size = format_day_growth_size  # type: long
        self.format_name = format_name  # type: str
        self.format_ratio = format_ratio  # type: float
        self.format_size = format_size  # type: long
        self.format_size_day_growth_ratio = format_size_day_growth_ratio  # type: float
        self.format_size_unit = format_size_unit  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataFormats, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.format_day_growth_size is not None:
            result['FormatDayGrowthSize'] = self.format_day_growth_size
        if self.format_name is not None:
            result['FormatName'] = self.format_name
        if self.format_ratio is not None:
            result['FormatRatio'] = self.format_ratio
        if self.format_size is not None:
            result['FormatSize'] = self.format_size
        if self.format_size_day_growth_ratio is not None:
            result['FormatSizeDayGrowthRatio'] = self.format_size_day_growth_ratio
        if self.format_size_unit is not None:
            result['FormatSizeUnit'] = self.format_size_unit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FormatDayGrowthSize') is not None:
            self.format_day_growth_size = m.get('FormatDayGrowthSize')
        if m.get('FormatName') is not None:
            self.format_name = m.get('FormatName')
        if m.get('FormatRatio') is not None:
            self.format_ratio = m.get('FormatRatio')
        if m.get('FormatSize') is not None:
            self.format_size = m.get('FormatSize')
        if m.get('FormatSizeDayGrowthRatio') is not None:
            self.format_size_day_growth_ratio = m.get('FormatSizeDayGrowthRatio')
        if m.get('FormatSizeUnit') is not None:
            self.format_size_unit = m.get('FormatSizeUnit')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsColdDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsColdDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsColdDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsColdDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsColdDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsColdDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsColdDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsColdDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsHotDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsHotDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsHotDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsHotDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsHotDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsHotDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsHotDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsHotDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsLargeFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsLargeFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsLargeFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsLargeFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsMediumFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsMediumFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsMediumFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsMediumFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsPartitionNum(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsPartitionNum, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsSmallFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsSmallFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsSmallFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsSmallFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTinyFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTinyFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTinyFileRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTinyFileRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTotalDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTotalDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCountDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCountDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsTotalFileDayGrowthCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsTotalFileDayGrowthCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsWarmDataDayGrowthSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsWarmDataDayGrowthSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsWarmDataRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsWarmDataRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSize(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSize, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorHiveTablesResponseBodyDataMetrics(TeaModel):
    def __init__(self, cold_data_day_growth_size=None, cold_data_ratio=None, cold_data_size=None,
                 cold_data_size_day_growth_ratio=None, empty_file_count=None, empty_file_count_day_growth_ratio=None,
                 empty_file_day_growth_count=None, empty_file_ratio=None, freeze_data_day_growth_size=None, freeze_data_ratio=None,
                 freeze_data_size=None, freeze_data_size_day_growth_ratio=None, hot_data_day_growth_size=None, hot_data_ratio=None,
                 hot_data_size=None, hot_data_size_day_growth_ratio=None, large_file_count=None,
                 large_file_count_day_growth_ratio=None, large_file_day_growth_count=None, large_file_ratio=None, medium_file_count=None,
                 medium_file_count_day_growth_ratio=None, medium_file_day_growth_count=None, medium_file_ratio=None, partition_num=None,
                 small_file_count=None, small_file_count_day_growth_ratio=None, small_file_day_growth_count=None,
                 small_file_ratio=None, tiny_file_count=None, tiny_file_count_day_growth_ratio=None,
                 tiny_file_day_growth_count=None, tiny_file_ratio=None, total_data_day_growth_size=None, total_data_size=None,
                 total_data_size_day_growth_ratio=None, total_file_count=None, total_file_count_day_growth_ratio=None,
                 total_file_day_growth_count=None, warm_data_day_growth_size=None, warm_data_ratio=None, warm_data_size=None,
                 warm_data_size_day_growth_ratio=None):
        self.cold_data_day_growth_size = cold_data_day_growth_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsColdDataDayGrowthSize
        self.cold_data_ratio = cold_data_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsColdDataRatio
        self.cold_data_size = cold_data_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsColdDataSize
        self.cold_data_size_day_growth_ratio = cold_data_size_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsColdDataSizeDayGrowthRatio
        self.empty_file_count = empty_file_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCount
        self.empty_file_count_day_growth_ratio = empty_file_count_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio
        self.empty_file_day_growth_count = empty_file_day_growth_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileDayGrowthCount
        self.empty_file_ratio = empty_file_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileRatio
        self.freeze_data_day_growth_size = freeze_data_day_growth_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataDayGrowthSize
        self.freeze_data_ratio = freeze_data_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataRatio
        self.freeze_data_size = freeze_data_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSize
        self.freeze_data_size_day_growth_ratio = freeze_data_size_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio
        self.hot_data_day_growth_size = hot_data_day_growth_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsHotDataDayGrowthSize
        self.hot_data_ratio = hot_data_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsHotDataRatio
        self.hot_data_size = hot_data_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsHotDataSize
        self.hot_data_size_day_growth_ratio = hot_data_size_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsHotDataSizeDayGrowthRatio
        self.large_file_count = large_file_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCount
        self.large_file_count_day_growth_ratio = large_file_count_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCountDayGrowthRatio
        self.large_file_day_growth_count = large_file_day_growth_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsLargeFileDayGrowthCount
        self.large_file_ratio = large_file_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsLargeFileRatio
        self.medium_file_count = medium_file_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCount
        self.medium_file_count_day_growth_ratio = medium_file_count_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCountDayGrowthRatio
        self.medium_file_day_growth_count = medium_file_day_growth_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsMediumFileDayGrowthCount
        self.medium_file_ratio = medium_file_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsMediumFileRatio
        self.partition_num = partition_num  # type: ListDoctorHiveTablesResponseBodyDataMetricsPartitionNum
        self.small_file_count = small_file_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCount
        self.small_file_count_day_growth_ratio = small_file_count_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCountDayGrowthRatio
        self.small_file_day_growth_count = small_file_day_growth_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsSmallFileDayGrowthCount
        self.small_file_ratio = small_file_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsSmallFileRatio
        self.tiny_file_count = tiny_file_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCount
        self.tiny_file_count_day_growth_ratio = tiny_file_count_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCountDayGrowthRatio
        self.tiny_file_day_growth_count = tiny_file_day_growth_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsTinyFileDayGrowthCount
        self.tiny_file_ratio = tiny_file_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsTinyFileRatio
        self.total_data_day_growth_size = total_data_day_growth_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsTotalDataDayGrowthSize
        self.total_data_size = total_data_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSize
        self.total_data_size_day_growth_ratio = total_data_size_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio
        self.total_file_count = total_file_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCount
        self.total_file_count_day_growth_ratio = total_file_count_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCountDayGrowthRatio
        self.total_file_day_growth_count = total_file_day_growth_count  # type: ListDoctorHiveTablesResponseBodyDataMetricsTotalFileDayGrowthCount
        self.warm_data_day_growth_size = warm_data_day_growth_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsWarmDataDayGrowthSize
        self.warm_data_ratio = warm_data_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsWarmDataRatio
        self.warm_data_size = warm_data_size  # type: ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSize
        self.warm_data_size_day_growth_ratio = warm_data_size_day_growth_ratio  # type: ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio

    def validate(self):
        if self.cold_data_day_growth_size:
            self.cold_data_day_growth_size.validate()
        if self.cold_data_ratio:
            self.cold_data_ratio.validate()
        if self.cold_data_size:
            self.cold_data_size.validate()
        if self.cold_data_size_day_growth_ratio:
            self.cold_data_size_day_growth_ratio.validate()
        if self.empty_file_count:
            self.empty_file_count.validate()
        if self.empty_file_count_day_growth_ratio:
            self.empty_file_count_day_growth_ratio.validate()
        if self.empty_file_day_growth_count:
            self.empty_file_day_growth_count.validate()
        if self.empty_file_ratio:
            self.empty_file_ratio.validate()
        if self.freeze_data_day_growth_size:
            self.freeze_data_day_growth_size.validate()
        if self.freeze_data_ratio:
            self.freeze_data_ratio.validate()
        if self.freeze_data_size:
            self.freeze_data_size.validate()
        if self.freeze_data_size_day_growth_ratio:
            self.freeze_data_size_day_growth_ratio.validate()
        if self.hot_data_day_growth_size:
            self.hot_data_day_growth_size.validate()
        if self.hot_data_ratio:
            self.hot_data_ratio.validate()
        if self.hot_data_size:
            self.hot_data_size.validate()
        if self.hot_data_size_day_growth_ratio:
            self.hot_data_size_day_growth_ratio.validate()
        if self.large_file_count:
            self.large_file_count.validate()
        if self.large_file_count_day_growth_ratio:
            self.large_file_count_day_growth_ratio.validate()
        if self.large_file_day_growth_count:
            self.large_file_day_growth_count.validate()
        if self.large_file_ratio:
            self.large_file_ratio.validate()
        if self.medium_file_count:
            self.medium_file_count.validate()
        if self.medium_file_count_day_growth_ratio:
            self.medium_file_count_day_growth_ratio.validate()
        if self.medium_file_day_growth_count:
            self.medium_file_day_growth_count.validate()
        if self.medium_file_ratio:
            self.medium_file_ratio.validate()
        if self.partition_num:
            self.partition_num.validate()
        if self.small_file_count:
            self.small_file_count.validate()
        if self.small_file_count_day_growth_ratio:
            self.small_file_count_day_growth_ratio.validate()
        if self.small_file_day_growth_count:
            self.small_file_day_growth_count.validate()
        if self.small_file_ratio:
            self.small_file_ratio.validate()
        if self.tiny_file_count:
            self.tiny_file_count.validate()
        if self.tiny_file_count_day_growth_ratio:
            self.tiny_file_count_day_growth_ratio.validate()
        if self.tiny_file_day_growth_count:
            self.tiny_file_day_growth_count.validate()
        if self.tiny_file_ratio:
            self.tiny_file_ratio.validate()
        if self.total_data_day_growth_size:
            self.total_data_day_growth_size.validate()
        if self.total_data_size:
            self.total_data_size.validate()
        if self.total_data_size_day_growth_ratio:
            self.total_data_size_day_growth_ratio.validate()
        if self.total_file_count:
            self.total_file_count.validate()
        if self.total_file_count_day_growth_ratio:
            self.total_file_count_day_growth_ratio.validate()
        if self.total_file_day_growth_count:
            self.total_file_day_growth_count.validate()
        if self.warm_data_day_growth_size:
            self.warm_data_day_growth_size.validate()
        if self.warm_data_ratio:
            self.warm_data_ratio.validate()
        if self.warm_data_size:
            self.warm_data_size.validate()
        if self.warm_data_size_day_growth_ratio:
            self.warm_data_size_day_growth_ratio.validate()

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cold_data_day_growth_size is not None:
            result['ColdDataDayGrowthSize'] = self.cold_data_day_growth_size.to_map()
        if self.cold_data_ratio is not None:
            result['ColdDataRatio'] = self.cold_data_ratio.to_map()
        if self.cold_data_size is not None:
            result['ColdDataSize'] = self.cold_data_size.to_map()
        if self.cold_data_size_day_growth_ratio is not None:
            result['ColdDataSizeDayGrowthRatio'] = self.cold_data_size_day_growth_ratio.to_map()
        if self.empty_file_count is not None:
            result['EmptyFileCount'] = self.empty_file_count.to_map()
        if self.empty_file_count_day_growth_ratio is not None:
            result['EmptyFileCountDayGrowthRatio'] = self.empty_file_count_day_growth_ratio.to_map()
        if self.empty_file_day_growth_count is not None:
            result['EmptyFileDayGrowthCount'] = self.empty_file_day_growth_count.to_map()
        if self.empty_file_ratio is not None:
            result['EmptyFileRatio'] = self.empty_file_ratio.to_map()
        if self.freeze_data_day_growth_size is not None:
            result['FreezeDataDayGrowthSize'] = self.freeze_data_day_growth_size.to_map()
        if self.freeze_data_ratio is not None:
            result['FreezeDataRatio'] = self.freeze_data_ratio.to_map()
        if self.freeze_data_size is not None:
            result['FreezeDataSize'] = self.freeze_data_size.to_map()
        if self.freeze_data_size_day_growth_ratio is not None:
            result['FreezeDataSizeDayGrowthRatio'] = self.freeze_data_size_day_growth_ratio.to_map()
        if self.hot_data_day_growth_size is not None:
            result['HotDataDayGrowthSize'] = self.hot_data_day_growth_size.to_map()
        if self.hot_data_ratio is not None:
            result['HotDataRatio'] = self.hot_data_ratio.to_map()
        if self.hot_data_size is not None:
            result['HotDataSize'] = self.hot_data_size.to_map()
        if self.hot_data_size_day_growth_ratio is not None:
            result['HotDataSizeDayGrowthRatio'] = self.hot_data_size_day_growth_ratio.to_map()
        if self.large_file_count is not None:
            result['LargeFileCount'] = self.large_file_count.to_map()
        if self.large_file_count_day_growth_ratio is not None:
            result['LargeFileCountDayGrowthRatio'] = self.large_file_count_day_growth_ratio.to_map()
        if self.large_file_day_growth_count is not None:
            result['LargeFileDayGrowthCount'] = self.large_file_day_growth_count.to_map()
        if self.large_file_ratio is not None:
            result['LargeFileRatio'] = self.large_file_ratio.to_map()
        if self.medium_file_count is not None:
            result['MediumFileCount'] = self.medium_file_count.to_map()
        if self.medium_file_count_day_growth_ratio is not None:
            result['MediumFileCountDayGrowthRatio'] = self.medium_file_count_day_growth_ratio.to_map()
        if self.medium_file_day_growth_count is not None:
            result['MediumFileDayGrowthCount'] = self.medium_file_day_growth_count.to_map()
        if self.medium_file_ratio is not None:
            result['MediumFileRatio'] = self.medium_file_ratio.to_map()
        if self.partition_num is not None:
            result['PartitionNum'] = self.partition_num.to_map()
        if self.small_file_count is not None:
            result['SmallFileCount'] = self.small_file_count.to_map()
        if self.small_file_count_day_growth_ratio is not None:
            result['SmallFileCountDayGrowthRatio'] = self.small_file_count_day_growth_ratio.to_map()
        if self.small_file_day_growth_count is not None:
            result['SmallFileDayGrowthCount'] = self.small_file_day_growth_count.to_map()
        if self.small_file_ratio is not None:
            result['SmallFileRatio'] = self.small_file_ratio.to_map()
        if self.tiny_file_count is not None:
            result['TinyFileCount'] = self.tiny_file_count.to_map()
        if self.tiny_file_count_day_growth_ratio is not None:
            result['TinyFileCountDayGrowthRatio'] = self.tiny_file_count_day_growth_ratio.to_map()
        if self.tiny_file_day_growth_count is not None:
            result['TinyFileDayGrowthCount'] = self.tiny_file_day_growth_count.to_map()
        if self.tiny_file_ratio is not None:
            result['TinyFileRatio'] = self.tiny_file_ratio.to_map()
        if self.total_data_day_growth_size is not None:
            result['TotalDataDayGrowthSize'] = self.total_data_day_growth_size.to_map()
        if self.total_data_size is not None:
            result['TotalDataSize'] = self.total_data_size.to_map()
        if self.total_data_size_day_growth_ratio is not None:
            result['TotalDataSizeDayGrowthRatio'] = self.total_data_size_day_growth_ratio.to_map()
        if self.total_file_count is not None:
            result['TotalFileCount'] = self.total_file_count.to_map()
        if self.total_file_count_day_growth_ratio is not None:
            result['TotalFileCountDayGrowthRatio'] = self.total_file_count_day_growth_ratio.to_map()
        if self.total_file_day_growth_count is not None:
            result['TotalFileDayGrowthCount'] = self.total_file_day_growth_count.to_map()
        if self.warm_data_day_growth_size is not None:
            result['WarmDataDayGrowthSize'] = self.warm_data_day_growth_size.to_map()
        if self.warm_data_ratio is not None:
            result['WarmDataRatio'] = self.warm_data_ratio.to_map()
        if self.warm_data_size is not None:
            result['WarmDataSize'] = self.warm_data_size.to_map()
        if self.warm_data_size_day_growth_ratio is not None:
            result['WarmDataSizeDayGrowthRatio'] = self.warm_data_size_day_growth_ratio.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ColdDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsColdDataDayGrowthSize()
            self.cold_data_day_growth_size = temp_model.from_map(m['ColdDataDayGrowthSize'])
        if m.get('ColdDataRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsColdDataRatio()
            self.cold_data_ratio = temp_model.from_map(m['ColdDataRatio'])
        if m.get('ColdDataSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsColdDataSize()
            self.cold_data_size = temp_model.from_map(m['ColdDataSize'])
        if m.get('ColdDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsColdDataSizeDayGrowthRatio()
            self.cold_data_size_day_growth_ratio = temp_model.from_map(m['ColdDataSizeDayGrowthRatio'])
        if m.get('EmptyFileCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCount()
            self.empty_file_count = temp_model.from_map(m['EmptyFileCount'])
        if m.get('EmptyFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileCountDayGrowthRatio()
            self.empty_file_count_day_growth_ratio = temp_model.from_map(m['EmptyFileCountDayGrowthRatio'])
        if m.get('EmptyFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileDayGrowthCount()
            self.empty_file_day_growth_count = temp_model.from_map(m['EmptyFileDayGrowthCount'])
        if m.get('EmptyFileRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsEmptyFileRatio()
            self.empty_file_ratio = temp_model.from_map(m['EmptyFileRatio'])
        if m.get('FreezeDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataDayGrowthSize()
            self.freeze_data_day_growth_size = temp_model.from_map(m['FreezeDataDayGrowthSize'])
        if m.get('FreezeDataRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataRatio()
            self.freeze_data_ratio = temp_model.from_map(m['FreezeDataRatio'])
        if m.get('FreezeDataSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSize()
            self.freeze_data_size = temp_model.from_map(m['FreezeDataSize'])
        if m.get('FreezeDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsFreezeDataSizeDayGrowthRatio()
            self.freeze_data_size_day_growth_ratio = temp_model.from_map(m['FreezeDataSizeDayGrowthRatio'])
        if m.get('HotDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsHotDataDayGrowthSize()
            self.hot_data_day_growth_size = temp_model.from_map(m['HotDataDayGrowthSize'])
        if m.get('HotDataRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsHotDataRatio()
            self.hot_data_ratio = temp_model.from_map(m['HotDataRatio'])
        if m.get('HotDataSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsHotDataSize()
            self.hot_data_size = temp_model.from_map(m['HotDataSize'])
        if m.get('HotDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsHotDataSizeDayGrowthRatio()
            self.hot_data_size_day_growth_ratio = temp_model.from_map(m['HotDataSizeDayGrowthRatio'])
        if m.get('LargeFileCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCount()
            self.large_file_count = temp_model.from_map(m['LargeFileCount'])
        if m.get('LargeFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsLargeFileCountDayGrowthRatio()
            self.large_file_count_day_growth_ratio = temp_model.from_map(m['LargeFileCountDayGrowthRatio'])
        if m.get('LargeFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsLargeFileDayGrowthCount()
            self.large_file_day_growth_count = temp_model.from_map(m['LargeFileDayGrowthCount'])
        if m.get('LargeFileRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsLargeFileRatio()
            self.large_file_ratio = temp_model.from_map(m['LargeFileRatio'])
        if m.get('MediumFileCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCount()
            self.medium_file_count = temp_model.from_map(m['MediumFileCount'])
        if m.get('MediumFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsMediumFileCountDayGrowthRatio()
            self.medium_file_count_day_growth_ratio = temp_model.from_map(m['MediumFileCountDayGrowthRatio'])
        if m.get('MediumFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsMediumFileDayGrowthCount()
            self.medium_file_day_growth_count = temp_model.from_map(m['MediumFileDayGrowthCount'])
        if m.get('MediumFileRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsMediumFileRatio()
            self.medium_file_ratio = temp_model.from_map(m['MediumFileRatio'])
        if m.get('PartitionNum') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsPartitionNum()
            self.partition_num = temp_model.from_map(m['PartitionNum'])
        if m.get('SmallFileCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCount()
            self.small_file_count = temp_model.from_map(m['SmallFileCount'])
        if m.get('SmallFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsSmallFileCountDayGrowthRatio()
            self.small_file_count_day_growth_ratio = temp_model.from_map(m['SmallFileCountDayGrowthRatio'])
        if m.get('SmallFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsSmallFileDayGrowthCount()
            self.small_file_day_growth_count = temp_model.from_map(m['SmallFileDayGrowthCount'])
        if m.get('SmallFileRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsSmallFileRatio()
            self.small_file_ratio = temp_model.from_map(m['SmallFileRatio'])
        if m.get('TinyFileCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCount()
            self.tiny_file_count = temp_model.from_map(m['TinyFileCount'])
        if m.get('TinyFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTinyFileCountDayGrowthRatio()
            self.tiny_file_count_day_growth_ratio = temp_model.from_map(m['TinyFileCountDayGrowthRatio'])
        if m.get('TinyFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTinyFileDayGrowthCount()
            self.tiny_file_day_growth_count = temp_model.from_map(m['TinyFileDayGrowthCount'])
        if m.get('TinyFileRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTinyFileRatio()
            self.tiny_file_ratio = temp_model.from_map(m['TinyFileRatio'])
        if m.get('TotalDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTotalDataDayGrowthSize()
            self.total_data_day_growth_size = temp_model.from_map(m['TotalDataDayGrowthSize'])
        if m.get('TotalDataSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSize()
            self.total_data_size = temp_model.from_map(m['TotalDataSize'])
        if m.get('TotalDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTotalDataSizeDayGrowthRatio()
            self.total_data_size_day_growth_ratio = temp_model.from_map(m['TotalDataSizeDayGrowthRatio'])
        if m.get('TotalFileCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCount()
            self.total_file_count = temp_model.from_map(m['TotalFileCount'])
        if m.get('TotalFileCountDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTotalFileCountDayGrowthRatio()
            self.total_file_count_day_growth_ratio = temp_model.from_map(m['TotalFileCountDayGrowthRatio'])
        if m.get('TotalFileDayGrowthCount') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsTotalFileDayGrowthCount()
            self.total_file_day_growth_count = temp_model.from_map(m['TotalFileDayGrowthCount'])
        if m.get('WarmDataDayGrowthSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsWarmDataDayGrowthSize()
            self.warm_data_day_growth_size = temp_model.from_map(m['WarmDataDayGrowthSize'])
        if m.get('WarmDataRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsWarmDataRatio()
            self.warm_data_ratio = temp_model.from_map(m['WarmDataRatio'])
        if m.get('WarmDataSize') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSize()
            self.warm_data_size = temp_model.from_map(m['WarmDataSize'])
        if m.get('WarmDataSizeDayGrowthRatio') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetricsWarmDataSizeDayGrowthRatio()
            self.warm_data_size_day_growth_ratio = temp_model.from_map(m['WarmDataSizeDayGrowthRatio'])
        return self


class ListDoctorHiveTablesResponseBodyData(TeaModel):
    def __init__(self, analysis=None, formats=None, metrics=None, owner=None, table_name=None):
        self.analysis = analysis  # type: ListDoctorHiveTablesResponseBodyDataAnalysis
        self.formats = formats  # type: list[ListDoctorHiveTablesResponseBodyDataFormats]
        self.metrics = metrics  # type: ListDoctorHiveTablesResponseBodyDataMetrics
        self.owner = owner  # type: str
        self.table_name = table_name  # type: str

    def validate(self):
        if self.analysis:
            self.analysis.validate()
        if self.formats:
            for k in self.formats:
                if k:
                    k.validate()
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis is not None:
            result['Analysis'] = self.analysis.to_map()
        result['Formats'] = []
        if self.formats is not None:
            for k in self.formats:
                result['Formats'].append(k.to_map() if k else None)
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Analysis') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataAnalysis()
            self.analysis = temp_model.from_map(m['Analysis'])
        self.formats = []
        if m.get('Formats') is not None:
            for k in m.get('Formats'):
                temp_model = ListDoctorHiveTablesResponseBodyDataFormats()
                self.formats.append(temp_model.from_map(k))
        if m.get('Metrics') is not None:
            temp_model = ListDoctorHiveTablesResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class ListDoctorHiveTablesResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorHiveTablesResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorHiveTablesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorHiveTablesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorHiveTablesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorHiveTablesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorHiveTablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorJobsRequestEndRange(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsRequestEndRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListDoctorJobsRequestStartRange(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsRequestStartRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListDoctorJobsRequest(TeaModel):
    def __init__(self, app_ids=None, cluster_id=None, end_range=None, max_results=None, next_token=None,
                 order_by=None, order_type=None, queues=None, region_id=None, start_range=None, types=None, users=None):
        # app ID数组
        self.app_ids = app_ids  # type: list[str]
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 结束range
        self.end_range = end_range  # type: ListDoctorJobsRequestEndRange
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        # 排序字段
        self.order_by = order_by  # type: str
        # 排序类型
        self.order_type = order_type  # type: str
        self.queues = queues  # type: list[str]
        # 区域ID。
        self.region_id = region_id  # type: str
        # 开始range
        self.start_range = start_range  # type: ListDoctorJobsRequestStartRange
        self.types = types  # type: list[str]
        self.users = users  # type: list[str]

    def validate(self):
        if self.end_range:
            self.end_range.validate()
        if self.start_range:
            self.start_range.validate()

    def to_map(self):
        _map = super(ListDoctorJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_ids is not None:
            result['AppIds'] = self.app_ids
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.end_range is not None:
            result['EndRange'] = self.end_range.to_map()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.queues is not None:
            result['Queues'] = self.queues
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.start_range is not None:
            result['StartRange'] = self.start_range.to_map()
        if self.types is not None:
            result['Types'] = self.types
        if self.users is not None:
            result['Users'] = self.users
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppIds') is not None:
            self.app_ids = m.get('AppIds')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('EndRange') is not None:
            temp_model = ListDoctorJobsRequestEndRange()
            self.end_range = temp_model.from_map(m['EndRange'])
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('Queues') is not None:
            self.queues = m.get('Queues')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('StartRange') is not None:
            temp_model = ListDoctorJobsRequestStartRange()
            self.start_range = temp_model.from_map(m['StartRange'])
        if m.get('Types') is not None:
            self.types = m.get('Types')
        if m.get('Users') is not None:
            self.users = m.get('Users')
        return self


class ListDoctorJobsResponseBodyDataMetricsMemSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsResponseBodyDataMetricsMemSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorJobsResponseBodyDataMetricsVcoreSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsResponseBodyDataMetricsVcoreSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorJobsResponseBodyDataMetrics(TeaModel):
    def __init__(self, mem_seconds=None, vcore_seconds=None):
        self.mem_seconds = mem_seconds  # type: ListDoctorJobsResponseBodyDataMetricsMemSeconds
        self.vcore_seconds = vcore_seconds  # type: ListDoctorJobsResponseBodyDataMetricsVcoreSeconds

    def validate(self):
        if self.mem_seconds:
            self.mem_seconds.validate()
        if self.vcore_seconds:
            self.vcore_seconds.validate()

    def to_map(self):
        _map = super(ListDoctorJobsResponseBodyDataMetrics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mem_seconds is not None:
            result['MemSeconds'] = self.mem_seconds.to_map()
        if self.vcore_seconds is not None:
            result['VcoreSeconds'] = self.vcore_seconds.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MemSeconds') is not None:
            temp_model = ListDoctorJobsResponseBodyDataMetricsMemSeconds()
            self.mem_seconds = temp_model.from_map(m['MemSeconds'])
        if m.get('VcoreSeconds') is not None:
            temp_model = ListDoctorJobsResponseBodyDataMetricsVcoreSeconds()
            self.vcore_seconds = temp_model.from_map(m['VcoreSeconds'])
        return self


class ListDoctorJobsResponseBodyData(TeaModel):
    def __init__(self, app_id=None, app_name=None, elapsed_time=None, final_status=None, finish_time=None,
                 launch_time=None, metrics=None, queue=None, start_time=None, state=None, type=None, user=None):
        self.app_id = app_id  # type: str
        self.app_name = app_name  # type: str
        self.elapsed_time = elapsed_time  # type: long
        self.final_status = final_status  # type: str
        self.finish_time = finish_time  # type: long
        self.launch_time = launch_time  # type: long
        self.metrics = metrics  # type: ListDoctorJobsResponseBodyDataMetrics
        self.queue = queue  # type: str
        self.start_time = start_time  # type: long
        self.state = state  # type: str
        self.type = type  # type: str
        self.user = user  # type: str

    def validate(self):
        if self.metrics:
            self.metrics.validate()

    def to_map(self):
        _map = super(ListDoctorJobsResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.elapsed_time is not None:
            result['ElapsedTime'] = self.elapsed_time
        if self.final_status is not None:
            result['FinalStatus'] = self.final_status
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.launch_time is not None:
            result['LaunchTime'] = self.launch_time
        if self.metrics is not None:
            result['Metrics'] = self.metrics.to_map()
        if self.queue is not None:
            result['Queue'] = self.queue
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.user is not None:
            result['User'] = self.user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('ElapsedTime') is not None:
            self.elapsed_time = m.get('ElapsedTime')
        if m.get('FinalStatus') is not None:
            self.final_status = m.get('FinalStatus')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('LaunchTime') is not None:
            self.launch_time = m.get('LaunchTime')
        if m.get('Metrics') is not None:
            temp_model = ListDoctorJobsResponseBodyDataMetrics()
            self.metrics = temp_model.from_map(m['Metrics'])
        if m.get('Queue') is not None:
            self.queue = m.get('Queue')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('User') is not None:
            self.user = m.get('User')
        return self


class ListDoctorJobsResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorJobsResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorJobsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorJobsStatsRequestEndRange(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsStatsRequestEndRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListDoctorJobsStatsRequestStartRange(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsStatsRequestStartRange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListDoctorJobsStatsRequest(TeaModel):
    def __init__(self, cluster_id=None, end_range=None, group_by=None, max_results=None, next_token=None,
                 order_by=None, order_type=None, region_id=None, start_range=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        self.end_range = end_range  # type: ListDoctorJobsStatsRequestEndRange
        self.group_by = group_by  # type: list[str]
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        self.order_by = order_by  # type: str
        self.order_type = order_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        self.start_range = start_range  # type: ListDoctorJobsStatsRequestStartRange

    def validate(self):
        if self.end_range:
            self.end_range.validate()
        if self.start_range:
            self.start_range.validate()

    def to_map(self):
        _map = super(ListDoctorJobsStatsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.end_range is not None:
            result['EndRange'] = self.end_range.to_map()
        if self.group_by is not None:
            result['GroupBy'] = self.group_by
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.start_range is not None:
            result['StartRange'] = self.start_range.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('EndRange') is not None:
            temp_model = ListDoctorJobsStatsRequestEndRange()
            self.end_range = temp_model.from_map(m['EndRange'])
        if m.get('GroupBy') is not None:
            self.group_by = m.get('GroupBy')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('StartRange') is not None:
            temp_model = ListDoctorJobsStatsRequestStartRange()
            self.start_range = temp_model.from_map(m['StartRange'])
        return self


class ListDoctorJobsStatsResponseBodyDataAppsCount(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsStatsResponseBodyDataAppsCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorJobsStatsResponseBodyDataMemSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsStatsResponseBodyDataMemSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorJobsStatsResponseBodyDataVcoreSeconds(TeaModel):
    def __init__(self, description=None, name=None, unit=None, value=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.unit = unit  # type: str
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorJobsStatsResponseBodyDataVcoreSeconds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.unit is not None:
            result['Unit'] = self.unit
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Unit') is not None:
            self.unit = m.get('Unit')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListDoctorJobsStatsResponseBodyData(TeaModel):
    def __init__(self, apps_count=None, mem_seconds=None, queue=None, type=None, user=None, vcore_seconds=None):
        self.apps_count = apps_count  # type: ListDoctorJobsStatsResponseBodyDataAppsCount
        self.mem_seconds = mem_seconds  # type: ListDoctorJobsStatsResponseBodyDataMemSeconds
        self.queue = queue  # type: str
        self.type = type  # type: str
        self.user = user  # type: str
        self.vcore_seconds = vcore_seconds  # type: ListDoctorJobsStatsResponseBodyDataVcoreSeconds

    def validate(self):
        if self.apps_count:
            self.apps_count.validate()
        if self.mem_seconds:
            self.mem_seconds.validate()
        if self.vcore_seconds:
            self.vcore_seconds.validate()

    def to_map(self):
        _map = super(ListDoctorJobsStatsResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apps_count is not None:
            result['AppsCount'] = self.apps_count.to_map()
        if self.mem_seconds is not None:
            result['MemSeconds'] = self.mem_seconds.to_map()
        if self.queue is not None:
            result['Queue'] = self.queue
        if self.type is not None:
            result['Type'] = self.type
        if self.user is not None:
            result['User'] = self.user
        if self.vcore_seconds is not None:
            result['VcoreSeconds'] = self.vcore_seconds.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppsCount') is not None:
            temp_model = ListDoctorJobsStatsResponseBodyDataAppsCount()
            self.apps_count = temp_model.from_map(m['AppsCount'])
        if m.get('MemSeconds') is not None:
            temp_model = ListDoctorJobsStatsResponseBodyDataMemSeconds()
            self.mem_seconds = temp_model.from_map(m['MemSeconds'])
        if m.get('Queue') is not None:
            self.queue = m.get('Queue')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('User') is not None:
            self.user = m.get('User')
        if m.get('VcoreSeconds') is not None:
            temp_model = ListDoctorJobsStatsResponseBodyDataVcoreSeconds()
            self.vcore_seconds = temp_model.from_map(m['VcoreSeconds'])
        return self


class ListDoctorJobsStatsResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorJobsStatsResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorJobsStatsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorJobsStatsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorJobsStatsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorJobsStatsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorJobsStatsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorJobsStatsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDoctorReportsRequest(TeaModel):
    def __init__(self, cluster_id=None, max_results=None, next_token=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListDoctorReportsResponseBodyDataSummaryReport(TeaModel):
    def __init__(self, score=None, suggestion=None, summary=None):
        self.score = score  # type: int
        self.suggestion = suggestion  # type: str
        self.summary = summary  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDoctorReportsResponseBodyDataSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.score is not None:
            result['Score'] = self.score
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        if self.summary is not None:
            result['Summary'] = self.summary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Score') is not None:
            self.score = m.get('Score')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        if m.get('Summary') is not None:
            self.summary = m.get('Summary')
        return self


class ListDoctorReportsResponseBodyData(TeaModel):
    def __init__(self, component_types=None, date_time=None, summary_report=None):
        self.component_types = component_types  # type: list[str]
        self.date_time = date_time  # type: str
        self.summary_report = summary_report  # type: ListDoctorReportsResponseBodyDataSummaryReport

    def validate(self):
        if self.summary_report:
            self.summary_report.validate()

    def to_map(self):
        _map = super(ListDoctorReportsResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.component_types is not None:
            result['ComponentTypes'] = self.component_types
        if self.date_time is not None:
            result['DateTime'] = self.date_time
        if self.summary_report is not None:
            result['SummaryReport'] = self.summary_report.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ComponentTypes') is not None:
            self.component_types = m.get('ComponentTypes')
        if m.get('DateTime') is not None:
            self.date_time = m.get('DateTime')
        if m.get('SummaryReport') is not None:
            temp_model = ListDoctorReportsResponseBodyDataSummaryReport()
            self.summary_report = temp_model.from_map(m['SummaryReport'])
        return self


class ListDoctorReportsResponseBody(TeaModel):
    def __init__(self, data=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.data = data  # type: list[ListDoctorReportsResponseBodyData]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDoctorReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListDoctorReportsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDoctorReportsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDoctorReportsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDoctorReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDoctorReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInstanceTypesRequest(TeaModel):
    def __init__(self, cluster_id=None, cluster_type=None, deploy_mode=None, instance_type=None,
                 is_modification=None, node_group_id=None, node_group_type=None, payment_type=None, region_id=None,
                 release_version=None, zone_id=None):
        # 集群ID，仅升配场景使用。
        self.cluster_id = cluster_id  # type: str
        # 创建的EMR集群类型。取值范围：
        # - DATALAKE：新版数据湖。
        # - OLAP：数据分析。
        # - DATAFLOW：实时数据流。
        # - DATASERVING：数据服务。
        # - CUSTOM：自定义集群。
        # - HADOOP：旧版数据湖（不推荐使用，建议使用新版数据湖）。
        self.cluster_type = cluster_type  # type: str
        # 集群中的应用部署模式。取值范围：
        # - NORMAL：非高可用部署。集群1个MASTER节点。
        # - HA：高可用部署。高可用部署要求至少3个MASTER节点。
        # 
        # 默认值：NORMAL。
        self.deploy_mode = deploy_mode  # type: str
        # 机型
        self.instance_type = instance_type  # type: str
        # 是否变配。
        self.is_modification = is_modification  # type: bool
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点组类型。取值范围：
        # - MASTER：管理类型节点组。
        # - CORE：存储类型节点组。
        # - TASK：计算类型节点组。
        self.node_group_type = node_group_type  # type: str
        # 集群的付费类型。取值范围：
        # - PayAsYouGo：后付费。
        # - Subscription：预付费。
        # 
        # 默认值：PayAsYouGo。
        self.payment_type = payment_type  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        # EMR发行版。
        self.release_version = release_version  # type: str
        # 可用区ID。
        self.zone_id = zone_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInstanceTypesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.cluster_type is not None:
            result['ClusterType'] = self.cluster_type
        if self.deploy_mode is not None:
            result['DeployMode'] = self.deploy_mode
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.is_modification is not None:
            result['IsModification'] = self.is_modification
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_group_type is not None:
            result['NodeGroupType'] = self.node_group_type
        if self.payment_type is not None:
            result['PaymentType'] = self.payment_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ClusterType') is not None:
            self.cluster_type = m.get('ClusterType')
        if m.get('DeployMode') is not None:
            self.deploy_mode = m.get('DeployMode')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('IsModification') is not None:
            self.is_modification = m.get('IsModification')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeGroupType') is not None:
            self.node_group_type = m.get('NodeGroupType')
        if m.get('PaymentType') is not None:
            self.payment_type = m.get('PaymentType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class ListInstanceTypesResponseBody(TeaModel):
    def __init__(self, instance_types=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.instance_types = instance_types  # type: list[InstanceType]
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.instance_types:
            for k in self.instance_types:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstanceTypesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InstanceTypes'] = []
        if self.instance_types is not None:
            for k in self.instance_types:
                result['InstanceTypes'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.instance_types = []
        if m.get('InstanceTypes') is not None:
            for k in m.get('InstanceTypes'):
                temp_model = InstanceType()
                self.instance_types.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListInstanceTypesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListInstanceTypesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListInstanceTypesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInstanceTypesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNodeGroupsRequest(TeaModel):
    def __init__(self, cluster_id=None, max_results=None, next_token=None, node_group_ids=None,
                 node_group_names=None, node_group_states=None, node_group_types=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 一次获取的最大记录数。取值范围：1~100。
        self.max_results = max_results  # type: int
        # 标记当前开始读取的位置，置空表示从头开始。
        self.next_token = next_token  # type: str
        # 节点组ID列表。
        self.node_group_ids = node_group_ids  # type: list[str]
        # 节点组名称列表。
        self.node_group_names = node_group_names  # type: list[str]
        # 节点组状态。
        self.node_group_states = node_group_states  # type: list[str]
        # 节点组类型列表。
        self.node_group_types = node_group_types  # type: list[str]
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNodeGroupsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.node_group_ids is not None:
            result['NodeGroupIds'] = self.node_group_ids
        if self.node_group_names is not None:
            result['NodeGroupNames'] = self.node_group_names
        if self.node_group_states is not None:
            result['NodeGroupStates'] = self.node_group_states
        if self.node_group_types is not None:
            result['NodeGroupTypes'] = self.node_group_types
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('NodeGroupIds') is not None:
            self.node_group_ids = m.get('NodeGroupIds')
        if m.get('NodeGroupNames') is not None:
            self.node_group_names = m.get('NodeGroupNames')
        if m.get('NodeGroupStates') is not None:
            self.node_group_states = m.get('NodeGroupStates')
        if m.get('NodeGroupTypes') is not None:
            self.node_group_types = m.get('NodeGroupTypes')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListNodeGroupsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, node_groups=None, request_id=None, total_count=None):
        # 本次请求所返回的最大记录条数。
        self.max_results = max_results  # type: int
        # 返回读取到的数据位置，空代表数据已经读取完毕。
        self.next_token = next_token  # type: str
        self.node_groups = node_groups  # type: list[NodeGroup]
        # 请求ID。
        self.request_id = request_id  # type: str
        # 本次请求条件下的数据总量。
        self.total_count = total_count  # type: int

    def validate(self):
        if self.node_groups:
            for k in self.node_groups:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListNodeGroupsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['NodeGroups'] = []
        if self.node_groups is not None:
            for k in self.node_groups:
                result['NodeGroups'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.node_groups = []
        if m.get('NodeGroups') is not None:
            for k in m.get('NodeGroups'):
                temp_model = NodeGroup()
                self.node_groups.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListNodeGroupsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListNodeGroupsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListNodeGroupsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNodeGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNodesRequest(TeaModel):
    def __init__(self, cluster_id=None, max_results=None, next_token=None, node_group_ids=None, node_ids=None,
                 node_names=None, node_states=None, private_ips=None, public_ips=None, region_id=None, tags=None):
        # The ID of the cluster.
        self.cluster_id = cluster_id  # type: str
        # The number of maximum number of records to obtain at a time. Valid values: 1 to 100.
        self.max_results = max_results  # type: int
        # Marks the current position where reading starts. If you set this value to null, you can start from the beginning.
        self.next_token = next_token  # type: str
        # The IDs of node groups.
        self.node_group_ids = node_group_ids  # type: list[str]
        # An array that consists of information about the ID of the node.
        self.node_ids = node_ids  # type: list[str]
        # The names of the nodes.
        self.node_names = node_names  # type: list[str]
        # The status of the node.
        self.node_states = node_states  # type: list[str]
        # The private IP address.
        self.private_ips = private_ips  # type: list[str]
        # The public IP address.
        self.public_ips = public_ips  # type: list[str]
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str
        # The list of tags to be bound.
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListNodesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.node_group_ids is not None:
            result['NodeGroupIds'] = self.node_group_ids
        if self.node_ids is not None:
            result['NodeIds'] = self.node_ids
        if self.node_names is not None:
            result['NodeNames'] = self.node_names
        if self.node_states is not None:
            result['NodeStates'] = self.node_states
        if self.private_ips is not None:
            result['PrivateIps'] = self.private_ips
        if self.public_ips is not None:
            result['PublicIps'] = self.public_ips
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('NodeGroupIds') is not None:
            self.node_group_ids = m.get('NodeGroupIds')
        if m.get('NodeIds') is not None:
            self.node_ids = m.get('NodeIds')
        if m.get('NodeNames') is not None:
            self.node_names = m.get('NodeNames')
        if m.get('NodeStates') is not None:
            self.node_states = m.get('NodeStates')
        if m.get('PrivateIps') is not None:
            self.private_ips = m.get('PrivateIps')
        if m.get('PublicIps') is not None:
            self.public_ips = m.get('PublicIps')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class ListNodesResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, nodes=None, request_id=None, total_count=None):
        # The maximum number of entries returned.
        self.max_results = max_results  # type: int
        # The position at which the next read starts. If null is returned, the data has been read.
        self.next_token = next_token  # type: str
        # Details about nodes.
        self.nodes = nodes  # type: list[Node]
        # The ID of the request.
        self.request_id = request_id  # type: str
        # The total number of records in this request.
        self.total_count = total_count  # type: int

    def validate(self):
        if self.nodes:
            for k in self.nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListNodesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['Nodes'] = []
        if self.nodes is not None:
            for k in self.nodes:
                result['Nodes'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.nodes = []
        if m.get('Nodes') is not None:
            for k in m.get('Nodes'):
                temp_model = Node()
                self.nodes.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListNodesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListNodesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListNodesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListReleaseVersionsRequest(TeaModel):
    def __init__(self, cluster_type=None, iaas_type=None, region_id=None):
        # The type of the cluster.
        self.cluster_type = cluster_type  # type: str
        # The type of the IaaS resource.
        self.iaas_type = iaas_type  # type: str
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReleaseVersionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_type is not None:
            result['ClusterType'] = self.cluster_type
        if self.iaas_type is not None:
            result['IaasType'] = self.iaas_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterType') is not None:
            self.cluster_type = m.get('ClusterType')
        if m.get('IaasType') is not None:
            self.iaas_type = m.get('IaasType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListReleaseVersionsResponseBodyReleaseVersions(TeaModel):
    def __init__(self, iaas_type=None, release_version=None, series=None):
        # IaaS类型。取值范围：
        # - ECS：基于ECS构建。
        # - K8S：基于K8S构建。
        self.iaas_type = iaas_type  # type: str
        # EMR发行版。
        self.release_version = release_version  # type: str
        # 版本序列。
        self.series = series  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReleaseVersionsResponseBodyReleaseVersions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iaas_type is not None:
            result['IaasType'] = self.iaas_type
        if self.release_version is not None:
            result['ReleaseVersion'] = self.release_version
        if self.series is not None:
            result['Series'] = self.series
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IaasType') is not None:
            self.iaas_type = m.get('IaasType')
        if m.get('ReleaseVersion') is not None:
            self.release_version = m.get('ReleaseVersion')
        if m.get('Series') is not None:
            self.series = m.get('Series')
        return self


class ListReleaseVersionsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, release_versions=None, request_id=None, total_count=None):
        # The maximum number of entries returned.
        self.max_results = max_results  # type: int
        # Returns the location of the data that was read.
        self.next_token = next_token  # type: str
        self.release_versions = release_versions  # type: list[ListReleaseVersionsResponseBodyReleaseVersions]
        # The ID of the request.
        self.request_id = request_id  # type: str
        # The total number of entries returned.
        self.total_count = total_count  # type: int

    def validate(self):
        if self.release_versions:
            for k in self.release_versions:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListReleaseVersionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['ReleaseVersions'] = []
        if self.release_versions is not None:
            for k in self.release_versions:
                result['ReleaseVersions'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.release_versions = []
        if m.get('ReleaseVersions') is not None:
            for k in m.get('ReleaseVersions'):
                temp_model = ListReleaseVersionsResponseBodyReleaseVersions()
                self.release_versions.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListReleaseVersionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListReleaseVersionsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListReleaseVersionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListReleaseVersionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagResourcesRequest(TeaModel):
    def __init__(self, max_results=None, next_token=None, region_id=None, resource_ids=None, resource_type=None,
                 tags=None):
        # The number of maximum number of records to obtain at a time.
        self.max_results = max_results  # type: int
        # Marks the current position to start reading. If this field is empty, the data is read from the beginning.
        self.next_token = next_token  # type: str
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str
        # The list of resource IDs. Number of array elements N Valid values: 1 to 1
        self.resource_ids = resource_ids  # type: list[str]
        # The type of the resource. Set the value to cluster.
        self.resource_type = resource_type  # type: str
        # The array of tags. The number of array elements N. Valid values: 1 to 20.
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTagResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_ids is not None:
            result['ResourceIds'] = self.resource_ids
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceIds') is not None:
            self.resource_ids = m.get('ResourceIds')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponseBodyTagResources(TeaModel):
    def __init__(self, resource_id=None, resource_type=None, tag_key=None, tag_value=None):
        # Indicates the ID of a resource.
        self.resource_id = resource_id  # type: str
        # The resource type.
        self.resource_type = resource_type  # type: str
        # The tag key of the ENI.
        self.tag_key = tag_key  # type: str
        # The tag value of the ENI.
        self.tag_value = tag_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTagResourcesResponseBodyTagResources, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class ListTagResourcesResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, request_id=None, tag_resources=None, total_count=None):
        # The maximum number of entries returned.
        self.max_results = max_results  # type: int
        # Returns the location of the data that was read. Empty indicates that the data has been read.
        self.next_token = next_token  # type: str
        # The ID of the request.
        self.request_id = request_id  # type: str
        # The details about the tag. Contains the resource ID, resource type, and tag key-value information.
        self.tag_resources = tag_resources  # type: list[ListTagResourcesResponseBodyTagResources]
        # The total number of entries returned.
        self.total_count = total_count  # type: int

    def validate(self):
        if self.tag_resources:
            for k in self.tag_resources:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTagResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['TagResources'] = []
        if self.tag_resources is not None:
            for k in self.tag_resources:
                result['TagResources'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.tag_resources = []
        if m.get('TagResources') is not None:
            for k in m.get('TagResources'):
                temp_model = ListTagResourcesResponseBodyTagResources()
                self.tag_resources.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListTagResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListTagResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTagResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAutoScalingPolicyRequest(TeaModel):
    def __init__(self, cluster_id=None, constraints=None, node_group_id=None, region_id=None, scaling_rules=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 最大最小值约束。
        self.constraints = constraints  # type: ScalingConstraints
        # 节点组ID。节点组 Id-针对 ACK 集群，此字段为空。
        self.node_group_id = node_group_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str
        # 弹性伸缩规则描述列表。
        # <p>
        self.scaling_rules = scaling_rules  # type: list[ScalingRule]

    def validate(self):
        if self.constraints:
            self.constraints.validate()
        if self.scaling_rules:
            for k in self.scaling_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PutAutoScalingPolicyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.constraints is not None:
            result['Constraints'] = self.constraints.to_map()
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        result['ScalingRules'] = []
        if self.scaling_rules is not None:
            for k in self.scaling_rules:
                result['ScalingRules'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('Constraints') is not None:
            temp_model = ScalingConstraints()
            self.constraints = temp_model.from_map(m['Constraints'])
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        self.scaling_rules = []
        if m.get('ScalingRules') is not None:
            for k in m.get('ScalingRules'):
                temp_model = ScalingRule()
                self.scaling_rules.append(temp_model.from_map(k))
        return self


class PutAutoScalingPolicyResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAutoScalingPolicyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class PutAutoScalingPolicyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAutoScalingPolicyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAutoScalingPolicyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAutoScalingPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveAutoScalingPolicyRequest(TeaModel):
    def __init__(self, cluster_id=None, node_group_id=None, region_id=None):
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 节点组ID。节点组 Id-针对 ACK 集群，此字段为空。
        self.node_group_id = node_group_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveAutoScalingPolicyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class RemoveAutoScalingPolicyResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveAutoScalingPolicyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class RemoveAutoScalingPolicyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RemoveAutoScalingPolicyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemoveAutoScalingPolicyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveAutoScalingPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunApplicationActionRequest(TeaModel):
    def __init__(self, action_name=None, batch_size=None, cluster_id=None, component_instance_selector=None,
                 description=None, execute_strategy=None, interval=None, region_id=None, rolling_execute=None):
        # 操作名称。取值范围：
        # - start：启动。
        # - stop：停止。
        # - config: 下发配置。
        # - refresh_queues: 刷新yarn队列。
        # 等
        self.action_name = action_name  # type: str
        # 每批数量。
        self.batch_size = batch_size  # type: int
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 组件实例选择器。
        self.component_instance_selector = component_instance_selector  # type: ComponentInstanceSelector
        # 描述。
        self.description = description  # type: str
        # 运行策略。
        self.execute_strategy = execute_strategy  # type: str
        # 间隔时间。
        self.interval = interval  # type: long
        # 区域ID。
        self.region_id = region_id  # type: str
        # 是否滚动执行。
        self.rolling_execute = rolling_execute  # type: bool

    def validate(self):
        if self.component_instance_selector:
            self.component_instance_selector.validate()

    def to_map(self):
        _map = super(RunApplicationActionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_name is not None:
            result['ActionName'] = self.action_name
        if self.batch_size is not None:
            result['BatchSize'] = self.batch_size
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.component_instance_selector is not None:
            result['ComponentInstanceSelector'] = self.component_instance_selector.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.execute_strategy is not None:
            result['ExecuteStrategy'] = self.execute_strategy
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.rolling_execute is not None:
            result['RollingExecute'] = self.rolling_execute
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActionName') is not None:
            self.action_name = m.get('ActionName')
        if m.get('BatchSize') is not None:
            self.batch_size = m.get('BatchSize')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ComponentInstanceSelector') is not None:
            temp_model = ComponentInstanceSelector()
            self.component_instance_selector = temp_model.from_map(m['ComponentInstanceSelector'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('ExecuteStrategy') is not None:
            self.execute_strategy = m.get('ExecuteStrategy')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RollingExecute') is not None:
            self.rolling_execute = m.get('RollingExecute')
        return self


class RunApplicationActionResponseBody(TeaModel):
    def __init__(self, operation_id=None, request_id=None):
        # 操作ID。
        self.operation_id = operation_id  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunApplicationActionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class RunApplicationActionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunApplicationActionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunApplicationActionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunApplicationActionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesRequest(TeaModel):
    def __init__(self, region_id=None, resource_ids=None, resource_type=None, tags=None):
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str
        # The list of resource IDs. Valid values of N: 1 to 1.
        self.resource_ids = resource_ids  # type: list[str]
        # The type of the resource to which the tag belongs. Valid values:
        # 
        # *   cluster: cluster
        self.resource_type = resource_type  # type: str
        # The list of tags to be bound.
        self.tags = tags  # type: list[Tag]

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TagResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_ids is not None:
            result['ResourceIds'] = self.resource_ids
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceIds') is not None:
            self.resource_ids = m.get('ResourceIds')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = Tag()
                self.tags.append(temp_model.from_map(k))
        return self


class TagResourcesResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TagResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class TagResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TagResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TagResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesRequest(TeaModel):
    def __init__(self, all=None, region_id=None, resource_ids=None, resource_type=None, tag_keys=None):
        # Specifies whether to remove all tags. This parameter is valid only when the **Tagkeys** is empty. Valid values:
        # 
        # *   true: All the data is deleted.
        # *   false: Not all of them are deleted.
        # 
        # Default value: false
        self.all = all  # type: bool
        # The ID of the region in which you want to create the instance.
        self.region_id = region_id  # type: str
        # The list of resource IDs.
        self.resource_ids = resource_ids  # type: list[str]
        # The type of the resource. Set the value to cluster.
        self.resource_type = resource_type  # type: str
        # The key of the label. Valid values of N: 1 to 20.
        self.tag_keys = tag_keys  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(UntagResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_ids is not None:
            result['ResourceIds'] = self.resource_ids
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_keys is not None:
            result['TagKeys'] = self.tag_keys
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceIds') is not None:
            self.resource_ids = m.get('ResourceIds')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKeys') is not None:
            self.tag_keys = m.get('TagKeys')
        return self


class UntagResourcesResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # The ID of the request.
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UntagResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UntagResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UntagResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UntagResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateApplicationConfigsRequest(TeaModel):
    def __init__(self, application_configs=None, application_name=None, cluster_id=None, config_action=None,
                 config_scope=None, description=None, node_group_id=None, node_id=None, region_id=None):
        # 应用配置列表。
        self.application_configs = application_configs  # type: list[UpdateApplicationConfig]
        # 应用名称。
        self.application_name = application_name  # type: str
        # 集群ID。
        self.cluster_id = cluster_id  # type: str
        # 配置项操作。取值范围：
        # - ADD：添加。
        # - DELETE：删除。
        # - UPDATE：更新。
        self.config_action = config_action  # type: str
        # 配置操作范围。取值范围：
        # - CLUSTER：集群范围。
        # - NODE_GROUP：节点组范围。
        self.config_scope = config_scope  # type: str
        # 本次更新操作描述。
        self.description = description  # type: str
        # 节点组ID。
        self.node_group_id = node_group_id  # type: str
        # 节点ID。
        self.node_id = node_id  # type: str
        # 区域ID。
        self.region_id = region_id  # type: str

    def validate(self):
        if self.application_configs:
            for k in self.application_configs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateApplicationConfigsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplicationConfigs'] = []
        if self.application_configs is not None:
            for k in self.application_configs:
                result['ApplicationConfigs'].append(k.to_map() if k else None)
        if self.application_name is not None:
            result['ApplicationName'] = self.application_name
        if self.cluster_id is not None:
            result['ClusterId'] = self.cluster_id
        if self.config_action is not None:
            result['ConfigAction'] = self.config_action
        if self.config_scope is not None:
            result['ConfigScope'] = self.config_scope
        if self.description is not None:
            result['Description'] = self.description
        if self.node_group_id is not None:
            result['NodeGroupId'] = self.node_group_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.application_configs = []
        if m.get('ApplicationConfigs') is not None:
            for k in m.get('ApplicationConfigs'):
                temp_model = UpdateApplicationConfig()
                self.application_configs.append(temp_model.from_map(k))
        if m.get('ApplicationName') is not None:
            self.application_name = m.get('ApplicationName')
        if m.get('ClusterId') is not None:
            self.cluster_id = m.get('ClusterId')
        if m.get('ConfigAction') is not None:
            self.config_action = m.get('ConfigAction')
        if m.get('ConfigScope') is not None:
            self.config_scope = m.get('ConfigScope')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('NodeGroupId') is not None:
            self.node_group_id = m.get('NodeGroupId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class UpdateApplicationConfigsResponseBody(TeaModel):
    def __init__(self, operation_id=None, request_id=None):
        # 操作ID。
        self.operation_id = operation_id  # type: str
        # 请求ID。
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateApplicationConfigsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateApplicationConfigsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateApplicationConfigsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateApplicationConfigsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateApplicationConfigsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


