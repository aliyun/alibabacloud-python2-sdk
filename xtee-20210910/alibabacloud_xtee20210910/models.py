# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class BindVariableRequest(TeaModel):
    def __init__(self, lang=None, api_region_id=None, api_type=None, create_type=None, define_id=None,
                 define_ids=None, description=None, event_code=None, exception_value=None, id=None, output_field=None,
                 output_type=None, params=None, params_list=None, reg_id=None, source_type=None, title=None):
        self.lang = lang  # type: str
        self.api_region_id = api_region_id  # type: str
        self.api_type = api_type  # type: str
        self.create_type = create_type  # type: str
        self.define_id = define_id  # type: str
        self.define_ids = define_ids  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.event_code = event_code  # type: str
        self.exception_value = exception_value  # type: str
        self.id = id  # type: long
        self.output_field = output_field  # type: str
        self.output_type = output_type  # type: str
        self.params = params  # type: str
        self.params_list = params_list  # type: str
        self.reg_id = reg_id  # type: str
        self.source_type = source_type  # type: str
        # This parameter is required.
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BindVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.api_region_id is not None:
            result['apiRegionId'] = self.api_region_id
        if self.api_type is not None:
            result['apiType'] = self.api_type
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.define_ids is not None:
            result['defineIds'] = self.define_ids
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.exception_value is not None:
            result['exceptionValue'] = self.exception_value
        if self.id is not None:
            result['id'] = self.id
        if self.output_field is not None:
            result['outputField'] = self.output_field
        if self.output_type is not None:
            result['outputType'] = self.output_type
        if self.params is not None:
            result['params'] = self.params
        if self.params_list is not None:
            result['paramsList'] = self.params_list
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('apiRegionId') is not None:
            self.api_region_id = m.get('apiRegionId')
        if m.get('apiType') is not None:
            self.api_type = m.get('apiType')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('defineIds') is not None:
            self.define_ids = m.get('defineIds')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('exceptionValue') is not None:
            self.exception_value = m.get('exceptionValue')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('outputField') is not None:
            self.output_field = m.get('outputField')
        if m.get('outputType') is not None:
            self.output_type = m.get('outputType')
        if m.get('params') is not None:
            self.params = m.get('params')
        if m.get('paramsList') is not None:
            self.params_list = m.get('paramsList')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class BindVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(BindVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class BindVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: BindVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(BindVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BindVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckCustVariableLimitRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckCustVariableLimitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CheckCustVariableLimitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckCustVariableLimitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CheckCustVariableLimitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CheckCustVariableLimitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckCustVariableLimitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckCustVariableLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckExpressionVariableLimitRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckExpressionVariableLimitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CheckExpressionVariableLimitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckExpressionVariableLimitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CheckExpressionVariableLimitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CheckExpressionVariableLimitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckExpressionVariableLimitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckExpressionVariableLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckFieldLimitRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, source=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.source = source  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckFieldLimitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.source is not None:
            result['source'] = self.source
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('source') is not None:
            self.source = m.get('source')
        return self


class CheckFieldLimitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckFieldLimitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CheckFieldLimitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CheckFieldLimitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckFieldLimitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckFieldLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckPermissionRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckPermissionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CheckPermissionResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckPermissionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CheckPermissionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CheckPermissionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckPermissionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckPermissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckUsageVariableRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckUsageVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CheckUsageVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckUsageVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CheckUsageVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CheckUsageVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckUsageVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckUsageVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ClearNameListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, variable_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.variable_id = variable_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearNameListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class ClearNameListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ClearNameListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ClearNameListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ClearNameListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ClearNameListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ClearNameListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAnalysisConditionFavoriteRequest(TeaModel):
    def __init__(self, lang=None, condition=None, event_begin_time=None, event_codes=None, event_end_time=None,
                 field_name=None, field_value=None, name=None, reg_id=None, type=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.condition = condition  # type: str
        # This parameter is required.
        self.event_begin_time = event_begin_time  # type: long
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        # This parameter is required.
        self.event_end_time = event_end_time  # type: long
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        # This parameter is required.
        self.name = name  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAnalysisConditionFavoriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.condition is not None:
            result['condition'] = self.condition
        if self.event_begin_time is not None:
            result['eventBeginTime'] = self.event_begin_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_end_time is not None:
            result['eventEndTime'] = self.event_end_time
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('eventBeginTime') is not None:
            self.event_begin_time = m.get('eventBeginTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventEndTime') is not None:
            self.event_end_time = m.get('eventEndTime')
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateAnalysisConditionFavoriteResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAnalysisConditionFavoriteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateAnalysisConditionFavoriteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateAnalysisConditionFavoriteResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateAnalysisConditionFavoriteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAnalysisConditionFavoriteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAnalysisExportTaskRequest(TeaModel):
    def __init__(self, lang=None, columns=None, conditions=None, event_begin_time=None, event_codes=None,
                 event_end_time=None, field_name=None, field_value=None, file_format=None, reg_id=None, scope=None, type=None):
        self.lang = lang  # type: str
        self.columns = columns  # type: str
        self.conditions = conditions  # type: str
        # This parameter is required.
        self.event_begin_time = event_begin_time  # type: long
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        # This parameter is required.
        self.event_end_time = event_end_time  # type: long
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        # This parameter is required.
        self.file_format = file_format  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.scope = scope  # type: str
        # This parameter is required.
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAnalysisExportTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.columns is not None:
            result['columns'] = self.columns
        if self.conditions is not None:
            result['conditions'] = self.conditions
        if self.event_begin_time is not None:
            result['eventBeginTime'] = self.event_begin_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_end_time is not None:
            result['eventEndTime'] = self.event_end_time
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        if self.file_format is not None:
            result['fileFormat'] = self.file_format
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scope is not None:
            result['scope'] = self.scope
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('columns') is not None:
            self.columns = m.get('columns')
        if m.get('conditions') is not None:
            self.conditions = m.get('conditions')
        if m.get('eventBeginTime') is not None:
            self.event_begin_time = m.get('eventBeginTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventEndTime') is not None:
            self.event_end_time = m.get('eventEndTime')
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        if m.get('fileFormat') is not None:
            self.file_format = m.get('fileFormat')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateAnalysisExportTaskResponseBodyResultObject(TeaModel):
    def __init__(self, columns=None, conditions=None, event_begin_time=None, event_codes=None, event_end_time=None,
                 file_format=None, oss_key=None, scope=None, status=None, type=None, user_id=None):
        self.columns = columns  # type: str
        self.conditions = conditions  # type: str
        self.event_begin_time = event_begin_time  # type: long
        self.event_codes = event_codes  # type: str
        self.event_end_time = event_end_time  # type: long
        self.file_format = file_format  # type: str
        self.oss_key = oss_key  # type: str
        self.scope = scope  # type: str
        self.status = status  # type: str
        self.type = type  # type: str
        self.user_id = user_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAnalysisExportTaskResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.columns is not None:
            result['columns'] = self.columns
        if self.conditions is not None:
            result['conditions'] = self.conditions
        if self.event_begin_time is not None:
            result['eventBeginTime'] = self.event_begin_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_end_time is not None:
            result['eventEndTime'] = self.event_end_time
        if self.file_format is not None:
            result['fileFormat'] = self.file_format
        if self.oss_key is not None:
            result['ossKey'] = self.oss_key
        if self.scope is not None:
            result['scope'] = self.scope
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('columns') is not None:
            self.columns = m.get('columns')
        if m.get('conditions') is not None:
            self.conditions = m.get('conditions')
        if m.get('eventBeginTime') is not None:
            self.event_begin_time = m.get('eventBeginTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventEndTime') is not None:
            self.event_end_time = m.get('eventEndTime')
        if m.get('fileFormat') is not None:
            self.file_format = m.get('fileFormat')
        if m.get('ossKey') is not None:
            self.oss_key = m.get('ossKey')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class CreateAnalysisExportTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: CreateAnalysisExportTaskResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(CreateAnalysisExportTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = CreateAnalysisExportTaskResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class CreateAnalysisExportTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateAnalysisExportTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateAnalysisExportTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAnalysisExportTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAppKeyRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAppKeyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CreateAppKeyResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAppKeyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateAppKeyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateAppKeyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateAppKeyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAppKeyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAuthorizationUserRequest(TeaModel):
    def __init__(self, lang=None, bind_id=None, create_type=None, event_template_id=None, reg_id=None):
        self.lang = lang  # type: str
        self.bind_id = bind_id  # type: long
        self.create_type = create_type  # type: str
        self.event_template_id = event_template_id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAuthorizationUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.bind_id is not None:
            result['bindId'] = self.bind_id
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_template_id is not None:
            result['eventTemplateId'] = self.event_template_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('bindId') is not None:
            self.bind_id = m.get('bindId')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventTemplateId') is not None:
            self.event_template_id = m.get('eventTemplateId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CreateAuthorizationUserResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAuthorizationUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateAuthorizationUserResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateAuthorizationUserResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateAuthorizationUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAuthorizationUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCustVariableRequest(TeaModel):
    def __init__(self, lang=None, condition=None, create_type=None, description=None, event_codes=None,
                 history_value_type=None, object=None, outputs=None, reg_id=None, subject=None, time_type=None, title=None,
                 tw_count=None, velocity_fc=None, velocity_tw=None):
        self.lang = lang  # type: str
        self.condition = condition  # type: str
        self.create_type = create_type  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        self.history_value_type = history_value_type  # type: str
        self.object = object  # type: str
        self.outputs = outputs  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.subject = subject  # type: str
        # This parameter is required.
        self.time_type = time_type  # type: str
        # This parameter is required.
        self.title = title  # type: str
        self.tw_count = tw_count  # type: int
        # This parameter is required.
        self.velocity_fc = velocity_fc  # type: str
        # This parameter is required.
        self.velocity_tw = velocity_tw  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateCustVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.condition is not None:
            result['condition'] = self.condition
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.description is not None:
            result['description'] = self.description
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.history_value_type is not None:
            result['historyValueType'] = self.history_value_type
        if self.object is not None:
            result['object'] = self.object
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.subject is not None:
            result['subject'] = self.subject
        if self.time_type is not None:
            result['timeType'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        if self.tw_count is not None:
            result['twCount'] = self.tw_count
        if self.velocity_fc is not None:
            result['velocityFC'] = self.velocity_fc
        if self.velocity_tw is not None:
            result['velocityTW'] = self.velocity_tw
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('historyValueType') is not None:
            self.history_value_type = m.get('historyValueType')
        if m.get('object') is not None:
            self.object = m.get('object')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('timeType') is not None:
            self.time_type = m.get('timeType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('twCount') is not None:
            self.tw_count = m.get('twCount')
        if m.get('velocityFC') is not None:
            self.velocity_fc = m.get('velocityFC')
        if m.get('velocityTW') is not None:
            self.velocity_tw = m.get('velocityTW')
        return self


class CreateCustVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateCustVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateCustVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateCustVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateCustVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCustVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDataSourceRequest(TeaModel):
    def __init__(self, lang=None, description=None, name=None, oss_key=None, reg_id=None, type=None):
        self.lang = lang  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.name = name  # type: str
        # This parameter is required.
        self.oss_key = oss_key  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDataSourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.description is not None:
            result['description'] = self.description
        if self.name is not None:
            result['name'] = self.name
        if self.oss_key is not None:
            result['ossKey'] = self.oss_key
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('ossKey') is not None:
            self.oss_key = m.get('ossKey')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateDataSourceResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDataSourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateDataSourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDataSourceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDataSourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDataSourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEventRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_name=None, input_fields_str=None, memo=None, reg_id=None,
                 template_code=None, template_name=None, template_type=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_name = event_name  # type: str
        self.input_fields_str = input_fields_str  # type: str
        self.memo = memo  # type: str
        self.reg_id = reg_id  # type: str
        self.template_code = template_code  # type: str
        self.template_name = template_name  # type: str
        self.template_type = template_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.input_fields_str is not None:
            result['inputFieldsStr'] = self.input_fields_str
        if self.memo is not None:
            result['memo'] = self.memo
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.template_name is not None:
            result['templateName'] = self.template_name
        if self.template_type is not None:
            result['templateType'] = self.template_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('inputFieldsStr') is not None:
            self.input_fields_str = m.get('inputFieldsStr')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        return self


class CreateEventResponseBody(TeaModel):
    def __init__(self, data=None, request_id=None):
        self.data = data  # type: bool
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class CreateEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateExpressionVariableRequest(TeaModel):
    def __init__(self, lang=None, description=None, event_code=None, expression=None, expression_title=None,
                 expression_variable=None, outlier=None, outputs=None, reg_id=None, title=None):
        self.lang = lang  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.event_code = event_code  # type: str
        # This parameter is required.
        self.expression = expression  # type: str
        # This parameter is required.
        self.expression_title = expression_title  # type: str
        self.expression_variable = expression_variable  # type: str
        # This parameter is required.
        self.outlier = outlier  # type: str
        # This parameter is required.
        self.outputs = outputs  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateExpressionVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.expression is not None:
            result['expression'] = self.expression
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.expression_variable is not None:
            result['expressionVariable'] = self.expression_variable
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('expression') is not None:
            self.expression = m.get('expression')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('expressionVariable') is not None:
            self.expression_variable = m.get('expressionVariable')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CreateExpressionVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateExpressionVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateExpressionVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateExpressionVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateExpressionVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateExpressionVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateFieldRequest(TeaModel):
    def __init__(self, lang=None, classify=None, description=None, enum_data=None, name=None, reg_id=None,
                 source=None, title=None, type=None):
        self.lang = lang  # type: str
        self.classify = classify  # type: str
        self.description = description  # type: str
        self.enum_data = enum_data  # type: str
        self.name = name  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.source = source  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateFieldRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.classify is not None:
            result['classify'] = self.classify
        if self.description is not None:
            result['description'] = self.description
        if self.enum_data is not None:
            result['enumData'] = self.enum_data
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.source is not None:
            result['source'] = self.source
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('classify') is not None:
            self.classify = m.get('classify')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('enumData') is not None:
            self.enum_data = m.get('enumData')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CreateFieldResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateFieldResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateFieldResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateFieldResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateFieldResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateFieldResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateGroupSignRequest(TeaModel):
    def __init__(self, lang=None, sign_list=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.sign_list = sign_list  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateGroupSignRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.sign_list is not None:
            result['SignList'] = self.sign_list
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('SignList') is not None:
            self.sign_list = m.get('SignList')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CreateGroupSignResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateGroupSignResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateGroupSignResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateGroupSignResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateGroupSignResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateGroupSignResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMonitorTaskRequest(TeaModel):
    def __init__(self, lang=None, biz_type=None, cycle_type=None, end_time=None, file_path=None, listday_str=None,
                 reg_id=None, start_time=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.biz_type = biz_type  # type: str
        # This parameter is required.
        self.cycle_type = cycle_type  # type: str
        # This parameter is required.
        self.end_time = end_time  # type: long
        # This parameter is required.
        self.file_path = file_path  # type: str
        self.listday_str = listday_str  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMonitorTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.biz_type is not None:
            result['bizType'] = self.biz_type
        if self.cycle_type is not None:
            result['cycleType'] = self.cycle_type
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.file_path is not None:
            result['filePath'] = self.file_path
        if self.listday_str is not None:
            result['listdayStr'] = self.listday_str
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('bizType') is not None:
            self.biz_type = m.get('bizType')
        if m.get('cycleType') is not None:
            self.cycle_type = m.get('cycleType')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('filePath') is not None:
            self.file_path = m.get('filePath')
        if m.get('listdayStr') is not None:
            self.listday_str = m.get('listdayStr')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        return self


class CreateMonitorTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMonitorTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateMonitorTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMonitorTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMonitorTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMonitorTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePocRequest(TeaModel):
    def __init__(self, lang=None, config_str=None, file_name=None, file_type=None, file_url=None, reg_id=None,
                 service_code=None, service_name=None, task_name=None):
        self.lang = lang  # type: str
        self.config_str = config_str  # type: str
        self.file_name = file_name  # type: str
        self.file_type = file_type  # type: str
        self.file_url = file_url  # type: str
        self.reg_id = reg_id  # type: str
        self.service_code = service_code  # type: str
        self.service_name = service_name  # type: str
        self.task_name = task_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePocRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.config_str is not None:
            result['configStr'] = self.config_str
        if self.file_name is not None:
            result['fileName'] = self.file_name
        if self.file_type is not None:
            result['fileType'] = self.file_type
        if self.file_url is not None:
            result['fileUrl'] = self.file_url
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        if self.service_name is not None:
            result['serviceName'] = self.service_name
        if self.task_name is not None:
            result['taskName'] = self.task_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('configStr') is not None:
            self.config_str = m.get('configStr')
        if m.get('fileName') is not None:
            self.file_name = m.get('fileName')
        if m.get('fileType') is not None:
            self.file_type = m.get('fileType')
        if m.get('fileUrl') is not None:
            self.file_url = m.get('fileUrl')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        if m.get('serviceName') is not None:
            self.service_name = m.get('serviceName')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        return self


class CreatePocResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePocResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreatePocResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreatePocResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreatePocResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePocResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePocEvRequest(TeaModel):
    def __init__(self, date_format=None, file_name=None, file_type=None, file_url=None, lang=None, reg_id=None,
                 service_code=None, service_name=None, tab=None, task_name=None, type=None):
        self.date_format = date_format  # type: str
        self.file_name = file_name  # type: str
        self.file_type = file_type  # type: str
        self.file_url = file_url  # type: str
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.service_code = service_code  # type: str
        self.service_name = service_name  # type: str
        self.tab = tab  # type: str
        self.task_name = task_name  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePocEvRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date_format is not None:
            result['DateFormat'] = self.date_format
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_type is not None:
            result['FileType'] = self.file_type
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        if self.service_code is not None:
            result['ServiceCode'] = self.service_code
        if self.service_name is not None:
            result['ServiceName'] = self.service_name
        if self.tab is not None:
            result['Tab'] = self.tab
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DateFormat') is not None:
            self.date_format = m.get('DateFormat')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileType') is not None:
            self.file_type = m.get('FileType')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        if m.get('ServiceCode') is not None:
            self.service_code = m.get('ServiceCode')
        if m.get('ServiceName') is not None:
            self.service_name = m.get('ServiceName')
        if m.get('Tab') is not None:
            self.tab = m.get('Tab')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreatePocEvResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePocEvResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['ResultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObject') is not None:
            self.result_object = m.get('ResultObject')
        return self


class CreatePocEvResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreatePocEvResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreatePocEvResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePocEvResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateQueryVariableRequest(TeaModel):
    def __init__(self, lang=None, data_source_code=None, description=None, event_code=None, expression=None,
                 expression_title=None, expression_variable=None, outlier=None, outputs=None, reg_id=None, title=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.data_source_code = data_source_code  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.event_code = event_code  # type: str
        # This parameter is required.
        self.expression = expression  # type: str
        # This parameter is required.
        self.expression_title = expression_title  # type: str
        # This parameter is required.
        self.expression_variable = expression_variable  # type: str
        # This parameter is required.
        self.outlier = outlier  # type: str
        # This parameter is required.
        self.outputs = outputs  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateQueryVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_source_code is not None:
            result['dataSourceCode'] = self.data_source_code
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.expression is not None:
            result['expression'] = self.expression
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.expression_variable is not None:
            result['expressionVariable'] = self.expression_variable
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataSourceCode') is not None:
            self.data_source_code = m.get('dataSourceCode')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('expression') is not None:
            self.expression = m.get('expression')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('expressionVariable') is not None:
            self.expression_variable = m.get('expressionVariable')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CreateQueryVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateQueryVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateQueryVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateQueryVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateQueryVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateQueryVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateRecommendEventRuleRequest(TeaModel):
    def __init__(self, lang=None, event_code=None, event_name=None, recommend_rule_ids_str=None, reg_id=None,
                 task_id=None):
        self.lang = lang  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.recommend_rule_ids_str = recommend_rule_ids_str  # type: str
        self.reg_id = reg_id  # type: str
        self.task_id = task_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRecommendEventRuleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.recommend_rule_ids_str is not None:
            result['recommendRuleIdsStr'] = self.recommend_rule_ids_str
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('recommendRuleIdsStr') is not None:
            self.recommend_rule_ids_str = m.get('recommendRuleIdsStr')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class CreateRecommendEventRuleResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRecommendEventRuleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateRecommendEventRuleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateRecommendEventRuleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateRecommendEventRuleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateRecommendEventRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateRecommendTaskRequest(TeaModel):
    def __init__(self, lang=None, name=None, reg_id=None, sample_id=None, variables_str=None, velocities_str=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.name = name  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.sample_id = sample_id  # type: long
        # This parameter is required.
        self.variables_str = variables_str  # type: str
        # This parameter is required.
        self.velocities_str = velocities_str  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRecommendTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.sample_id is not None:
            result['sampleId'] = self.sample_id
        if self.variables_str is not None:
            result['variablesStr'] = self.variables_str
        if self.velocities_str is not None:
            result['velocitiesStr'] = self.velocities_str
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sampleId') is not None:
            self.sample_id = m.get('sampleId')
        if m.get('variablesStr') is not None:
            self.variables_str = m.get('variablesStr')
        if m.get('velocitiesStr') is not None:
            self.velocities_str = m.get('velocitiesStr')
        return self


class CreateRecommendTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRecommendTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateRecommendTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateRecommendTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateRecommendTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateRecommendTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateReplenishTaskRequest(TeaModel):
    def __init__(self, client_file_name=None, client_path=None, lang=None, task_id=None, reg_id=None):
        # This parameter is required.
        self.client_file_name = client_file_name  # type: str
        # This parameter is required.
        self.client_path = client_path  # type: str
        self.lang = lang  # type: str
        # This parameter is required.
        self.task_id = task_id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReplenishTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_file_name is not None:
            result['ClientFileName'] = self.client_file_name
        if self.client_path is not None:
            result['ClientPath'] = self.client_path
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientFileName') is not None:
            self.client_file_name = m.get('ClientFileName')
        if m.get('ClientPath') is not None:
            self.client_path = m.get('ClientPath')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CreateReplenishTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateReplenishTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateReplenishTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateReplenishTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateReplenishTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateReplenishTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateRuleRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, create_type=None, event_code=None, event_name=None,
                 logic_expression=None, memo=None, reg_id=None, rule_actions=None, rule_expressions=None, rule_name=None,
                 rule_status=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.logic_expression = logic_expression  # type: str
        self.memo = memo  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_actions = rule_actions  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRuleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.memo is not None:
            result['memo'] = self.memo
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class CreateRuleResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRuleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateRuleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateRuleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateRuleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSampleRequest(TeaModel):
    def __init__(self, lang=None, client_file_name=None, client_path=None, file_type=None, reg_id=None,
                 sample_tag=None, sample_type=None, sample_values=None, upload_type=None):
        self.lang = lang  # type: str
        self.client_file_name = client_file_name  # type: str
        self.client_path = client_path  # type: str
        self.file_type = file_type  # type: str
        self.reg_id = reg_id  # type: str
        self.sample_tag = sample_tag  # type: str
        self.sample_type = sample_type  # type: str
        self.sample_values = sample_values  # type: str
        self.upload_type = upload_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSampleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.client_file_name is not None:
            result['clientFileName'] = self.client_file_name
        if self.client_path is not None:
            result['clientPath'] = self.client_path
        if self.file_type is not None:
            result['fileType'] = self.file_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.sample_tag is not None:
            result['sampleTag'] = self.sample_tag
        if self.sample_type is not None:
            result['sampleType'] = self.sample_type
        if self.sample_values is not None:
            result['sampleValues'] = self.sample_values
        if self.upload_type is not None:
            result['uploadType'] = self.upload_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('clientFileName') is not None:
            self.client_file_name = m.get('clientFileName')
        if m.get('clientPath') is not None:
            self.client_path = m.get('clientPath')
        if m.get('fileType') is not None:
            self.file_type = m.get('fileType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sampleTag') is not None:
            self.sample_tag = m.get('sampleTag')
        if m.get('sampleType') is not None:
            self.sample_type = m.get('sampleType')
        if m.get('sampleValues') is not None:
            self.sample_values = m.get('sampleValues')
        if m.get('uploadType') is not None:
            self.upload_type = m.get('uploadType')
        return self


class CreateSampleResponseBodyResultObject(TeaModel):
    def __init__(self, community_count=None, fail_count=None, recall_probability=None, risk_density=None,
                 sample_count=None, success_count=None):
        self.community_count = community_count  # type: int
        self.fail_count = fail_count  # type: int
        self.recall_probability = recall_probability  # type: str
        self.risk_density = risk_density  # type: str
        self.sample_count = sample_count  # type: int
        self.success_count = success_count  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSampleResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.community_count is not None:
            result['communityCount'] = self.community_count
        if self.fail_count is not None:
            result['failCount'] = self.fail_count
        if self.recall_probability is not None:
            result['recallProbability'] = self.recall_probability
        if self.risk_density is not None:
            result['riskDensity'] = self.risk_density
        if self.sample_count is not None:
            result['sampleCount'] = self.sample_count
        if self.success_count is not None:
            result['successCount'] = self.success_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('communityCount') is not None:
            self.community_count = m.get('communityCount')
        if m.get('failCount') is not None:
            self.fail_count = m.get('failCount')
        if m.get('recallProbability') is not None:
            self.recall_probability = m.get('recallProbability')
        if m.get('riskDensity') is not None:
            self.risk_density = m.get('riskDensity')
        if m.get('sampleCount') is not None:
            self.sample_count = m.get('sampleCount')
        if m.get('successCount') is not None:
            self.success_count = m.get('successCount')
        return self


class CreateSampleResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: CreateSampleResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(CreateSampleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = CreateSampleResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class CreateSampleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSampleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSampleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSampleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSampleApiRequest(TeaModel):
    def __init__(self, data_type=None, data_value=None, lang=None, reg_id=None, sample_batch_type=None,
                 service_list=None):
        self.data_type = data_type  # type: str
        self.data_value = data_value  # type: str
        self.lang = lang  # type: str
        # regionId
        self.reg_id = reg_id  # type: str
        self.sample_batch_type = sample_batch_type  # type: str
        self.service_list = service_list  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSampleApiRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.data_value is not None:
            result['DataValue'] = self.data_value
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        if self.sample_batch_type is not None:
            result['SampleBatchType'] = self.sample_batch_type
        if self.service_list is not None:
            result['ServiceList'] = self.service_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('DataValue') is not None:
            self.data_value = m.get('DataValue')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        if m.get('SampleBatchType') is not None:
            self.sample_batch_type = m.get('SampleBatchType')
        if m.get('ServiceList') is not None:
            self.service_list = m.get('ServiceList')
        return self


class CreateSampleApiResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None):
        self.code = code  # type: int
        self.message = message  # type: str
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSampleApiResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateSampleApiResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSampleApiResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSampleApiResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSampleApiResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSampleDataRequest(TeaModel):
    def __init__(self, lang=None, description=None, encrypt_type=None, name=None, reg_id=None, risk_value=None,
                 scene=None, store_path=None, store_type=None):
        self.lang = lang  # type: str
        self.description = description  # type: str
        self.encrypt_type = encrypt_type  # type: str
        self.name = name  # type: str
        self.reg_id = reg_id  # type: str
        self.risk_value = risk_value  # type: str
        self.scene = scene  # type: str
        self.store_path = store_path  # type: str
        self.store_type = store_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSampleDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.description is not None:
            result['description'] = self.description
        if self.encrypt_type is not None:
            result['encryptType'] = self.encrypt_type
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.risk_value is not None:
            result['riskValue'] = self.risk_value
        if self.scene is not None:
            result['scene'] = self.scene
        if self.store_path is not None:
            result['storePath'] = self.store_path
        if self.store_type is not None:
            result['storeType'] = self.store_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('encryptType') is not None:
            self.encrypt_type = m.get('encryptType')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('riskValue') is not None:
            self.risk_value = m.get('riskValue')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        if m.get('storePath') is not None:
            self.store_path = m.get('storePath')
        if m.get('storeType') is not None:
            self.store_type = m.get('storeType')
        return self


class CreateSampleDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSampleDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateSampleDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSampleDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSampleDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSampleDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSimulationTaskRequest(TeaModel):
    def __init__(self, lang=None, data_source_config=None, data_source_type=None, end_time=None, event_code=None,
                 filters_str=None, reg_id=None, rules_str=None, run_task=None, start_time=None, task_name=None):
        self.lang = lang  # type: str
        self.data_source_config = data_source_config  # type: str
        self.data_source_type = data_source_type  # type: str
        # This parameter is required.
        self.end_time = end_time  # type: long
        # This parameter is required.
        self.event_code = event_code  # type: str
        self.filters_str = filters_str  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.rules_str = rules_str  # type: str
        # This parameter is required.
        self.run_task = run_task  # type: bool
        # This parameter is required.
        self.start_time = start_time  # type: long
        # This parameter is required.
        self.task_name = task_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSimulationTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_source_config is not None:
            result['dataSourceConfig'] = self.data_source_config
        if self.data_source_type is not None:
            result['dataSourceType'] = self.data_source_type
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.filters_str is not None:
            result['filtersStr'] = self.filters_str
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rules_str is not None:
            result['rulesStr'] = self.rules_str
        if self.run_task is not None:
            result['runTask'] = self.run_task
        if self.start_time is not None:
            result['startTime'] = self.start_time
        if self.task_name is not None:
            result['taskName'] = self.task_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataSourceConfig') is not None:
            self.data_source_config = m.get('dataSourceConfig')
        if m.get('dataSourceType') is not None:
            self.data_source_type = m.get('dataSourceType')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('filtersStr') is not None:
            self.filters_str = m.get('filtersStr')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('rulesStr') is not None:
            self.rules_str = m.get('rulesStr')
        if m.get('runTask') is not None:
            self.run_task = m.get('runTask')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        return self


class CreateSimulationTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSimulationTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateSimulationTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSimulationTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSimulationTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSimulationTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTaskRequest(TeaModel):
    def __init__(self, client_file_name=None, client_path=None, describe=None, lang=None, scene_name=None,
                 reg_id=None):
        self.client_file_name = client_file_name  # type: str
        self.client_path = client_path  # type: str
        self.describe = describe  # type: str
        self.lang = lang  # type: str
        self.scene_name = scene_name  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_file_name is not None:
            result['ClientFileName'] = self.client_file_name
        if self.client_path is not None:
            result['ClientPath'] = self.client_path
        if self.describe is not None:
            result['Describe'] = self.describe
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.scene_name is not None:
            result['SceneName'] = self.scene_name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientFileName') is not None:
            self.client_file_name = m.get('ClientFileName')
        if m.get('ClientPath') is not None:
            self.client_path = m.get('ClientPath')
        if m.get('Describe') is not None:
            self.describe = m.get('Describe')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('SceneName') is not None:
            self.scene_name = m.get('SceneName')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class CreateTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTemplateRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_code=None, event_name=None, logic_expression=None,
                 memo=None, reg_id=None, rule_actions=None, rule_expressions=None, rule_name=None, rule_status=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.logic_expression = logic_expression  # type: str
        self.memo = memo  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_actions = rule_actions  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTemplateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.memo is not None:
            result['memo'] = self.memo
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class CreateTemplateResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTemplateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class CreateTemplateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateTemplateResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateTemplateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAnalysisConditionFavoriteRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAnalysisConditionFavoriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteAnalysisConditionFavoriteResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAnalysisConditionFavoriteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteAnalysisConditionFavoriteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAnalysisConditionFavoriteResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAnalysisConditionFavoriteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAnalysisConditionFavoriteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAuthUserRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_code=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAuthUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteAuthUserResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAuthUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteAuthUserResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAuthUserResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAuthUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAuthUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteByPassShuntEventRequest(TeaModel):
    def __init__(self, lang=None, event_id=None, reg_id=None):
        self.lang = lang  # type: str
        self.event_id = event_id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteByPassShuntEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteByPassShuntEventResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteByPassShuntEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DeleteByPassShuntEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteByPassShuntEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteByPassShuntEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteByPassShuntEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteCustVariableRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, data_version=None, reg_id=None, variable_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.data_version = data_version  # type: long
        self.reg_id = reg_id  # type: str
        self.variable_id = variable_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteCustVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class DeleteCustVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteCustVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteCustVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteCustVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteCustVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteCustVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDataSourceRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDataSourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteDataSourceResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDataSourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteDataSourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDataSourceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDataSourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDataSourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteExpressionVariableRequest(TeaModel):
    def __init__(self, lang=None, data_version=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.data_version = data_version  # type: long
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteExpressionVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteExpressionVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteExpressionVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteExpressionVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteExpressionVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteExpressionVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteExpressionVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteFieldRequest(TeaModel):
    def __init__(self, lang=None, id=None, name=None, reg_id=None):
        self.lang = lang  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteFieldRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteFieldResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteFieldResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteFieldResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteFieldResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteFieldResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteFieldResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteNameListRequest(TeaModel):
    def __init__(self, lang=None, ids=None, reg_id=None):
        self.lang = lang  # type: str
        self.ids = ids  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteNameListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.ids is not None:
            result['ids'] = self.ids
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteNameListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteNameListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteNameListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteNameListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteNameListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteNameListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteNameListDataRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, variable_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.variable_id = variable_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteNameListDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class DeleteNameListDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteNameListDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteNameListDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteNameListDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteNameListDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteNameListDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteQueryVariableRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteQueryVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteQueryVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteQueryVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteQueryVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteQueryVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteQueryVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteQueryVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteRuleRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, reg_id=None, rule_id=None, rule_version_id=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_version_id = rule_version_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRuleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        return self


class DeleteRuleResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRuleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteRuleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteRuleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteRuleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSampleBatchRequest(TeaModel):
    def __init__(self, lang=None, ids=None, reg_id=None, versions=None):
        self.lang = lang  # type: str
        self.ids = ids  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.versions = versions  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSampleBatchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.ids is not None:
            result['ids'] = self.ids
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.versions is not None:
            result['versions'] = self.versions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('versions') is not None:
            self.versions = m.get('versions')
        return self


class DeleteSampleBatchResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSampleBatchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteSampleBatchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSampleBatchResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSampleBatchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSampleBatchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSampleDataRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        self.id = id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSampleDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteSampleDataResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSampleDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DeleteSampleDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSampleDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSampleDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSampleDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteTaskRequest(TeaModel):
    def __init__(self, lang=None, task_id=None, reg_id=None):
        self.lang = lang  # type: str
        self.task_id = task_id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DeleteTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAdvanceSearchLeftVariableListRequest(TeaModel):
    def __init__(self, lang=None, event_codes=None, reg_id=None, scene=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.scene = scene  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAdvanceSearchLeftVariableListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene is not None:
            result['scene'] = self.scene
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        return self


class DescribeAdvanceSearchLeftVariableListResponseBodyResultObject(TeaModel):
    def __init__(self, code=None, description=None, display_type=None, field_rank=None, field_type=None, id=None,
                 name=None, parent_name=None, source_type=None, title=None, type=None):
        self.code = code  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.field_rank = field_rank  # type: long
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAdvanceSearchLeftVariableListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeAdvanceSearchLeftVariableListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAdvanceSearchLeftVariableListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAdvanceSearchLeftVariableListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAdvanceSearchLeftVariableListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeAdvanceSearchLeftVariableListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAdvanceSearchLeftVariableListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAdvanceSearchLeftVariableListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAdvanceSearchLeftVariableListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAdvanceSearchPageListRequest(TeaModel):
    def __init__(self, lang=None, condition=None, current_page=None, event_begin_time=None, event_codes=None,
                 event_end_time=None, field_name=None, field_value=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.condition = condition  # type: str
        # This parameter is required.
        self.current_page = current_page  # type: long
        # This parameter is required.
        self.event_begin_time = event_begin_time  # type: long
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        # This parameter is required.
        self.event_end_time = event_end_time  # type: long
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        # This parameter is required.
        self.page_size = page_size  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAdvanceSearchPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.condition is not None:
            result['condition'] = self.condition
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_begin_time is not None:
            result['eventBeginTime'] = self.event_begin_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_end_time is not None:
            result['eventEndTime'] = self.event_end_time
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventBeginTime') is not None:
            self.event_begin_time = m.get('eventBeginTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventEndTime') is not None:
            self.event_end_time = m.get('eventEndTime')
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAdvanceSearchPageListResponseBodyResultObjectHeader(TeaModel):
    def __init__(self, field_name=None, field_title=None, is_default=None):
        self.field_name = field_name  # type: str
        self.field_title = field_title  # type: str
        self.is_default = is_default  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAdvanceSearchPageListResponseBodyResultObjectHeader, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_title is not None:
            result['fieldTitle'] = self.field_title
        if self.is_default is not None:
            result['isDefault'] = self.is_default
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldTitle') is not None:
            self.field_title = m.get('fieldTitle')
        if m.get('isDefault') is not None:
            self.is_default = m.get('isDefault')
        return self


class DescribeAdvanceSearchPageListResponseBodyResultObject(TeaModel):
    def __init__(self, current_page=None, data=None, header=None, page_size=None, total_item=None, total_page=None):
        self.current_page = current_page  # type: long
        self.data = data  # type: list[dict[str, any]]
        self.header = header  # type: list[DescribeAdvanceSearchPageListResponseBodyResultObjectHeader]
        self.page_size = page_size  # type: long
        self.total_item = total_item  # type: long
        self.total_page = total_page  # type: long

    def validate(self):
        if self.header:
            for k in self.header:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAdvanceSearchPageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.data is not None:
            result['data'] = self.data
        result['header'] = []
        if self.header is not None:
            for k in self.header:
                result['header'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('data') is not None:
            self.data = m.get('data')
        self.header = []
        if m.get('header') is not None:
            for k in m.get('header'):
                temp_model = DescribeAdvanceSearchPageListResponseBodyResultObjectHeader()
                self.header.append(temp_model.from_map(k))
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeAdvanceSearchPageListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeAdvanceSearchPageListResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeAdvanceSearchPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeAdvanceSearchPageListResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeAdvanceSearchPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAdvanceSearchPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAdvanceSearchPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAdvanceSearchPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAllDataSourceRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllDataSourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAllDataSourceResponseBodyResultObject(TeaModel):
    def __init__(self, event_code=None, event_name=None, id=None):
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllDataSourceResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class DescribeAllDataSourceResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAllDataSourceResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAllDataSourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAllDataSourceResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeAllDataSourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAllDataSourceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAllDataSourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAllDataSourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAllEventNameAndCodeRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllEventNameAndCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAllEventNameAndCodeResponseBodyResultObjectChildren(TeaModel):
    def __init__(self, create_type=None, event_code=None, event_name=None, event_type=None):
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllEventNameAndCodeResponseBodyResultObjectChildren, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_type is not None:
            result['eventType'] = self.event_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        return self


class DescribeAllEventNameAndCodeResponseBodyResultObject(TeaModel):
    def __init__(self, children=None, create_type=None, event_code=None, event_name=None, event_type=None):
        self.children = children  # type: list[DescribeAllEventNameAndCodeResponseBodyResultObjectChildren]
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str

    def validate(self):
        if self.children:
            for k in self.children:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAllEventNameAndCodeResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['children'] = []
        if self.children is not None:
            for k in self.children:
                result['children'].append(k.to_map() if k else None)
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_type is not None:
            result['eventType'] = self.event_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.children = []
        if m.get('children') is not None:
            for k in m.get('children'):
                temp_model = DescribeAllEventNameAndCodeResponseBodyResultObjectChildren()
                self.children.append(temp_model.from_map(k))
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        return self


class DescribeAllEventNameAndCodeResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAllEventNameAndCodeResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAllEventNameAndCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAllEventNameAndCodeResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeAllEventNameAndCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAllEventNameAndCodeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAllEventNameAndCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAllEventNameAndCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAllRootVariableRequest(TeaModel):
    def __init__(self, lang=None, source_ip=None, device_variable_ids=None, event_code=None,
                 expression_variable_ids=None, id=None, native_variable_ids=None, query_variable_ids=None, reg_id=None,
                 velocity_variable_ids=None):
        self.lang = lang  # type: str
        self.source_ip = source_ip  # type: str
        self.device_variable_ids = device_variable_ids  # type: str
        self.event_code = event_code  # type: str
        self.expression_variable_ids = expression_variable_ids  # type: str
        self.id = id  # type: long
        self.native_variable_ids = native_variable_ids  # type: str
        self.query_variable_ids = query_variable_ids  # type: str
        self.reg_id = reg_id  # type: str
        self.velocity_variable_ids = velocity_variable_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllRootVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.source_ip is not None:
            result['SourceIp'] = self.source_ip
        if self.device_variable_ids is not None:
            result['deviceVariableIds'] = self.device_variable_ids
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.expression_variable_ids is not None:
            result['expressionVariableIds'] = self.expression_variable_ids
        if self.id is not None:
            result['id'] = self.id
        if self.native_variable_ids is not None:
            result['nativeVariableIds'] = self.native_variable_ids
        if self.query_variable_ids is not None:
            result['queryVariableIds'] = self.query_variable_ids
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.velocity_variable_ids is not None:
            result['velocityVariableIds'] = self.velocity_variable_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('SourceIp') is not None:
            self.source_ip = m.get('SourceIp')
        if m.get('deviceVariableIds') is not None:
            self.device_variable_ids = m.get('deviceVariableIds')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('expressionVariableIds') is not None:
            self.expression_variable_ids = m.get('expressionVariableIds')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('nativeVariableIds') is not None:
            self.native_variable_ids = m.get('nativeVariableIds')
        if m.get('queryVariableIds') is not None:
            self.query_variable_ids = m.get('queryVariableIds')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('velocityVariableIds') is not None:
            self.velocity_variable_ids = m.get('velocityVariableIds')
        return self


class DescribeAllRootVariableResponseBodyResultObjectOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllRootVariableResponseBodyResultObjectOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeAllRootVariableResponseBodyResultObject(TeaModel):
    def __init__(self, code=None, description=None, display_type=None, favorite_flag=None, field_rank=None,
                 field_type=None, id=None, input_field_type=None, inputs=None, name=None, output_threshold=None,
                 source_type=None, title=None, type=None):
        self.code = code  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_rank = field_rank  # type: long
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.output_threshold = output_threshold  # type: DescribeAllRootVariableResponseBodyResultObjectOutputThreshold
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()

    def to_map(self):
        _map = super(DescribeAllRootVariableResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeAllRootVariableResponseBodyResultObjectOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeAllRootVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAllRootVariableResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAllRootVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAllRootVariableResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeAllRootVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAllRootVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAllRootVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAllRootVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAnalysisColumnFieldListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisColumnFieldListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAnalysisColumnFieldListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisColumnFieldListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeAnalysisColumnFieldListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAnalysisColumnFieldListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAnalysisColumnFieldListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAnalysisColumnFieldListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAnalysisColumnListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisColumnListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAnalysisColumnListResponseBodyResultObject(TeaModel):
    def __init__(self, event_code=None, event_name=None, is_default=None, variable_name=None, variable_title=None,
                 variable_type=None):
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.is_default = is_default  # type: bool
        self.variable_name = variable_name  # type: str
        self.variable_title = variable_title  # type: str
        self.variable_type = variable_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisColumnListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.is_default is not None:
            result['isDefault'] = self.is_default
        if self.variable_name is not None:
            result['variableName'] = self.variable_name
        if self.variable_title is not None:
            result['variableTitle'] = self.variable_title
        if self.variable_type is not None:
            result['variableType'] = self.variable_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('isDefault') is not None:
            self.is_default = m.get('isDefault')
        if m.get('variableName') is not None:
            self.variable_name = m.get('variableName')
        if m.get('variableTitle') is not None:
            self.variable_title = m.get('variableTitle')
        if m.get('variableType') is not None:
            self.variable_type = m.get('variableType')
        return self


class DescribeAnalysisColumnListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAnalysisColumnListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAnalysisColumnListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAnalysisColumnListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeAnalysisColumnListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAnalysisColumnListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAnalysisColumnListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAnalysisColumnListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAnalysisConditionFavoriteListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisConditionFavoriteListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAnalysisConditionFavoriteListResponseBodyResultObject(TeaModel):
    def __init__(self, condition=None, event_begin_time=None, event_codes=None, event_end_time=None,
                 field_name=None, field_value=None, id=None, name=None, type=None):
        self.condition = condition  # type: str
        self.event_begin_time = event_begin_time  # type: long
        self.event_codes = event_codes  # type: str
        self.event_end_time = event_end_time  # type: long
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisConditionFavoriteListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.condition is not None:
            result['condition'] = self.condition
        if self.event_begin_time is not None:
            result['eventBeginTime'] = self.event_begin_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_end_time is not None:
            result['eventEndTime'] = self.event_end_time
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('eventBeginTime') is not None:
            self.event_begin_time = m.get('eventBeginTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventEndTime') is not None:
            self.event_end_time = m.get('eventEndTime')
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeAnalysisConditionFavoriteListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAnalysisConditionFavoriteListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAnalysisConditionFavoriteListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAnalysisConditionFavoriteListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeAnalysisConditionFavoriteListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAnalysisConditionFavoriteListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAnalysisConditionFavoriteListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAnalysisConditionFavoriteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAnalysisExportTaskDownloadUrlRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisExportTaskDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject(TeaModel):
    def __init__(self, download_file_url=None, execute_time=None, status=None):
        self.download_file_url = download_file_url  # type: str
        self.execute_time = execute_time  # type: long
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_file_url is not None:
            result['downloadFileUrl'] = self.download_file_url
        if self.execute_time is not None:
            result['executeTime'] = self.execute_time
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('downloadFileUrl') is not None:
            self.download_file_url = m.get('downloadFileUrl')
        if m.get('executeTime') is not None:
            self.execute_time = m.get('executeTime')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeAnalysisExportTaskDownloadUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeAnalysisExportTaskDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeAnalysisExportTaskDownloadUrlResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeAnalysisExportTaskDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAnalysisExportTaskDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAnalysisExportTaskDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAnalysisExportTaskDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeApiRequest(TeaModel):
    def __init__(self, lang=None, api_id=None, api_region_id=None, api_type=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.api_id = api_id  # type: str
        # This parameter is required.
        self.api_region_id = api_region_id  # type: str
        # This parameter is required.
        self.api_type = api_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.api_id is not None:
            result['apiId'] = self.api_id
        if self.api_region_id is not None:
            result['apiRegionId'] = self.api_region_id
        if self.api_type is not None:
            result['apiType'] = self.api_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('apiId') is not None:
            self.api_id = m.get('apiId')
        if m.get('apiRegionId') is not None:
            self.api_region_id = m.get('apiRegionId')
        if m.get('apiType') is not None:
            self.api_type = m.get('apiType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeApiResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeApiResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeApiResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeApiResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeApiResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeApiGroupsRequest(TeaModel):
    def __init__(self, lang=None, api_region_id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.api_region_id = api_region_id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiGroupsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.api_region_id is not None:
            result['apiRegionId'] = self.api_region_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('apiRegionId') is not None:
            self.api_region_id = m.get('apiRegionId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeApiGroupsResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiGroupsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeApiGroupsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeApiGroupsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeApiGroupsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeApiGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeApiLimitRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiLimitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeApiLimitResponseBodyResultObject(TeaModel):
    def __init__(self, limit=None, max_total_item=None, total_item=None):
        self.limit = limit  # type: bool
        self.max_total_item = max_total_item  # type: long
        self.total_item = total_item  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiLimitResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['limit'] = self.limit
        if self.max_total_item is not None:
            result['maxTotalItem'] = self.max_total_item
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('limit') is not None:
            self.limit = m.get('limit')
        if m.get('maxTotalItem') is not None:
            self.max_total_item = m.get('maxTotalItem')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        return self


class DescribeApiLimitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeApiLimitResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeApiLimitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeApiLimitResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeApiLimitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeApiLimitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeApiLimitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeApiLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeApiNameListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiNameListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeApiNameListResponseBodyResultObject(TeaModel):
    def __init__(self, api_id=None, api_name=None):
        self.api_id = api_id  # type: str
        self.api_name = api_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiNameListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_id is not None:
            result['apiId'] = self.api_id
        if self.api_name is not None:
            result['apiName'] = self.api_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apiId') is not None:
            self.api_id = m.get('apiId')
        if m.get('apiName') is not None:
            self.api_name = m.get('apiName')
        return self


class DescribeApiNameListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeApiNameListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeApiNameListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeApiNameListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeApiNameListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeApiNameListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeApiNameListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeApiNameListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeApiVariableRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeApiVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApiVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeApiVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeApiVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeApiVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeApiVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeApisRequest(TeaModel):
    def __init__(self, lang=None, api_group_id=None, api_region_id=None, api_type=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.api_group_id = api_group_id  # type: str
        # This parameter is required.
        self.api_region_id = api_region_id  # type: str
        # This parameter is required.
        self.api_type = api_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApisRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.api_group_id is not None:
            result['apiGroupId'] = self.api_group_id
        if self.api_region_id is not None:
            result['apiRegionId'] = self.api_region_id
        if self.api_type is not None:
            result['apiType'] = self.api_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('apiGroupId') is not None:
            self.api_group_id = m.get('apiGroupId')
        if m.get('apiRegionId') is not None:
            self.api_region_id = m.get('apiRegionId')
        if m.get('apiType') is not None:
            self.api_type = m.get('apiType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeApisResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeApisResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeApisResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeApisResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeApisResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeApisResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAppKeyPageRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAppKeyPageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAppKeyPageResponseBodyResultObject(TeaModel):
    def __init__(self, android_sdk_url=None, android_sdk_version=None, app_key=None, gmt_create=None,
                 ios_sdk_url=None, ios_sdk_version=None, memo=None, sdk_items=None, used=None):
        self.android_sdk_url = android_sdk_url  # type: str
        self.android_sdk_version = android_sdk_version  # type: str
        self.app_key = app_key  # type: str
        self.gmt_create = gmt_create  # type: long
        self.ios_sdk_url = ios_sdk_url  # type: str
        self.ios_sdk_version = ios_sdk_version  # type: str
        self.memo = memo  # type: str
        self.sdk_items = sdk_items  # type: str
        self.used = used  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAppKeyPageResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.android_sdk_url is not None:
            result['androidSdkUrl'] = self.android_sdk_url
        if self.android_sdk_version is not None:
            result['androidSdkVersion'] = self.android_sdk_version
        if self.app_key is not None:
            result['appKey'] = self.app_key
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.ios_sdk_url is not None:
            result['iosSdkUrl'] = self.ios_sdk_url
        if self.ios_sdk_version is not None:
            result['iosSdkVersion'] = self.ios_sdk_version
        if self.memo is not None:
            result['memo'] = self.memo
        if self.sdk_items is not None:
            result['sdkItems'] = self.sdk_items
        if self.used is not None:
            result['used'] = self.used
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('androidSdkUrl') is not None:
            self.android_sdk_url = m.get('androidSdkUrl')
        if m.get('androidSdkVersion') is not None:
            self.android_sdk_version = m.get('androidSdkVersion')
        if m.get('appKey') is not None:
            self.app_key = m.get('appKey')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('iosSdkUrl') is not None:
            self.ios_sdk_url = m.get('iosSdkUrl')
        if m.get('iosSdkVersion') is not None:
            self.ios_sdk_version = m.get('iosSdkVersion')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('sdkItems') is not None:
            self.sdk_items = m.get('sdkItems')
        if m.get('used') is not None:
            self.used = m.get('used')
        return self


class DescribeAppKeyPageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeAppKeyPageResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAppKeyPageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAppKeyPageResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeAppKeyPageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAppKeyPageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAppKeyPageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAppKeyPageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuditConfigRequest(TeaModel):
    def __init__(self, lang=None, audit_relation_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.audit_relation_type = audit_relation_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuditConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.audit_relation_type is not None:
            result['auditRelationType'] = self.audit_relation_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('auditRelationType') is not None:
            self.audit_relation_type = m.get('auditRelationType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAuditConfigResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, result_object=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuditConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeAuditConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuditConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuditConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuditConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuditDetailsRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuditDetailsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAuditDetailsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, result_object=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuditDetailsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeAuditDetailsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuditDetailsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuditDetailsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuditDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuditPageListRequest(TeaModel):
    def __init__(self, lang=None, audit_status=None, current_page=None, event_code=None, page_size=None, reg_id=None,
                 rule_name=None):
        self.lang = lang  # type: str
        self.audit_status = audit_status  # type: str
        self.current_page = current_page  # type: str
        self.event_code = event_code  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_name = rule_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuditPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.audit_status is not None:
            result['auditStatus'] = self.audit_status
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('auditStatus') is not None:
            self.audit_status = m.get('auditStatus')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        return self


class DescribeAuditPageListResponseBody(TeaModel):
    def __init__(self, current_page=None, page_size=None, request_id=None, result_object=None, total_item=None,
                 total_page=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuditPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeAuditPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuditPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuditPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuditPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuthEventNameListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthEventNameListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAuthEventNameListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthEventNameListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeAuthEventNameListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuthEventNameListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuthEventNameListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuthEventNameListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuthRulePageListRequest(TeaModel):
    def __init__(self, lang=None, event_code=None, reg_id=None, rule_name=None, status=None):
        self.lang = lang  # type: str
        self.event_code = event_code  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.rule_name = rule_name  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthRulePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeAuthRulePageListResponseBodyResultObject(TeaModel):
    def __init__(self, console_rule_id=None, create_type=None, gmt_modified=None, id=None, memo=None, rule_id=None,
                 rule_name=None, rule_version_id=None, status=None, version=None):
        self.console_rule_id = console_rule_id  # type: long
        self.create_type = create_type  # type: str
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.memo = memo  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_version_id = rule_version_id  # type: long
        self.status = status  # type: str
        self.version = version  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthRulePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.memo is not None:
            result['memo'] = self.memo
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        if self.status is not None:
            result['status'] = self.status
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeAuthRulePageListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: long
        self.page_size = page_size  # type: long
        self.result_object = result_object  # type: list[DescribeAuthRulePageListResponseBodyResultObject]
        self.total_item = total_item  # type: long
        self.total_page = total_page  # type: long

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAuthRulePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAuthRulePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeAuthRulePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuthRulePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuthRulePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuthRulePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuthSceneListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthSceneListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAuthSceneListResponseBodyResultObject(TeaModel):
    def __init__(self, service_code=None):
        self.service_code = service_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthSceneListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        return self


class DescribeAuthSceneListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAuthSceneListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAuthSceneListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAuthSceneListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeAuthSceneListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuthSceneListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuthSceneListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuthSceneListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuthScenePageListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, scene_name=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.scene_name = scene_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthScenePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene_name is not None:
            result['sceneName'] = self.scene_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sceneName') is not None:
            self.scene_name = m.get('sceneName')
        return self


class DescribeAuthScenePageListResponseBodyResultObject(TeaModel):
    def __init__(self, common_rule_count=None, custom_rule_count=None, event_code=None, scene_name=None,
                 server_name=None):
        self.common_rule_count = common_rule_count  # type: long
        self.custom_rule_count = custom_rule_count  # type: long
        self.event_code = event_code  # type: str
        self.scene_name = scene_name  # type: str
        self.server_name = server_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthScenePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_rule_count is not None:
            result['commonRuleCount'] = self.common_rule_count
        if self.custom_rule_count is not None:
            result['customRuleCount'] = self.custom_rule_count
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.scene_name is not None:
            result['sceneName'] = self.scene_name
        if self.server_name is not None:
            result['serverName'] = self.server_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonRuleCount') is not None:
            self.common_rule_count = m.get('commonRuleCount')
        if m.get('customRuleCount') is not None:
            self.custom_rule_count = m.get('customRuleCount')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('sceneName') is not None:
            self.scene_name = m.get('sceneName')
        if m.get('serverName') is not None:
            self.server_name = m.get('serverName')
        return self


class DescribeAuthScenePageListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: long
        self.page_size = page_size  # type: long
        self.result_object = result_object  # type: list[DescribeAuthScenePageListResponseBodyResultObject]
        self.total_item = total_item  # type: long
        self.total_page = total_page  # type: long

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAuthScenePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAuthScenePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeAuthScenePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuthScenePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuthScenePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuthScenePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAuthStatusRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAuthStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAuthStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeAuthStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAuthStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAuthStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAuthStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAvgExecuteCostReportRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAvgExecuteCostReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeAvgExecuteCostReportResponseBodyResultObject(TeaModel):
    def __init__(self, ratio=None, value=None):
        self.ratio = ratio  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAvgExecuteCostReportResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ratio is not None:
            result['ratio'] = self.ratio
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ratio') is not None:
            self.ratio = m.get('ratio')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeAvgExecuteCostReportResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeAvgExecuteCostReportResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAvgExecuteCostReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeAvgExecuteCostReportResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeAvgExecuteCostReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAvgExecuteCostReportResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAvgExecuteCostReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAvgExecuteCostReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBasicSearchPageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, event_begin_time=None, event_codes=None, event_end_time=None,
                 field_name=None, field_value=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.current_page = current_page  # type: long
        # This parameter is required.
        self.event_begin_time = event_begin_time  # type: long
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        # This parameter is required.
        self.event_end_time = event_end_time  # type: long
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        # This parameter is required.
        self.page_size = page_size  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeBasicSearchPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_begin_time is not None:
            result['eventBeginTime'] = self.event_begin_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_end_time is not None:
            result['eventEndTime'] = self.event_end_time
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventBeginTime') is not None:
            self.event_begin_time = m.get('eventBeginTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventEndTime') is not None:
            self.event_end_time = m.get('eventEndTime')
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeBasicSearchPageListResponseBodyResultObjectHeader(TeaModel):
    def __init__(self, field_name=None, field_title=None, is_default=None):
        self.field_name = field_name  # type: str
        self.field_title = field_title  # type: str
        self.is_default = is_default  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeBasicSearchPageListResponseBodyResultObjectHeader, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_title is not None:
            result['fieldTitle'] = self.field_title
        if self.is_default is not None:
            result['isDefault'] = self.is_default
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldTitle') is not None:
            self.field_title = m.get('fieldTitle')
        if m.get('isDefault') is not None:
            self.is_default = m.get('isDefault')
        return self


class DescribeBasicSearchPageListResponseBodyResultObject(TeaModel):
    def __init__(self, current_page=None, data=None, header=None, page_size=None, total_item=None, total_page=None):
        self.current_page = current_page  # type: long
        self.data = data  # type: list[dict[str, any]]
        self.header = header  # type: list[DescribeBasicSearchPageListResponseBodyResultObjectHeader]
        self.page_size = page_size  # type: long
        self.total_item = total_item  # type: long
        self.total_page = total_page  # type: long

    def validate(self):
        if self.header:
            for k in self.header:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeBasicSearchPageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.data is not None:
            result['data'] = self.data
        result['header'] = []
        if self.header is not None:
            for k in self.header:
                result['header'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('data') is not None:
            self.data = m.get('data')
        self.header = []
        if m.get('header') is not None:
            for k in m.get('header'):
                temp_model = DescribeBasicSearchPageListResponseBodyResultObjectHeader()
                self.header.append(temp_model.from_map(k))
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeBasicSearchPageListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeBasicSearchPageListResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeBasicSearchPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeBasicSearchPageListResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeBasicSearchPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeBasicSearchPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeBasicSearchPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBasicSearchPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBasicStartRequest(TeaModel):
    def __init__(self, app_key=None, end_ds=None, reg_id=None, service=None, start_ds=None):
        self.app_key = app_key  # type: str
        self.end_ds = end_ds  # type: str
        self.reg_id = reg_id  # type: str
        self.service = service  # type: str
        self.start_ds = start_ds  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeBasicStartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_key is not None:
            result['appKey'] = self.app_key
        if self.end_ds is not None:
            result['endDs'] = self.end_ds
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.service is not None:
            result['service'] = self.service
        if self.start_ds is not None:
            result['startDs'] = self.start_ds
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('appKey') is not None:
            self.app_key = m.get('appKey')
        if m.get('endDs') is not None:
            self.end_ds = m.get('endDs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('service') is not None:
            self.service = m.get('service')
        if m.get('startDs') is not None:
            self.start_ds = m.get('startDs')
        return self


class DescribeBasicStartResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeBasicStartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeBasicStartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeBasicStartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeBasicStartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBasicStartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeByPassShuntEventRequest(TeaModel):
    def __init__(self, lang=None, event_id=None, reg_id=None):
        self.lang = lang  # type: str
        self.event_id = event_id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeByPassShuntEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeByPassShuntEventResponseBodyResultObject(TeaModel):
    def __init__(self, event_name=None):
        self.event_name = event_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeByPassShuntEventResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['eventName'] = self.event_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        return self


class DescribeByPassShuntEventResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeByPassShuntEventResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeByPassShuntEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeByPassShuntEventResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeByPassShuntEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeByPassShuntEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeByPassShuntEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeByPassShuntEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCustVariableConfigListRequest(TeaModel):
    def __init__(self, lang=None, biz_type=None, reg_id=None, time_type=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.biz_type = biz_type  # type: str
        self.reg_id = reg_id  # type: str
        self.time_type = time_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeCustVariableConfigListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.biz_type is not None:
            result['bizType'] = self.biz_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.time_type is not None:
            result['timeType'] = self.time_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('bizType') is not None:
            self.biz_type = m.get('bizType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('timeType') is not None:
            self.time_type = m.get('timeType')
        return self


class DescribeCustVariableConfigListResponseBodyResultObject(TeaModel):
    def __init__(self, config_key=None, config_value=None):
        self.config_key = config_key  # type: str
        self.config_value = config_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeCustVariableConfigListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_key is not None:
            result['configKey'] = self.config_key
        if self.config_value is not None:
            result['configValue'] = self.config_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('configKey') is not None:
            self.config_key = m.get('configKey')
        if m.get('configValue') is not None:
            self.config_value = m.get('configValue')
        return self


class DescribeCustVariableConfigListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeCustVariableConfigListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeCustVariableConfigListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeCustVariableConfigListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeCustVariableConfigListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeCustVariableConfigListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeCustVariableConfigListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCustVariableConfigListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCustVariableDetailRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeCustVariableDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeCustVariableDetailResponseBodyResultObject(TeaModel):
    def __init__(self, condition=None, data_version=None, description=None, event_codes=None,
                 history_value_type=None, id=None, object=None, outputs=None, subject=None, time_type=None, title=None, tw_count=None,
                 velocity_fc=None, velocity_tw=None):
        self.condition = condition  # type: str
        self.data_version = data_version  # type: long
        self.description = description  # type: str
        self.event_codes = event_codes  # type: str
        self.history_value_type = history_value_type  # type: str
        self.id = id  # type: long
        self.object = object  # type: str
        self.outputs = outputs  # type: str
        self.subject = subject  # type: str
        self.time_type = time_type  # type: str
        self.title = title  # type: str
        self.tw_count = tw_count  # type: str
        self.velocity_fc = velocity_fc  # type: str
        self.velocity_tw = velocity_tw  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeCustVariableDetailResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.condition is not None:
            result['condition'] = self.condition
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.description is not None:
            result['description'] = self.description
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.history_value_type is not None:
            result['historyValueType'] = self.history_value_type
        if self.id is not None:
            result['id'] = self.id
        if self.object is not None:
            result['object'] = self.object
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.subject is not None:
            result['subject'] = self.subject
        if self.time_type is not None:
            result['timeType'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        if self.tw_count is not None:
            result['twCount'] = self.tw_count
        if self.velocity_fc is not None:
            result['velocityFC'] = self.velocity_fc
        if self.velocity_tw is not None:
            result['velocityTW'] = self.velocity_tw
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('historyValueType') is not None:
            self.history_value_type = m.get('historyValueType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('object') is not None:
            self.object = m.get('object')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('subject') is not None:
            self.subject = m.get('subject')
        if m.get('timeType') is not None:
            self.time_type = m.get('timeType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('twCount') is not None:
            self.tw_count = m.get('twCount')
        if m.get('velocityFC') is not None:
            self.velocity_fc = m.get('velocityFC')
        if m.get('velocityTW') is not None:
            self.velocity_tw = m.get('velocityTW')
        return self


class DescribeCustVariableDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeCustVariableDetailResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeCustVariableDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeCustVariableDetailResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeCustVariableDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeCustVariableDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeCustVariableDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCustVariableDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCustVariablePageRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, current_page=None, description=None, event_code=None,
                 page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.current_page = current_page  # type: int
        self.description = description  # type: str
        self.event_code = event_code  # type: str
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeCustVariablePageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeCustVariablePageResponseBodyResultObject(TeaModel):
    def __init__(self, data_version=None, description=None, gmt_modified=None, id=None, name=None, status=None,
                 title=None):
        self.data_version = data_version  # type: long
        self.description = description  # type: str
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.name = name  # type: str
        self.status = status  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeCustVariablePageResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeCustVariablePageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeCustVariablePageResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeCustVariablePageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeCustVariablePageResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeCustVariablePageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeCustVariablePageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeCustVariablePageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCustVariablePageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDataSourceDataDownloadUrlRequest(TeaModel):
    def __init__(self, lang=None, data_source_id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.data_source_id = data_source_id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDataSourceDataDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_source_id is not None:
            result['dataSourceId'] = self.data_source_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataSourceId') is not None:
            self.data_source_id = m.get('dataSourceId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeDataSourceDataDownloadUrlResponseBodyResultObject(TeaModel):
    def __init__(self, download_file_url=None):
        self.download_file_url = download_file_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDataSourceDataDownloadUrlResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_file_url is not None:
            result['downloadFileUrl'] = self.download_file_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('downloadFileUrl') is not None:
            self.download_file_url = m.get('downloadFileUrl')
        return self


class DescribeDataSourceDataDownloadUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeDataSourceDataDownloadUrlResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeDataSourceDataDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeDataSourceDataDownloadUrlResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeDataSourceDataDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDataSourceDataDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDataSourceDataDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDataSourceDataDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDataSourceFieldsRequest(TeaModel):
    def __init__(self, lang=None, data_source_code=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.data_source_code = data_source_code  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDataSourceFieldsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_source_code is not None:
            result['dataSourceCode'] = self.data_source_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataSourceCode') is not None:
            self.data_source_code = m.get('dataSourceCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeDataSourceFieldsResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDataSourceFieldsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeDataSourceFieldsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDataSourceFieldsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDataSourceFieldsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDataSourceFieldsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDataSourcePageListRequest(TeaModel):
    def __init__(self, lang=None, source_ip=None, current_page=None, name=None, page_size=None, reg_id=None,
                 type=None):
        self.lang = lang  # type: str
        self.source_ip = source_ip  # type: str
        self.current_page = current_page  # type: long
        self.name = name  # type: str
        self.page_size = page_size  # type: long
        self.reg_id = reg_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDataSourcePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.source_ip is not None:
            result['SourceIp'] = self.source_ip
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('SourceIp') is not None:
            self.source_ip = m.get('SourceIp')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeDataSourcePageListResponseBodyResultObject(TeaModel):
    def __init__(self, creator=None, description=None, gmt_create=None, gmt_modified=None, id=None, modifier=None,
                 name=None, total=None, type=None):
        self.creator = creator  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.modifier = modifier  # type: str
        self.name = name  # type: str
        self.total = total  # type: long
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDataSourcePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creator is not None:
            result['creator'] = self.creator
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.modifier is not None:
            result['modifier'] = self.modifier
        if self.name is not None:
            result['name'] = self.name
        if self.total is not None:
            result['total'] = self.total
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('modifier') is not None:
            self.modifier = m.get('modifier')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('total') is not None:
            self.total = m.get('total')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeDataSourcePageListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeDataSourcePageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeDataSourcePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeDataSourcePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeDataSourcePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDataSourcePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDataSourcePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDataSourcePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDecisionResultFluctuationRequest(TeaModel):
    def __init__(self, lang=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDecisionResultFluctuationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeDecisionResultFluctuationResponseBodyResultObject(TeaModel):
    def __init__(self, status=None, today_num=None, within_seven_day_num=None, within_thirty_day_num=None,
                 within_three_day_num=None, yesterday_num=None):
        self.status = status  # type: str
        self.today_num = today_num  # type: long
        self.within_seven_day_num = within_seven_day_num  # type: str
        self.within_thirty_day_num = within_thirty_day_num  # type: str
        self.within_three_day_num = within_three_day_num  # type: str
        self.yesterday_num = yesterday_num  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDecisionResultFluctuationResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.status is not None:
            result['status'] = self.status
        if self.today_num is not None:
            result['todayNum'] = self.today_num
        if self.within_seven_day_num is not None:
            result['withinSevenDayNum'] = self.within_seven_day_num
        if self.within_thirty_day_num is not None:
            result['withinThirtyDayNum'] = self.within_thirty_day_num
        if self.within_three_day_num is not None:
            result['withinThreeDayNum'] = self.within_three_day_num
        if self.yesterday_num is not None:
            result['yesterdayNum'] = self.yesterday_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('todayNum') is not None:
            self.today_num = m.get('todayNum')
        if m.get('withinSevenDayNum') is not None:
            self.within_seven_day_num = m.get('withinSevenDayNum')
        if m.get('withinThirtyDayNum') is not None:
            self.within_thirty_day_num = m.get('withinThirtyDayNum')
        if m.get('withinThreeDayNum') is not None:
            self.within_three_day_num = m.get('withinThreeDayNum')
        if m.get('yesterdayNum') is not None:
            self.yesterday_num = m.get('yesterdayNum')
        return self


class DescribeDecisionResultFluctuationResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeDecisionResultFluctuationResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeDecisionResultFluctuationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeDecisionResultFluctuationResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeDecisionResultFluctuationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDecisionResultFluctuationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDecisionResultFluctuationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDecisionResultFluctuationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDecisionResultTrendRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDecisionResultTrendRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeDecisionResultTrendResponseBodyResultObjectSeriesData(TeaModel):
    def __init__(self, num=None, scale=None):
        self.num = num  # type: long
        self.scale = scale  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDecisionResultTrendResponseBodyResultObjectSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.num is not None:
            result['num'] = self.num
        if self.scale is not None:
            result['scale'] = self.scale
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('num') is not None:
            self.num = m.get('num')
        if m.get('scale') is not None:
            self.scale = m.get('scale')
        return self


class DescribeDecisionResultTrendResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[DescribeDecisionResultTrendResponseBodyResultObjectSeriesData]
        self.name = name  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeDecisionResultTrendResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeDecisionResultTrendResponseBodyResultObjectSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeDecisionResultTrendResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDecisionResultTrendResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeDecisionResultTrendResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeDecisionResultTrendResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeDecisionResultTrendResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeDecisionResultTrendResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeDecisionResultTrendResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeDecisionResultTrendResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeDecisionResultTrendResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeDecisionResultTrendResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeDecisionResultTrendResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeDecisionResultTrendResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeDecisionResultTrendResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDecisionResultTrendResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDecisionResultTrendResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDecisionResultTrendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDetailStartRequest(TeaModel):
    def __init__(self, app_key=None, end_ds=None, reg_id=None, service=None, start_ds=None):
        self.app_key = app_key  # type: str
        self.end_ds = end_ds  # type: str
        self.reg_id = reg_id  # type: str
        self.service = service  # type: str
        self.start_ds = start_ds  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDetailStartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_key is not None:
            result['appKey'] = self.app_key
        if self.end_ds is not None:
            result['endDs'] = self.end_ds
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.service is not None:
            result['service'] = self.service
        if self.start_ds is not None:
            result['startDs'] = self.start_ds
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('appKey') is not None:
            self.app_key = m.get('appKey')
        if m.get('endDs') is not None:
            self.end_ds = m.get('endDs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('service') is not None:
            self.service = m.get('service')
        if m.get('startDs') is not None:
            self.start_ds = m.get('startDs')
        return self


class DescribeDetailStartResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDetailStartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeDetailStartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDetailStartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDetailStartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDetailStartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDownloadUrlRequest(TeaModel):
    def __init__(self, file_type=None, lang=None, reg_id=None, task_id=None, type=None):
        self.file_type = file_type  # type: str
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.task_id = task_id  # type: long
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_type is not None:
            result['FileType'] = self.file_type
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileType') is not None:
            self.file_type = m.get('FileType')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeDownloadUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventBaseInfoByEventCodeRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_code=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventBaseInfoByEventCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields(TeaModel):
    def __init__(self, description=None, field_code=None, field_rank=None, field_source=None, field_type=None,
                 title=None):
        self.description = description  # type: str
        self.field_code = field_code  # type: str
        self.field_rank = field_rank  # type: str
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.field_code is not None:
            result['fieldCode'] = self.field_code
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('fieldCode') is not None:
            self.field_code = m.get('fieldCode')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails(TeaModel):
    def __init__(self, logic_expression=None, memo=None, rule_actions=None, rule_auth_type=None,
                 rule_expressions=None, rule_id=None, rule_name=None, rule_status=None):
        self.logic_expression = logic_expression  # type: str
        self.memo = memo  # type: str
        self.rule_actions = rule_actions  # type: str
        self.rule_auth_type = rule_auth_type  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.memo is not None:
            result['memo'] = self.memo
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_auth_type is not None:
            result['ruleAuthType'] = self.rule_auth_type
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleAuthType') is not None:
            self.rule_auth_type = m.get('ruleAuthType')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeEventBaseInfoByEventCodeResponseBodyResultObject(TeaModel):
    def __init__(self, biz_version=None, event_code=None, event_name=None, event_stauts=None, input_fields=None,
                 memo=None, rule_details=None, template_code=None, template_name=None, template_type=None):
        self.biz_version = biz_version  # type: int
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_stauts = event_stauts  # type: str
        self.input_fields = input_fields  # type: list[DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields]
        self.memo = memo  # type: str
        self.rule_details = rule_details  # type: list[DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails]
        self.template_code = template_code  # type: str
        self.template_name = template_name  # type: str
        self.template_type = template_type  # type: str

    def validate(self):
        if self.input_fields:
            for k in self.input_fields:
                if k:
                    k.validate()
        if self.rule_details:
            for k in self.rule_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventBaseInfoByEventCodeResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_version is not None:
            result['bizVersion'] = self.biz_version
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_stauts is not None:
            result['eventStauts'] = self.event_stauts
        result['inputFields'] = []
        if self.input_fields is not None:
            for k in self.input_fields:
                result['inputFields'].append(k.to_map() if k else None)
        if self.memo is not None:
            result['memo'] = self.memo
        result['ruleDetails'] = []
        if self.rule_details is not None:
            for k in self.rule_details:
                result['ruleDetails'].append(k.to_map() if k else None)
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.template_name is not None:
            result['templateName'] = self.template_name
        if self.template_type is not None:
            result['templateType'] = self.template_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bizVersion') is not None:
            self.biz_version = m.get('bizVersion')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventStauts') is not None:
            self.event_stauts = m.get('eventStauts')
        self.input_fields = []
        if m.get('inputFields') is not None:
            for k in m.get('inputFields'):
                temp_model = DescribeEventBaseInfoByEventCodeResponseBodyResultObjectInputFields()
                self.input_fields.append(temp_model.from_map(k))
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        self.rule_details = []
        if m.get('ruleDetails') is not None:
            for k in m.get('ruleDetails'):
                temp_model = DescribeEventBaseInfoByEventCodeResponseBodyResultObjectRuleDetails()
                self.rule_details.append(temp_model.from_map(k))
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        return self


class DescribeEventBaseInfoByEventCodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeEventBaseInfoByEventCodeResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeEventBaseInfoByEventCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeEventBaseInfoByEventCodeResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeEventBaseInfoByEventCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventBaseInfoByEventCodeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventBaseInfoByEventCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventBaseInfoByEventCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventCountRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventCountRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventCountResponseBodyResultObject(TeaModel):
    def __init__(self, limit=None, max_total_item=None, total_item=None):
        self.limit = limit  # type: bool
        self.max_total_item = max_total_item  # type: int
        self.total_item = total_item  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventCountResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['limit'] = self.limit
        if self.max_total_item is not None:
            result['maxTotalItem'] = self.max_total_item
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('limit') is not None:
            self.limit = m.get('limit')
        if m.get('maxTotalItem') is not None:
            self.max_total_item = m.get('maxTotalItem')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        return self


class DescribeEventCountResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeEventCountResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeEventCountResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeEventCountResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeEventCountResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventCountResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventCountResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventDetailByRequestIdRequest(TeaModel):
    def __init__(self, lang=None, event_code=None, event_time=None, reg_id=None, s_request_id=None):
        self.lang = lang  # type: str
        self.event_code = event_code  # type: str
        self.event_time = event_time  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.s_request_id = s_request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventDetailByRequestIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_time is not None:
            result['eventTime'] = self.event_time
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.s_request_id is not None:
            result['sRequestId'] = self.s_request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventTime') is not None:
            self.event_time = m.get('eventTime')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sRequestId') is not None:
            self.s_request_id = m.get('sRequestId')
        return self


class DescribeEventDetailByRequestIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventDetailByRequestIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeEventDetailByRequestIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventDetailByRequestIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventDetailByRequestIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventDetailByRequestIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventLogDetailRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, req_id_by_log=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.req_id_by_log = req_id_by_log  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventLogDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.req_id_by_log is not None:
            result['reqIdByLog'] = self.req_id_by_log
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('reqIdByLog') is not None:
            self.req_id_by_log = m.get('reqIdByLog')
        return self


class DescribeEventLogDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventLogDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeEventLogDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventLogDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventLogDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventLogDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventLogPageRequest(TeaModel):
    def __init__(self, lang=None, account_id_prp=None, begin_time=None, condition_1al=None, condition_2al=None,
                 condition_3al=None, current_page=None, device_type_lrp=None, email_prp=None, end_time=None, fail_reason_lrp=None,
                 ip_prp=None, login_result_arp=None, login_type_lrp=None, mac_prp=None, mobile_prp=None,
                 nick_name_prp=None, operate_source_lrp=None, page_size=None, refer_prp=None, reg_id=None, register_ip_prp=None,
                 req_id_pbs=None, score_ebs=None, score_sbs=None, service_abs=None, tags_lbs=None, umid_pdi=None,
                 user_agent_prp=None, user_name_type_lrp=None):
        self.lang = lang  # type: str
        self.account_id_prp = account_id_prp  # type: str
        self.begin_time = begin_time  # type: long
        self.condition_1al = condition_1al  # type: str
        self.condition_2al = condition_2al  # type: str
        self.condition_3al = condition_3al  # type: str
        self.current_page = current_page  # type: int
        self.device_type_lrp = device_type_lrp  # type: str
        self.email_prp = email_prp  # type: str
        self.end_time = end_time  # type: long
        self.fail_reason_lrp = fail_reason_lrp  # type: str
        self.ip_prp = ip_prp  # type: str
        self.login_result_arp = login_result_arp  # type: str
        self.login_type_lrp = login_type_lrp  # type: str
        self.mac_prp = mac_prp  # type: str
        self.mobile_prp = mobile_prp  # type: str
        self.nick_name_prp = nick_name_prp  # type: str
        self.operate_source_lrp = operate_source_lrp  # type: str
        self.page_size = page_size  # type: int
        self.refer_prp = refer_prp  # type: str
        self.reg_id = reg_id  # type: str
        self.register_ip_prp = register_ip_prp  # type: str
        self.req_id_pbs = req_id_pbs  # type: str
        self.score_ebs = score_ebs  # type: int
        self.score_sbs = score_sbs  # type: int
        self.service_abs = service_abs  # type: str
        self.tags_lbs = tags_lbs  # type: str
        self.umid_pdi = umid_pdi  # type: str
        self.user_agent_prp = user_agent_prp  # type: str
        self.user_name_type_lrp = user_name_type_lrp  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventLogPageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.account_id_prp is not None:
            result['accountIdPRP'] = self.account_id_prp
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.condition_1al is not None:
            result['condition1AL'] = self.condition_1al
        if self.condition_2al is not None:
            result['condition2AL'] = self.condition_2al
        if self.condition_3al is not None:
            result['condition3AL'] = self.condition_3al
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.device_type_lrp is not None:
            result['deviceTypeLRP'] = self.device_type_lrp
        if self.email_prp is not None:
            result['emailPRP'] = self.email_prp
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.fail_reason_lrp is not None:
            result['failReasonLRP'] = self.fail_reason_lrp
        if self.ip_prp is not None:
            result['ipPRP'] = self.ip_prp
        if self.login_result_arp is not None:
            result['loginResultARP'] = self.login_result_arp
        if self.login_type_lrp is not None:
            result['loginTypeLRP'] = self.login_type_lrp
        if self.mac_prp is not None:
            result['macPRP'] = self.mac_prp
        if self.mobile_prp is not None:
            result['mobilePRP'] = self.mobile_prp
        if self.nick_name_prp is not None:
            result['nickNamePRP'] = self.nick_name_prp
        if self.operate_source_lrp is not None:
            result['operateSourceLRP'] = self.operate_source_lrp
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.refer_prp is not None:
            result['referPRP'] = self.refer_prp
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.register_ip_prp is not None:
            result['registerIpPRP'] = self.register_ip_prp
        if self.req_id_pbs is not None:
            result['reqIdPBS'] = self.req_id_pbs
        if self.score_ebs is not None:
            result['scoreEBS'] = self.score_ebs
        if self.score_sbs is not None:
            result['scoreSBS'] = self.score_sbs
        if self.service_abs is not None:
            result['serviceABS'] = self.service_abs
        if self.tags_lbs is not None:
            result['tagsLBS'] = self.tags_lbs
        if self.umid_pdi is not None:
            result['umidPDI'] = self.umid_pdi
        if self.user_agent_prp is not None:
            result['userAgentPRP'] = self.user_agent_prp
        if self.user_name_type_lrp is not None:
            result['userNameTypeLRP'] = self.user_name_type_lrp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('accountIdPRP') is not None:
            self.account_id_prp = m.get('accountIdPRP')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('condition1AL') is not None:
            self.condition_1al = m.get('condition1AL')
        if m.get('condition2AL') is not None:
            self.condition_2al = m.get('condition2AL')
        if m.get('condition3AL') is not None:
            self.condition_3al = m.get('condition3AL')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('deviceTypeLRP') is not None:
            self.device_type_lrp = m.get('deviceTypeLRP')
        if m.get('emailPRP') is not None:
            self.email_prp = m.get('emailPRP')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('failReasonLRP') is not None:
            self.fail_reason_lrp = m.get('failReasonLRP')
        if m.get('ipPRP') is not None:
            self.ip_prp = m.get('ipPRP')
        if m.get('loginResultARP') is not None:
            self.login_result_arp = m.get('loginResultARP')
        if m.get('loginTypeLRP') is not None:
            self.login_type_lrp = m.get('loginTypeLRP')
        if m.get('macPRP') is not None:
            self.mac_prp = m.get('macPRP')
        if m.get('mobilePRP') is not None:
            self.mobile_prp = m.get('mobilePRP')
        if m.get('nickNamePRP') is not None:
            self.nick_name_prp = m.get('nickNamePRP')
        if m.get('operateSourceLRP') is not None:
            self.operate_source_lrp = m.get('operateSourceLRP')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('referPRP') is not None:
            self.refer_prp = m.get('referPRP')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('registerIpPRP') is not None:
            self.register_ip_prp = m.get('registerIpPRP')
        if m.get('reqIdPBS') is not None:
            self.req_id_pbs = m.get('reqIdPBS')
        if m.get('scoreEBS') is not None:
            self.score_ebs = m.get('scoreEBS')
        if m.get('scoreSBS') is not None:
            self.score_sbs = m.get('scoreSBS')
        if m.get('serviceABS') is not None:
            self.service_abs = m.get('serviceABS')
        if m.get('tagsLBS') is not None:
            self.tags_lbs = m.get('tagsLBS')
        if m.get('umidPDI') is not None:
            self.umid_pdi = m.get('umidPDI')
        if m.get('userAgentPRP') is not None:
            self.user_agent_prp = m.get('userAgentPRP')
        if m.get('userNameTypeLRP') is not None:
            self.user_name_type_lrp = m.get('userNameTypeLRP')
        return self


class DescribeEventLogPageResponseBodyResultObject(TeaModel):
    def __init__(self, account_id=None, email=None, ip=None, mobile=None, nick_name=None, request_id=None, score=None,
                 service=None, tags=None, timestamp=None, umid=None):
        self.account_id = account_id  # type: str
        self.email = email  # type: str
        self.ip = ip  # type: str
        self.mobile = mobile  # type: str
        self.nick_name = nick_name  # type: str
        self.request_id = request_id  # type: str
        self.score = score  # type: str
        self.service = service  # type: str
        self.tags = tags  # type: str
        self.timestamp = timestamp  # type: str
        self.umid = umid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventLogPageResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['accountId'] = self.account_id
        if self.email is not None:
            result['email'] = self.email
        if self.ip is not None:
            result['ip'] = self.ip
        if self.mobile is not None:
            result['mobile'] = self.mobile
        if self.nick_name is not None:
            result['nickName'] = self.nick_name
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.score is not None:
            result['score'] = self.score
        if self.service is not None:
            result['service'] = self.service
        if self.tags is not None:
            result['tags'] = self.tags
        if self.timestamp is not None:
            result['timestamp'] = self.timestamp
        if self.umid is not None:
            result['umid'] = self.umid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('accountId') is not None:
            self.account_id = m.get('accountId')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('ip') is not None:
            self.ip = m.get('ip')
        if m.get('mobile') is not None:
            self.mobile = m.get('mobile')
        if m.get('nickName') is not None:
            self.nick_name = m.get('nickName')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('score') is not None:
            self.score = m.get('score')
        if m.get('service') is not None:
            self.service = m.get('service')
        if m.get('tags') is not None:
            self.tags = m.get('tags')
        if m.get('timestamp') is not None:
            self.timestamp = m.get('timestamp')
        if m.get('umid') is not None:
            self.umid = m.get('umid')
        return self


class DescribeEventLogPageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeEventLogPageResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventLogPageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeEventLogPageResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeEventLogPageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventLogPageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventLogPageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventLogPageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventPageListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, current_page=None, event_code=None, event_name=None,
                 event_status=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.current_page = current_page  # type: int
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_status = event_status  # type: str
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_status is not None:
            result['eventStatus'] = self.event_status
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventStatus') is not None:
            self.event_status = m.get('eventStatus')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventPageListResponseBodyResultObjectChildren(TeaModel):
    def __init__(self, event_code=None, event_name=None, event_status=None, event_type=None, gmt_create=None,
                 gmt_modified=None, id=None, rule_count=None):
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_status = event_status  # type: str
        self.event_type = event_type  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.rule_count = rule_count  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventPageListResponseBodyResultObjectChildren, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_status is not None:
            result['eventStatus'] = self.event_status
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.rule_count is not None:
            result['ruleCount'] = self.rule_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventStatus') is not None:
            self.event_status = m.get('eventStatus')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('ruleCount') is not None:
            self.rule_count = m.get('ruleCount')
        return self


class DescribeEventPageListResponseBodyResultObject(TeaModel):
    def __init__(self, children=None, event_code=None, event_name=None, event_status=None, event_type=None,
                 gmt_create=None, gmt_modified=None, id=None, rule_count=None, template_code=None, template_name=None,
                 template_type=None, user_count=None):
        self.children = children  # type: list[DescribeEventPageListResponseBodyResultObjectChildren]
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_status = event_status  # type: str
        self.event_type = event_type  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.rule_count = rule_count  # type: int
        self.template_code = template_code  # type: str
        self.template_name = template_name  # type: str
        self.template_type = template_type  # type: str
        self.user_count = user_count  # type: int

    def validate(self):
        if self.children:
            for k in self.children:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventPageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['children'] = []
        if self.children is not None:
            for k in self.children:
                result['children'].append(k.to_map() if k else None)
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_status is not None:
            result['eventStatus'] = self.event_status
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.rule_count is not None:
            result['ruleCount'] = self.rule_count
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.template_name is not None:
            result['templateName'] = self.template_name
        if self.template_type is not None:
            result['templateType'] = self.template_type
        if self.user_count is not None:
            result['userCount'] = self.user_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.children = []
        if m.get('children') is not None:
            for k in m.get('children'):
                temp_model = DescribeEventPageListResponseBodyResultObjectChildren()
                self.children.append(temp_model.from_map(k))
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventStatus') is not None:
            self.event_status = m.get('eventStatus')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('ruleCount') is not None:
            self.rule_count = m.get('ruleCount')
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        if m.get('userCount') is not None:
            self.user_count = m.get('userCount')
        return self


class DescribeEventPageListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeEventPageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeEventPageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeEventPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventResultBarChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventResultBarChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventResultBarChartResponseBodyResultObjectSeriesData(TeaModel):
    def __init__(self, num=None, scale=None):
        self.num = num  # type: long
        self.scale = scale  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventResultBarChartResponseBodyResultObjectSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.num is not None:
            result['num'] = self.num
        if self.scale is not None:
            result['scale'] = self.scale
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('num') is not None:
            self.num = m.get('num')
        if m.get('scale') is not None:
            self.scale = m.get('scale')
        return self


class DescribeEventResultBarChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None, stack=None):
        self.data = data  # type: list[DescribeEventResultBarChartResponseBodyResultObjectSeriesData]
        self.name = name  # type: str
        self.stack = stack  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventResultBarChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.stack is not None:
            result['stack'] = self.stack
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeEventResultBarChartResponseBodyResultObjectSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('stack') is not None:
            self.stack = m.get('stack')
        return self


class DescribeEventResultBarChartResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventResultBarChartResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeEventResultBarChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeEventResultBarChartResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeEventResultBarChartResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeEventResultBarChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeEventResultBarChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeEventResultBarChartResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeEventResultBarChartResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeEventResultBarChartResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeEventResultBarChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeEventResultBarChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeEventResultBarChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventResultBarChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventResultBarChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventResultBarChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventResultListRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, current_page=None, end_time=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        self.current_page = current_page  # type: long
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.page_size = page_size  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventResultListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventResultListResponseBodyResultObject(TeaModel):
    def __init__(self, event_code=None, event_name=None, pass_num=None, pending_num=None, reject_num=None,
                 total_num=None):
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.pass_num = pass_num  # type: long
        self.pending_num = pending_num  # type: long
        self.reject_num = reject_num  # type: long
        self.total_num = total_num  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventResultListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.pass_num is not None:
            result['passNum'] = self.pass_num
        if self.pending_num is not None:
            result['pendingNum'] = self.pending_num
        if self.reject_num is not None:
            result['rejectNum'] = self.reject_num
        if self.total_num is not None:
            result['totalNum'] = self.total_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('passNum') is not None:
            self.pass_num = m.get('passNum')
        if m.get('pendingNum') is not None:
            self.pending_num = m.get('pendingNum')
        if m.get('rejectNum') is not None:
            self.reject_num = m.get('rejectNum')
        if m.get('totalNum') is not None:
            self.total_num = m.get('totalNum')
        return self


class DescribeEventResultListResponseBody(TeaModel):
    def __init__(self, code=None, current_page=None, http_status_code=None, message=None, page_size=None,
                 request_id=None, result_object=None, success=None, total_item=None, total_page=None):
        self.code = code  # type: str
        self.current_page = current_page  # type: long
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.page_size = page_size  # type: long
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeEventResultListResponseBodyResultObject]
        self.success = success  # type: bool
        self.total_item = total_item  # type: long
        self.total_page = total_page  # type: long

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventResultListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeEventResultListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeEventResultListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventResultListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventResultListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventResultListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventTaskHistoryRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTaskHistoryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventTaskHistoryResponseBodyResultObject(TeaModel):
    def __init__(self, task_code=None, task_name=None, task_status=None, url=None):
        self.task_code = task_code  # type: str
        self.task_name = task_name  # type: str
        self.task_status = task_status  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTaskHistoryResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.task_code is not None:
            result['taskCode'] = self.task_code
        if self.task_name is not None:
            result['taskName'] = self.task_name
        if self.task_status is not None:
            result['taskStatus'] = self.task_status
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('taskCode') is not None:
            self.task_code = m.get('taskCode')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        if m.get('taskStatus') is not None:
            self.task_status = m.get('taskStatus')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class DescribeEventTaskHistoryResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeEventTaskHistoryResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventTaskHistoryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeEventTaskHistoryResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeEventTaskHistoryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventTaskHistoryResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventTaskHistoryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventTaskHistoryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventTotalCountReportRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTotalCountReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventTotalCountReportResponseBodyResultObject(TeaModel):
    def __init__(self, ratio=None, value=None):
        self.ratio = ratio  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTotalCountReportResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ratio is not None:
            result['ratio'] = self.ratio
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ratio') is not None:
            self.ratio = m.get('ratio')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeEventTotalCountReportResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeEventTotalCountReportResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeEventTotalCountReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeEventTotalCountReportResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeEventTotalCountReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventTotalCountReportResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventTotalCountReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventTotalCountReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventUploadPolicyRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventUploadPolicyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeEventUploadPolicyResponseBody(TeaModel):
    def __init__(self, access_id=None, host=None, key=None, policy=None, request_id=None, signature=None,
                 sts_token=None):
        self.access_id = access_id  # type: str
        self.host = host  # type: str
        self.key = key  # type: str
        self.policy = policy  # type: str
        self.request_id = request_id  # type: str
        self.signature = signature  # type: str
        self.sts_token = sts_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventUploadPolicyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.host is not None:
            result['Host'] = self.host
        if self.key is not None:
            result['Key'] = self.key
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.sts_token is not None:
            result['StsToken'] = self.sts_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('StsToken') is not None:
            self.sts_token = m.get('StsToken')
        return self


class DescribeEventUploadPolicyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventUploadPolicyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventUploadPolicyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventUploadPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventVariableListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, filter_dto=None, ref_obj_id=None, ref_obj_type=None, reg_id=None,
                 type=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.filter_dto = filter_dto  # type: str
        # This parameter is required.
        self.ref_obj_id = ref_obj_id  # type: str
        # This parameter is required.
        self.ref_obj_type = ref_obj_type  # type: str
        self.reg_id = reg_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.filter_dto is not None:
            result['filterDTO'] = self.filter_dto
        if self.ref_obj_id is not None:
            result['refObjId'] = self.ref_obj_id
        if self.ref_obj_type is not None:
            result['refObjType'] = self.ref_obj_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('filterDTO') is not None:
            self.filter_dto = m.get('filterDTO')
        if m.get('refObjId') is not None:
            self.ref_obj_id = m.get('refObjId')
        if m.get('refObjType') is not None:
            self.ref_obj_type = m.get('refObjType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectActions(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectActions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectActionsOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectActionsVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectDeviceVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectDeviceVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectDeviceVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectDeviceVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectExpressionVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectExpressionVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectExpressionVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectExpressionVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectFavoriteVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectFavoriteVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectFavoriteVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectMiddleVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectMiddleVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectMiddleVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectMiddleVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectModelVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectModelVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectModelVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectModelVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectNameList(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNameList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectNameListOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectNameListVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctionsVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectNativeVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectNativeVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectNativeVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectNativeVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectQueryVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectQueryVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectQueryVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectQueryVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectSelfVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectSelfVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectSelfVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectSelfVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectSysVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectSysVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectSysVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectSysVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold(TeaModel):
    def __init__(self, max_value=None, min_value=None):
        self.max_value = max_value  # type: float
        self.min_value = min_value  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_value is not None:
            result['maxValue'] = self.max_value
        if self.min_value is not None:
            result['minValue'] = self.min_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('maxValue') is not None:
            self.max_value = m.get('maxValue')
        if m.get('minValue') is not None:
            self.min_value = m.get('minValue')
        return self


class DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity(TeaModel):
    def __init__(self, iv=None):
        self.iv = iv  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.iv is not None:
            result['iv'] = self.iv
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('iv') is not None:
            self.iv = m.get('iv')
        return self


class DescribeEventVariableListResponseBodyResultObjectVelocityVariables(TeaModel):
    def __init__(self, code=None, data_display=None, define_id=None, description=None, display_type=None,
                 expression_title=None, favorite_flag=None, field_detail=None, field_rank=None, field_source=None, field_type=None,
                 id=None, input_field_type=None, input_required=None, inputs=None, name=None, outlier=None,
                 output_threshold=None, parent_name=None, source_type=None, title=None, type=None, variable_velocity=None,
                 x_label=None, y_label=None):
        self.code = code  # type: str
        self.data_display = data_display  # type: str
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.display_type = display_type  # type: str
        self.expression_title = expression_title  # type: str
        self.favorite_flag = favorite_flag  # type: bool
        self.field_detail = field_detail  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.input_field_type = input_field_type  # type: str
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.name = name  # type: str
        self.outlier = outlier  # type: str
        self.output_threshold = output_threshold  # type: DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold
        self.parent_name = parent_name  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.variable_velocity = variable_velocity  # type: DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        if self.output_threshold:
            self.output_threshold.validate()
        if self.variable_velocity:
            self.variable_velocity.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObjectVelocityVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.display_type is not None:
            result['displayType'] = self.display_type
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.favorite_flag is not None:
            result['favoriteFlag'] = self.favorite_flag
        if self.field_detail is not None:
            result['fieldDetail'] = self.field_detail
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.input_field_type is not None:
            result['inputFieldType'] = self.input_field_type
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.name is not None:
            result['name'] = self.name
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.output_threshold is not None:
            result['outputThreshold'] = self.output_threshold.to_map()
        if self.parent_name is not None:
            result['parentName'] = self.parent_name
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.variable_velocity is not None:
            result['variableVelocity'] = self.variable_velocity.to_map()
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('displayType') is not None:
            self.display_type = m.get('displayType')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('favoriteFlag') is not None:
            self.favorite_flag = m.get('favoriteFlag')
        if m.get('fieldDetail') is not None:
            self.field_detail = m.get('fieldDetail')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputFieldType') is not None:
            self.input_field_type = m.get('inputFieldType')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputThreshold') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectVelocityVariablesOutputThreshold()
            self.output_threshold = temp_model.from_map(m['outputThreshold'])
        if m.get('parentName') is not None:
            self.parent_name = m.get('parentName')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('variableVelocity') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObjectVelocityVariablesVariableVelocity()
            self.variable_velocity = temp_model.from_map(m['variableVelocity'])
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeEventVariableListResponseBodyResultObject(TeaModel):
    def __init__(self, actions=None, device_variables=None, expression_variables=None, favorite_variables=None,
                 middle_variables=None, model_variables=None, name_list=None, native_variable_functions=None, native_variables=None,
                 query_variables=None, self_variables=None, sys_variables=None, third_variables=None, velocity_variables=None):
        self.actions = actions  # type: list[DescribeEventVariableListResponseBodyResultObjectActions]
        self.device_variables = device_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectDeviceVariables]
        self.expression_variables = expression_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectExpressionVariables]
        self.favorite_variables = favorite_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectFavoriteVariables]
        self.middle_variables = middle_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectMiddleVariables]
        self.model_variables = model_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectModelVariables]
        self.name_list = name_list  # type: list[DescribeEventVariableListResponseBodyResultObjectNameList]
        self.native_variable_functions = native_variable_functions  # type: list[DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions]
        self.native_variables = native_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectNativeVariables]
        self.query_variables = query_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectQueryVariables]
        self.self_variables = self_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectSelfVariables]
        self.sys_variables = sys_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectSysVariables]
        self.third_variables = third_variables  # type: dict[str, any]
        self.velocity_variables = velocity_variables  # type: list[DescribeEventVariableListResponseBodyResultObjectVelocityVariables]

    def validate(self):
        if self.actions:
            for k in self.actions:
                if k:
                    k.validate()
        if self.device_variables:
            for k in self.device_variables:
                if k:
                    k.validate()
        if self.expression_variables:
            for k in self.expression_variables:
                if k:
                    k.validate()
        if self.favorite_variables:
            for k in self.favorite_variables:
                if k:
                    k.validate()
        if self.middle_variables:
            for k in self.middle_variables:
                if k:
                    k.validate()
        if self.model_variables:
            for k in self.model_variables:
                if k:
                    k.validate()
        if self.name_list:
            for k in self.name_list:
                if k:
                    k.validate()
        if self.native_variable_functions:
            for k in self.native_variable_functions:
                if k:
                    k.validate()
        if self.native_variables:
            for k in self.native_variables:
                if k:
                    k.validate()
        if self.query_variables:
            for k in self.query_variables:
                if k:
                    k.validate()
        if self.self_variables:
            for k in self.self_variables:
                if k:
                    k.validate()
        if self.sys_variables:
            for k in self.sys_variables:
                if k:
                    k.validate()
        if self.velocity_variables:
            for k in self.velocity_variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['actions'] = []
        if self.actions is not None:
            for k in self.actions:
                result['actions'].append(k.to_map() if k else None)
        result['deviceVariables'] = []
        if self.device_variables is not None:
            for k in self.device_variables:
                result['deviceVariables'].append(k.to_map() if k else None)
        result['expressionVariables'] = []
        if self.expression_variables is not None:
            for k in self.expression_variables:
                result['expressionVariables'].append(k.to_map() if k else None)
        result['favoriteVariables'] = []
        if self.favorite_variables is not None:
            for k in self.favorite_variables:
                result['favoriteVariables'].append(k.to_map() if k else None)
        result['middleVariables'] = []
        if self.middle_variables is not None:
            for k in self.middle_variables:
                result['middleVariables'].append(k.to_map() if k else None)
        result['modelVariables'] = []
        if self.model_variables is not None:
            for k in self.model_variables:
                result['modelVariables'].append(k.to_map() if k else None)
        result['nameList'] = []
        if self.name_list is not None:
            for k in self.name_list:
                result['nameList'].append(k.to_map() if k else None)
        result['nativeVariableFunctions'] = []
        if self.native_variable_functions is not None:
            for k in self.native_variable_functions:
                result['nativeVariableFunctions'].append(k.to_map() if k else None)
        result['nativeVariables'] = []
        if self.native_variables is not None:
            for k in self.native_variables:
                result['nativeVariables'].append(k.to_map() if k else None)
        result['queryVariables'] = []
        if self.query_variables is not None:
            for k in self.query_variables:
                result['queryVariables'].append(k.to_map() if k else None)
        result['selfVariables'] = []
        if self.self_variables is not None:
            for k in self.self_variables:
                result['selfVariables'].append(k.to_map() if k else None)
        result['sysVariables'] = []
        if self.sys_variables is not None:
            for k in self.sys_variables:
                result['sysVariables'].append(k.to_map() if k else None)
        if self.third_variables is not None:
            result['thirdVariables'] = self.third_variables
        result['velocityVariables'] = []
        if self.velocity_variables is not None:
            for k in self.velocity_variables:
                result['velocityVariables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.actions = []
        if m.get('actions') is not None:
            for k in m.get('actions'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectActions()
                self.actions.append(temp_model.from_map(k))
        self.device_variables = []
        if m.get('deviceVariables') is not None:
            for k in m.get('deviceVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectDeviceVariables()
                self.device_variables.append(temp_model.from_map(k))
        self.expression_variables = []
        if m.get('expressionVariables') is not None:
            for k in m.get('expressionVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectExpressionVariables()
                self.expression_variables.append(temp_model.from_map(k))
        self.favorite_variables = []
        if m.get('favoriteVariables') is not None:
            for k in m.get('favoriteVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectFavoriteVariables()
                self.favorite_variables.append(temp_model.from_map(k))
        self.middle_variables = []
        if m.get('middleVariables') is not None:
            for k in m.get('middleVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectMiddleVariables()
                self.middle_variables.append(temp_model.from_map(k))
        self.model_variables = []
        if m.get('modelVariables') is not None:
            for k in m.get('modelVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectModelVariables()
                self.model_variables.append(temp_model.from_map(k))
        self.name_list = []
        if m.get('nameList') is not None:
            for k in m.get('nameList'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectNameList()
                self.name_list.append(temp_model.from_map(k))
        self.native_variable_functions = []
        if m.get('nativeVariableFunctions') is not None:
            for k in m.get('nativeVariableFunctions'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectNativeVariableFunctions()
                self.native_variable_functions.append(temp_model.from_map(k))
        self.native_variables = []
        if m.get('nativeVariables') is not None:
            for k in m.get('nativeVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectNativeVariables()
                self.native_variables.append(temp_model.from_map(k))
        self.query_variables = []
        if m.get('queryVariables') is not None:
            for k in m.get('queryVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectQueryVariables()
                self.query_variables.append(temp_model.from_map(k))
        self.self_variables = []
        if m.get('selfVariables') is not None:
            for k in m.get('selfVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectSelfVariables()
                self.self_variables.append(temp_model.from_map(k))
        self.sys_variables = []
        if m.get('sysVariables') is not None:
            for k in m.get('sysVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectSysVariables()
                self.sys_variables.append(temp_model.from_map(k))
        if m.get('thirdVariables') is not None:
            self.third_variables = m.get('thirdVariables')
        self.velocity_variables = []
        if m.get('velocityVariables') is not None:
            for k in m.get('velocityVariables'):
                temp_model = DescribeEventVariableListResponseBodyResultObjectVelocityVariables()
                self.velocity_variables.append(temp_model.from_map(k))
        return self


class DescribeEventVariableListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeEventVariableListResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeEventVariableListResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeEventVariableListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventVariableListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventVariableListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventVariableListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventVariableTemplateBindRequest(TeaModel):
    def __init__(self, lang=None, inputs=None, reg_id=None, template_code=None, type=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.inputs = inputs  # type: str
        self.reg_id = reg_id  # type: str
        self.template_code = template_code  # type: str
        # This parameter is required.
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableTemplateBindRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables(TeaModel):
    def __init__(self, code=None, description=None, field_type=None, id=None, name=None, title=None, type=None):
        self.code = code  # type: str
        self.description = description  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.description is not None:
            result['description'] = self.description
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables(TeaModel):
    def __init__(self, code=None, description=None, field_type=None, id=None, name=None, title=None, type=None):
        self.code = code  # type: str
        self.description = description  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.description is not None:
            result['description'] = self.description
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeEventVariableTemplateBindResponseBodyResultObject(TeaModel):
    def __init__(self, charge_variables=None, free_variables=None, template_code=None, total_count=None):
        self.charge_variables = charge_variables  # type: list[DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables]
        self.free_variables = free_variables  # type: list[DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables]
        self.template_code = template_code  # type: str
        self.total_count = total_count  # type: str

    def validate(self):
        if self.charge_variables:
            for k in self.charge_variables:
                if k:
                    k.validate()
        if self.free_variables:
            for k in self.free_variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventVariableTemplateBindResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['chargeVariables'] = []
        if self.charge_variables is not None:
            for k in self.charge_variables:
                result['chargeVariables'].append(k.to_map() if k else None)
        result['freeVariables'] = []
        if self.free_variables is not None:
            for k in self.free_variables:
                result['freeVariables'].append(k.to_map() if k else None)
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.total_count is not None:
            result['totalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.charge_variables = []
        if m.get('chargeVariables') is not None:
            for k in m.get('chargeVariables'):
                temp_model = DescribeEventVariableTemplateBindResponseBodyResultObjectChargeVariables()
                self.charge_variables.append(temp_model.from_map(k))
        self.free_variables = []
        if m.get('freeVariables') is not None:
            for k in m.get('freeVariables'):
                temp_model = DescribeEventVariableTemplateBindResponseBodyResultObjectFreeVariables()
                self.free_variables.append(temp_model.from_map(k))
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('totalCount') is not None:
            self.total_count = m.get('totalCount')
        return self


class DescribeEventVariableTemplateBindResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeEventVariableTemplateBindResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeEventVariableTemplateBindResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeEventVariableTemplateBindResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeEventVariableTemplateBindResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventVariableTemplateBindResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventVariableTemplateBindResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventVariableTemplateBindResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventVariableTemplateListRequest(TeaModel):
    def __init__(self, lang=None, inputs=None, reg_id=None, template_code=None, type=None):
        self.lang = lang  # type: str
        self.inputs = inputs  # type: str
        self.reg_id = reg_id  # type: str
        self.template_code = template_code  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableTemplateListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeEventVariableTemplateListResponseBodyResultObjectVariables(TeaModel):
    def __init__(self, code=None, description=None, field_type=None, id=None, name=None, title=None, type=None):
        self.code = code  # type: str
        self.description = description  # type: str
        self.field_type = field_type  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventVariableTemplateListResponseBodyResultObjectVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.description is not None:
            result['description'] = self.description
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeEventVariableTemplateListResponseBodyResultObject(TeaModel):
    def __init__(self, template_code=None, template_name=None, variables=None):
        self.template_code = template_code  # type: str
        self.template_name = template_name  # type: str
        self.variables = variables  # type: list[DescribeEventVariableTemplateListResponseBodyResultObjectVariables]

    def validate(self):
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventVariableTemplateListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.template_name is not None:
            result['templateName'] = self.template_name
        result['variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        self.variables = []
        if m.get('variables') is not None:
            for k in m.get('variables'):
                temp_model = DescribeEventVariableTemplateListResponseBodyResultObjectVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class DescribeEventVariableTemplateListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeEventVariableTemplateListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeEventVariableTemplateListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeEventVariableTemplateListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeEventVariableTemplateListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventVariableTemplateListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventVariableTemplateListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventVariableTemplateListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventsVariableListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_codes=None, filter_dto=None, reg_id=None, scene=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        self.filter_dto = filter_dto  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.scene = scene  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventsVariableListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.filter_dto is not None:
            result['filterDTO'] = self.filter_dto
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene is not None:
            result['scene'] = self.scene
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('filterDTO') is not None:
            self.filter_dto = m.get('filterDTO')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        return self


class DescribeEventsVariableListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventsVariableListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeEventsVariableListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventsVariableListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventsVariableListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventsVariableListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExcuteNumRequest(TeaModel):
    def __init__(self, code=None, degree=None, end_date=None, lang=None, source_ip=None, start_date=None):
        # This parameter is required.
        self.code = code  # type: str
        self.degree = degree  # type: str
        self.end_date = end_date  # type: str
        self.lang = lang  # type: str
        self.source_ip = source_ip  # type: str
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExcuteNumRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.degree is not None:
            result['Degree'] = self.degree
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.source_ip is not None:
            result['SourceIp'] = self.source_ip
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Degree') is not None:
            self.degree = m.get('Degree')
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('SourceIp') is not None:
            self.source_ip = m.get('SourceIp')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        return self


class DescribeExcuteNumResponseBody(TeaModel):
    def __init__(self, categories=None, data=None, request_id=None):
        self.categories = categories  # type: list[str]
        self.data = data  # type: list[str]
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExcuteNumResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.categories is not None:
            result['Categories'] = self.categories
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Categories') is not None:
            self.categories = m.get('Categories')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeExcuteNumResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeExcuteNumResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeExcuteNumResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExcuteNumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExistNameRequest(TeaModel):
    def __init__(self, lang=None, name=None, reg_id=None):
        self.lang = lang  # type: str
        self.name = name  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExistNameRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeExistNameResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExistNameResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeExistNameResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeExistNameResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeExistNameResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExistNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExistSceneRequest(TeaModel):
    def __init__(self, lang=None, scene_name=None, reg_id=None):
        self.lang = lang  # type: str
        self.scene_name = scene_name  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExistSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.scene_name is not None:
            result['SceneName'] = self.scene_name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('SceneName') is not None:
            self.scene_name = m.get('SceneName')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeExistSceneResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExistSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeExistSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeExistSceneResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeExistSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExistSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExpressionVariableDetailRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExpressionVariableDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeExpressionVariableDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: dict[str, any]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExpressionVariableDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeExpressionVariableDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeExpressionVariableDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeExpressionVariableDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExpressionVariableDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExpressionVariableFunctionListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExpressionVariableFunctionListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeExpressionVariableFunctionListResponseBodyResultObject(TeaModel):
    def __init__(self, description=None, key=None, max_param_size=None, min_param_size=None, param_types=None,
                 redirect=None, return_types=None, value=None):
        self.description = description  # type: str
        self.key = key  # type: str
        self.max_param_size = max_param_size  # type: long
        self.min_param_size = min_param_size  # type: long
        self.param_types = param_types  # type: str
        self.redirect = redirect  # type: bool
        self.return_types = return_types  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExpressionVariableFunctionListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.key is not None:
            result['key'] = self.key
        if self.max_param_size is not None:
            result['maxParamSize'] = self.max_param_size
        if self.min_param_size is not None:
            result['minParamSize'] = self.min_param_size
        if self.param_types is not None:
            result['paramTypes'] = self.param_types
        if self.redirect is not None:
            result['redirect'] = self.redirect
        if self.return_types is not None:
            result['returnTypes'] = self.return_types
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('maxParamSize') is not None:
            self.max_param_size = m.get('maxParamSize')
        if m.get('minParamSize') is not None:
            self.min_param_size = m.get('minParamSize')
        if m.get('paramTypes') is not None:
            self.param_types = m.get('paramTypes')
        if m.get('redirect') is not None:
            self.redirect = m.get('redirect')
        if m.get('returnTypes') is not None:
            self.return_types = m.get('returnTypes')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeExpressionVariableFunctionListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeExpressionVariableFunctionListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeExpressionVariableFunctionListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeExpressionVariableFunctionListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeExpressionVariableFunctionListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeExpressionVariableFunctionListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeExpressionVariableFunctionListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExpressionVariableFunctionListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExpressionVariablePageRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, event_code=None, outputs=None, page_size=None, reg_id=None,
                 status=None, value=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.current_page = current_page  # type: str
        self.event_code = event_code  # type: str
        self.outputs = outputs  # type: str
        # This parameter is required.
        self.page_size = page_size  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.status = status  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExpressionVariablePageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.status is not None:
            result['status'] = self.status
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeExpressionVariablePageResponseBodyResultObject(TeaModel):
    def __init__(self, description=None, event_name=None, gmt_modified=None, id=None, outputs=None, status=None,
                 title=None, version=None):
        self.description = description  # type: str
        self.event_name = event_name  # type: str
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.outputs = outputs  # type: str
        self.status = status  # type: str
        self.title = title  # type: str
        self.version = version  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeExpressionVariablePageResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.status is not None:
            result['status'] = self.status
        if self.title is not None:
            result['title'] = self.title
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeExpressionVariablePageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeExpressionVariablePageResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeExpressionVariablePageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeExpressionVariablePageResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeExpressionVariablePageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeExpressionVariablePageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeExpressionVariablePageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExpressionVariablePageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFieldByIdRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFieldByIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeFieldByIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFieldByIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeFieldByIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeFieldByIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeFieldByIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFieldByIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFieldListRequest(TeaModel):
    def __init__(self, lang=None, condition=None, inputs=None, reg_id=None):
        self.lang = lang  # type: str
        self.condition = condition  # type: str
        self.inputs = inputs  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFieldListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.condition is not None:
            result['condition'] = self.condition
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeFieldListResponseBodyResultObject(TeaModel):
    def __init__(self, classify=None, description=None, enum_data=None, id=None, name=None, source=None, status=None,
                 title=None, type=None):
        self.classify = classify  # type: str
        self.description = description  # type: str
        self.enum_data = enum_data  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.source = source  # type: str
        self.status = status  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFieldListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.classify is not None:
            result['classify'] = self.classify
        if self.description is not None:
            result['description'] = self.description
        if self.enum_data is not None:
            result['enumData'] = self.enum_data
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.source is not None:
            result['source'] = self.source
        if self.status is not None:
            result['status'] = self.status
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('classify') is not None:
            self.classify = m.get('classify')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('enumData') is not None:
            self.enum_data = m.get('enumData')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeFieldListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeFieldListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeFieldListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeFieldListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeFieldListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeFieldListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeFieldListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFieldListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFieldPageRequest(TeaModel):
    def __init__(self, lang=None, classify=None, condition=None, current_page=None, name=None, page_size=None,
                 reg_id=None, source=None, status=None, title=None, type=None):
        self.lang = lang  # type: str
        self.classify = classify  # type: str
        self.condition = condition  # type: str
        self.current_page = current_page  # type: str
        self.name = name  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.source = source  # type: str
        self.status = status  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFieldPageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.classify is not None:
            result['classify'] = self.classify
        if self.condition is not None:
            result['condition'] = self.condition
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.source is not None:
            result['source'] = self.source
        if self.status is not None:
            result['status'] = self.status
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('classify') is not None:
            self.classify = m.get('classify')
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeFieldPageResponseBodyResultObject(TeaModel):
    def __init__(self, classify=None, description=None, enum_data=None, id=None, name=None, source=None, status=None,
                 title=None, type=None):
        self.classify = classify  # type: str
        self.description = description  # type: str
        self.enum_data = enum_data  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.source = source  # type: str
        self.status = status  # type: str
        self.title = title  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFieldPageResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.classify is not None:
            result['classify'] = self.classify
        if self.description is not None:
            result['description'] = self.description
        if self.enum_data is not None:
            result['enumData'] = self.enum_data
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.source is not None:
            result['source'] = self.source
        if self.status is not None:
            result['status'] = self.status
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('classify') is not None:
            self.classify = m.get('classify')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('enumData') is not None:
            self.enum_data = m.get('enumData')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeFieldPageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeFieldPageResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeFieldPageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeFieldPageResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeFieldPageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeFieldPageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeFieldPageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFieldPageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGroupAccountPageRequest(TeaModel):
    def __init__(self, lang=None, community_no=None, current_page=None, direction=None, field_key=None,
                 field_val=None, is_page=None, order=None, page_size=None, reg_id=None, task_id=None):
        self.lang = lang  # type: str
        self.community_no = community_no  # type: str
        self.current_page = current_page  # type: str
        self.direction = direction  # type: str
        self.field_key = field_key  # type: str
        self.field_val = field_val  # type: str
        self.is_page = is_page  # type: bool
        self.order = order  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupAccountPageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.community_no is not None:
            result['communityNo'] = self.community_no
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.direction is not None:
            result['direction'] = self.direction
        if self.field_key is not None:
            result['fieldKey'] = self.field_key
        if self.field_val is not None:
            result['fieldVal'] = self.field_val
        if self.is_page is not None:
            result['isPage'] = self.is_page
        if self.order is not None:
            result['order'] = self.order
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('communityNo') is not None:
            self.community_no = m.get('communityNo')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('direction') is not None:
            self.direction = m.get('direction')
        if m.get('fieldKey') is not None:
            self.field_key = m.get('fieldKey')
        if m.get('fieldVal') is not None:
            self.field_val = m.get('fieldVal')
        if m.get('isPage') is not None:
            self.is_page = m.get('isPage')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class DescribeGroupAccountPageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, data=None, page_size=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.data = data  # type: bool
        self.page_size = page_size  # type: int
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupAccountPageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.data is not None:
            result['data'] = self.data
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeGroupAccountPageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeGroupAccountPageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeGroupAccountPageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGroupAccountPageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGroupConditionListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupConditionListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeGroupConditionListResponseBodyResultObject(TeaModel):
    def __init__(self, field_key=None, field_value=None):
        self.field_key = field_key  # type: str
        self.field_value = field_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupConditionListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_key is not None:
            result['fieldKey'] = self.field_key
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldKey') is not None:
            self.field_key = m.get('fieldKey')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        return self


class DescribeGroupConditionListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeGroupConditionListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeGroupConditionListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeGroupConditionListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeGroupConditionListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeGroupConditionListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeGroupConditionListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGroupConditionListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGroupPageRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, direction=None, order=None, page_size=None, reg_id=None,
                 task_id=None, time_type=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.direction = direction  # type: str
        self.order = order  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.task_id = task_id  # type: str
        self.time_type = time_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupPageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.direction is not None:
            result['direction'] = self.direction
        if self.order is not None:
            result['order'] = self.order
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.time_type is not None:
            result['timeType'] = self.time_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('direction') is not None:
            self.direction = m.get('direction')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('timeType') is not None:
            self.time_type = m.get('timeType')
        return self


class DescribeGroupPageResponseBodyResultObject(TeaModel):
    def __init__(self, community_no=None, create_time=None, group_risk=None, group_scale=None, id=None,
                 scene_name=None, task_id=None, user_id=None):
        self.community_no = community_no  # type: str
        self.create_time = create_time  # type: long
        self.group_risk = group_risk  # type: str
        self.group_scale = group_scale  # type: str
        self.id = id  # type: long
        self.scene_name = scene_name  # type: str
        self.task_id = task_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupPageResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.community_no is not None:
            result['communityNo'] = self.community_no
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.group_risk is not None:
            result['groupRisk'] = self.group_risk
        if self.group_scale is not None:
            result['groupScale'] = self.group_scale
        if self.id is not None:
            result['id'] = self.id
        if self.scene_name is not None:
            result['sceneName'] = self.scene_name
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('communityNo') is not None:
            self.community_no = m.get('communityNo')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('groupRisk') is not None:
            self.group_risk = m.get('groupRisk')
        if m.get('groupScale') is not None:
            self.group_scale = m.get('groupScale')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('sceneName') is not None:
            self.scene_name = m.get('sceneName')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class DescribeGroupPageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeGroupPageResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeGroupPageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeGroupPageResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeGroupPageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeGroupPageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeGroupPageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGroupPageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGroupStatisticsByTodayRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupStatisticsByTodayRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeGroupStatisticsByTodayResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupStatisticsByTodayResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeGroupStatisticsByTodayResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeGroupStatisticsByTodayResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeGroupStatisticsByTodayResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGroupStatisticsByTodayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGroupTrendRequest(TeaModel):
    def __init__(self, lang=None, day=None, reg_id=None):
        self.lang = lang  # type: str
        self.day = day  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupTrendRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.day is not None:
            result['day'] = self.day
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('day') is not None:
            self.day = m.get('day')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeGroupTrendResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupTrendResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeGroupTrendResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeGroupTrendResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeGroupTrendResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGroupTrendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeHasRuleNameByEventCodeRequest(TeaModel):
    def __init__(self, lang=None, event_code=None, exclude_rule_id=None, reg_id=None, rule_name=None):
        self.lang = lang  # type: str
        self.event_code = event_code  # type: str
        self.exclude_rule_id = exclude_rule_id  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_name = rule_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHasRuleNameByEventCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.exclude_rule_id is not None:
            result['excludeRuleId'] = self.exclude_rule_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('excludeRuleId') is not None:
            self.exclude_rule_id = m.get('excludeRuleId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        return self


class DescribeHasRuleNameByEventCodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHasRuleNameByEventCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeHasRuleNameByEventCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeHasRuleNameByEventCodeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeHasRuleNameByEventCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeHasRuleNameByEventCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeHighRiskPieChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid(TeaModel):
    def __init__(self, show=None):
        self.show = show  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.show is not None:
            result['show'] = self.show
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('show') is not None:
            self.show = m.get('show')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries(TeaModel):
    def __init__(self, data=None, name=None, rose_type=None):
        self.data = data  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData]
        self.name = name  # type: str
        self.rose_type = rose_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.rose_type is not None:
            result['roseType'] = self.rose_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('roseType') is not None:
            self.rose_type = m.get('roseType')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity(TeaModel):
    def __init__(self, animation=None, grid=None, series=None):
        self.animation = animation  # type: bool
        self.grid = grid  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid
        self.series = series  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries]

    def validate(self):
        if self.grid:
            self.grid.validate()
        if self.series:
            for k in self.series:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.animation is not None:
            result['animation'] = self.animation
        if self.grid is not None:
            result['grid'] = self.grid.to_map()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('animation') is not None:
            self.animation = m.get('animation')
        if m.get('grid') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCityGrid()
            self.grid = temp_model.from_map(m['grid'])
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCitySeries()
                self.series.append(temp_model.from_map(k))
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid(TeaModel):
    def __init__(self, show=None):
        self.show = show  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.show is not None:
            result['show'] = self.show
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('show') is not None:
            self.show = m.get('show')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries(TeaModel):
    def __init__(self, data=None, name=None, rose_type=None):
        self.data = data  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData]
        self.name = name  # type: str
        self.rose_type = rose_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.rose_type is not None:
            result['roseType'] = self.rose_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('roseType') is not None:
            self.rose_type = m.get('roseType')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince(TeaModel):
    def __init__(self, animation=None, grid=None, series=None):
        self.animation = animation  # type: bool
        self.grid = grid  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid
        self.series = series  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries]

    def validate(self):
        if self.grid:
            self.grid.validate()
        if self.series:
            for k in self.series:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.animation is not None:
            result['animation'] = self.animation
        if self.grid is not None:
            result['grid'] = self.grid.to_map()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('animation') is not None:
            self.animation = m.get('animation')
        if m.get('grid') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceGrid()
            self.grid = temp_model.from_map(m['grid'])
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvinceSeries()
                self.series.append(temp_model.from_map(k))
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid(TeaModel):
    def __init__(self, show=None):
        self.show = show  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.show is not None:
            result['show'] = self.show
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('show') is not None:
            self.show = m.get('show')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries(TeaModel):
    def __init__(self, data=None, name=None, rose_type=None):
        self.data = data  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData]
        self.name = name  # type: str
        self.rose_type = rose_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.rose_type is not None:
            result['roseType'] = self.rose_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('roseType') is not None:
            self.rose_type = m.get('roseType')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity(TeaModel):
    def __init__(self, animation=None, grid=None, series=None):
        self.animation = animation  # type: bool
        self.grid = grid  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid
        self.series = series  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries]

    def validate(self):
        if self.grid:
            self.grid.validate()
        if self.series:
            for k in self.series:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.animation is not None:
            result['animation'] = self.animation
        if self.grid is not None:
            result['grid'] = self.grid.to_map()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('animation') is not None:
            self.animation = m.get('animation')
        if m.get('grid') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCityGrid()
            self.grid = temp_model.from_map(m['grid'])
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCitySeries()
                self.series.append(temp_model.from_map(k))
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid(TeaModel):
    def __init__(self, show=None):
        self.show = show  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.show is not None:
            result['show'] = self.show
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('show') is not None:
            self.show = m.get('show')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries(TeaModel):
    def __init__(self, data=None, name=None, rose_type=None):
        self.data = data  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData]
        self.name = name  # type: str
        self.rose_type = rose_type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.rose_type is not None:
            result['roseType'] = self.rose_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('roseType') is not None:
            self.rose_type = m.get('roseType')
        return self


class DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince(TeaModel):
    def __init__(self, animation=None, grid=None, series=None):
        self.animation = animation  # type: bool
        self.grid = grid  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid
        self.series = series  # type: list[DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries]

    def validate(self):
        if self.grid:
            self.grid.validate()
        if self.series:
            for k in self.series:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.animation is not None:
            result['animation'] = self.animation
        if self.grid is not None:
            result['grid'] = self.grid.to_map()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('animation') is not None:
            self.animation = m.get('animation')
        if m.get('grid') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceGrid()
            self.grid = temp_model.from_map(m['grid'])
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvinceSeries()
                self.series.append(temp_model.from_map(k))
        return self


class DescribeHighRiskPieChartResponseBodyResultObject(TeaModel):
    def __init__(self, high_risk_ipcity=None, high_risk_ipprovince=None, high_risk_mobile_city=None,
                 high_risk_mobile_province=None):
        self.high_risk_ipcity = high_risk_ipcity  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity
        self.high_risk_ipprovince = high_risk_ipprovince  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince
        self.high_risk_mobile_city = high_risk_mobile_city  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity
        self.high_risk_mobile_province = high_risk_mobile_province  # type: DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince

    def validate(self):
        if self.high_risk_ipcity:
            self.high_risk_ipcity.validate()
        if self.high_risk_ipprovince:
            self.high_risk_ipprovince.validate()
        if self.high_risk_mobile_city:
            self.high_risk_mobile_city.validate()
        if self.high_risk_mobile_province:
            self.high_risk_mobile_province.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.high_risk_ipcity is not None:
            result['highRiskIPCity'] = self.high_risk_ipcity.to_map()
        if self.high_risk_ipprovince is not None:
            result['highRiskIPProvince'] = self.high_risk_ipprovince.to_map()
        if self.high_risk_mobile_city is not None:
            result['highRiskMobileCity'] = self.high_risk_mobile_city.to_map()
        if self.high_risk_mobile_province is not None:
            result['highRiskMobileProvince'] = self.high_risk_mobile_province.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('highRiskIPCity') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPCity()
            self.high_risk_ipcity = temp_model.from_map(m['highRiskIPCity'])
        if m.get('highRiskIPProvince') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskIPProvince()
            self.high_risk_ipprovince = temp_model.from_map(m['highRiskIPProvince'])
        if m.get('highRiskMobileCity') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileCity()
            self.high_risk_mobile_city = temp_model.from_map(m['highRiskMobileCity'])
        if m.get('highRiskMobileProvince') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObjectHighRiskMobileProvince()
            self.high_risk_mobile_province = temp_model.from_map(m['highRiskMobileProvince'])
        return self


class DescribeHighRiskPieChartResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeHighRiskPieChartResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeHighRiskPieChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeHighRiskPieChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeHighRiskPieChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeHighRiskPieChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeHighRiskPieChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeHitRuleFluctuationRequest(TeaModel):
    def __init__(self, lang=None, event_codes=None, reg_id=None, rule_status=None):
        self.lang = lang  # type: str
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHitRuleFluctuationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeHitRuleFluctuationResponseBodyResultObject(TeaModel):
    def __init__(self, rule_id=None, rule_name=None, today_num=None, within_seven_day_num=None,
                 within_thirty_day_num=None, within_three_day_num=None, yesterday_num=None):
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.today_num = today_num  # type: long
        self.within_seven_day_num = within_seven_day_num  # type: str
        self.within_thirty_day_num = within_thirty_day_num  # type: str
        self.within_three_day_num = within_three_day_num  # type: str
        self.yesterday_num = yesterday_num  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHitRuleFluctuationResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.today_num is not None:
            result['todayNum'] = self.today_num
        if self.within_seven_day_num is not None:
            result['withinSevenDayNum'] = self.within_seven_day_num
        if self.within_thirty_day_num is not None:
            result['withinThirtyDayNum'] = self.within_thirty_day_num
        if self.within_three_day_num is not None:
            result['withinThreeDayNum'] = self.within_three_day_num
        if self.yesterday_num is not None:
            result['yesterdayNum'] = self.yesterday_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('todayNum') is not None:
            self.today_num = m.get('todayNum')
        if m.get('withinSevenDayNum') is not None:
            self.within_seven_day_num = m.get('withinSevenDayNum')
        if m.get('withinThirtyDayNum') is not None:
            self.within_thirty_day_num = m.get('withinThirtyDayNum')
        if m.get('withinThreeDayNum') is not None:
            self.within_three_day_num = m.get('withinThreeDayNum')
        if m.get('yesterdayNum') is not None:
            self.yesterday_num = m.get('yesterdayNum')
        return self


class DescribeHitRuleFluctuationResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeHitRuleFluctuationResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHitRuleFluctuationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeHitRuleFluctuationResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeHitRuleFluctuationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeHitRuleFluctuationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeHitRuleFluctuationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeHitRuleFluctuationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeHitRuleListRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, event_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.event_type = event_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHitRuleListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeHitRuleListResponseBodyResultObject(TeaModel):
    def __init__(self, hit_count=None, rule_name=None):
        self.hit_count = hit_count  # type: int
        self.rule_name = rule_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHitRuleListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hit_count is not None:
            result['hitCount'] = self.hit_count
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hitCount') is not None:
            self.hit_count = m.get('hitCount')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        return self


class DescribeHitRuleListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeHitRuleListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHitRuleListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeHitRuleListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeHitRuleListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeHitRuleListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeHitRuleListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeHitRuleListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeHitRuleTrendRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None, rule_status=None):
        self.lang = lang  # type: str
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHitRuleTrendRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeHitRuleTrendResponseBodyResultObjectSeriesData(TeaModel):
    def __init__(self, num=None, scale=None):
        self.num = num  # type: long
        self.scale = scale  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHitRuleTrendResponseBodyResultObjectSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.num is not None:
            result['num'] = self.num
        if self.scale is not None:
            result['scale'] = self.scale
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('num') is not None:
            self.num = m.get('num')
        if m.get('scale') is not None:
            self.scale = m.get('scale')
        return self


class DescribeHitRuleTrendResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[DescribeHitRuleTrendResponseBodyResultObjectSeriesData]
        self.name = name  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeHitRuleTrendResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeHitRuleTrendResponseBodyResultObjectSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeHitRuleTrendResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHitRuleTrendResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeHitRuleTrendResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeHitRuleTrendResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeHitRuleTrendResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeHitRuleTrendResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeHitRuleTrendResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeHitRuleTrendResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeHitRuleTrendResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeHitRuleTrendResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeHitRuleTrendResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeHitRuleTrendResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeHitRuleTrendResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeHitRuleTrendResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeHitRuleTrendResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeHitRuleTrendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInputFeildCountByEventCodeRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_code=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInputFeildCountByEventCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeInputFeildCountByEventCodeResponseBodyResultObject(TeaModel):
    def __init__(self, limit=None, max_total_item=None, total_item=None):
        self.limit = limit  # type: bool
        self.max_total_item = max_total_item  # type: int
        self.total_item = total_item  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInputFeildCountByEventCodeResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['limit'] = self.limit
        if self.max_total_item is not None:
            result['maxTotalItem'] = self.max_total_item
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('limit') is not None:
            self.limit = m.get('limit')
        if m.get('maxTotalItem') is not None:
            self.max_total_item = m.get('maxTotalItem')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        return self


class DescribeInputFeildCountByEventCodeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeInputFeildCountByEventCodeResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeInputFeildCountByEventCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeInputFeildCountByEventCodeResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeInputFeildCountByEventCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInputFeildCountByEventCodeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInputFeildCountByEventCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInputFeildCountByEventCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeListPocRequest(TeaModel):
    def __init__(self, current_page=None, lang=None, page_size=None, reg_id=None, type=None):
        self.current_page = current_page  # type: long
        self.lang = lang  # type: str
        self.page_size = page_size  # type: long
        self.reg_id = reg_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeListPocRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeListPocResponseBody(TeaModel):
    def __init__(self, code=None, current_page=None, http_status_code=None, message=None, page_size=None,
                 request_id=None, result_object=None, total_item=None, total_page=None):
        self.code = code  # type: str
        self.current_page = current_page  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.page_size = page_size  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.total_item = total_item  # type: str
        self.total_page = total_page  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeListPocResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['ResultObject'] = self.result_object
        if self.total_item is not None:
            result['TotalItem'] = self.total_item
        if self.total_page is not None:
            result['TotalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObject') is not None:
            self.result_object = m.get('ResultObject')
        if m.get('TotalItem') is not None:
            self.total_item = m.get('TotalItem')
        if m.get('TotalPage') is not None:
            self.total_page = m.get('TotalPage')
        return self


class DescribeListPocResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeListPocResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeListPocResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeListPocResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeLoanExecListRequest(TeaModel):
    def __init__(self, lang=None, batch_no=None, current_page=None, monitor_obj=None, monitor_status=None,
                 page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.batch_no = batch_no  # type: str
        self.current_page = current_page  # type: str
        self.monitor_obj = monitor_obj  # type: str
        self.monitor_status = monitor_status  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeLoanExecListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.batch_no is not None:
            result['batchNo'] = self.batch_no
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.monitor_obj is not None:
            result['monitorObj'] = self.monitor_obj
        if self.monitor_status is not None:
            result['monitorStatus'] = self.monitor_status
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('batchNo') is not None:
            self.batch_no = m.get('batchNo')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('monitorObj') is not None:
            self.monitor_obj = m.get('monitorObj')
        if m.get('monitorStatus') is not None:
            self.monitor_status = m.get('monitorStatus')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeLoanExecListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: bool
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeLoanExecListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeLoanExecListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeLoanExecListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeLoanExecListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeLoanExecListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeLoanTaskListRequest(TeaModel):
    def __init__(self, lang=None, batch_no=None, current_page=None, monitor_status=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.batch_no = batch_no  # type: str
        self.current_page = current_page  # type: str
        self.monitor_status = monitor_status  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeLoanTaskListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.batch_no is not None:
            result['batchNo'] = self.batch_no
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.monitor_status is not None:
            result['monitorStatus'] = self.monitor_status
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('batchNo') is not None:
            self.batch_no = m.get('batchNo')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('monitorStatus') is not None:
            self.monitor_status = m.get('monitorStatus')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeLoanTaskListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: bool
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeLoanTaskListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeLoanTaskListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeLoanTaskListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeLoanTaskListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeLoanTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMarkPageRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, direction=None, is_page=None, order=None, page_size=None,
                 reg_id=None, task_log_id=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.direction = direction  # type: str
        self.is_page = is_page  # type: bool
        self.order = order  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.task_log_id = task_log_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeMarkPageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.direction is not None:
            result['direction'] = self.direction
        if self.is_page is not None:
            result['isPage'] = self.is_page
        if self.order is not None:
            result['order'] = self.order
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_log_id is not None:
            result['taskLogId'] = self.task_log_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('direction') is not None:
            self.direction = m.get('direction')
        if m.get('isPage') is not None:
            self.is_page = m.get('isPage')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskLogId') is not None:
            self.task_log_id = m.get('taskLogId')
        return self


class DescribeMarkPageResponseBodyResultObject(TeaModel):
    def __init__(self, field_name=None, field_value=None, id=None, mark_type=None):
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        self.id = id  # type: long
        self.mark_type = mark_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeMarkPageResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        if self.id is not None:
            result['id'] = self.id
        if self.mark_type is not None:
            result['markType'] = self.mark_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('markType') is not None:
            self.mark_type = m.get('markType')
        return self


class DescribeMarkPageResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeMarkPageResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeMarkPageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeMarkPageResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeMarkPageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeMarkPageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeMarkPageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMarkPageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMenuPermissionRequest(TeaModel):
    def __init__(self, lang=None, permission_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.permission_type = permission_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeMenuPermissionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.permission_type is not None:
            result['permissionType'] = self.permission_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('permissionType') is not None:
            self.permission_type = m.get('permissionType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeMenuPermissionResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeMenuPermissionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeMenuPermissionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeMenuPermissionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeMenuPermissionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMenuPermissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMonitorTaskLimitRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeMonitorTaskLimitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeMonitorTaskLimitResponseBodyResultObject(TeaModel):
    def __init__(self, limit=None, max_total_item=None, total_item=None):
        self.limit = limit  # type: bool
        self.max_total_item = max_total_item  # type: int
        self.total_item = total_item  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeMonitorTaskLimitResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['limit'] = self.limit
        if self.max_total_item is not None:
            result['maxTotalItem'] = self.max_total_item
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('limit') is not None:
            self.limit = m.get('limit')
        if m.get('maxTotalItem') is not None:
            self.max_total_item = m.get('maxTotalItem')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        return self


class DescribeMonitorTaskLimitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeMonitorTaskLimitResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeMonitorTaskLimitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeMonitorTaskLimitResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeMonitorTaskLimitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeMonitorTaskLimitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeMonitorTaskLimitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMonitorTaskLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNameListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, current_page=None, page_size=None, reg_id=None, value=None,
                 variable_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.current_page = current_page  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.value = value  # type: str
        self.variable_id = variable_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.value is not None:
            result['value'] = self.value
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class DescribeNameListResponseBodyResultObject(TeaModel):
    def __init__(self, gmt_create=None, gmt_modified=None, id=None, identifier=None, title=None, value=None,
                 variable_id=None):
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.identifier = identifier  # type: str
        self.title = title  # type: str
        self.value = value  # type: str
        self.variable_id = variable_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.identifier is not None:
            result['identifier'] = self.identifier
        if self.title is not None:
            result['title'] = self.title
        if self.value is not None:
            result['value'] = self.value
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('identifier') is not None:
            self.identifier = m.get('identifier')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class DescribeNameListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeNameListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeNameListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeNameListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeNameListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeNameListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeNameListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNameListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNameListDownloadUrlRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, variable_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.variable_id = variable_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class DescribeNameListDownloadUrlResponseBodyResultObject(TeaModel):
    def __init__(self, download_file_url=None):
        self.download_file_url = download_file_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListDownloadUrlResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_file_url is not None:
            result['downloadFileUrl'] = self.download_file_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('downloadFileUrl') is not None:
            self.download_file_url = m.get('downloadFileUrl')
        return self


class DescribeNameListDownloadUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeNameListDownloadUrlResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeNameListDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeNameListDownloadUrlResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeNameListDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeNameListDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeNameListDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNameListDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNameListLimitRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListLimitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeNameListLimitResponseBodyResultObject(TeaModel):
    def __init__(self, limit=None, max_total_item=None, total_item=None):
        self.limit = limit  # type: bool
        self.max_total_item = max_total_item  # type: long
        self.total_item = total_item  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListLimitResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['limit'] = self.limit
        if self.max_total_item is not None:
            result['maxTotalItem'] = self.max_total_item
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('limit') is not None:
            self.limit = m.get('limit')
        if m.get('maxTotalItem') is not None:
            self.max_total_item = m.get('maxTotalItem')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        return self


class DescribeNameListLimitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeNameListLimitResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeNameListLimitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeNameListLimitResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeNameListLimitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeNameListLimitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeNameListLimitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNameListLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNameListPageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, page_size=None, reg_id=None, update_begin_time=None,
                 update_end_time=None, value=None, variable_id=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str
        self.update_begin_time = update_begin_time  # type: long
        self.update_end_time = update_end_time  # type: long
        self.value = value  # type: str
        # This parameter is required.
        self.variable_id = variable_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.update_begin_time is not None:
            result['updateBeginTime'] = self.update_begin_time
        if self.update_end_time is not None:
            result['updateEndTime'] = self.update_end_time
        if self.value is not None:
            result['value'] = self.value
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('updateBeginTime') is not None:
            self.update_begin_time = m.get('updateBeginTime')
        if m.get('updateEndTime') is not None:
            self.update_end_time = m.get('updateEndTime')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class DescribeNameListPageListResponseBodyResultObject(TeaModel):
    def __init__(self, gmt_create=None, gmt_modified=None, id=None, name=None, name_list_type=None, title=None,
                 user_id=None, value=None, variable_id=None):
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.name = name  # type: str
        self.name_list_type = name_list_type  # type: str
        self.title = title  # type: str
        self.user_id = user_id  # type: str
        self.value = value  # type: str
        self.variable_id = variable_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListPageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.name_list_type is not None:
            result['nameListType'] = self.name_list_type
        if self.title is not None:
            result['title'] = self.title
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.value is not None:
            result['value'] = self.value
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('nameListType') is not None:
            self.name_list_type = m.get('nameListType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('value') is not None:
            self.value = m.get('value')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class DescribeNameListPageListResponseBody(TeaModel):
    def __init__(self, current_page=None, page_size=None, request_id=None, result_object=None, total_item=None,
                 total_page=None):
        self.current_page = current_page  # type: str
        self.page_size = page_size  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeNameListPageListResponseBodyResultObject]
        self.total_item = total_item  # type: str
        self.total_page = total_page  # type: str

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeNameListPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeNameListPageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeNameListPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeNameListPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeNameListPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNameListPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNameListTypeListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListTypeListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeNameListTypeListResponseBodyResultObject(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListTypeListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeNameListTypeListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeNameListTypeListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeNameListTypeListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeNameListTypeListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeNameListTypeListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeNameListTypeListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeNameListTypeListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNameListTypeListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNameListVariablePageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, name=None, name_list_type=None, page_size=None, reg_id=None,
                 value=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: int
        self.name = name  # type: str
        self.name_list_type = name_list_type  # type: str
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListVariablePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.name is not None:
            result['name'] = self.name
        if self.name_list_type is not None:
            result['nameListType'] = self.name_list_type
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('nameListType') is not None:
            self.name_list_type = m.get('nameListType')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeNameListVariablePageListResponseBodyResultObject(TeaModel):
    def __init__(self, capacity=None, description=None, gmt_create=None, gmt_modified=None, id=None,
                 left_capacity=None, name=None, name_list_type=None, ref_obj_id=None, ref_obj_type=None, source_type=None,
                 title=None, type=None, user_id=None):
        self.capacity = capacity  # type: long
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.left_capacity = left_capacity  # type: long
        self.name = name  # type: str
        self.name_list_type = name_list_type  # type: str
        self.ref_obj_id = ref_obj_id  # type: str
        self.ref_obj_type = ref_obj_type  # type: long
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.user_id = user_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNameListVariablePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.capacity is not None:
            result['capacity'] = self.capacity
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.left_capacity is not None:
            result['leftCapacity'] = self.left_capacity
        if self.name is not None:
            result['name'] = self.name
        if self.name_list_type is not None:
            result['nameListType'] = self.name_list_type
        if self.ref_obj_id is not None:
            result['refObjId'] = self.ref_obj_id
        if self.ref_obj_type is not None:
            result['refObjType'] = self.ref_obj_type
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('capacity') is not None:
            self.capacity = m.get('capacity')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('leftCapacity') is not None:
            self.left_capacity = m.get('leftCapacity')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('nameListType') is not None:
            self.name_list_type = m.get('nameListType')
        if m.get('refObjId') is not None:
            self.ref_obj_id = m.get('refObjId')
        if m.get('refObjType') is not None:
            self.ref_obj_type = m.get('refObjType')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class DescribeNameListVariablePageListResponseBody(TeaModel):
    def __init__(self, current_page=None, page_size=None, request_id=None, result_object=None, total_item=None,
                 total_page=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeNameListVariablePageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeNameListVariablePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeNameListVariablePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeNameListVariablePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeNameListVariablePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeNameListVariablePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNameListVariablePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOperationLogPageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, end_date=None, page_size=None, reg_id=None, start_date=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: int
        self.end_date = end_date  # type: long
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str
        self.start_date = start_date  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperationLogPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.start_date is not None:
            result['startDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('startDate') is not None:
            self.start_date = m.get('startDate')
        return self


class DescribeOperationLogPageListResponseBodyResultObject(TeaModel):
    def __init__(self, client_ip=None, gmt_create=None, new_content=None, old_content=None, operation_summary=None,
                 operation_type=None, user_name=None):
        self.client_ip = client_ip  # type: str
        self.gmt_create = gmt_create  # type: long
        self.new_content = new_content  # type: str
        self.old_content = old_content  # type: str
        self.operation_summary = operation_summary  # type: str
        self.operation_type = operation_type  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperationLogPageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_ip is not None:
            result['clientIp'] = self.client_ip
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.new_content is not None:
            result['newContent'] = self.new_content
        if self.old_content is not None:
            result['oldContent'] = self.old_content
        if self.operation_summary is not None:
            result['operationSummary'] = self.operation_summary
        if self.operation_type is not None:
            result['operationType'] = self.operation_type
        if self.user_name is not None:
            result['userName'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('clientIp') is not None:
            self.client_ip = m.get('clientIp')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('newContent') is not None:
            self.new_content = m.get('newContent')
        if m.get('oldContent') is not None:
            self.old_content = m.get('oldContent')
        if m.get('operationSummary') is not None:
            self.operation_summary = m.get('operationSummary')
        if m.get('operationType') is not None:
            self.operation_type = m.get('operationType')
        if m.get('userName') is not None:
            self.user_name = m.get('userName')
        return self


class DescribeOperationLogPageListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeOperationLogPageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperationLogPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeOperationLogPageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeOperationLogPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeOperationLogPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeOperationLogPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOperationLogPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOperatorListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperatorListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables(TeaModel):
    def __init__(self, field_name=None, field_type=None, field_value=None):
        self.field_name = field_name  # type: str
        self.field_type = field_type  # type: str
        self.field_value = field_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        return self


class DescribeOperatorListResponseBodyResultObjectOperators(TeaModel):
    def __init__(self, code=None, has_right_variable=None, memo=None, name=None, right_variables=None):
        self.code = code  # type: str
        self.has_right_variable = has_right_variable  # type: bool
        self.memo = memo  # type: str
        self.name = name  # type: str
        self.right_variables = right_variables  # type: list[DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables]

    def validate(self):
        if self.right_variables:
            for k in self.right_variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListResponseBodyResultObjectOperators, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.has_right_variable is not None:
            result['hasRightVariable'] = self.has_right_variable
        if self.memo is not None:
            result['memo'] = self.memo
        if self.name is not None:
            result['name'] = self.name
        result['rightVariables'] = []
        if self.right_variables is not None:
            for k in self.right_variables:
                result['rightVariables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('hasRightVariable') is not None:
            self.has_right_variable = m.get('hasRightVariable')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('name') is not None:
            self.name = m.get('name')
        self.right_variables = []
        if m.get('rightVariables') is not None:
            for k in m.get('rightVariables'):
                temp_model = DescribeOperatorListResponseBodyResultObjectOperatorsRightVariables()
                self.right_variables.append(temp_model.from_map(k))
        return self


class DescribeOperatorListResponseBodyResultObject(TeaModel):
    def __init__(self, field_type=None, operators=None):
        self.field_type = field_type  # type: str
        self.operators = operators  # type: list[DescribeOperatorListResponseBodyResultObjectOperators]

    def validate(self):
        if self.operators:
            for k in self.operators:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        result['operators'] = []
        if self.operators is not None:
            for k in self.operators:
                result['operators'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        self.operators = []
        if m.get('operators') is not None:
            for k in m.get('operators'):
                temp_model = DescribeOperatorListResponseBodyResultObjectOperators()
                self.operators.append(temp_model.from_map(k))
        return self


class DescribeOperatorListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeOperatorListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeOperatorListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeOperatorListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeOperatorListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeOperatorListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOperatorListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOperatorListBySceneRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, scene=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.scene = scene  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperatorListBySceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene is not None:
            result['scene'] = self.scene
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        return self


class DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables(TeaModel):
    def __init__(self, field_name=None, field_type=None, field_value=None):
        self.field_name = field_name  # type: str
        self.field_type = field_type  # type: str
        self.field_value = field_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        return self


class DescribeOperatorListBySceneResponseBodyResultObjectOperators(TeaModel):
    def __init__(self, code=None, has_right_variable=None, memo=None, name=None, right_variables=None):
        self.code = code  # type: str
        self.has_right_variable = has_right_variable  # type: bool
        self.memo = memo  # type: str
        self.name = name  # type: str
        self.right_variables = right_variables  # type: list[DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables]

    def validate(self):
        if self.right_variables:
            for k in self.right_variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListBySceneResponseBodyResultObjectOperators, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.has_right_variable is not None:
            result['hasRightVariable'] = self.has_right_variable
        if self.memo is not None:
            result['memo'] = self.memo
        if self.name is not None:
            result['name'] = self.name
        result['rightVariables'] = []
        if self.right_variables is not None:
            for k in self.right_variables:
                result['rightVariables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('hasRightVariable') is not None:
            self.has_right_variable = m.get('hasRightVariable')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('name') is not None:
            self.name = m.get('name')
        self.right_variables = []
        if m.get('rightVariables') is not None:
            for k in m.get('rightVariables'):
                temp_model = DescribeOperatorListBySceneResponseBodyResultObjectOperatorsRightVariables()
                self.right_variables.append(temp_model.from_map(k))
        return self


class DescribeOperatorListBySceneResponseBodyResultObject(TeaModel):
    def __init__(self, field_type=None, operators=None):
        self.field_type = field_type  # type: str
        self.operators = operators  # type: list[DescribeOperatorListBySceneResponseBodyResultObjectOperators]

    def validate(self):
        if self.operators:
            for k in self.operators:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListBySceneResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        result['operators'] = []
        if self.operators is not None:
            for k in self.operators:
                result['operators'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        self.operators = []
        if m.get('operators') is not None:
            for k in m.get('operators'):
                temp_model = DescribeOperatorListBySceneResponseBodyResultObjectOperators()
                self.operators.append(temp_model.from_map(k))
        return self


class DescribeOperatorListBySceneResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeOperatorListBySceneResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListBySceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeOperatorListBySceneResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeOperatorListBySceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeOperatorListBySceneResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeOperatorListBySceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOperatorListBySceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOperatorListByTypeRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperatorListByTypeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeOperatorListByTypeResponseBodyResultObjectOperators(TeaModel):
    def __init__(self, code=None, has_right_variable=None, name=None):
        self.code = code  # type: str
        self.has_right_variable = has_right_variable  # type: bool
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOperatorListByTypeResponseBodyResultObjectOperators, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.has_right_variable is not None:
            result['hasRightVariable'] = self.has_right_variable
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('hasRightVariable') is not None:
            self.has_right_variable = m.get('hasRightVariable')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeOperatorListByTypeResponseBodyResultObject(TeaModel):
    def __init__(self, field_type=None, operators=None):
        self.field_type = field_type  # type: str
        self.operators = operators  # type: list[DescribeOperatorListByTypeResponseBodyResultObjectOperators]

    def validate(self):
        if self.operators:
            for k in self.operators:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListByTypeResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        result['operators'] = []
        if self.operators is not None:
            for k in self.operators:
                result['operators'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        self.operators = []
        if m.get('operators') is not None:
            for k in m.get('operators'):
                temp_model = DescribeOperatorListByTypeResponseBodyResultObjectOperators()
                self.operators.append(temp_model.from_map(k))
        return self


class DescribeOperatorListByTypeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeOperatorListByTypeResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeOperatorListByTypeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeOperatorListByTypeResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeOperatorListByTypeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeOperatorListByTypeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeOperatorListByTypeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOperatorListByTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOssAuthStatusRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOssAuthStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeOssAuthStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOssAuthStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeOssAuthStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeOssAuthStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeOssAuthStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOssAuthStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOssPolicyRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, scene=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.scene = scene  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOssPolicyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene is not None:
            result['scene'] = self.scene
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        return self


class DescribeOssPolicyResponseBody(TeaModel):
    def __init__(self, access_id=None, host=None, key=None, policy=None, signature=None, request_id=None):
        self.access_id = access_id  # type: str
        self.host = host  # type: str
        self.key = key  # type: str
        self.policy = policy  # type: str
        self.signature = signature  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOssPolicyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.host is not None:
            result['Host'] = self.host
        if self.key is not None:
            result['Key'] = self.key
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.request_id is not None:
            result['requestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        return self


class DescribeOssPolicyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeOssPolicyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeOssPolicyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOssPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOssTokenRequest(TeaModel):
    def __init__(self, lang=None, file_name=None, reg_id=None, upload_type=None):
        self.lang = lang  # type: str
        self.file_name = file_name  # type: str
        self.reg_id = reg_id  # type: str
        self.upload_type = upload_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOssTokenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.file_name is not None:
            result['fileName'] = self.file_name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.upload_type is not None:
            result['uploadType'] = self.upload_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('fileName') is not None:
            self.file_name = m.get('fileName')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('uploadType') is not None:
            self.upload_type = m.get('uploadType')
        return self


class DescribeOssTokenResponseBody(TeaModel):
    def __init__(self, access_id=None, host=None, key=None, policy=None, request_id=None, signature=None,
                 sts_token=None):
        self.access_id = access_id  # type: str
        self.host = host  # type: str
        self.key = key  # type: str
        self.policy = policy  # type: str
        self.request_id = request_id  # type: str
        self.signature = signature  # type: str
        self.sts_token = sts_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeOssTokenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.host is not None:
            result['Host'] = self.host
        if self.key is not None:
            result['Key'] = self.key
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.sts_token is not None:
            result['StsToken'] = self.sts_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('StsToken') is not None:
            self.sts_token = m.get('StsToken')
        return self


class DescribeOssTokenResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeOssTokenResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeOssTokenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOssTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeParamByEventCodesRequest(TeaModel):
    def __init__(self, lang=None, event_codes=None, parma=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        self.parma = parma  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeParamByEventCodesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.parma is not None:
            result['parma'] = self.parma
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('parma') is not None:
            self.parma = m.get('parma')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeParamByEventCodesResponseBodyResultObject(TeaModel):
    def __init__(self, code=None, name=None):
        self.code = code  # type: str
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeParamByEventCodesResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeParamByEventCodesResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeParamByEventCodesResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeParamByEventCodesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeParamByEventCodesResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeParamByEventCodesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeParamByEventCodesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeParamByEventCodesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeParamByEventCodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeParamListRequest(TeaModel):
    def __init__(self, lang=None, file_url=None, reg_id=None, service_code=None):
        self.lang = lang  # type: str
        self.file_url = file_url  # type: str
        self.reg_id = reg_id  # type: str
        self.service_code = service_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeParamListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.file_url is not None:
            result['fileUrl'] = self.file_url
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('fileUrl') is not None:
            self.file_url = m.get('fileUrl')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        return self


class DescribeParamListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeParamListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeParamListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeParamListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeParamListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeParamListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePocDetailRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, task_id=None, type=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.task_id = task_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePocDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribePocDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePocDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribePocDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribePocDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribePocDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePocDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePocOssTokenRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePocOssTokenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribePocOssTokenResponseBody(TeaModel):
    def __init__(self, access_id=None, host=None, key=None, policy=None, request_id=None, signature=None,
                 result_object=None):
        self.access_id = access_id  # type: str
        self.host = host  # type: str
        self.key = key  # type: str
        self.policy = policy  # type: str
        self.request_id = request_id  # type: str
        self.signature = signature  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePocOssTokenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.host is not None:
            result['Host'] = self.host
        if self.key is not None:
            result['Key'] = self.key
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribePocOssTokenResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribePocOssTokenResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribePocOssTokenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePocOssTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePocTaskListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, page_size=None, reg_id=None, type=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePocTaskListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribePocTaskListResponseBodyResultObject(TeaModel):
    def __init__(self, create_time=None, download_url=None, file_type=None, service_name=None, status=None,
                 task_id=None, task_name=None, update_time=None):
        self.create_time = create_time  # type: str
        self.download_url = download_url  # type: str
        self.file_type = file_type  # type: str
        self.service_name = service_name  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str
        self.task_name = task_name  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePocTaskListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.download_url is not None:
            result['downloadUrl'] = self.download_url
        if self.file_type is not None:
            result['fileType'] = self.file_type
        if self.service_name is not None:
            result['serviceName'] = self.service_name
        if self.status is not None:
            result['status'] = self.status
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.task_name is not None:
            result['taskName'] = self.task_name
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('downloadUrl') is not None:
            self.download_url = m.get('downloadUrl')
        if m.get('fileType') is not None:
            self.file_type = m.get('fileType')
        if m.get('serviceName') is not None:
            self.service_name = m.get('serviceName')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class DescribePocTaskListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribePocTaskListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribePocTaskListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribePocTaskListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribePocTaskListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribePocTaskListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribePocTaskListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePocTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePrivateStackRequest(TeaModel):
    def __init__(self, reg_id=None):
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePrivateStackRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribePrivateStackResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribePrivateStackResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribePrivateStackResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribePrivateStackResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribePrivateStackResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePrivateStackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeQueryVariableDetailRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeQueryVariableDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeQueryVariableDetailResponseBodyResultObject(TeaModel):
    def __init__(self, data_source_code=None, data_source_name=None, description=None, event_code=None,
                 expression=None, expression_title=None, expression_variable=None, id=None, outlier=None, outputs=None,
                 title=None):
        self.data_source_code = data_source_code  # type: long
        self.data_source_name = data_source_name  # type: str
        self.description = description  # type: str
        self.event_code = event_code  # type: str
        self.expression = expression  # type: str
        self.expression_title = expression_title  # type: str
        self.expression_variable = expression_variable  # type: str
        self.id = id  # type: long
        self.outlier = outlier  # type: str
        self.outputs = outputs  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeQueryVariableDetailResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_code is not None:
            result['dataSourceCode'] = self.data_source_code
        if self.data_source_name is not None:
            result['dataSourceName'] = self.data_source_name
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.expression is not None:
            result['expression'] = self.expression
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.expression_variable is not None:
            result['expressionVariable'] = self.expression_variable
        if self.id is not None:
            result['id'] = self.id
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dataSourceCode') is not None:
            self.data_source_code = m.get('dataSourceCode')
        if m.get('dataSourceName') is not None:
            self.data_source_name = m.get('dataSourceName')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('expression') is not None:
            self.expression = m.get('expression')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('expressionVariable') is not None:
            self.expression_variable = m.get('expressionVariable')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeQueryVariableDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeQueryVariableDetailResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeQueryVariableDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeQueryVariableDetailResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeQueryVariableDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeQueryVariableDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeQueryVariableDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeQueryVariableDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeQueryVariablePageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, data_source_code=None, event_code=None, name=None,
                 page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: long
        self.data_source_code = data_source_code  # type: str
        self.event_code = event_code  # type: str
        self.name = name  # type: str
        self.page_size = page_size  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeQueryVariablePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.data_source_code is not None:
            result['dataSourceCode'] = self.data_source_code
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('dataSourceCode') is not None:
            self.data_source_code = m.get('dataSourceCode')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeQueryVariablePageListResponseBodyResultObject(TeaModel):
    def __init__(self, data_source_code=None, data_source_name=None, description=None, event_name=None,
                 field_type=None, gmt_create=None, gmt_modified=None, id=None, name=None, status=None, total=None, version=None):
        self.data_source_code = data_source_code  # type: long
        self.data_source_name = data_source_name  # type: str
        self.description = description  # type: str
        self.event_name = event_name  # type: str
        self.field_type = field_type  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.name = name  # type: str
        self.status = status  # type: str
        self.total = total  # type: long
        self.version = version  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeQueryVariablePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_code is not None:
            result['dataSourceCode'] = self.data_source_code
        if self.data_source_name is not None:
            result['dataSourceName'] = self.data_source_name
        if self.description is not None:
            result['description'] = self.description
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        if self.total is not None:
            result['total'] = self.total
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dataSourceCode') is not None:
            self.data_source_code = m.get('dataSourceCode')
        if m.get('dataSourceName') is not None:
            self.data_source_name = m.get('dataSourceName')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total') is not None:
            self.total = m.get('total')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeQueryVariablePageListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: long
        self.page_size = page_size  # type: long
        self.result_object = result_object  # type: list[DescribeQueryVariablePageListResponseBodyResultObject]
        self.total_item = total_item  # type: long
        self.total_page = total_page  # type: long

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeQueryVariablePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeQueryVariablePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeQueryVariablePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeQueryVariablePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeQueryVariablePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeQueryVariablePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRecommendSceneVariablesRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, sample_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.sample_id = sample_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendSceneVariablesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.sample_id is not None:
            result['sampleId'] = self.sample_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sampleId') is not None:
            self.sample_id = m.get('sampleId')
        return self


class DescribeRecommendSceneVariablesResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendSceneVariablesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeRecommendSceneVariablesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRecommendSceneVariablesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRecommendSceneVariablesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRecommendSceneVariablesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRecommendTaskDetailRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, task_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.task_id = task_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendTaskDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        return self


class DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules(TeaModel):
    def __init__(self, left=None, operator=None, right=None):
        self.left = left  # type: str
        self.operator = operator  # type: str
        self.right = right  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.left is not None:
            result['left'] = self.left
        if self.operator is not None:
            result['operator'] = self.operator
        if self.right is not None:
            result['right'] = self.right
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('left') is not None:
            self.left = m.get('left')
        if m.get('operator') is not None:
            self.operator = m.get('operator')
        if m.get('right') is not None:
            self.right = m.get('right')
        return self


class DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs(TeaModel):
    def __init__(self, compute_expression=None, hit_sample=None, id=None, not_hit_sample=None, recommend_rules=None,
                 rule_id=None, rule_name=None, status=None, velocities=None):
        self.compute_expression = compute_expression  # type: str
        self.hit_sample = hit_sample  # type: long
        self.id = id  # type: long
        self.not_hit_sample = not_hit_sample  # type: long
        self.recommend_rules = recommend_rules  # type: list[DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules]
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.status = status  # type: str
        self.velocities = velocities  # type: str

    def validate(self):
        if self.recommend_rules:
            for k in self.recommend_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.compute_expression is not None:
            result['computeExpression'] = self.compute_expression
        if self.hit_sample is not None:
            result['hitSample'] = self.hit_sample
        if self.id is not None:
            result['id'] = self.id
        if self.not_hit_sample is not None:
            result['notHitSample'] = self.not_hit_sample
        result['recommendRules'] = []
        if self.recommend_rules is not None:
            for k in self.recommend_rules:
                result['recommendRules'].append(k.to_map() if k else None)
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.status is not None:
            result['status'] = self.status
        if self.velocities is not None:
            result['velocities'] = self.velocities
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('computeExpression') is not None:
            self.compute_expression = m.get('computeExpression')
        if m.get('hitSample') is not None:
            self.hit_sample = m.get('hitSample')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('notHitSample') is not None:
            self.not_hit_sample = m.get('notHitSample')
        self.recommend_rules = []
        if m.get('recommendRules') is not None:
            for k in m.get('recommendRules'):
                temp_model = DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOsRecommendRules()
                self.recommend_rules.append(temp_model.from_map(k))
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('velocities') is not None:
            self.velocities = m.get('velocities')
        return self


class DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeRecommendTaskDetailResponseBodyResultObject(TeaModel):
    def __init__(self, event_code=None, event_name=None, expect_velocities=None, gmt_create=None, normal_size=None,
                 recommend_rule_dtos=None, recommend_variable_dtos=None, risk_size=None, sample_name=None, sample_scene=None,
                 sample_scene_name=None, task_id=None, task_name=None, task_status=None):
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.expect_velocities = expect_velocities  # type: list[str]
        self.gmt_create = gmt_create  # type: long
        self.normal_size = normal_size  # type: long
        self.recommend_rule_dtos = recommend_rule_dtos  # type: list[DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs]
        self.recommend_variable_dtos = recommend_variable_dtos  # type: list[DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs]
        self.risk_size = risk_size  # type: long
        self.sample_name = sample_name  # type: str
        self.sample_scene = sample_scene  # type: str
        self.sample_scene_name = sample_scene_name  # type: str
        self.task_id = task_id  # type: long
        self.task_name = task_name  # type: str
        self.task_status = task_status  # type: str

    def validate(self):
        if self.recommend_rule_dtos:
            for k in self.recommend_rule_dtos:
                if k:
                    k.validate()
        if self.recommend_variable_dtos:
            for k in self.recommend_variable_dtos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRecommendTaskDetailResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.expect_velocities is not None:
            result['expectVelocities'] = self.expect_velocities
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.normal_size is not None:
            result['normalSize'] = self.normal_size
        result['recommendRuleDTOs'] = []
        if self.recommend_rule_dtos is not None:
            for k in self.recommend_rule_dtos:
                result['recommendRuleDTOs'].append(k.to_map() if k else None)
        result['recommendVariableDTOs'] = []
        if self.recommend_variable_dtos is not None:
            for k in self.recommend_variable_dtos:
                result['recommendVariableDTOs'].append(k.to_map() if k else None)
        if self.risk_size is not None:
            result['riskSize'] = self.risk_size
        if self.sample_name is not None:
            result['sampleName'] = self.sample_name
        if self.sample_scene is not None:
            result['sampleScene'] = self.sample_scene
        if self.sample_scene_name is not None:
            result['sampleSceneName'] = self.sample_scene_name
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.task_name is not None:
            result['taskName'] = self.task_name
        if self.task_status is not None:
            result['taskStatus'] = self.task_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('expectVelocities') is not None:
            self.expect_velocities = m.get('expectVelocities')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('normalSize') is not None:
            self.normal_size = m.get('normalSize')
        self.recommend_rule_dtos = []
        if m.get('recommendRuleDTOs') is not None:
            for k in m.get('recommendRuleDTOs'):
                temp_model = DescribeRecommendTaskDetailResponseBodyResultObjectRecommendRuleDTOs()
                self.recommend_rule_dtos.append(temp_model.from_map(k))
        self.recommend_variable_dtos = []
        if m.get('recommendVariableDTOs') is not None:
            for k in m.get('recommendVariableDTOs'):
                temp_model = DescribeRecommendTaskDetailResponseBodyResultObjectRecommendVariableDTOs()
                self.recommend_variable_dtos.append(temp_model.from_map(k))
        if m.get('riskSize') is not None:
            self.risk_size = m.get('riskSize')
        if m.get('sampleName') is not None:
            self.sample_name = m.get('sampleName')
        if m.get('sampleScene') is not None:
            self.sample_scene = m.get('sampleScene')
        if m.get('sampleSceneName') is not None:
            self.sample_scene_name = m.get('sampleSceneName')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        if m.get('taskStatus') is not None:
            self.task_status = m.get('taskStatus')
        return self


class DescribeRecommendTaskDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeRecommendTaskDetailResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeRecommendTaskDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeRecommendTaskDetailResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeRecommendTaskDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRecommendTaskDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRecommendTaskDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRecommendTaskDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRecommendTaskPageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, page_size=None, reg_id=None, task_name=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.task_name = task_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendTaskPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_name is not None:
            result['taskName'] = self.task_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        return self


class DescribeRecommendTaskPageListResponseBodyResultObject(TeaModel):
    def __init__(self, expect_velocities=None, gmt_create=None, normal_count=None, normal_size=None,
                 risk_count=None, risk_size=None, sample_name=None, sample_scene=None, task_id=None, task_name=None,
                 task_status=None):
        self.expect_velocities = expect_velocities  # type: list[str]
        self.gmt_create = gmt_create  # type: long
        self.normal_count = normal_count  # type: long
        self.normal_size = normal_size  # type: long
        self.risk_count = risk_count  # type: long
        self.risk_size = risk_size  # type: long
        self.sample_name = sample_name  # type: str
        self.sample_scene = sample_scene  # type: str
        self.task_id = task_id  # type: long
        self.task_name = task_name  # type: str
        self.task_status = task_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendTaskPageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expect_velocities is not None:
            result['expectVelocities'] = self.expect_velocities
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.normal_count is not None:
            result['normalCount'] = self.normal_count
        if self.normal_size is not None:
            result['normalSize'] = self.normal_size
        if self.risk_count is not None:
            result['riskCount'] = self.risk_count
        if self.risk_size is not None:
            result['riskSize'] = self.risk_size
        if self.sample_name is not None:
            result['sampleName'] = self.sample_name
        if self.sample_scene is not None:
            result['sampleScene'] = self.sample_scene
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.task_name is not None:
            result['taskName'] = self.task_name
        if self.task_status is not None:
            result['taskStatus'] = self.task_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expectVelocities') is not None:
            self.expect_velocities = m.get('expectVelocities')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('normalCount') is not None:
            self.normal_count = m.get('normalCount')
        if m.get('normalSize') is not None:
            self.normal_size = m.get('normalSize')
        if m.get('riskCount') is not None:
            self.risk_count = m.get('riskCount')
        if m.get('riskSize') is not None:
            self.risk_size = m.get('riskSize')
        if m.get('sampleName') is not None:
            self.sample_name = m.get('sampleName')
        if m.get('sampleScene') is not None:
            self.sample_scene = m.get('sampleScene')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        if m.get('taskStatus') is not None:
            self.task_status = m.get('taskStatus')
        return self


class DescribeRecommendTaskPageListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeRecommendTaskPageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRecommendTaskPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeRecommendTaskPageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeRecommendTaskPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRecommendTaskPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRecommendTaskPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRecommendTaskPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRecommendVariablesVelocityRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, task_id=None, variable_ids_str=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.task_id = task_id  # type: long
        self.variable_ids_str = variable_ids_str  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendVariablesVelocityRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.variable_ids_str is not None:
            result['variableIdsStr'] = self.variable_ids_str
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('variableIdsStr') is not None:
            self.variable_ids_str = m.get('variableIdsStr')
        return self


class DescribeRecommendVariablesVelocityResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendVariablesVelocityResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeRecommendVariablesVelocityResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRecommendVariablesVelocityResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRecommendVariablesVelocityResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRecommendVariablesVelocityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRecommendVelocitiesRequest(TeaModel):
    def __init__(self, lang=None, code=None, reg_id=None, type=None):
        self.lang = lang  # type: str
        self.code = code  # type: str
        self.reg_id = reg_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendVelocitiesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.code is not None:
            result['code'] = self.code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeRecommendVelocitiesResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRecommendVelocitiesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeRecommendVelocitiesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRecommendVelocitiesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRecommendVelocitiesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRecommendVelocitiesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRegionsRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRegionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeRegionsResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRegionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeRegionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRegionsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRegionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRegionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRequestHitRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, s_request_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.s_request_id = s_request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRequestHitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.s_request_id is not None:
            result['sRequestId'] = self.s_request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sRequestId') is not None:
            self.s_request_id = m.get('sRequestId')
        return self


class DescribeRequestHitResponseBodyResultObjectRuleHitRecords(TeaModel):
    def __init__(self, cost=None, hit_successful=None, is_show_detail=None, order=None, rule_id=None, rule_name=None,
                 rule_snapshot_id=None, rule_status=None):
        self.cost = cost  # type: int
        self.hit_successful = hit_successful  # type: bool
        self.is_show_detail = is_show_detail  # type: bool
        self.order = order  # type: int
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_snapshot_id = rule_snapshot_id  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRequestHitResponseBodyResultObjectRuleHitRecords, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost is not None:
            result['cost'] = self.cost
        if self.hit_successful is not None:
            result['hitSuccessful'] = self.hit_successful
        if self.is_show_detail is not None:
            result['isShowDetail'] = self.is_show_detail
        if self.order is not None:
            result['order'] = self.order
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_snapshot_id is not None:
            result['ruleSnapshotId'] = self.rule_snapshot_id
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('hitSuccessful') is not None:
            self.hit_successful = m.get('hitSuccessful')
        if m.get('isShowDetail') is not None:
            self.is_show_detail = m.get('isShowDetail')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleSnapshotId') is not None:
            self.rule_snapshot_id = m.get('ruleSnapshotId')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeRequestHitResponseBodyResultObject(TeaModel):
    def __init__(self, event_code=None, event_name=None, inputs=None, outputs=None, request_time=None,
                 rule_hit_records=None, s_request_id=None, total_cost=None):
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.inputs = inputs  # type: str
        self.outputs = outputs  # type: str
        self.request_time = request_time  # type: long
        self.rule_hit_records = rule_hit_records  # type: list[DescribeRequestHitResponseBodyResultObjectRuleHitRecords]
        self.s_request_id = s_request_id  # type: str
        self.total_cost = total_cost  # type: long

    def validate(self):
        if self.rule_hit_records:
            for k in self.rule_hit_records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRequestHitResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.request_time is not None:
            result['requestTime'] = self.request_time
        result['ruleHitRecords'] = []
        if self.rule_hit_records is not None:
            for k in self.rule_hit_records:
                result['ruleHitRecords'].append(k.to_map() if k else None)
        if self.s_request_id is not None:
            result['sRequestId'] = self.s_request_id
        if self.total_cost is not None:
            result['totalCost'] = self.total_cost
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('requestTime') is not None:
            self.request_time = m.get('requestTime')
        self.rule_hit_records = []
        if m.get('ruleHitRecords') is not None:
            for k in m.get('ruleHitRecords'):
                temp_model = DescribeRequestHitResponseBodyResultObjectRuleHitRecords()
                self.rule_hit_records.append(temp_model.from_map(k))
        if m.get('sRequestId') is not None:
            self.s_request_id = m.get('sRequestId')
        if m.get('totalCost') is not None:
            self.total_cost = m.get('totalCost')
        return self


class DescribeRequestHitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeRequestHitResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeRequestHitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeRequestHitResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeRequestHitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRequestHitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRequestHitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRequestHitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRequestPeakReportRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRequestPeakReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeRequestPeakReportResponseBodyResultObject(TeaModel):
    def __init__(self, ratio=None, value=None):
        self.ratio = ratio  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRequestPeakReportResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ratio is not None:
            result['ratio'] = self.ratio
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ratio') is not None:
            self.ratio = m.get('ratio')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeRequestPeakReportResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeRequestPeakReportResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRequestPeakReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeRequestPeakReportResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeRequestPeakReportResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRequestPeakReportResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRequestPeakReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRequestPeakReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeResultCountRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeResultCountRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeResultCountResponseBodyResultObject(TeaModel):
    def __init__(self, result=None, total=None):
        self.result = result  # type: str
        self.total = total  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeResultCountResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.result is not None:
            result['result'] = self.result
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class DescribeResultCountResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeResultCountResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeResultCountResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeResultCountResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeResultCountResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeResultCountResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeResultCountResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeResultCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskLineChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskLineChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeRiskLineChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[str]
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskLineChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeRiskLineChartResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskLineChartResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeRiskLineChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeRiskLineChartResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeRiskLineChartResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeRiskLineChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeRiskLineChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeRiskLineChartResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeRiskLineChartResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeRiskLineChartResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeRiskLineChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeRiskLineChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeRiskLineChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskLineChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskLineChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskLineChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRuleBarChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleBarChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeRuleBarChartResponseBodyResultObjectSeriesData(TeaModel):
    def __init__(self, event_name=None, num=None, rule_name=None, status=None):
        self.event_name = event_name  # type: str
        self.num = num  # type: long
        self.rule_name = rule_name  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleBarChartResponseBodyResultObjectSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.num is not None:
            result['num'] = self.num
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('num') is not None:
            self.num = m.get('num')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeRuleBarChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, type=None):
        self.data = data  # type: list[DescribeRuleBarChartResponseBodyResultObjectSeriesData]
        self.type = type  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRuleBarChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeRuleBarChartResponseBodyResultObjectSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeRuleBarChartResponseBodyResultObjectYaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleBarChartResponseBodyResultObjectYaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeRuleBarChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, yaxis=None):
        self.series = series  # type: list[DescribeRuleBarChartResponseBodyResultObjectSeries]
        self.yaxis = yaxis  # type: DescribeRuleBarChartResponseBodyResultObjectYaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.yaxis:
            self.yaxis.validate()

    def to_map(self):
        _map = super(DescribeRuleBarChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.yaxis is not None:
            result['yaxis'] = self.yaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeRuleBarChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('yaxis') is not None:
            temp_model = DescribeRuleBarChartResponseBodyResultObjectYaxis()
            self.yaxis = temp_model.from_map(m['yaxis'])
        return self


class DescribeRuleBarChartResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeRuleBarChartResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeRuleBarChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeRuleBarChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeRuleBarChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRuleBarChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRuleBarChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRuleBarChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRuleCountByUserIdRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleCountByUserIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeRuleCountByUserIdResponseBodyResultObject(TeaModel):
    def __init__(self, limit=None, max_total_item=None, total_item=None):
        self.limit = limit  # type: bool
        self.max_total_item = max_total_item  # type: int
        self.total_item = total_item  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleCountByUserIdResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['limit'] = self.limit
        if self.max_total_item is not None:
            result['maxTotalItem'] = self.max_total_item
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('limit') is not None:
            self.limit = m.get('limit')
        if m.get('maxTotalItem') is not None:
            self.max_total_item = m.get('maxTotalItem')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        return self


class DescribeRuleCountByUserIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeRuleCountByUserIdResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeRuleCountByUserIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeRuleCountByUserIdResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeRuleCountByUserIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRuleCountByUserIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRuleCountByUserIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRuleCountByUserIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRuleDetailByRuleIdRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, reg_id=None, rule_id=None, rule_version_id=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_version_id = rule_version_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleDetailByRuleIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        return self


class DescribeRuleDetailByRuleIdResponseBodyResultObject(TeaModel):
    def __init__(self, biz_version=None, console_rule_id=None, event_code=None, event_name=None, gmt_create=None,
                 gmt_modified=None, logic_expression=None, main_event_code=None, memo=None, rule_action_map=None,
                 rule_actions=None, rule_expressions=None, rule_id=None, rule_name=None, rule_status=None, rule_version_id=None):
        self.biz_version = biz_version  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.logic_expression = logic_expression  # type: str
        self.main_event_code = main_event_code  # type: str
        self.memo = memo  # type: str
        self.rule_action_map = rule_action_map  # type: dict[str, any]
        self.rule_actions = rule_actions  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str
        self.rule_version_id = rule_version_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleDetailByRuleIdResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_version is not None:
            result['bizVersion'] = self.biz_version
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.main_event_code is not None:
            result['mainEventCode'] = self.main_event_code
        if self.memo is not None:
            result['memo'] = self.memo
        if self.rule_action_map is not None:
            result['ruleActionMap'] = self.rule_action_map
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bizVersion') is not None:
            self.biz_version = m.get('bizVersion')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('mainEventCode') is not None:
            self.main_event_code = m.get('mainEventCode')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('ruleActionMap') is not None:
            self.rule_action_map = m.get('ruleActionMap')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        return self


class DescribeRuleDetailByRuleIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeRuleDetailByRuleIdResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeRuleDetailByRuleIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeRuleDetailByRuleIdResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeRuleDetailByRuleIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRuleDetailByRuleIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRuleDetailByRuleIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRuleDetailByRuleIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRuleHitRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, rule_id=None, rule_snapshot_id=None, s_request_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_snapshot_id = rule_snapshot_id  # type: str
        self.s_request_id = s_request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleHitRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_snapshot_id is not None:
            result['ruleSnapshotId'] = self.rule_snapshot_id
        if self.s_request_id is not None:
            result['sRequestId'] = self.s_request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleSnapshotId') is not None:
            self.rule_snapshot_id = m.get('ruleSnapshotId')
        if m.get('sRequestId') is not None:
            self.s_request_id = m.get('sRequestId')
        return self


class DescribeRuleHitResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: dict[str, any]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleHitResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeRuleHitResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRuleHitResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRuleHitResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRuleHitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRuleListByEventCodesListRequest(TeaModel):
    def __init__(self, lang=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.event_codes = event_codes  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleListByEventCodesListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeRuleListByEventCodesListResponseBodyResultObject(TeaModel):
    def __init__(self, rule_id=None, rule_name=None):
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleListByEventCodesListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        return self


class DescribeRuleListByEventCodesListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeRuleListByEventCodesListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRuleListByEventCodesListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeRuleListByEventCodesListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeRuleListByEventCodesListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRuleListByEventCodesListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRuleListByEventCodesListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRuleListByEventCodesListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRulePageListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, current_page=None, event_code=None, page_size=None, reg_id=None,
                 rule_auth_type=None, rule_name=None, rule_status=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.current_page = current_page  # type: str
        self.event_code = event_code  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_auth_type = rule_auth_type  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRulePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_auth_type is not None:
            result['ruleAuthType'] = self.rule_auth_type
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleAuthType') is not None:
            self.rule_auth_type = m.get('ruleAuthType')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeRulePageListResponseBodyResultObjectConsoleAudit(TeaModel):
    def __init__(self, apply_user_id=None, apply_user_name=None, audit_msg=None, audit_real_user_id=None,
                 audit_real_user_name=None, audit_remark=None, audit_status=None, audit_time=None, audit_user_id=None,
                 audit_user_name=None, gmt_create=None, id=None, relation_ext=None, relation_id=None, relation_name=None,
                 relation_type=None):
        self.apply_user_id = apply_user_id  # type: str
        self.apply_user_name = apply_user_name  # type: str
        self.audit_msg = audit_msg  # type: str
        self.audit_real_user_id = audit_real_user_id  # type: str
        self.audit_real_user_name = audit_real_user_name  # type: str
        self.audit_remark = audit_remark  # type: str
        self.audit_status = audit_status  # type: str
        self.audit_time = audit_time  # type: long
        self.audit_user_id = audit_user_id  # type: str
        self.audit_user_name = audit_user_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.id = id  # type: long
        self.relation_ext = relation_ext  # type: str
        self.relation_id = relation_id  # type: long
        self.relation_name = relation_name  # type: str
        self.relation_type = relation_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRulePageListResponseBodyResultObjectConsoleAudit, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_user_id is not None:
            result['applyUserId'] = self.apply_user_id
        if self.apply_user_name is not None:
            result['applyUserName'] = self.apply_user_name
        if self.audit_msg is not None:
            result['auditMsg'] = self.audit_msg
        if self.audit_real_user_id is not None:
            result['auditRealUserId'] = self.audit_real_user_id
        if self.audit_real_user_name is not None:
            result['auditRealUserName'] = self.audit_real_user_name
        if self.audit_remark is not None:
            result['auditRemark'] = self.audit_remark
        if self.audit_status is not None:
            result['auditStatus'] = self.audit_status
        if self.audit_time is not None:
            result['auditTime'] = self.audit_time
        if self.audit_user_id is not None:
            result['auditUserId'] = self.audit_user_id
        if self.audit_user_name is not None:
            result['auditUserName'] = self.audit_user_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.id is not None:
            result['id'] = self.id
        if self.relation_ext is not None:
            result['relationExt'] = self.relation_ext
        if self.relation_id is not None:
            result['relationId'] = self.relation_id
        if self.relation_name is not None:
            result['relationName'] = self.relation_name
        if self.relation_type is not None:
            result['relationType'] = self.relation_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('applyUserId') is not None:
            self.apply_user_id = m.get('applyUserId')
        if m.get('applyUserName') is not None:
            self.apply_user_name = m.get('applyUserName')
        if m.get('auditMsg') is not None:
            self.audit_msg = m.get('auditMsg')
        if m.get('auditRealUserId') is not None:
            self.audit_real_user_id = m.get('auditRealUserId')
        if m.get('auditRealUserName') is not None:
            self.audit_real_user_name = m.get('auditRealUserName')
        if m.get('auditRemark') is not None:
            self.audit_remark = m.get('auditRemark')
        if m.get('auditStatus') is not None:
            self.audit_status = m.get('auditStatus')
        if m.get('auditTime') is not None:
            self.audit_time = m.get('auditTime')
        if m.get('auditUserId') is not None:
            self.audit_user_id = m.get('auditUserId')
        if m.get('auditUserName') is not None:
            self.audit_user_name = m.get('auditUserName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('relationExt') is not None:
            self.relation_ext = m.get('relationExt')
        if m.get('relationId') is not None:
            self.relation_id = m.get('relationId')
        if m.get('relationName') is not None:
            self.relation_name = m.get('relationName')
        if m.get('relationType') is not None:
            self.relation_type = m.get('relationType')
        return self


class DescribeRulePageListResponseBodyResultObject(TeaModel):
    def __init__(self, auth_type=None, console_audit=None, event_code=None, event_name=None, event_type=None,
                 external_rule_name=None, gmt_create=None, gmt_modified=None, id=None, main_rule_id=None, priority=None,
                 rule_auth_type=None, rule_id=None, rule_memo=None, rule_name=None, rule_status=None, rule_version_id=None,
                 template_id=None, version=None):
        self.auth_type = auth_type  # type: str
        self.console_audit = console_audit  # type: DescribeRulePageListResponseBodyResultObjectConsoleAudit
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str
        self.external_rule_name = external_rule_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.main_rule_id = main_rule_id  # type: str
        self.priority = priority  # type: long
        self.rule_auth_type = rule_auth_type  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_memo = rule_memo  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str
        self.rule_version_id = rule_version_id  # type: long
        self.template_id = template_id  # type: long
        self.version = version  # type: int

    def validate(self):
        if self.console_audit:
            self.console_audit.validate()

    def to_map(self):
        _map = super(DescribeRulePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auth_type is not None:
            result['authType'] = self.auth_type
        if self.console_audit is not None:
            result['consoleAudit'] = self.console_audit.to_map()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.external_rule_name is not None:
            result['externalRuleName'] = self.external_rule_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.main_rule_id is not None:
            result['mainRuleId'] = self.main_rule_id
        if self.priority is not None:
            result['priority'] = self.priority
        if self.rule_auth_type is not None:
            result['ruleAuthType'] = self.rule_auth_type
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_memo is not None:
            result['ruleMemo'] = self.rule_memo
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('authType') is not None:
            self.auth_type = m.get('authType')
        if m.get('consoleAudit') is not None:
            temp_model = DescribeRulePageListResponseBodyResultObjectConsoleAudit()
            self.console_audit = temp_model.from_map(m['consoleAudit'])
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('externalRuleName') is not None:
            self.external_rule_name = m.get('externalRuleName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('mainRuleId') is not None:
            self.main_rule_id = m.get('mainRuleId')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('ruleAuthType') is not None:
            self.rule_auth_type = m.get('ruleAuthType')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleMemo') is not None:
            self.rule_memo = m.get('ruleMemo')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeRulePageListResponseBody(TeaModel):
    def __init__(self, current_page=None, page_size=None, request_id=None, result_object=None, total_item=None,
                 total_page=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeRulePageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRulePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeRulePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeRulePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRulePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRulePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRulePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRuleSnapshotRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, rule_id=None, snapshot_version=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: str
        self.snapshot_version = snapshot_version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleSnapshotRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.snapshot_version is not None:
            result['snapshotVersion'] = self.snapshot_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('snapshotVersion') is not None:
            self.snapshot_version = m.get('snapshotVersion')
        return self


class DescribeRuleSnapshotResponseBodyResultObject(TeaModel):
    def __init__(self, biz_version=None, event_code=None, event_name=None, gmt_create=None, gmt_modified=None,
                 logic_expression=None, memo=None, rule_actions=None, rule_expressions=None, rule_id=None, rule_name=None,
                 rule_status=None):
        self.biz_version = biz_version  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.logic_expression = logic_expression  # type: str
        self.memo = memo  # type: str
        self.rule_actions = rule_actions  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleSnapshotResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_version is not None:
            result['bizVersion'] = self.biz_version
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.memo is not None:
            result['memo'] = self.memo
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bizVersion') is not None:
            self.biz_version = m.get('bizVersion')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeRuleSnapshotResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeRuleSnapshotResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeRuleSnapshotResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeRuleSnapshotResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeRuleSnapshotResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRuleSnapshotResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRuleSnapshotResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRuleSnapshotResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRuleVersionListRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, reg_id=None, rule_id=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleVersionListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        return self


class DescribeRuleVersionListResponseBodyResultObjectConsoleAudit(TeaModel):
    def __init__(self, apply_user_id=None, apply_user_name=None, audit_msg=None, audit_real_user_id=None,
                 audit_real_user_name=None, audit_remark=None, audit_status=None, audit_time=None, audit_user_id=None,
                 audit_user_name=None, gmt_create=None, id=None, relation_ext=None, relation_id=None, relation_name=None,
                 relation_type=None):
        self.apply_user_id = apply_user_id  # type: str
        self.apply_user_name = apply_user_name  # type: str
        self.audit_msg = audit_msg  # type: str
        self.audit_real_user_id = audit_real_user_id  # type: str
        self.audit_real_user_name = audit_real_user_name  # type: str
        self.audit_remark = audit_remark  # type: str
        self.audit_status = audit_status  # type: str
        self.audit_time = audit_time  # type: long
        self.audit_user_id = audit_user_id  # type: str
        self.audit_user_name = audit_user_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.id = id  # type: long
        self.relation_ext = relation_ext  # type: str
        self.relation_id = relation_id  # type: long
        self.relation_name = relation_name  # type: str
        self.relation_type = relation_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRuleVersionListResponseBodyResultObjectConsoleAudit, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_user_id is not None:
            result['applyUserId'] = self.apply_user_id
        if self.apply_user_name is not None:
            result['applyUserName'] = self.apply_user_name
        if self.audit_msg is not None:
            result['auditMsg'] = self.audit_msg
        if self.audit_real_user_id is not None:
            result['auditRealUserId'] = self.audit_real_user_id
        if self.audit_real_user_name is not None:
            result['auditRealUserName'] = self.audit_real_user_name
        if self.audit_remark is not None:
            result['auditRemark'] = self.audit_remark
        if self.audit_status is not None:
            result['auditStatus'] = self.audit_status
        if self.audit_time is not None:
            result['auditTime'] = self.audit_time
        if self.audit_user_id is not None:
            result['auditUserId'] = self.audit_user_id
        if self.audit_user_name is not None:
            result['auditUserName'] = self.audit_user_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.id is not None:
            result['id'] = self.id
        if self.relation_ext is not None:
            result['relationExt'] = self.relation_ext
        if self.relation_id is not None:
            result['relationId'] = self.relation_id
        if self.relation_name is not None:
            result['relationName'] = self.relation_name
        if self.relation_type is not None:
            result['relationType'] = self.relation_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('applyUserId') is not None:
            self.apply_user_id = m.get('applyUserId')
        if m.get('applyUserName') is not None:
            self.apply_user_name = m.get('applyUserName')
        if m.get('auditMsg') is not None:
            self.audit_msg = m.get('auditMsg')
        if m.get('auditRealUserId') is not None:
            self.audit_real_user_id = m.get('auditRealUserId')
        if m.get('auditRealUserName') is not None:
            self.audit_real_user_name = m.get('auditRealUserName')
        if m.get('auditRemark') is not None:
            self.audit_remark = m.get('auditRemark')
        if m.get('auditStatus') is not None:
            self.audit_status = m.get('auditStatus')
        if m.get('auditTime') is not None:
            self.audit_time = m.get('auditTime')
        if m.get('auditUserId') is not None:
            self.audit_user_id = m.get('auditUserId')
        if m.get('auditUserName') is not None:
            self.audit_user_name = m.get('auditUserName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('relationExt') is not None:
            self.relation_ext = m.get('relationExt')
        if m.get('relationId') is not None:
            self.relation_id = m.get('relationId')
        if m.get('relationName') is not None:
            self.relation_name = m.get('relationName')
        if m.get('relationType') is not None:
            self.relation_type = m.get('relationType')
        return self


class DescribeRuleVersionListResponseBodyResultObject(TeaModel):
    def __init__(self, console_audit=None, console_rule_id=None, console_rule_memo=None, console_rule_name=None,
                 event_code=None, event_type=None, gmt_create=None, gmt_modified=None, id=None, last_operator=None,
                 priority=None, rule_id=None, rule_status=None, version=None):
        self.console_audit = console_audit  # type: DescribeRuleVersionListResponseBodyResultObjectConsoleAudit
        self.console_rule_id = console_rule_id  # type: long
        self.console_rule_memo = console_rule_memo  # type: str
        self.console_rule_name = console_rule_name  # type: str
        self.event_code = event_code  # type: str
        self.event_type = event_type  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.last_operator = last_operator  # type: str
        self.priority = priority  # type: long
        self.rule_id = rule_id  # type: str
        self.rule_status = rule_status  # type: str
        self.version = version  # type: long

    def validate(self):
        if self.console_audit:
            self.console_audit.validate()

    def to_map(self):
        _map = super(DescribeRuleVersionListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.console_audit is not None:
            result['consoleAudit'] = self.console_audit.to_map()
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.console_rule_memo is not None:
            result['consoleRuleMemo'] = self.console_rule_memo
        if self.console_rule_name is not None:
            result['consoleRuleName'] = self.console_rule_name
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.last_operator is not None:
            result['lastOperator'] = self.last_operator
        if self.priority is not None:
            result['priority'] = self.priority
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('consoleAudit') is not None:
            temp_model = DescribeRuleVersionListResponseBodyResultObjectConsoleAudit()
            self.console_audit = temp_model.from_map(m['consoleAudit'])
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('consoleRuleMemo') is not None:
            self.console_rule_memo = m.get('consoleRuleMemo')
        if m.get('consoleRuleName') is not None:
            self.console_rule_name = m.get('consoleRuleName')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('lastOperator') is not None:
            self.last_operator = m.get('lastOperator')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeRuleVersionListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeRuleVersionListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeRuleVersionListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeRuleVersionListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeRuleVersionListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRuleVersionListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRuleVersionListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRuleVersionListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSDKDownloadListRequest(TeaModel):
    def __init__(self, lang=None, device_type=None, list_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.device_type = device_type  # type: str
        self.list_type = list_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSDKDownloadListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.device_type is not None:
            result['deviceType'] = self.device_type
        if self.list_type is not None:
            result['listType'] = self.list_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('deviceType') is not None:
            self.device_type = m.get('deviceType')
        if m.get('listType') is not None:
            self.list_type = m.get('listType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSDKDownloadListResponseBodyResultObject(TeaModel):
    def __init__(self, description=None, developer=None, device_type=None, download_url=None, md_5=None,
                 package_name=None, privacy_link=None, push_time=None, sdk_version=None, size=None):
        self.description = description  # type: str
        self.developer = developer  # type: str
        self.device_type = device_type  # type: str
        self.download_url = download_url  # type: str
        self.md_5 = md_5  # type: str
        self.package_name = package_name  # type: str
        self.privacy_link = privacy_link  # type: str
        self.push_time = push_time  # type: str
        self.sdk_version = sdk_version  # type: str
        self.size = size  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSDKDownloadListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.developer is not None:
            result['developer'] = self.developer
        if self.device_type is not None:
            result['deviceType'] = self.device_type
        if self.download_url is not None:
            result['downloadUrl'] = self.download_url
        if self.md_5 is not None:
            result['md5'] = self.md_5
        if self.package_name is not None:
            result['packageName'] = self.package_name
        if self.privacy_link is not None:
            result['privacyLink'] = self.privacy_link
        if self.push_time is not None:
            result['pushTime'] = self.push_time
        if self.sdk_version is not None:
            result['sdkVersion'] = self.sdk_version
        if self.size is not None:
            result['size'] = self.size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('developer') is not None:
            self.developer = m.get('developer')
        if m.get('deviceType') is not None:
            self.device_type = m.get('deviceType')
        if m.get('downloadUrl') is not None:
            self.download_url = m.get('downloadUrl')
        if m.get('md5') is not None:
            self.md_5 = m.get('md5')
        if m.get('packageName') is not None:
            self.package_name = m.get('packageName')
        if m.get('privacyLink') is not None:
            self.privacy_link = m.get('privacyLink')
        if m.get('pushTime') is not None:
            self.push_time = m.get('pushTime')
        if m.get('sdkVersion') is not None:
            self.sdk_version = m.get('sdkVersion')
        if m.get('size') is not None:
            self.size = m.get('size')
        return self


class DescribeSDKDownloadListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeSDKDownloadListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSDKDownloadListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSDKDownloadListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeSDKDownloadListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSDKDownloadListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSDKDownloadListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSDKDownloadListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSafConsoleRequest(TeaModel):
    def __init__(self, lang=None, content=None, service=None):
        self.lang = lang  # type: str
        self.content = content  # type: str
        # This parameter is required.
        self.service = service  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafConsoleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.content is not None:
            result['content'] = self.content
        if self.service is not None:
            result['service'] = self.service
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('service') is not None:
            self.service = m.get('service')
        return self


class DescribeSafConsoleResponseBody(TeaModel):
    def __init__(self, request_id=None, biz_data=None):
        self.request_id = request_id  # type: str
        self.biz_data = biz_data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafConsoleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.biz_data is not None:
            result['bizData'] = self.biz_data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('bizData') is not None:
            self.biz_data = m.get('bizData')
        return self


class DescribeSafConsoleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSafConsoleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSafConsoleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSafConsoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSafDeOrderRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, end_date=None, page_size=None, reg_id=None, start_date=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: int
        self.end_date = end_date  # type: str
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafDeOrderRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.start_date is not None:
            result['startDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('startDate') is not None:
            self.start_date = m.get('startDate')
        return self


class DescribeSafDeOrderResponseBodyResultObject(TeaModel):
    def __init__(self, expiration_date=None, open_user_type=None):
        self.expiration_date = expiration_date  # type: long
        self.open_user_type = open_user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafDeOrderResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiration_date is not None:
            result['expirationDate'] = self.expiration_date
        if self.open_user_type is not None:
            result['openUserType'] = self.open_user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expirationDate') is not None:
            self.expiration_date = m.get('expirationDate')
        if m.get('openUserType') is not None:
            self.open_user_type = m.get('openUserType')
        return self


class DescribeSafDeOrderResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeSafDeOrderResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeSafDeOrderResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeSafDeOrderResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeSafDeOrderResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSafDeOrderResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSafDeOrderResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSafDeOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSafOrderRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, end_date=None, exact_product_code=None, page_size=None,
                 reg_id=None, start_date=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: int
        self.end_date = end_date  # type: str
        self.exact_product_code = exact_product_code  # type: str
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafOrderRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.exact_product_code is not None:
            result['exactProductCode'] = self.exact_product_code
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.start_date is not None:
            result['startDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('exactProductCode') is not None:
            self.exact_product_code = m.get('exactProductCode')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('startDate') is not None:
            self.start_date = m.get('startDate')
        return self


class DescribeSafOrderResponseBodyResultObject(TeaModel):
    def __init__(self, expiration_date=None):
        self.expiration_date = expiration_date  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafOrderResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiration_date is not None:
            result['expirationDate'] = self.expiration_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expirationDate') is not None:
            self.expiration_date = m.get('expirationDate')
        return self


class DescribeSafOrderResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeSafOrderResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeSafOrderResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeSafOrderResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeSafOrderResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSafOrderResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSafOrderResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSafOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSafStartConfigRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafStartConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSafStartConfigResponseBodyResultObject(TeaModel):
    def __init__(self, device_types=None, event_codes=None, languages=None, server_regions=None):
        self.device_types = device_types  # type: list[str]
        self.event_codes = event_codes  # type: list[str]
        self.languages = languages  # type: list[str]
        self.server_regions = server_regions  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafStartConfigResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_types is not None:
            result['deviceTypes'] = self.device_types
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.languages is not None:
            result['languages'] = self.languages
        if self.server_regions is not None:
            result['serverRegions'] = self.server_regions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('deviceTypes') is not None:
            self.device_types = m.get('deviceTypes')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('languages') is not None:
            self.languages = m.get('languages')
        if m.get('serverRegions') is not None:
            self.server_regions = m.get('serverRegions')
        return self


class DescribeSafStartConfigResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeSafStartConfigResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeSafStartConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeSafStartConfigResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeSafStartConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSafStartConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSafStartConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSafStartConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSafStartStepsRequest(TeaModel):
    def __init__(self, lang=None, aliyun_server=None, device_types_str=None, event_code=None, language=None,
                 reg_id=None, server_region=None):
        self.lang = lang  # type: str
        self.aliyun_server = aliyun_server  # type: bool
        self.device_types_str = device_types_str  # type: str
        self.event_code = event_code  # type: str
        self.language = language  # type: str
        self.reg_id = reg_id  # type: str
        self.server_region = server_region  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafStartStepsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.aliyun_server is not None:
            result['aliyunServer'] = self.aliyun_server
        if self.device_types_str is not None:
            result['deviceTypesStr'] = self.device_types_str
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.language is not None:
            result['language'] = self.language
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.server_region is not None:
            result['serverRegion'] = self.server_region
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('aliyunServer') is not None:
            self.aliyun_server = m.get('aliyunServer')
        if m.get('deviceTypesStr') is not None:
            self.device_types_str = m.get('deviceTypesStr')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('serverRegion') is not None:
            self.server_region = m.get('serverRegion')
        return self


class DescribeSafStartStepsResponseBodyResultObject(TeaModel):
    def __init__(self, content=None, id=None, type=None):
        self.content = content  # type: str
        self.id = id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafStartStepsResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.id is not None:
            result['id'] = self.id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class DescribeSafStartStepsResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeSafStartStepsResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSafStartStepsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSafStartStepsResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeSafStartStepsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSafStartStepsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSafStartStepsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSafStartStepsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSafTagListRequest(TeaModel):
    def __init__(self, lang=None, api_id=None, current_page=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.api_id = api_id  # type: str
        self.current_page = current_page  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafTagListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.api_id is not None:
            result['apiId'] = self.api_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('apiId') is not None:
            self.api_id = m.get('apiId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSafTagListResponseBodyResultObject(TeaModel):
    def __init__(self, tag_desc=None, tag_mean=None, tag_name=None, tag_state=None, tag_type=None, tag_uid=None,
                 update_time=None):
        self.tag_desc = tag_desc  # type: str
        self.tag_mean = tag_mean  # type: str
        self.tag_name = tag_name  # type: str
        self.tag_state = tag_state  # type: str
        self.tag_type = tag_type  # type: str
        self.tag_uid = tag_uid  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSafTagListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_desc is not None:
            result['tagDesc'] = self.tag_desc
        if self.tag_mean is not None:
            result['tagMean'] = self.tag_mean
        if self.tag_name is not None:
            result['tagName'] = self.tag_name
        if self.tag_state is not None:
            result['tagState'] = self.tag_state
        if self.tag_type is not None:
            result['tagType'] = self.tag_type
        if self.tag_uid is not None:
            result['tagUid'] = self.tag_uid
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tagDesc') is not None:
            self.tag_desc = m.get('tagDesc')
        if m.get('tagMean') is not None:
            self.tag_mean = m.get('tagMean')
        if m.get('tagName') is not None:
            self.tag_name = m.get('tagName')
        if m.get('tagState') is not None:
            self.tag_state = m.get('tagState')
        if m.get('tagType') is not None:
            self.tag_type = m.get('tagType')
        if m.get('tagUid') is not None:
            self.tag_uid = m.get('tagUid')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class DescribeSafTagListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeSafTagListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSafTagListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSafTagListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeSafTagListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSafTagListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSafTagListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSafTagListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleDataListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, delete_tag=None, page_size=None, query_content=None,
                 reg_id=None, sample_id=None, scene=None, status=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.delete_tag = delete_tag  # type: str
        self.page_size = page_size  # type: str
        self.query_content = query_content  # type: str
        self.reg_id = reg_id  # type: str
        self.sample_id = sample_id  # type: long
        self.scene = scene  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleDataListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.delete_tag is not None:
            result['deleteTag'] = self.delete_tag
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.query_content is not None:
            result['queryContent'] = self.query_content
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.sample_id is not None:
            result['sampleId'] = self.sample_id
        if self.scene is not None:
            result['scene'] = self.scene
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('deleteTag') is not None:
            self.delete_tag = m.get('deleteTag')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('queryContent') is not None:
            self.query_content = m.get('queryContent')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sampleId') is not None:
            self.sample_id = m.get('sampleId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeSampleDataListResponseBodyResultObject(TeaModel):
    def __init__(self, classification_type=None, data_distributed=None, data_title=None, delete_tag=None,
                 description=None, gmt_create=None, gmt_modified=None, id=None, name=None, normal_size=None, recall_config=None,
                 risk_size=None, risk_value=None, sample_label_detail=None, sample_size=None, scene=None, status=None,
                 store_path=None, store_type=None, support_recall=None, user_id=None, version=None):
        self.classification_type = classification_type  # type: str
        self.data_distributed = data_distributed  # type: str
        self.data_title = data_title  # type: str
        self.delete_tag = delete_tag  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.name = name  # type: str
        self.normal_size = normal_size  # type: long
        self.recall_config = recall_config  # type: str
        self.risk_size = risk_size  # type: long
        self.risk_value = risk_value  # type: str
        self.sample_label_detail = sample_label_detail  # type: str
        self.sample_size = sample_size  # type: long
        self.scene = scene  # type: str
        self.status = status  # type: str
        self.store_path = store_path  # type: str
        self.store_type = store_type  # type: str
        self.support_recall = support_recall  # type: str
        self.user_id = user_id  # type: long
        self.version = version  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleDataListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.classification_type is not None:
            result['classificationType'] = self.classification_type
        if self.data_distributed is not None:
            result['dataDistributed'] = self.data_distributed
        if self.data_title is not None:
            result['dataTitle'] = self.data_title
        if self.delete_tag is not None:
            result['deleteTag'] = self.delete_tag
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.normal_size is not None:
            result['normalSize'] = self.normal_size
        if self.recall_config is not None:
            result['recallConfig'] = self.recall_config
        if self.risk_size is not None:
            result['riskSize'] = self.risk_size
        if self.risk_value is not None:
            result['riskValue'] = self.risk_value
        if self.sample_label_detail is not None:
            result['sampleLabelDetail'] = self.sample_label_detail
        if self.sample_size is not None:
            result['sampleSize'] = self.sample_size
        if self.scene is not None:
            result['scene'] = self.scene
        if self.status is not None:
            result['status'] = self.status
        if self.store_path is not None:
            result['storePath'] = self.store_path
        if self.store_type is not None:
            result['storeType'] = self.store_type
        if self.support_recall is not None:
            result['supportRecall'] = self.support_recall
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('classificationType') is not None:
            self.classification_type = m.get('classificationType')
        if m.get('dataDistributed') is not None:
            self.data_distributed = m.get('dataDistributed')
        if m.get('dataTitle') is not None:
            self.data_title = m.get('dataTitle')
        if m.get('deleteTag') is not None:
            self.delete_tag = m.get('deleteTag')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('normalSize') is not None:
            self.normal_size = m.get('normalSize')
        if m.get('recallConfig') is not None:
            self.recall_config = m.get('recallConfig')
        if m.get('riskSize') is not None:
            self.risk_size = m.get('riskSize')
        if m.get('riskValue') is not None:
            self.risk_value = m.get('riskValue')
        if m.get('sampleLabelDetail') is not None:
            self.sample_label_detail = m.get('sampleLabelDetail')
        if m.get('sampleSize') is not None:
            self.sample_size = m.get('sampleSize')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('storePath') is not None:
            self.store_path = m.get('storePath')
        if m.get('storeType') is not None:
            self.store_type = m.get('storeType')
        if m.get('supportRecall') is not None:
            self.support_recall = m.get('supportRecall')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeSampleDataListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeSampleDataListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSampleDataListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSampleDataListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeSampleDataListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleDataListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleDataListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleDataListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleDemoDownloadUrlRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, scene=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.scene = scene  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleDemoDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene is not None:
            result['scene'] = self.scene
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        return self


class DescribeSampleDemoDownloadUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleDemoDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeSampleDemoDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleDemoDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleDemoDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleDemoDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleDownloadUrlRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, sample_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.sample_id = sample_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.sample_id is not None:
            result['sampleId'] = self.sample_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sampleId') is not None:
            self.sample_id = m.get('sampleId')
        return self


class DescribeSampleDownloadUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeSampleDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleInfoRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None, versions=None):
        self.lang = lang  # type: str
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str
        self.versions = versions  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.versions is not None:
            result['versions'] = self.versions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('versions') is not None:
            self.versions = m.get('versions')
        return self


class DescribeSampleInfoResponseBodyResultObject(TeaModel):
    def __init__(self, id=None, sample_tags=None, sample_type=None, sample_value=None, update_time=None,
                 version=None):
        self.id = id  # type: long
        self.sample_tags = sample_tags  # type: str
        self.sample_type = sample_type  # type: str
        self.sample_value = sample_value  # type: str
        self.update_time = update_time  # type: str
        self.version = version  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleInfoResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.sample_tags is not None:
            result['sampleTags'] = self.sample_tags
        if self.sample_type is not None:
            result['sampleType'] = self.sample_type
        if self.sample_value is not None:
            result['sampleValue'] = self.sample_value
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('sampleTags') is not None:
            self.sample_tags = m.get('sampleTags')
        if m.get('sampleType') is not None:
            self.sample_type = m.get('sampleType')
        if m.get('sampleValue') is not None:
            self.sample_value = m.get('sampleValue')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeSampleInfoResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeSampleInfoResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeSampleInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeSampleInfoResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeSampleInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, page_size=None, reg_id=None, sample_type=None,
                 sample_value=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.reg_id = reg_id  # type: str
        self.sample_type = sample_type  # type: str
        self.sample_value = sample_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.sample_type is not None:
            result['sampleType'] = self.sample_type
        if self.sample_value is not None:
            result['sampleValue'] = self.sample_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sampleType') is not None:
            self.sample_type = m.get('sampleType')
        if m.get('sampleValue') is not None:
            self.sample_value = m.get('sampleValue')
        return self


class DescribeSampleListResponseBodyResultObject(TeaModel):
    def __init__(self, id=None, sample_tags=None, sample_type=None, sample_value=None, update_time=None,
                 version=None):
        self.id = id  # type: long
        self.sample_tags = sample_tags  # type: str
        self.sample_type = sample_type  # type: int
        self.sample_value = sample_value  # type: str
        self.update_time = update_time  # type: long
        self.version = version  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.sample_tags is not None:
            result['sampleTags'] = self.sample_tags
        if self.sample_type is not None:
            result['sampleType'] = self.sample_type
        if self.sample_value is not None:
            result['sampleValue'] = self.sample_value
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('sampleTags') is not None:
            self.sample_tags = m.get('sampleTags')
        if m.get('sampleType') is not None:
            self.sample_type = m.get('sampleType')
        if m.get('sampleValue') is not None:
            self.sample_value = m.get('sampleValue')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeSampleListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeSampleListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSampleListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSampleListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeSampleListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleSceneListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleSceneListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSampleSceneListResponseBodyResultObject(TeaModel):
    def __init__(self, biz_type=None, config_key=None, config_value=None, creator=None, description=None,
                 gmt_create=None, gmt_modified=None, id=None, last_modified_operator=None, status=None):
        self.biz_type = biz_type  # type: str
        self.config_key = config_key  # type: str
        self.config_value = config_value  # type: str
        self.creator = creator  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.last_modified_operator = last_modified_operator  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleSceneListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['bizType'] = self.biz_type
        if self.config_key is not None:
            result['configKey'] = self.config_key
        if self.config_value is not None:
            result['configValue'] = self.config_value
        if self.creator is not None:
            result['creator'] = self.creator
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.last_modified_operator is not None:
            result['lastModifiedOperator'] = self.last_modified_operator
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bizType') is not None:
            self.biz_type = m.get('bizType')
        if m.get('configKey') is not None:
            self.config_key = m.get('configKey')
        if m.get('configValue') is not None:
            self.config_value = m.get('configValue')
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('lastModifiedOperator') is not None:
            self.last_modified_operator = m.get('lastModifiedOperator')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeSampleSceneListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeSampleSceneListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSampleSceneListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSampleSceneListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeSampleSceneListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleSceneListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleSceneListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleSceneListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleTagListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleTagListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSampleTagListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleTagListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeSampleTagListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleTagListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleTagListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleTagListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSampleUploadPolicyRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleUploadPolicyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSampleUploadPolicyResponseBody(TeaModel):
    def __init__(self, access_id=None, host=None, key=None, policy=None, request_id=None, signature=None,
                 sts_token=None):
        self.access_id = access_id  # type: str
        self.host = host  # type: str
        self.key = key  # type: str
        self.policy = policy  # type: str
        self.request_id = request_id  # type: str
        self.signature = signature  # type: str
        self.sts_token = sts_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSampleUploadPolicyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.host is not None:
            result['Host'] = self.host
        if self.key is not None:
            result['Key'] = self.key
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.sts_token is not None:
            result['StsToken'] = self.sts_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('StsToken') is not None:
            self.sts_token = m.get('StsToken')
        return self


class DescribeSampleUploadPolicyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSampleUploadPolicyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSampleUploadPolicyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSampleUploadPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneAllEventNameCodeListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneAllEventNameCodeListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren(TeaModel):
    def __init__(self, create_type=None, event_code=None, event_name=None, event_type=None):
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_type is not None:
            result['eventType'] = self.event_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        return self


class DescribeSceneAllEventNameCodeListResponseBodyResultObject(TeaModel):
    def __init__(self, children=None, create_type=None, event_code=None, event_name=None, event_type=None):
        self.children = children  # type: list[DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren]
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str

    def validate(self):
        if self.children:
            for k in self.children:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSceneAllEventNameCodeListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['children'] = []
        if self.children is not None:
            for k in self.children:
                result['children'].append(k.to_map() if k else None)
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_type is not None:
            result['eventType'] = self.event_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.children = []
        if m.get('children') is not None:
            for k in m.get('children'):
                temp_model = DescribeSceneAllEventNameCodeListResponseBodyResultObjectChildren()
                self.children.append(temp_model.from_map(k))
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        return self


class DescribeSceneAllEventNameCodeListResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeSceneAllEventNameCodeListResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSceneAllEventNameCodeListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSceneAllEventNameCodeListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeSceneAllEventNameCodeListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneAllEventNameCodeListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneAllEventNameCodeListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneAllEventNameCodeListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneEventPageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, name_or_code=None, page_size=None, reg_id=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.name_or_code = name_or_code  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneEventPageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.name_or_code is not None:
            result['nameOrCode'] = self.name_or_code
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('nameOrCode') is not None:
            self.name_or_code = m.get('nameOrCode')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSceneEventPageListResponseBodyResultObject(TeaModel):
    def __init__(self, common_rule_count=None, custom_rule_count=None, event_code=None, event_name=None,
                 gmt_modified=None, modifier=None, normal_rule_count=None, service=None, use_status=None,
                 white_box_rule_count=None):
        self.common_rule_count = common_rule_count  # type: str
        self.custom_rule_count = custom_rule_count  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.modifier = modifier  # type: str
        self.normal_rule_count = normal_rule_count  # type: str
        self.service = service  # type: str
        self.use_status = use_status  # type: str
        self.white_box_rule_count = white_box_rule_count  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneEventPageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_rule_count is not None:
            result['commonRuleCount'] = self.common_rule_count
        if self.custom_rule_count is not None:
            result['customRuleCount'] = self.custom_rule_count
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.modifier is not None:
            result['modifier'] = self.modifier
        if self.normal_rule_count is not None:
            result['normalRuleCount'] = self.normal_rule_count
        if self.service is not None:
            result['service'] = self.service
        if self.use_status is not None:
            result['useStatus'] = self.use_status
        if self.white_box_rule_count is not None:
            result['whiteBoxRuleCount'] = self.white_box_rule_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonRuleCount') is not None:
            self.common_rule_count = m.get('commonRuleCount')
        if m.get('customRuleCount') is not None:
            self.custom_rule_count = m.get('customRuleCount')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('modifier') is not None:
            self.modifier = m.get('modifier')
        if m.get('normalRuleCount') is not None:
            self.normal_rule_count = m.get('normalRuleCount')
        if m.get('service') is not None:
            self.service = m.get('service')
        if m.get('useStatus') is not None:
            self.use_status = m.get('useStatus')
        if m.get('whiteBoxRuleCount') is not None:
            self.white_box_rule_count = m.get('whiteBoxRuleCount')
        return self


class DescribeSceneEventPageListResponseBody(TeaModel):
    def __init__(self, current_page=None, page_size=None, request_id=None, result_object=None, total_item=None,
                 total_page=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeSceneEventPageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSceneEventPageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSceneEventPageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeSceneEventPageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneEventPageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneEventPageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneEventPageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneRulePageListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, current_page=None, event_code=None, page_size=None, reg_id=None,
                 rule_auth_type=None, rule_name=None, rule_status=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.current_page = current_page  # type: str
        self.event_code = event_code  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_auth_type = rule_auth_type  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneRulePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_auth_type is not None:
            result['ruleAuthType'] = self.rule_auth_type
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleAuthType') is not None:
            self.rule_auth_type = m.get('ruleAuthType')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit(TeaModel):
    def __init__(self, apply_user_id=None, apply_user_name=None, audit_msg=None, audit_real_user_id=None,
                 audit_real_user_name=None, audit_remark=None, audit_status=None, audit_time=None, audit_user_id=None,
                 audit_user_name=None, gmt_create=None, id=None, relation_ext=None, relation_id=None, relation_name=None,
                 relation_type=None):
        self.apply_user_id = apply_user_id  # type: str
        self.apply_user_name = apply_user_name  # type: str
        self.audit_msg = audit_msg  # type: str
        self.audit_real_user_id = audit_real_user_id  # type: str
        self.audit_real_user_name = audit_real_user_name  # type: str
        self.audit_remark = audit_remark  # type: str
        self.audit_status = audit_status  # type: str
        self.audit_time = audit_time  # type: long
        self.audit_user_id = audit_user_id  # type: str
        self.audit_user_name = audit_user_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.id = id  # type: long
        self.relation_ext = relation_ext  # type: str
        self.relation_id = relation_id  # type: long
        self.relation_name = relation_name  # type: str
        self.relation_type = relation_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_user_id is not None:
            result['applyUserId'] = self.apply_user_id
        if self.apply_user_name is not None:
            result['applyUserName'] = self.apply_user_name
        if self.audit_msg is not None:
            result['auditMsg'] = self.audit_msg
        if self.audit_real_user_id is not None:
            result['auditRealUserId'] = self.audit_real_user_id
        if self.audit_real_user_name is not None:
            result['auditRealUserName'] = self.audit_real_user_name
        if self.audit_remark is not None:
            result['auditRemark'] = self.audit_remark
        if self.audit_status is not None:
            result['auditStatus'] = self.audit_status
        if self.audit_time is not None:
            result['auditTime'] = self.audit_time
        if self.audit_user_id is not None:
            result['auditUserId'] = self.audit_user_id
        if self.audit_user_name is not None:
            result['auditUserName'] = self.audit_user_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.id is not None:
            result['id'] = self.id
        if self.relation_ext is not None:
            result['relationExt'] = self.relation_ext
        if self.relation_id is not None:
            result['relationId'] = self.relation_id
        if self.relation_name is not None:
            result['relationName'] = self.relation_name
        if self.relation_type is not None:
            result['relationType'] = self.relation_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('applyUserId') is not None:
            self.apply_user_id = m.get('applyUserId')
        if m.get('applyUserName') is not None:
            self.apply_user_name = m.get('applyUserName')
        if m.get('auditMsg') is not None:
            self.audit_msg = m.get('auditMsg')
        if m.get('auditRealUserId') is not None:
            self.audit_real_user_id = m.get('auditRealUserId')
        if m.get('auditRealUserName') is not None:
            self.audit_real_user_name = m.get('auditRealUserName')
        if m.get('auditRemark') is not None:
            self.audit_remark = m.get('auditRemark')
        if m.get('auditStatus') is not None:
            self.audit_status = m.get('auditStatus')
        if m.get('auditTime') is not None:
            self.audit_time = m.get('auditTime')
        if m.get('auditUserId') is not None:
            self.audit_user_id = m.get('auditUserId')
        if m.get('auditUserName') is not None:
            self.audit_user_name = m.get('auditUserName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('relationExt') is not None:
            self.relation_ext = m.get('relationExt')
        if m.get('relationId') is not None:
            self.relation_id = m.get('relationId')
        if m.get('relationName') is not None:
            self.relation_name = m.get('relationName')
        if m.get('relationType') is not None:
            self.relation_type = m.get('relationType')
        return self


class DescribeSceneRulePageListResponseBodyResultObject(TeaModel):
    def __init__(self, auth_type=None, console_audit=None, event_code=None, event_name=None, event_type=None,
                 external_rule_name=None, gmt_create=None, gmt_modified=None, id=None, main_rule_id=None, priority=None,
                 rule_auth_type=None, rule_id=None, rule_memo=None, rule_name=None, rule_status=None, rule_version_id=None,
                 template_id=None, version=None):
        self.auth_type = auth_type  # type: str
        self.console_audit = console_audit  # type: DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str
        self.external_rule_name = external_rule_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.main_rule_id = main_rule_id  # type: str
        self.priority = priority  # type: long
        self.rule_auth_type = rule_auth_type  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_memo = rule_memo  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str
        self.rule_version_id = rule_version_id  # type: long
        self.template_id = template_id  # type: long
        self.version = version  # type: int

    def validate(self):
        if self.console_audit:
            self.console_audit.validate()

    def to_map(self):
        _map = super(DescribeSceneRulePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auth_type is not None:
            result['authType'] = self.auth_type
        if self.console_audit is not None:
            result['consoleAudit'] = self.console_audit.to_map()
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.external_rule_name is not None:
            result['externalRuleName'] = self.external_rule_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.main_rule_id is not None:
            result['mainRuleId'] = self.main_rule_id
        if self.priority is not None:
            result['priority'] = self.priority
        if self.rule_auth_type is not None:
            result['ruleAuthType'] = self.rule_auth_type
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_memo is not None:
            result['ruleMemo'] = self.rule_memo
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('authType') is not None:
            self.auth_type = m.get('authType')
        if m.get('consoleAudit') is not None:
            temp_model = DescribeSceneRulePageListResponseBodyResultObjectConsoleAudit()
            self.console_audit = temp_model.from_map(m['consoleAudit'])
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('externalRuleName') is not None:
            self.external_rule_name = m.get('externalRuleName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('mainRuleId') is not None:
            self.main_rule_id = m.get('mainRuleId')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('ruleAuthType') is not None:
            self.rule_auth_type = m.get('ruleAuthType')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleMemo') is not None:
            self.rule_memo = m.get('ruleMemo')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeSceneRulePageListResponseBody(TeaModel):
    def __init__(self, current_page=None, page_size=None, request_id=None, result_object=None, total_item=None,
                 total_page=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeSceneRulePageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeSceneRulePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeSceneRulePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeSceneRulePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneRulePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneRulePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneRulePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScoreSectionNumLineChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, by_pass_event_codes=None, end_time=None, main_event_codes=None,
                 reg_id=None, shunt_event_codes=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: str
        self.by_pass_event_codes = by_pass_event_codes  # type: str
        # This parameter is required.
        self.end_time = end_time  # type: str
        self.main_event_codes = main_event_codes  # type: str
        self.reg_id = reg_id  # type: str
        self.shunt_event_codes = shunt_event_codes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionNumLineChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.by_pass_event_codes is not None:
            result['byPassEventCodes'] = self.by_pass_event_codes
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.main_event_codes is not None:
            result['mainEventCodes'] = self.main_event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.shunt_event_codes is not None:
            result['shuntEventCodes'] = self.shunt_event_codes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('byPassEventCodes') is not None:
            self.by_pass_event_codes = m.get('byPassEventCodes')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('mainEventCodes') is not None:
            self.main_event_codes = m.get('mainEventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('shuntEventCodes') is not None:
            self.shunt_event_codes = m.get('shuntEventCodes')
        return self


class DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[str]
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeScoreSectionNumLineChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionNumLineChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeScoreSectionNumLineChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeScoreSectionNumLineChartResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeScoreSectionNumLineChartResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeScoreSectionNumLineChartResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionNumLineChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeScoreSectionNumLineChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeScoreSectionNumLineChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeScoreSectionNumLineChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionNumLineChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScoreSectionNumLineChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScoreSectionPieChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, event_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.event_type = event_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionPieChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeScoreSectionPieChartResponseBodyResultObjectGrid(TeaModel):
    def __init__(self, show=None):
        self.show = show  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionPieChartResponseBodyResultObjectGrid, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.show is not None:
            result['show'] = self.show
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('show') is not None:
            self.show = m.get('show')
        return self


class DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['name'] = self.name
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeScoreSectionPieChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None, rose_type=None):
        self.data = data  # type: list[DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData]
        self.name = name  # type: str
        self.rose_type = rose_type  # type: bool

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionPieChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.rose_type is not None:
            result['roseType'] = self.rose_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeScoreSectionPieChartResponseBodyResultObjectSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('roseType') is not None:
            self.rose_type = m.get('roseType')
        return self


class DescribeScoreSectionPieChartResponseBodyResultObject(TeaModel):
    def __init__(self, animation=None, grid=None, series=None):
        self.animation = animation  # type: bool
        self.grid = grid  # type: DescribeScoreSectionPieChartResponseBodyResultObjectGrid
        self.series = series  # type: list[DescribeScoreSectionPieChartResponseBodyResultObjectSeries]

    def validate(self):
        if self.grid:
            self.grid.validate()
        if self.series:
            for k in self.series:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionPieChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.animation is not None:
            result['animation'] = self.animation
        if self.grid is not None:
            result['grid'] = self.grid.to_map()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('animation') is not None:
            self.animation = m.get('animation')
        if m.get('grid') is not None:
            temp_model = DescribeScoreSectionPieChartResponseBodyResultObjectGrid()
            self.grid = temp_model.from_map(m['grid'])
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeScoreSectionPieChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        return self


class DescribeScoreSectionPieChartResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeScoreSectionPieChartResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionPieChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeScoreSectionPieChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeScoreSectionPieChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeScoreSectionPieChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionPieChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScoreSectionPieChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScoreSectionRatioLineChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, by_pass_event_codes=None, end_time=None, main_event_codes=None,
                 reg_id=None, shunt_event_codes=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: str
        self.by_pass_event_codes = by_pass_event_codes  # type: str
        # This parameter is required.
        self.end_time = end_time  # type: str
        self.main_event_codes = main_event_codes  # type: str
        self.reg_id = reg_id  # type: str
        self.shunt_event_codes = shunt_event_codes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionRatioLineChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.by_pass_event_codes is not None:
            result['byPassEventCodes'] = self.by_pass_event_codes
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.main_event_codes is not None:
            result['mainEventCodes'] = self.main_event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.shunt_event_codes is not None:
            result['shuntEventCodes'] = self.shunt_event_codes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('byPassEventCodes') is not None:
            self.by_pass_event_codes = m.get('byPassEventCodes')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('mainEventCodes') is not None:
            self.main_event_codes = m.get('mainEventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('shuntEventCodes') is not None:
            self.shunt_event_codes = m.get('shuntEventCodes')
        return self


class DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[str]
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeScoreSectionRatioLineChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionRatioLineChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeScoreSectionRatioLineChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeScoreSectionRatioLineChartResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeScoreSectionRatioLineChartResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeScoreSectionRatioLineChartResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionRatioLineChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeScoreSectionRatioLineChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeScoreSectionRatioLineChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeScoreSectionRatioLineChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeScoreSectionRatioLineChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScoreSectionRatioLineChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSelectItemRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSelectItemRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSelectItemResponseBodyResultObject(TeaModel):
    def __init__(self, monitor_status_list=None, task_id_list=None):
        self.monitor_status_list = monitor_status_list  # type: list[str]
        self.task_id_list = task_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSelectItemResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.monitor_status_list is not None:
            result['monitorStatusList'] = self.monitor_status_list
        if self.task_id_list is not None:
            result['taskIdList'] = self.task_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('monitorStatusList') is not None:
            self.monitor_status_list = m.get('monitorStatusList')
        if m.get('taskIdList') is not None:
            self.task_id_list = m.get('taskIdList')
        return self


class DescribeSelectItemResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeSelectItemResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeSelectItemResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeSelectItemResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeSelectItemResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSelectItemResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSelectItemResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSelectItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeServiceAppKeyRequest(TeaModel):
    def __init__(self, reg_id=None):
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceAppKeyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeServiceAppKeyResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 uccess=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.uccess = uccess  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceAppKeyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.uccess is not None:
            result['uccess'] = self.uccess
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('uccess') is not None:
            self.uccess = m.get('uccess')
        return self


class DescribeServiceAppKeyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeServiceAppKeyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeServiceAppKeyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeServiceAppKeyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeServiceConsumeRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, end_date=None, page_size=None, reg_id=None, service_code=None,
                 start_date=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        # This parameter is required.
        self.end_date = end_date  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.service_code = service_code  # type: str
        # This parameter is required.
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceConsumeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        if self.start_date is not None:
            result['startDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        if m.get('startDate') is not None:
            self.start_date = m.get('startDate')
        return self


class DescribeServiceConsumeResponseBodyConsumeRecordsRecords(TeaModel):
    def __init__(self, count=None, service_code=None):
        self.count = count  # type: int
        self.service_code = service_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceConsumeResponseBodyConsumeRecordsRecords, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['count'] = self.count
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('count') is not None:
            self.count = m.get('count')
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        return self


class DescribeServiceConsumeResponseBodyConsumeRecords(TeaModel):
    def __init__(self, date=None, records=None):
        self.date = date  # type: str
        self.records = records  # type: list[DescribeServiceConsumeResponseBodyConsumeRecordsRecords]

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeServiceConsumeResponseBodyConsumeRecords, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['date'] = self.date
        result['records'] = []
        if self.records is not None:
            for k in self.records:
                result['records'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('date') is not None:
            self.date = m.get('date')
        self.records = []
        if m.get('records') is not None:
            for k in m.get('records'):
                temp_model = DescribeServiceConsumeResponseBodyConsumeRecordsRecords()
                self.records.append(temp_model.from_map(k))
        return self


class DescribeServiceConsumeResponseBody(TeaModel):
    def __init__(self, request_id=None, consume_records=None, current_page=None, page_size=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.consume_records = consume_records  # type: list[DescribeServiceConsumeResponseBodyConsumeRecords]
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.consume_records:
            for k in self.consume_records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeServiceConsumeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['consumeRecords'] = []
        if self.consume_records is not None:
            for k in self.consume_records:
                result['consumeRecords'].append(k.to_map() if k else None)
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.consume_records = []
        if m.get('consumeRecords') is not None:
            for k in m.get('consumeRecords'):
                temp_model = DescribeServiceConsumeResponseBodyConsumeRecords()
                self.consume_records.append(temp_model.from_map(k))
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeServiceConsumeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeServiceConsumeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeServiceConsumeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeServiceConsumeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeServiceConsumeDownloadUrlRequest(TeaModel):
    def __init__(self, lang=None, end_date=None, reg_id=None, service_code=None, start_date=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.end_date = end_date  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.service_code = service_code  # type: str
        # This parameter is required.
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceConsumeDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.end_date is not None:
            result['endDate'] = self.end_date
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        if self.start_date is not None:
            result['startDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('endDate') is not None:
            self.end_date = m.get('endDate')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        if m.get('startDate') is not None:
            self.start_date = m.get('startDate')
        return self


class DescribeServiceConsumeDownloadUrlResponseBody(TeaModel):
    def __init__(self, request_id=None, download_file_url=None):
        self.request_id = request_id  # type: str
        self.download_file_url = download_file_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceConsumeDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.download_file_url is not None:
            result['downloadFileUrl'] = self.download_file_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('downloadFileUrl') is not None:
            self.download_file_url = m.get('downloadFileUrl')
        return self


class DescribeServiceConsumeDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeServiceConsumeDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeServiceConsumeDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeServiceConsumeDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeServiceListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeServiceListResponseBodyResultObject(TeaModel):
    def __init__(self, service_code=None, service_name=None):
        self.service_code = service_code  # type: str
        self.service_name = service_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeServiceListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        if self.service_name is not None:
            result['serviceName'] = self.service_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        if m.get('serviceName') is not None:
            self.service_name = m.get('serviceName')
        return self


class DescribeServiceListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeServiceListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeServiceListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeServiceListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class DescribeServiceListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeServiceListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeServiceListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeServiceListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSimulationPreditInfoRequest(TeaModel):
    def __init__(self, lang=None, event_code=None, reg_id=None, rules_str=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.event_code = event_code  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.rules_str = rules_str  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSimulationPreditInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rules_str is not None:
            result['rulesStr'] = self.rules_str
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('rulesStr') is not None:
            self.rules_str = m.get('rulesStr')
        return self


class DescribeSimulationPreditInfoResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSimulationPreditInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeSimulationPreditInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSimulationPreditInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSimulationPreditInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSimulationPreditInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSimulationTaskCountRequest(TeaModel):
    def __init__(self, lang=None, data_source_config=None, data_source_type=None, end_time=None, event_code=None,
                 filters_str=None, reg_id=None, start_time=None):
        self.lang = lang  # type: str
        self.data_source_config = data_source_config  # type: str
        self.data_source_type = data_source_type  # type: str
        # This parameter is required.
        self.end_time = end_time  # type: long
        # This parameter is required.
        self.event_code = event_code  # type: str
        self.filters_str = filters_str  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSimulationTaskCountRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_source_config is not None:
            result['dataSourceConfig'] = self.data_source_config
        if self.data_source_type is not None:
            result['dataSourceType'] = self.data_source_type
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.filters_str is not None:
            result['filtersStr'] = self.filters_str
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.start_time is not None:
            result['startTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataSourceConfig') is not None:
            self.data_source_config = m.get('dataSourceConfig')
        if m.get('dataSourceType') is not None:
            self.data_source_type = m.get('dataSourceType')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('filtersStr') is not None:
            self.filters_str = m.get('filtersStr')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('startTime') is not None:
            self.start_time = m.get('startTime')
        return self


class DescribeSimulationTaskCountResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSimulationTaskCountResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeSimulationTaskCountResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSimulationTaskCountResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSimulationTaskCountResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSimulationTaskCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSimulationTaskListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, id=None, name=None, page_size=None, reg_id=None, title=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.id = id  # type: str
        self.name = name  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSimulationTaskListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeSimulationTaskListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: bool
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSimulationTaskListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeSimulationTaskListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSimulationTaskListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSimulationTaskListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSimulationTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSlsUrlConfigRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSlsUrlConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSlsUrlConfigResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSlsUrlConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeSlsUrlConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSlsUrlConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSlsUrlConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSlsUrlConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSupportRuleListRequest(TeaModel):
    def __init__(self, lang=None, event_code=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.event_code = event_code  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSupportRuleListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeSupportRuleListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSupportRuleListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeSupportRuleListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSupportRuleListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSupportRuleListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSupportRuleListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagListRequest(TeaModel):
    def __init__(self, id=None, lang=None, reg_id=None):
        self.id = id  # type: str
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        return self


class DescribeTagListResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['ResultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObject') is not None:
            self.result_object = m.get('ResultObject')
        return self


class DescribeTagListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagsBarChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None, result=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str
        self.result = result  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsBarChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class DescribeTagsBarChartResponseBodyResultObjectSeriesData(TeaModel):
    def __init__(self, num=None, scale=None):
        self.num = num  # type: long
        self.scale = scale  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsBarChartResponseBodyResultObjectSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.num is not None:
            result['num'] = self.num
        if self.scale is not None:
            result['scale'] = self.scale
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('num') is not None:
            self.num = m.get('num')
        if m.get('scale') is not None:
            self.scale = m.get('scale')
        return self


class DescribeTagsBarChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None, stack=None):
        self.data = data  # type: list[DescribeTagsBarChartResponseBodyResultObjectSeriesData]
        self.name = name  # type: str
        self.stack = stack  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTagsBarChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        if self.stack is not None:
            result['stack'] = self.stack
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeTagsBarChartResponseBodyResultObjectSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('stack') is not None:
            self.stack = m.get('stack')
        return self


class DescribeTagsBarChartResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsBarChartResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeTagsBarChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeTagsBarChartResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeTagsBarChartResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeTagsBarChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeTagsBarChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeTagsBarChartResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeTagsBarChartResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeTagsBarChartResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeTagsBarChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeTagsBarChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeTagsBarChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagsBarChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagsBarChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagsBarChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagsFluctuationRequest(TeaModel):
    def __init__(self, lang=None, event_codes=None, reg_id=None):
        self.lang = lang  # type: str
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsFluctuationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeTagsFluctuationResponseBodyResultObject(TeaModel):
    def __init__(self, table_name=None, today_num=None, within_seven_day_num=None, within_thirty_day_num=None,
                 within_three_day_num=None, yesterday_num=None):
        self.table_name = table_name  # type: str
        self.today_num = today_num  # type: long
        self.within_seven_day_num = within_seven_day_num  # type: str
        self.within_thirty_day_num = within_thirty_day_num  # type: str
        self.within_three_day_num = within_three_day_num  # type: str
        self.yesterday_num = yesterday_num  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsFluctuationResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table_name is not None:
            result['tableName'] = self.table_name
        if self.today_num is not None:
            result['todayNum'] = self.today_num
        if self.within_seven_day_num is not None:
            result['withinSevenDayNum'] = self.within_seven_day_num
        if self.within_thirty_day_num is not None:
            result['withinThirtyDayNum'] = self.within_thirty_day_num
        if self.within_three_day_num is not None:
            result['withinThreeDayNum'] = self.within_three_day_num
        if self.yesterday_num is not None:
            result['yesterdayNum'] = self.yesterday_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tableName') is not None:
            self.table_name = m.get('tableName')
        if m.get('todayNum') is not None:
            self.today_num = m.get('todayNum')
        if m.get('withinSevenDayNum') is not None:
            self.within_seven_day_num = m.get('withinSevenDayNum')
        if m.get('withinThirtyDayNum') is not None:
            self.within_thirty_day_num = m.get('withinThirtyDayNum')
        if m.get('withinThreeDayNum') is not None:
            self.within_three_day_num = m.get('withinThreeDayNum')
        if m.get('yesterdayNum') is not None:
            self.yesterday_num = m.get('yesterdayNum')
        return self


class DescribeTagsFluctuationResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeTagsFluctuationResponseBodyResultObject]
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTagsFluctuationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeTagsFluctuationResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeTagsFluctuationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagsFluctuationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagsFluctuationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagsFluctuationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagsListRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeTagsListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeTagsListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagsListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagsListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagsListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagsNumLineChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, by_pass_event_codes=None, end_time=None, main_event_codes=None,
                 reg_id=None, shunt_event_codes=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: str
        self.by_pass_event_codes = by_pass_event_codes  # type: str
        # This parameter is required.
        self.end_time = end_time  # type: str
        self.main_event_codes = main_event_codes  # type: str
        self.reg_id = reg_id  # type: str
        self.shunt_event_codes = shunt_event_codes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsNumLineChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.by_pass_event_codes is not None:
            result['byPassEventCodes'] = self.by_pass_event_codes
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.main_event_codes is not None:
            result['mainEventCodes'] = self.main_event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.shunt_event_codes is not None:
            result['shuntEventCodes'] = self.shunt_event_codes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('byPassEventCodes') is not None:
            self.by_pass_event_codes = m.get('byPassEventCodes')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('mainEventCodes') is not None:
            self.main_event_codes = m.get('mainEventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('shuntEventCodes') is not None:
            self.shunt_event_codes = m.get('shuntEventCodes')
        return self


class DescribeTagsNumLineChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[str]
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsNumLineChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeTagsNumLineChartResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsNumLineChartResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeTagsNumLineChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeTagsNumLineChartResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeTagsNumLineChartResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeTagsNumLineChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeTagsNumLineChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeTagsNumLineChartResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeTagsNumLineChartResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeTagsNumLineChartResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeTagsNumLineChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeTagsNumLineChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeTagsNumLineChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagsNumLineChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagsNumLineChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagsNumLineChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagsRatioLineChartRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, by_pass_event_codes=None, end_time=None, main_event_codes=None,
                 reg_id=None, shunt_event_codes=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.begin_time = begin_time  # type: long
        self.by_pass_event_codes = by_pass_event_codes  # type: str
        # This parameter is required.
        self.end_time = end_time  # type: long
        self.main_event_codes = main_event_codes  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.shunt_event_codes = shunt_event_codes  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsRatioLineChartRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.by_pass_event_codes is not None:
            result['byPassEventCodes'] = self.by_pass_event_codes
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.main_event_codes is not None:
            result['mainEventCodes'] = self.main_event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.shunt_event_codes is not None:
            result['shuntEventCodes'] = self.shunt_event_codes
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('byPassEventCodes') is not None:
            self.by_pass_event_codes = m.get('byPassEventCodes')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('mainEventCodes') is not None:
            self.main_event_codes = m.get('mainEventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('shuntEventCodes') is not None:
            self.shunt_event_codes = m.get('shuntEventCodes')
        return self


class DescribeTagsRatioLineChartResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[str]
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsRatioLineChartResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeTagsRatioLineChartResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsRatioLineChartResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeTagsRatioLineChartResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeTagsRatioLineChartResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeTagsRatioLineChartResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeTagsRatioLineChartResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeTagsRatioLineChartResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeTagsRatioLineChartResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeTagsRatioLineChartResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeTagsRatioLineChartResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeTagsRatioLineChartResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeTagsRatioLineChartResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeTagsRatioLineChartResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagsRatioLineChartResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagsRatioLineChartResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagsRatioLineChartResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagsTrendRequest(TeaModel):
    def __init__(self, lang=None, begin_time=None, end_time=None, event_codes=None, reg_id=None, result=None):
        self.lang = lang  # type: str
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.event_codes = event_codes  # type: str
        self.reg_id = reg_id  # type: str
        self.result = result  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsTrendRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.begin_time is not None:
            result['beginTime'] = self.begin_time
        if self.end_time is not None:
            result['endTime'] = self.end_time
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.result is not None:
            result['result'] = self.result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('beginTime') is not None:
            self.begin_time = m.get('beginTime')
        if m.get('endTime') is not None:
            self.end_time = m.get('endTime')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('result') is not None:
            self.result = m.get('result')
        return self


class DescribeTagsTrendResponseBodyResultObjectSeriesData(TeaModel):
    def __init__(self, num=None, scale=None):
        self.num = num  # type: long
        self.scale = scale  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsTrendResponseBodyResultObjectSeriesData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.num is not None:
            result['num'] = self.num
        if self.scale is not None:
            result['scale'] = self.scale
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('num') is not None:
            self.num = m.get('num')
        if m.get('scale') is not None:
            self.scale = m.get('scale')
        return self


class DescribeTagsTrendResponseBodyResultObjectSeries(TeaModel):
    def __init__(self, data=None, name=None):
        self.data = data  # type: list[DescribeTagsTrendResponseBodyResultObjectSeriesData]
        self.name = name  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTagsTrendResponseBodyResultObjectSeries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = DescribeTagsTrendResponseBodyResultObjectSeriesData()
                self.data.append(temp_model.from_map(k))
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class DescribeTagsTrendResponseBodyResultObjectXaxis(TeaModel):
    def __init__(self, data=None):
        self.data = data  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagsTrendResponseBodyResultObjectXaxis, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeTagsTrendResponseBodyResultObject(TeaModel):
    def __init__(self, series=None, xaxis=None):
        self.series = series  # type: list[DescribeTagsTrendResponseBodyResultObjectSeries]
        self.xaxis = xaxis  # type: DescribeTagsTrendResponseBodyResultObjectXaxis

    def validate(self):
        if self.series:
            for k in self.series:
                if k:
                    k.validate()
        if self.xaxis:
            self.xaxis.validate()

    def to_map(self):
        _map = super(DescribeTagsTrendResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['series'] = []
        if self.series is not None:
            for k in self.series:
                result['series'].append(k.to_map() if k else None)
        if self.xaxis is not None:
            result['xaxis'] = self.xaxis.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.series = []
        if m.get('series') is not None:
            for k in m.get('series'):
                temp_model = DescribeTagsTrendResponseBodyResultObjectSeries()
                self.series.append(temp_model.from_map(k))
        if m.get('xaxis') is not None:
            temp_model = DescribeTagsTrendResponseBodyResultObjectXaxis()
            self.xaxis = temp_model.from_map(m['xaxis'])
        return self


class DescribeTagsTrendResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeTagsTrendResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeTagsTrendResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeTagsTrendResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeTagsTrendResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagsTrendResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagsTrendResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagsTrendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTaskListRequest(TeaModel):
    def __init__(self, current_page=None, is_page=None, lang=None, page_size=None, reg_id=None):
        self.current_page = current_page  # type: str
        self.is_page = is_page  # type: bool
        self.lang = lang  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTaskListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.is_page is not None:
            result['IsPage'] = self.is_page
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('IsPage') is not None:
            self.is_page = m.get('IsPage')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeTaskListResponseBodyResultObject(TeaModel):
    def __init__(self, completion_time=None, create_time=None, id=None, mark=None, remark=None, scene_name=None,
                 status=None, task_log_id=None, task_type=None):
        self.completion_time = completion_time  # type: long
        self.create_time = create_time  # type: long
        self.id = id  # type: long
        self.mark = mark  # type: int
        self.remark = remark  # type: str
        self.scene_name = scene_name  # type: str
        self.status = status  # type: str
        self.task_log_id = task_log_id  # type: long
        self.task_type = task_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTaskListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.completion_time is not None:
            result['completionTime'] = self.completion_time
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.id is not None:
            result['id'] = self.id
        if self.mark is not None:
            result['mark'] = self.mark
        if self.remark is not None:
            result['remark'] = self.remark
        if self.scene_name is not None:
            result['sceneName'] = self.scene_name
        if self.status is not None:
            result['status'] = self.status
        if self.task_log_id is not None:
            result['taskLogId'] = self.task_log_id
        if self.task_type is not None:
            result['taskType'] = self.task_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('completionTime') is not None:
            self.completion_time = m.get('completionTime')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('mark') is not None:
            self.mark = m.get('mark')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('sceneName') is not None:
            self.scene_name = m.get('sceneName')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('taskLogId') is not None:
            self.task_log_id = m.get('taskLogId')
        if m.get('taskType') is not None:
            self.task_type = m.get('taskType')
        return self


class DescribeTaskListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeTaskListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTaskListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeTaskListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeTaskListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTaskListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTaskListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTaskLogListRequest(TeaModel):
    def __init__(self, current_page=None, is_page=None, lang=None, page_size=None, task_id=None, task_log_id=None,
                 reg_id=None):
        self.current_page = current_page  # type: str
        self.is_page = is_page  # type: bool
        self.lang = lang  # type: str
        self.page_size = page_size  # type: str
        self.task_id = task_id  # type: str
        self.task_log_id = task_log_id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTaskLogListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.is_page is not None:
            result['IsPage'] = self.is_page
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_log_id is not None:
            result['TaskLogId'] = self.task_log_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('IsPage') is not None:
            self.is_page = m.get('IsPage')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskLogId') is not None:
            self.task_log_id = m.get('TaskLogId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeTaskLogListResponseBodyResultObject(TeaModel):
    def __init__(self, completion_time=None, create_time=None, id=None, remark=None, scene_name=None, status=None,
                 task_type=None):
        self.completion_time = completion_time  # type: long
        self.create_time = create_time  # type: long
        self.id = id  # type: long
        self.remark = remark  # type: str
        self.scene_name = scene_name  # type: str
        self.status = status  # type: str
        self.task_type = task_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTaskLogListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.completion_time is not None:
            result['completionTime'] = self.completion_time
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.id is not None:
            result['id'] = self.id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.scene_name is not None:
            result['sceneName'] = self.scene_name
        if self.status is not None:
            result['status'] = self.status
        if self.task_type is not None:
            result['taskType'] = self.task_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('completionTime') is not None:
            self.completion_time = m.get('completionTime')
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('sceneName') is not None:
            self.scene_name = m.get('sceneName')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('taskType') is not None:
            self.task_type = m.get('taskType')
        return self


class DescribeTaskLogListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeTaskLogListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTaskLogListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeTaskLogListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeTaskLogListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTaskLogListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTaskLogListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTaskLogListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTemplateBaseInfoByTemplateIdRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, template_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.template_id = template_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplateBaseInfoByTemplateIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_id is not None:
            result['templateId'] = self.template_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        return self


class DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields(TeaModel):
    def __init__(self, description=None, field_code=None, field_rank=None, field_source=None, field_type=None,
                 title=None):
        self.description = description  # type: str
        self.field_code = field_code  # type: str
        self.field_rank = field_rank  # type: str
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.field_code is not None:
            result['fieldCode'] = self.field_code
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('fieldCode') is not None:
            self.field_code = m.get('fieldCode')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails(TeaModel):
    def __init__(self, logic_expression=None, memo=None, rule_actions=None, rule_expressions=None, rule_id=None,
                 rule_name=None, rule_status=None):
        self.logic_expression = logic_expression  # type: str
        self.memo = memo  # type: str
        self.rule_actions = rule_actions  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.memo is not None:
            result['memo'] = self.memo
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        return self


class DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject(TeaModel):
    def __init__(self, description=None, event_code=None, event_name=None, event_stauts=None, input_fields=None,
                 rule_details=None, template_code=None, template_name=None, template_type=None, version=None):
        self.description = description  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.event_stauts = event_stauts  # type: str
        self.input_fields = input_fields  # type: list[DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields]
        self.rule_details = rule_details  # type: list[DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails]
        self.template_code = template_code  # type: str
        self.template_name = template_name  # type: str
        self.template_type = template_type  # type: str
        self.version = version  # type: int

    def validate(self):
        if self.input_fields:
            for k in self.input_fields:
                if k:
                    k.validate()
        if self.rule_details:
            for k in self.rule_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_stauts is not None:
            result['eventStauts'] = self.event_stauts
        result['inputFields'] = []
        if self.input_fields is not None:
            for k in self.input_fields:
                result['inputFields'].append(k.to_map() if k else None)
        result['ruleDetails'] = []
        if self.rule_details is not None:
            for k in self.rule_details:
                result['ruleDetails'].append(k.to_map() if k else None)
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.template_name is not None:
            result['templateName'] = self.template_name
        if self.template_type is not None:
            result['templateType'] = self.template_type
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventStauts') is not None:
            self.event_stauts = m.get('eventStauts')
        self.input_fields = []
        if m.get('inputFields') is not None:
            for k in m.get('inputFields'):
                temp_model = DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectInputFields()
                self.input_fields.append(temp_model.from_map(k))
        self.rule_details = []
        if m.get('ruleDetails') is not None:
            for k in m.get('ruleDetails'):
                temp_model = DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObjectRuleDetails()
                self.rule_details.append(temp_model.from_map(k))
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeTemplateBaseInfoByTemplateIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeTemplateBaseInfoByTemplateIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeTemplateBaseInfoByTemplateIdResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeTemplateBaseInfoByTemplateIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTemplateBaseInfoByTemplateIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTemplateBaseInfoByTemplateIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTemplateBaseInfoByTemplateIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTemplateCountRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplateCountRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeTemplateCountResponseBodyResultObject(TeaModel):
    def __init__(self, limit=None, max_total_item=None, total_item=None):
        self.limit = limit  # type: bool
        self.max_total_item = max_total_item  # type: int
        self.total_item = total_item  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplateCountResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['limit'] = self.limit
        if self.max_total_item is not None:
            result['maxTotalItem'] = self.max_total_item
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('limit') is not None:
            self.limit = m.get('limit')
        if m.get('maxTotalItem') is not None:
            self.max_total_item = m.get('maxTotalItem')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        return self


class DescribeTemplateCountResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeTemplateCountResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeTemplateCountResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeTemplateCountResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeTemplateCountResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTemplateCountResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTemplateCountResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTemplateCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTemplateDownloadRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplateDownloadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeTemplateDownloadResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplateDownloadResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DescribeTemplateDownloadResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTemplateDownloadResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTemplateDownloadResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTemplateDownloadResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTemplatePageListRequest(TeaModel):
    def __init__(self, lang=None, current_page=None, event_codes=None, page_size=None, reg_id=None,
                 template_name=None, template_search_item=None, template_status=None, template_type=None):
        self.lang = lang  # type: str
        self.current_page = current_page  # type: str
        self.event_codes = event_codes  # type: str
        self.page_size = page_size  # type: str
        self.reg_id = reg_id  # type: str
        self.template_name = template_name  # type: str
        self.template_search_item = template_search_item  # type: str
        self.template_status = template_status  # type: str
        self.template_type = template_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplatePageListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_name is not None:
            result['templateName'] = self.template_name
        if self.template_search_item is not None:
            result['templateSearchItem'] = self.template_search_item
        if self.template_status is not None:
            result['templateStatus'] = self.template_status
        if self.template_type is not None:
            result['templateType'] = self.template_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        if m.get('templateSearchItem') is not None:
            self.template_search_item = m.get('templateSearchItem')
        if m.get('templateStatus') is not None:
            self.template_status = m.get('templateStatus')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        return self


class DescribeTemplatePageListResponseBodyResultObject(TeaModel):
    def __init__(self, description=None, event_code=None, event_name=None, gmt_create=None, gmt_modified=None,
                 id=None, rule_count=None, template_code=None, template_name=None, template_status=None,
                 template_type=None, user_count=None, version=None):
        self.description = description  # type: str
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.rule_count = rule_count  # type: int
        self.template_code = template_code  # type: str
        self.template_name = template_name  # type: str
        self.template_status = template_status  # type: str
        self.template_type = template_type  # type: str
        self.user_count = user_count  # type: int
        self.version = version  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTemplatePageListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.rule_count is not None:
            result['ruleCount'] = self.rule_count
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        if self.template_name is not None:
            result['templateName'] = self.template_name
        if self.template_status is not None:
            result['templateStatus'] = self.template_status
        if self.template_type is not None:
            result['templateType'] = self.template_type
        if self.user_count is not None:
            result['userCount'] = self.user_count
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('ruleCount') is not None:
            self.rule_count = m.get('ruleCount')
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        if m.get('templateName') is not None:
            self.template_name = m.get('templateName')
        if m.get('templateStatus') is not None:
            self.template_status = m.get('templateStatus')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        if m.get('userCount') is not None:
            self.user_count = m.get('userCount')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class DescribeTemplatePageListResponseBody(TeaModel):
    def __init__(self, current_page=None, page_size=None, request_id=None, result_object=None, total_item=None,
                 total_page=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[DescribeTemplatePageListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTemplatePageListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeTemplatePageListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeTemplatePageListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTemplatePageListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTemplatePageListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTemplatePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeUsedServiceRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeUsedServiceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeUsedServiceResponseBodyRecords(TeaModel):
    def __init__(self, en_name=None, name=None, service_code=None):
        self.en_name = en_name  # type: str
        self.name = name  # type: str
        self.service_code = service_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeUsedServiceResponseBodyRecords, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.en_name is not None:
            result['enName'] = self.en_name
        if self.name is not None:
            result['name'] = self.name
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('enName') is not None:
            self.en_name = m.get('enName')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        return self


class DescribeUsedServiceResponseBody(TeaModel):
    def __init__(self, request_id=None, records=None):
        self.request_id = request_id  # type: str
        self.records = records  # type: list[DescribeUsedServiceResponseBodyRecords]

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeUsedServiceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['records'] = []
        if self.records is not None:
            for k in self.records:
                result['records'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.records = []
        if m.get('records') is not None:
            for k in m.get('records'):
                temp_model = DescribeUsedServiceResponseBodyRecords()
                self.records.append(temp_model.from_map(k))
        return self


class DescribeUsedServiceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeUsedServiceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeUsedServiceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeUsedServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeUserInfoRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeUserInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeUserInfoResponseBodyResultObject(TeaModel):
    def __init__(self, client_ip=None, sub_id=None, user_id=None, user_name=None):
        self.client_ip = client_ip  # type: str
        self.sub_id = sub_id  # type: str
        self.user_id = user_id  # type: long
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeUserInfoResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_ip is not None:
            result['clientIp'] = self.client_ip
        if self.sub_id is not None:
            result['subId'] = self.sub_id
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.user_name is not None:
            result['userName'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('clientIp') is not None:
            self.client_ip = m.get('clientIp')
        if m.get('subId') is not None:
            self.sub_id = m.get('subId')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        if m.get('userName') is not None:
            self.user_name = m.get('userName')
        return self


class DescribeUserInfoResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, result_object=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.result_object = result_object  # type: DescribeUserInfoResponseBodyResultObject
        self.success = success  # type: bool

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeUserInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('resultObject') is not None:
            temp_model = DescribeUserInfoResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class DescribeUserInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeUserInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeUserInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeUserInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeVariableBindDetailRequest(TeaModel):
    def __init__(self, lang=None, define_id=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        self.define_id = define_id  # type: long
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableBindDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeVariableBindDetailResponseBodyResultObjectParams(TeaModel):
    def __init__(self, event_field_name=None, required=None, variable_name=None):
        self.event_field_name = event_field_name  # type: str
        self.required = required  # type: bool
        self.variable_name = variable_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableBindDetailResponseBodyResultObjectParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_field_name is not None:
            result['eventFieldName'] = self.event_field_name
        if self.required is not None:
            result['required'] = self.required
        if self.variable_name is not None:
            result['variableName'] = self.variable_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('eventFieldName') is not None:
            self.event_field_name = m.get('eventFieldName')
        if m.get('required') is not None:
            self.required = m.get('required')
        if m.get('variableName') is not None:
            self.variable_name = m.get('variableName')
        return self


class DescribeVariableBindDetailResponseBodyResultObjectRelationRules(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableBindDetailResponseBodyResultObjectRelationRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeVariableBindDetailResponseBodyResultObject(TeaModel):
    def __init__(self, allow_modify=None, define_id=None, define_title=None, description=None, event_code=None,
                 id=None, params=None, relation_rules=None, title=None):
        self.allow_modify = allow_modify  # type: bool
        self.define_id = define_id  # type: long
        self.define_title = define_title  # type: str
        self.description = description  # type: str
        self.event_code = event_code  # type: str
        self.id = id  # type: long
        self.params = params  # type: list[DescribeVariableBindDetailResponseBodyResultObjectParams]
        self.relation_rules = relation_rules  # type: list[DescribeVariableBindDetailResponseBodyResultObjectRelationRules]
        self.title = title  # type: str

    def validate(self):
        if self.params:
            for k in self.params:
                if k:
                    k.validate()
        if self.relation_rules:
            for k in self.relation_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeVariableBindDetailResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_modify is not None:
            result['allowModify'] = self.allow_modify
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.define_title is not None:
            result['defineTitle'] = self.define_title
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.id is not None:
            result['id'] = self.id
        result['params'] = []
        if self.params is not None:
            for k in self.params:
                result['params'].append(k.to_map() if k else None)
        result['relationRules'] = []
        if self.relation_rules is not None:
            for k in self.relation_rules:
                result['relationRules'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('allowModify') is not None:
            self.allow_modify = m.get('allowModify')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('defineTitle') is not None:
            self.define_title = m.get('defineTitle')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('id') is not None:
            self.id = m.get('id')
        self.params = []
        if m.get('params') is not None:
            for k in m.get('params'):
                temp_model = DescribeVariableBindDetailResponseBodyResultObjectParams()
                self.params.append(temp_model.from_map(k))
        self.relation_rules = []
        if m.get('relationRules') is not None:
            for k in m.get('relationRules'):
                temp_model = DescribeVariableBindDetailResponseBodyResultObjectRelationRules()
                self.relation_rules.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeVariableBindDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeVariableBindDetailResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeVariableBindDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeVariableBindDetailResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeVariableBindDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeVariableBindDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeVariableBindDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeVariableBindDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeVariableDetailRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeVariableDetailResponseBodyResultObjectBaseInfo(TeaModel):
    def __init__(self, allow_bind=None, charging_mode=None, charging_mode_desc=None, creator=None,
                 data_display=None, data_threshold=None, deduction_factor=None, description=None, front_allow_bind=None,
                 gmt_create=None, gmt_modified=None, id=None, input_required=None, inputs=None, inputs_desc=None,
                 invoke_key=None, invoke_rt=None, invoke_success_rate=None, invoke_times=None, last_modified_operator=None,
                 name=None, outputs=None, outputs_desc=None, scene=None, scene_desc=None, show_order=None, source=None,
                 source_desc=None, status=None, support_regions=None, title=None, type=None, type_desc=None, x_label=None,
                 y_label=None):
        self.allow_bind = allow_bind  # type: str
        self.charging_mode = charging_mode  # type: str
        self.charging_mode_desc = charging_mode_desc  # type: str
        self.creator = creator  # type: str
        self.data_display = data_display  # type: str
        self.data_threshold = data_threshold  # type: str
        self.deduction_factor = deduction_factor  # type: int
        self.description = description  # type: str
        self.front_allow_bind = front_allow_bind  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.input_required = input_required  # type: str
        self.inputs = inputs  # type: str
        self.inputs_desc = inputs_desc  # type: str
        self.invoke_key = invoke_key  # type: str
        self.invoke_rt = invoke_rt  # type: int
        self.invoke_success_rate = invoke_success_rate  # type: str
        self.invoke_times = invoke_times  # type: long
        self.last_modified_operator = last_modified_operator  # type: str
        self.name = name  # type: str
        self.outputs = outputs  # type: str
        self.outputs_desc = outputs_desc  # type: str
        self.scene = scene  # type: list[str]
        self.scene_desc = scene_desc  # type: list[str]
        self.show_order = show_order  # type: str
        self.source = source  # type: str
        self.source_desc = source_desc  # type: str
        self.status = status  # type: str
        self.support_regions = support_regions  # type: list[str]
        self.title = title  # type: str
        self.type = type  # type: str
        self.type_desc = type_desc  # type: str
        self.x_label = x_label  # type: str
        self.y_label = y_label  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableDetailResponseBodyResultObjectBaseInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_bind is not None:
            result['allowBind'] = self.allow_bind
        if self.charging_mode is not None:
            result['chargingMode'] = self.charging_mode
        if self.charging_mode_desc is not None:
            result['chargingModeDesc'] = self.charging_mode_desc
        if self.creator is not None:
            result['creator'] = self.creator
        if self.data_display is not None:
            result['dataDisplay'] = self.data_display
        if self.data_threshold is not None:
            result['dataThreshold'] = self.data_threshold
        if self.deduction_factor is not None:
            result['deductionFactor'] = self.deduction_factor
        if self.description is not None:
            result['description'] = self.description
        if self.front_allow_bind is not None:
            result['frontAllowBind'] = self.front_allow_bind
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.input_required is not None:
            result['inputRequired'] = self.input_required
        if self.inputs is not None:
            result['inputs'] = self.inputs
        if self.inputs_desc is not None:
            result['inputsDesc'] = self.inputs_desc
        if self.invoke_key is not None:
            result['invokeKey'] = self.invoke_key
        if self.invoke_rt is not None:
            result['invokeRt'] = self.invoke_rt
        if self.invoke_success_rate is not None:
            result['invokeSuccessRate'] = self.invoke_success_rate
        if self.invoke_times is not None:
            result['invokeTimes'] = self.invoke_times
        if self.last_modified_operator is not None:
            result['lastModifiedOperator'] = self.last_modified_operator
        if self.name is not None:
            result['name'] = self.name
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.outputs_desc is not None:
            result['outputsDesc'] = self.outputs_desc
        if self.scene is not None:
            result['scene'] = self.scene
        if self.scene_desc is not None:
            result['sceneDesc'] = self.scene_desc
        if self.show_order is not None:
            result['showOrder'] = self.show_order
        if self.source is not None:
            result['source'] = self.source
        if self.source_desc is not None:
            result['sourceDesc'] = self.source_desc
        if self.status is not None:
            result['status'] = self.status
        if self.support_regions is not None:
            result['supportRegions'] = self.support_regions
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.type_desc is not None:
            result['typeDesc'] = self.type_desc
        if self.x_label is not None:
            result['xLabel'] = self.x_label
        if self.y_label is not None:
            result['yLabel'] = self.y_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('allowBind') is not None:
            self.allow_bind = m.get('allowBind')
        if m.get('chargingMode') is not None:
            self.charging_mode = m.get('chargingMode')
        if m.get('chargingModeDesc') is not None:
            self.charging_mode_desc = m.get('chargingModeDesc')
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('dataDisplay') is not None:
            self.data_display = m.get('dataDisplay')
        if m.get('dataThreshold') is not None:
            self.data_threshold = m.get('dataThreshold')
        if m.get('deductionFactor') is not None:
            self.deduction_factor = m.get('deductionFactor')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('frontAllowBind') is not None:
            self.front_allow_bind = m.get('frontAllowBind')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('inputRequired') is not None:
            self.input_required = m.get('inputRequired')
        if m.get('inputs') is not None:
            self.inputs = m.get('inputs')
        if m.get('inputsDesc') is not None:
            self.inputs_desc = m.get('inputsDesc')
        if m.get('invokeKey') is not None:
            self.invoke_key = m.get('invokeKey')
        if m.get('invokeRt') is not None:
            self.invoke_rt = m.get('invokeRt')
        if m.get('invokeSuccessRate') is not None:
            self.invoke_success_rate = m.get('invokeSuccessRate')
        if m.get('invokeTimes') is not None:
            self.invoke_times = m.get('invokeTimes')
        if m.get('lastModifiedOperator') is not None:
            self.last_modified_operator = m.get('lastModifiedOperator')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('outputsDesc') is not None:
            self.outputs_desc = m.get('outputsDesc')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        if m.get('sceneDesc') is not None:
            self.scene_desc = m.get('sceneDesc')
        if m.get('showOrder') is not None:
            self.show_order = m.get('showOrder')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('sourceDesc') is not None:
            self.source_desc = m.get('sourceDesc')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('supportRegions') is not None:
            self.support_regions = m.get('supportRegions')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('typeDesc') is not None:
            self.type_desc = m.get('typeDesc')
        if m.get('xLabel') is not None:
            self.x_label = m.get('xLabel')
        if m.get('yLabel') is not None:
            self.y_label = m.get('yLabel')
        return self


class DescribeVariableDetailResponseBodyResultObject(TeaModel):
    def __init__(self, base_info=None):
        self.base_info = base_info  # type: DescribeVariableDetailResponseBodyResultObjectBaseInfo

    def validate(self):
        if self.base_info:
            self.base_info.validate()

    def to_map(self):
        _map = super(DescribeVariableDetailResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.base_info is not None:
            result['baseInfo'] = self.base_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baseInfo') is not None:
            temp_model = DescribeVariableDetailResponseBodyResultObjectBaseInfo()
            self.base_info = temp_model.from_map(m['baseInfo'])
        return self


class DescribeVariableDetailResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: DescribeVariableDetailResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(DescribeVariableDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = DescribeVariableDetailResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class DescribeVariableDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeVariableDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeVariableDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeVariableDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeVariableFeeRequest(TeaModel):
    def __init__(self, lang=None, ids=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.ids = ids  # type: list[long]
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableFeeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.ids is not None:
            result['ids'] = self.ids
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeVariableFeeResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableFeeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class DescribeVariableFeeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeVariableFeeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeVariableFeeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeVariableFeeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeVariableListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, current_page=None, page_size=None, ref_obj_id=None, reg_id=None,
                 source_type=None, type=None, types_str=None, value=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.current_page = current_page  # type: str
        self.page_size = page_size  # type: str
        self.ref_obj_id = ref_obj_id  # type: str
        self.reg_id = reg_id  # type: str
        self.source_type = source_type  # type: str
        self.type = type  # type: str
        self.types_str = types_str  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.ref_obj_id is not None:
            result['refObjId'] = self.ref_obj_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.type is not None:
            result['type'] = self.type
        if self.types_str is not None:
            result['typesStr'] = self.types_str
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('refObjId') is not None:
            self.ref_obj_id = m.get('refObjId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('typesStr') is not None:
            self.types_str = m.get('typesStr')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class DescribeVariableListResponseBodyResultObject(TeaModel):
    def __init__(self, capacity=None, define_id=None, description=None, extend_info=None, gmt_create=None,
                 gmt_modified=None, id=None, left_capacity=None, name=None, outputs_type=None, ref_obj_id=None, ref_obj_name=None,
                 ref_obj_type=None, source_type=None, title=None, type=None, user_id=None):
        self.capacity = capacity  # type: long
        self.define_id = define_id  # type: str
        self.description = description  # type: str
        self.extend_info = extend_info  # type: dict[str, any]
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.left_capacity = left_capacity  # type: long
        self.name = name  # type: str
        self.outputs_type = outputs_type  # type: str
        self.ref_obj_id = ref_obj_id  # type: str
        self.ref_obj_name = ref_obj_name  # type: str
        self.ref_obj_type = ref_obj_type  # type: str
        self.source_type = source_type  # type: str
        self.title = title  # type: str
        self.type = type  # type: str
        self.user_id = user_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.capacity is not None:
            result['capacity'] = self.capacity
        if self.define_id is not None:
            result['defineId'] = self.define_id
        if self.description is not None:
            result['description'] = self.description
        if self.extend_info is not None:
            result['extendInfo'] = self.extend_info
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.left_capacity is not None:
            result['leftCapacity'] = self.left_capacity
        if self.name is not None:
            result['name'] = self.name
        if self.outputs_type is not None:
            result['outputsType'] = self.outputs_type
        if self.ref_obj_id is not None:
            result['refObjId'] = self.ref_obj_id
        if self.ref_obj_name is not None:
            result['refObjName'] = self.ref_obj_name
        if self.ref_obj_type is not None:
            result['refObjType'] = self.ref_obj_type
        if self.source_type is not None:
            result['sourceType'] = self.source_type
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('capacity') is not None:
            self.capacity = m.get('capacity')
        if m.get('defineId') is not None:
            self.define_id = m.get('defineId')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('extendInfo') is not None:
            self.extend_info = m.get('extendInfo')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('leftCapacity') is not None:
            self.left_capacity = m.get('leftCapacity')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outputsType') is not None:
            self.outputs_type = m.get('outputsType')
        if m.get('refObjId') is not None:
            self.ref_obj_id = m.get('refObjId')
        if m.get('refObjName') is not None:
            self.ref_obj_name = m.get('refObjName')
        if m.get('refObjType') is not None:
            self.ref_obj_type = m.get('refObjType')
        if m.get('sourceType') is not None:
            self.source_type = m.get('sourceType')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class DescribeVariableListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeVariableListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeVariableListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeVariableListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeVariableListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeVariableListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeVariableListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeVariableListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeVariableMarketListRequest(TeaModel):
    def __init__(self, lang=None, charging_mode=None, current_page=None, page_size=None, paging=None,
                 query_content=None, reg_id=None, scenes_str=None, source=None, title=None):
        self.lang = lang  # type: str
        self.charging_mode = charging_mode  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.paging = paging  # type: str
        self.query_content = query_content  # type: str
        self.reg_id = reg_id  # type: str
        self.scenes_str = scenes_str  # type: str
        self.source = source  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableMarketListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.charging_mode is not None:
            result['chargingMode'] = self.charging_mode
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.paging is not None:
            result['paging'] = self.paging
        if self.query_content is not None:
            result['queryContent'] = self.query_content
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scenes_str is not None:
            result['scenesStr'] = self.scenes_str
        if self.source is not None:
            result['source'] = self.source
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('chargingMode') is not None:
            self.charging_mode = m.get('chargingMode')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('paging') is not None:
            self.paging = m.get('paging')
        if m.get('queryContent') is not None:
            self.query_content = m.get('queryContent')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scenesStr') is not None:
            self.scenes_str = m.get('scenesStr')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class DescribeVariableMarketListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: bool
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableMarketListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeVariableMarketListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeVariableMarketListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeVariableMarketListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeVariableMarketListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeVariableSceneListRequest(TeaModel):
    def __init__(self, lang=None, biz_type=None, config_key=None, current_page=None, page_size=None, paging=None,
                 reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.biz_type = biz_type  # type: str
        self.config_key = config_key  # type: str
        self.current_page = current_page  # type: str
        self.page_size = page_size  # type: str
        # This parameter is required.
        self.paging = paging  # type: bool
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableSceneListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.biz_type is not None:
            result['bizType'] = self.biz_type
        if self.config_key is not None:
            result['configKey'] = self.config_key
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        if self.paging is not None:
            result['paging'] = self.paging
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('bizType') is not None:
            self.biz_type = m.get('bizType')
        if m.get('configKey') is not None:
            self.config_key = m.get('configKey')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        if m.get('paging') is not None:
            self.paging = m.get('paging')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class DescribeVariableSceneListResponseBodyResultObject(TeaModel):
    def __init__(self, biz_type=None, config_key=None, config_value=None, creator=None, description=None,
                 gmt_create=None, gmt_modified=None, id=None, last_modified_operator=None, status=None):
        self.biz_type = biz_type  # type: str
        self.config_key = config_key  # type: str
        self.config_value = config_value  # type: str
        self.creator = creator  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.last_modified_operator = last_modified_operator  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeVariableSceneListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['bizType'] = self.biz_type
        if self.config_key is not None:
            result['configKey'] = self.config_key
        if self.config_value is not None:
            result['configValue'] = self.config_value
        if self.creator is not None:
            result['creator'] = self.creator
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.last_modified_operator is not None:
            result['lastModifiedOperator'] = self.last_modified_operator
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bizType') is not None:
            self.biz_type = m.get('bizType')
        if m.get('configKey') is not None:
            self.config_key = m.get('configKey')
        if m.get('configValue') is not None:
            self.config_value = m.get('configValue')
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('lastModifiedOperator') is not None:
            self.last_modified_operator = m.get('lastModifiedOperator')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeVariableSceneListResponseBody(TeaModel):
    def __init__(self, request_id=None, current_page=None, page_size=None, result_object=None, total_item=None,
                 total_page=None):
        self.request_id = request_id  # type: str
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.result_object = result_object  # type: list[DescribeVariableSceneListResponseBodyResultObject]
        self.total_item = total_item  # type: int
        self.total_page = total_page  # type: int

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeVariableSceneListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.current_page is not None:
            result['currentPage'] = self.current_page
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        if self.total_item is not None:
            result['totalItem'] = self.total_item
        if self.total_page is not None:
            result['totalPage'] = self.total_page
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('currentPage') is not None:
            self.current_page = m.get('currentPage')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = DescribeVariableSceneListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        if m.get('totalItem') is not None:
            self.total_item = m.get('totalItem')
        if m.get('totalPage') is not None:
            self.total_page = m.get('totalPage')
        return self


class DescribeVariableSceneListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeVariableSceneListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeVariableSceneListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeVariableSceneListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExpressionTestRequest(TeaModel):
    def __init__(self, lang=None, expression=None, expression_variable=None, expression_variable_ids=None, id=None,
                 reg_id=None, scene=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.expression = expression  # type: str
        # This parameter is required.
        self.expression_variable = expression_variable  # type: str
        self.expression_variable_ids = expression_variable_ids  # type: str
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.scene = scene  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExpressionTestRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.expression is not None:
            result['expression'] = self.expression
        if self.expression_variable is not None:
            result['expressionVariable'] = self.expression_variable
        if self.expression_variable_ids is not None:
            result['expressionVariableIds'] = self.expression_variable_ids
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene is not None:
            result['scene'] = self.scene
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('expression') is not None:
            self.expression = m.get('expression')
        if m.get('expressionVariable') is not None:
            self.expression_variable = m.get('expressionVariable')
        if m.get('expressionVariableIds') is not None:
            self.expression_variable_ids = m.get('expressionVariableIds')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        return self


class ExpressionTestResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExpressionTestResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ExpressionTestResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ExpressionTestResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ExpressionTestResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExpressionTestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FileUploadRequest(TeaModel):
    def __init__(self, file_name=None, file_url=None, lang=None, tab=None):
        self.file_name = file_name  # type: str
        self.file_url = file_url  # type: str
        self.lang = lang  # type: str
        self.tab = tab  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FileUploadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.tab is not None:
            result['Tab'] = self.tab
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('Tab') is not None:
            self.tab = m.get('Tab')
        return self


class FileUploadResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FileUploadResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['ResultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObject') is not None:
            self.result_object = m.get('ResultObject')
        return self


class FileUploadResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FileUploadResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FileUploadResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FileUploadResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ImportNameListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, data=None, description=None, import_type=None,
                 name_list_type=None, reg_id=None, title=None, variable_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.data = data  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.import_type = import_type  # type: str
        self.name_list_type = name_list_type  # type: str
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.title = title  # type: str
        self.variable_id = variable_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ImportNameListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.data is not None:
            result['data'] = self.data
        if self.description is not None:
            result['description'] = self.description
        if self.import_type is not None:
            result['importType'] = self.import_type
        if self.name_list_type is not None:
            result['nameListType'] = self.name_list_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        if self.variable_id is not None:
            result['variableId'] = self.variable_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('data') is not None:
            self.data = m.get('data')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('importType') is not None:
            self.import_type = m.get('importType')
        if m.get('nameListType') is not None:
            self.name_list_type = m.get('nameListType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('variableId') is not None:
            self.variable_id = m.get('variableId')
        return self


class ImportNameListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ImportNameListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ImportNameListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ImportNameListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ImportNameListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ImportNameListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ImportTemplateEventRequest(TeaModel):
    def __init__(self, lang=None, event_template_ids=None, reg_id=None):
        self.lang = lang  # type: str
        self.event_template_ids = event_template_ids  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ImportTemplateEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_template_ids is not None:
            result['eventTemplateIds'] = self.event_template_ids
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventTemplateIds') is not None:
            self.event_template_ids = m.get('eventTemplateIds')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class ImportTemplateEventResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ImportTemplateEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ImportTemplateEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ImportTemplateEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ImportTemplateEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ImportTemplateEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyAppKeyRequest(TeaModel):
    def __init__(self, lang=None, app_key=None, memo=None, reg_id=None):
        self.lang = lang  # type: str
        self.app_key = app_key  # type: str
        self.memo = memo  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyAppKeyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.app_key is not None:
            result['appKey'] = self.app_key
        if self.memo is not None:
            result['memo'] = self.memo
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('appKey') is not None:
            self.app_key = m.get('appKey')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class ModifyAppKeyResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyAppKeyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ModifyAppKeyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyAppKeyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyAppKeyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyAppKeyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyCustVariableRequest(TeaModel):
    def __init__(self, lang=None, condition=None, data_version=None, description=None, event_codes=None, id=None,
                 name=None, outputs=None, reg_id=None):
        self.lang = lang  # type: str
        self.condition = condition  # type: str
        # This parameter is required.
        self.data_version = data_version  # type: long
        self.description = description  # type: str
        self.event_codes = event_codes  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.name = name  # type: str
        self.outputs = outputs  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyCustVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.condition is not None:
            result['condition'] = self.condition
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.description is not None:
            result['description'] = self.description
        if self.event_codes is not None:
            result['eventCodes'] = self.event_codes
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCodes') is not None:
            self.event_codes = m.get('eventCodes')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class ModifyCustVariableResponseBodyResultObject(TeaModel):
    def __init__(self, fail_type=None, message=None, success=None):
        self.fail_type = fail_type  # type: str
        self.message = message  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyCustVariableResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_type is not None:
            result['failType'] = self.fail_type
        if self.message is not None:
            result['message'] = self.message
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('failType') is not None:
            self.fail_type = m.get('failType')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class ModifyCustVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[ModifyCustVariableResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyCustVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = ModifyCustVariableResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class ModifyCustVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyCustVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyCustVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyCustVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyEventRequest(TeaModel):
    def __init__(self, lang=None, biz_version=None, create_type=None, event_code=None, input_fields_str=None,
                 memo=None, reg_id=None, template_type=None):
        self.lang = lang  # type: str
        self.biz_version = biz_version  # type: int
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.input_fields_str = input_fields_str  # type: str
        self.memo = memo  # type: str
        self.reg_id = reg_id  # type: str
        self.template_type = template_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.biz_version is not None:
            result['bizVersion'] = self.biz_version
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.input_fields_str is not None:
            result['inputFieldsStr'] = self.input_fields_str
        if self.memo is not None:
            result['memo'] = self.memo
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_type is not None:
            result['templateType'] = self.template_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('bizVersion') is not None:
            self.biz_version = m.get('bizVersion')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('inputFieldsStr') is not None:
            self.input_fields_str = m.get('inputFieldsStr')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        return self


class ModifyEventResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyEventStatusRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_code=None, from_event_satus=None, reg_id=None,
                 to_event_satus=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.from_event_satus = from_event_satus  # type: str
        self.reg_id = reg_id  # type: str
        self.to_event_satus = to_event_satus  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyEventStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.from_event_satus is not None:
            result['fromEventSatus'] = self.from_event_satus
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.to_event_satus is not None:
            result['toEventSatus'] = self.to_event_satus
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('fromEventSatus') is not None:
            self.from_event_satus = m.get('fromEventSatus')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('toEventSatus') is not None:
            self.to_event_satus = m.get('toEventSatus')
        return self


class ModifyEventStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyEventStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyEventStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyEventStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyEventStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyEventStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyExpressionVariableRequest(TeaModel):
    def __init__(self, lang=None, data_version=None, description=None, event_code=None, expression=None,
                 expression_title=None, expression_variable=None, id=None, outlier=None, outputs=None, reg_id=None, title=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.data_version = data_version  # type: long
        self.description = description  # type: str
        # This parameter is required.
        self.event_code = event_code  # type: str
        # This parameter is required.
        self.expression = expression  # type: str
        # This parameter is required.
        self.expression_title = expression_title  # type: str
        self.expression_variable = expression_variable  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.outlier = outlier  # type: str
        # This parameter is required.
        self.outputs = outputs  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyExpressionVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.expression is not None:
            result['expression'] = self.expression
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.expression_variable is not None:
            result['expressionVariable'] = self.expression_variable
        if self.id is not None:
            result['id'] = self.id
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('expression') is not None:
            self.expression = m.get('expression')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('expressionVariable') is not None:
            self.expression_variable = m.get('expressionVariable')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ModifyExpressionVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyExpressionVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyExpressionVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyExpressionVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyExpressionVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyExpressionVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyFieldRequest(TeaModel):
    def __init__(self, lang=None, classify=None, description=None, enum_data=None, id=None, name=None, reg_id=None,
                 title=None):
        self.lang = lang  # type: str
        self.classify = classify  # type: str
        self.description = description  # type: str
        self.enum_data = enum_data  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyFieldRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.classify is not None:
            result['classify'] = self.classify
        if self.description is not None:
            result['description'] = self.description
        if self.enum_data is not None:
            result['enumData'] = self.enum_data
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('classify') is not None:
            self.classify = m.get('classify')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('enumData') is not None:
            self.enum_data = m.get('enumData')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ModifyFieldResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyFieldResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyFieldResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyFieldResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyFieldResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyFieldResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPocTaskRequest(TeaModel):
    def __init__(self, lang=None, access_type=None, config=None, file_name=None, file_type=None, file_url=None,
                 reason=None, reg_id=None, service_code=None, service_name=None, task_id=None, task_name=None, type=None):
        self.lang = lang  # type: str
        self.access_type = access_type  # type: str
        self.config = config  # type: str
        self.file_name = file_name  # type: str
        self.file_type = file_type  # type: str
        self.file_url = file_url  # type: str
        self.reason = reason  # type: str
        self.reg_id = reg_id  # type: str
        self.service_code = service_code  # type: str
        self.service_name = service_name  # type: str
        self.task_id = task_id  # type: str
        self.task_name = task_name  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPocTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.access_type is not None:
            result['accessType'] = self.access_type
        if self.config is not None:
            result['config'] = self.config
        if self.file_name is not None:
            result['fileName'] = self.file_name
        if self.file_type is not None:
            result['fileType'] = self.file_type
        if self.file_url is not None:
            result['fileUrl'] = self.file_url
        if self.reason is not None:
            result['reason'] = self.reason
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.service_code is not None:
            result['serviceCode'] = self.service_code
        if self.service_name is not None:
            result['serviceName'] = self.service_name
        if self.task_id is not None:
            result['taskId'] = self.task_id
        if self.task_name is not None:
            result['taskName'] = self.task_name
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('accessType') is not None:
            self.access_type = m.get('accessType')
        if m.get('config') is not None:
            self.config = m.get('config')
        if m.get('fileName') is not None:
            self.file_name = m.get('fileName')
        if m.get('fileType') is not None:
            self.file_type = m.get('fileType')
        if m.get('fileUrl') is not None:
            self.file_url = m.get('fileUrl')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('serviceCode') is not None:
            self.service_code = m.get('serviceCode')
        if m.get('serviceName') is not None:
            self.service_name = m.get('serviceName')
        if m.get('taskId') is not None:
            self.task_id = m.get('taskId')
        if m.get('taskName') is not None:
            self.task_name = m.get('taskName')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ModifyPocTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPocTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyPocTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyPocTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyPocTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyPocTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyRulePriorityRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, priority=None, reg_id=None, rule_id=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.priority = priority  # type: int
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyRulePriorityRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.priority is not None:
            result['priority'] = self.priority
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        return self


class ModifyRulePriorityResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyRulePriorityResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyRulePriorityResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyRulePriorityResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyRulePriorityResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyRulePriorityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyRuleStatusRequest(TeaModel):
    def __init__(self, lang=None, apply_user_id=None, apply_user_name=None, audit_remark=None, audit_user_id=None,
                 audit_user_name=None, console_rule_id=None, event_type=None, reg_id=None, rule_audit_type=None, rule_id=None,
                 rule_version_id=None):
        self.lang = lang  # type: str
        self.apply_user_id = apply_user_id  # type: str
        self.apply_user_name = apply_user_name  # type: str
        self.audit_remark = audit_remark  # type: str
        self.audit_user_id = audit_user_id  # type: str
        self.audit_user_name = audit_user_name  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.event_type = event_type  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_audit_type = rule_audit_type  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_version_id = rule_version_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyRuleStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.apply_user_id is not None:
            result['applyUserId'] = self.apply_user_id
        if self.apply_user_name is not None:
            result['applyUserName'] = self.apply_user_name
        if self.audit_remark is not None:
            result['auditRemark'] = self.audit_remark
        if self.audit_user_id is not None:
            result['auditUserId'] = self.audit_user_id
        if self.audit_user_name is not None:
            result['auditUserName'] = self.audit_user_name
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_audit_type is not None:
            result['ruleAuditType'] = self.rule_audit_type
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('applyUserId') is not None:
            self.apply_user_id = m.get('applyUserId')
        if m.get('applyUserName') is not None:
            self.apply_user_name = m.get('applyUserName')
        if m.get('auditRemark') is not None:
            self.audit_remark = m.get('auditRemark')
        if m.get('auditUserId') is not None:
            self.audit_user_id = m.get('auditUserId')
        if m.get('auditUserName') is not None:
            self.audit_user_name = m.get('auditUserName')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleAuditType') is not None:
            self.rule_audit_type = m.get('ruleAuditType')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        return self


class ModifyRuleStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyRuleStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyRuleStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyRuleStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyRuleStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyRuleStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyTemplateRequestInputFields(TeaModel):
    def __init__(self, description=None, field_code=None, field_rank=None, field_source=None, field_type=None,
                 title=None):
        self.description = description  # type: str
        self.field_code = field_code  # type: str
        self.field_rank = field_rank  # type: int
        self.field_source = field_source  # type: str
        self.field_type = field_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTemplateRequestInputFields, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.field_code is not None:
            result['fieldCode'] = self.field_code
        if self.field_rank is not None:
            result['fieldRank'] = self.field_rank
        if self.field_source is not None:
            result['fieldSource'] = self.field_source
        if self.field_type is not None:
            result['fieldType'] = self.field_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('fieldCode') is not None:
            self.field_code = m.get('fieldCode')
        if m.get('fieldRank') is not None:
            self.field_rank = m.get('fieldRank')
        if m.get('fieldSource') is not None:
            self.field_source = m.get('fieldSource')
        if m.get('fieldType') is not None:
            self.field_type = m.get('fieldType')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ModifyTemplateRequest(TeaModel):
    def __init__(self, lang=None, description=None, event_code=None, input_fields=None, reg_id=None,
                 template_id=None, template_type=None, version=None):
        self.lang = lang  # type: str
        self.description = description  # type: str
        self.event_code = event_code  # type: str
        self.input_fields = input_fields  # type: ModifyTemplateRequestInputFields
        self.reg_id = reg_id  # type: str
        self.template_id = template_id  # type: long
        self.template_type = template_type  # type: str
        self.version = version  # type: int

    def validate(self):
        if self.input_fields:
            self.input_fields.validate()

    def to_map(self):
        _map = super(ModifyTemplateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.input_fields is not None:
            result['inputFields'] = self.input_fields.to_map()
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.template_type is not None:
            result['templateType'] = self.template_type
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('inputFields') is not None:
            temp_model = ModifyTemplateRequestInputFields()
            self.input_fields = temp_model.from_map(m['inputFields'])
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class ModifyTemplateResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTemplateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyTemplateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyTemplateResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyTemplateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyTemplateStatusRequest(TeaModel):
    def __init__(self, lang=None, from_template_satus=None, reg_id=None, template_id=None, to_template_satus=None):
        self.lang = lang  # type: str
        self.from_template_satus = from_template_satus  # type: str
        self.reg_id = reg_id  # type: str
        self.template_id = template_id  # type: long
        self.to_template_satus = to_template_satus  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTemplateStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.from_template_satus is not None:
            result['fromTemplateSatus'] = self.from_template_satus
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.to_template_satus is not None:
            result['toTemplateSatus'] = self.to_template_satus
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('fromTemplateSatus') is not None:
            self.from_template_satus = m.get('fromTemplateSatus')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('toTemplateSatus') is not None:
            self.to_template_satus = m.get('toTemplateSatus')
        return self


class ModifyTemplateStatusResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTemplateStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyTemplateStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyTemplateStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyTemplateStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyTemplateStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyVariableRequest(TeaModel):
    def __init__(self, lang=None, description=None, id=None, reg_id=None, title=None):
        self.lang = lang  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.description is not None:
            result['description'] = self.description
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ModifyVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class ModifyVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenConsoleSlsRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, scene=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.scene = scene  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenConsoleSlsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.scene is not None:
            result['scene'] = self.scene
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('scene') is not None:
            self.scene = m.get('scene')
        return self


class OpenConsoleSlsResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OpenConsoleSlsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class OpenConsoleSlsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OpenConsoleSlsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OpenConsoleSlsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenConsoleSlsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OperateFavoriteVariableRequest(TeaModel):
    def __init__(self, lang=None, id=None, operate=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.operate = operate  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OperateFavoriteVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.operate is not None:
            result['operate'] = self.operate
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('operate') is not None:
            self.operate = m.get('operate')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class OperateFavoriteVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(OperateFavoriteVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class OperateFavoriteVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: OperateFavoriteVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(OperateFavoriteVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OperateFavoriteVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PermissionCheckRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PermissionCheckRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        return self


class PermissionCheckResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PermissionCheckResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['ResultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObject') is not None:
            self.result_object = m.get('ResultObject')
        return self


class PermissionCheckResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PermissionCheckResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PermissionCheckResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PermissionCheckResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAuthRuleDetailByRuleIdRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, reg_id=None, rule_id=None, rule_version_id=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_version_id = rule_version_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryAuthRuleDetailByRuleIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        return self


class QueryAuthRuleDetailByRuleIdResponseBodyResultObject(TeaModel):
    def __init__(self, audit_id=None, auth_type=None, auth_users=None, console_rule_id=None, event_code=None,
                 event_name=None, gmt_create=None, gmt_modified=None, logic_expression=None, memo=None, priority=None,
                 rule_action_map=None, rule_actions=None, rule_auth_type=None, rule_expressions=None, rule_id=None, rule_name=None,
                 rule_status=None, rule_version_id=None, template_type=None, version=None):
        self.audit_id = audit_id  # type: long
        self.auth_type = auth_type  # type: str
        self.auth_users = auth_users  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.event_code = event_code  # type: str
        self.event_name = event_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.logic_expression = logic_expression  # type: str
        self.memo = memo  # type: str
        self.priority = priority  # type: long
        self.rule_action_map = rule_action_map  # type: dict[str, str]
        self.rule_actions = rule_actions  # type: str
        self.rule_auth_type = rule_auth_type  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str
        self.rule_version_id = rule_version_id  # type: long
        self.template_type = template_type  # type: str
        self.version = version  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryAuthRuleDetailByRuleIdResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_id is not None:
            result['auditId'] = self.audit_id
        if self.auth_type is not None:
            result['authType'] = self.auth_type
        if self.auth_users is not None:
            result['authUsers'] = self.auth_users
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.memo is not None:
            result['memo'] = self.memo
        if self.priority is not None:
            result['priority'] = self.priority
        if self.rule_action_map is not None:
            result['ruleActionMap'] = self.rule_action_map
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_auth_type is not None:
            result['ruleAuthType'] = self.rule_auth_type
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        if self.template_type is not None:
            result['templateType'] = self.template_type
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('auditId') is not None:
            self.audit_id = m.get('auditId')
        if m.get('authType') is not None:
            self.auth_type = m.get('authType')
        if m.get('authUsers') is not None:
            self.auth_users = m.get('authUsers')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('priority') is not None:
            self.priority = m.get('priority')
        if m.get('ruleActionMap') is not None:
            self.rule_action_map = m.get('ruleActionMap')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleAuthType') is not None:
            self.rule_auth_type = m.get('ruleAuthType')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        if m.get('templateType') is not None:
            self.template_type = m.get('templateType')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class QueryAuthRuleDetailByRuleIdResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: QueryAuthRuleDetailByRuleIdResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(QueryAuthRuleDetailByRuleIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            temp_model = QueryAuthRuleDetailByRuleIdResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class QueryAuthRuleDetailByRuleIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryAuthRuleDetailByRuleIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryAuthRuleDetailByRuleIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryAuthRuleDetailByRuleIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAuthUserNameRequest(TeaModel):
    def __init__(self, lang=None, bind_id=None, reg_id=None):
        self.lang = lang  # type: str
        self.bind_id = bind_id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryAuthUserNameRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.bind_id is not None:
            result['bindId'] = self.bind_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('bindId') is not None:
            self.bind_id = m.get('bindId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class QueryAuthUserNameResponseBodyResultObject(TeaModel):
    def __init__(self, company=None, user_id=None):
        self.company = company  # type: str
        self.user_id = user_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryAuthUserNameResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company is not None:
            result['company'] = self.company
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('company') is not None:
            self.company = m.get('company')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class QueryAuthUserNameResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: QueryAuthUserNameResponseBodyResultObject

    def validate(self):
        if self.result_object:
            self.result_object.validate()

    def to_map(self):
        _map = super(QueryAuthUserNameResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            temp_model = QueryAuthUserNameResponseBodyResultObject()
            self.result_object = temp_model.from_map(m['resultObject'])
        return self


class QueryAuthUserNameResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryAuthUserNameResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryAuthUserNameResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryAuthUserNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAuthorizationUserListRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_code=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryAuthorizationUserListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class QueryAuthorizationUserListResponseBodyResultObject(TeaModel):
    def __init__(self, company=None, id=None, uid=None, user_id=None):
        self.company = company  # type: str
        self.id = id  # type: long
        self.uid = uid  # type: str
        self.user_id = user_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryAuthorizationUserListResponseBodyResultObject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company is not None:
            result['company'] = self.company
        if self.id is not None:
            result['id'] = self.id
        if self.uid is not None:
            result['uid'] = self.uid
        if self.user_id is not None:
            result['userId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('company') is not None:
            self.company = m.get('company')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        if m.get('userId') is not None:
            self.user_id = m.get('userId')
        return self


class QueryAuthorizationUserListResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: list[QueryAuthorizationUserListResponseBodyResultObject]

    def validate(self):
        if self.result_object:
            for k in self.result_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryAuthorizationUserListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        result['resultObject'] = []
        if self.result_object is not None:
            for k in self.result_object:
                result['resultObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        self.result_object = []
        if m.get('resultObject') is not None:
            for k in m.get('resultObject'):
                temp_model = QueryAuthorizationUserListResponseBodyResultObject()
                self.result_object.append(temp_model.from_map(k))
        return self


class QueryAuthorizationUserListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryAuthorizationUserListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryAuthorizationUserListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryAuthorizationUserListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RecallRuleAuditRequest(TeaModel):
    def __init__(self, id=None, reg_id=None):
        # This parameter is required.
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecallRuleAuditRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class RecallRuleAuditResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecallRuleAuditResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class RecallRuleAuditResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RecallRuleAuditResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RecallRuleAuditResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RecallRuleAuditResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveEventRequest(TeaModel):
    def __init__(self, lang=None, create_type=None, event_code=None, id=None, reg_id=None, template_code=None):
        self.lang = lang  # type: str
        self.create_type = create_type  # type: str
        self.event_code = event_code  # type: str
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str
        self.template_code = template_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.create_type is not None:
            result['createType'] = self.create_type
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_code is not None:
            result['templateCode'] = self.template_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('createType') is not None:
            self.create_type = m.get('createType')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateCode') is not None:
            self.template_code = m.get('templateCode')
        return self


class RemoveEventResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class RemoveEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RemoveEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemoveEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveTemplateRequest(TeaModel):
    def __init__(self, lang=None, event_code=None, reg_id=None, template_id=None, version=None):
        self.lang = lang  # type: str
        self.event_code = event_code  # type: str
        self.reg_id = reg_id  # type: str
        self.template_id = template_id  # type: long
        self.version = version  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveTemplateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.template_id is not None:
            result['templateId'] = self.template_id
        if self.version is not None:
            result['version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('templateId') is not None:
            self.template_id = m.get('templateId')
        if m.get('version') is not None:
            self.version = m.get('version')
        return self


class RemoveTemplateResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveTemplateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class RemoveTemplateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RemoveTemplateResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemoveTemplateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RemoveTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SampleFileDownloadRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, tab=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.tab = tab  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SampleFileDownloadRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        if self.tab is not None:
            result['Tab'] = self.tab
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        if m.get('Tab') is not None:
            self.tab = m.get('Tab')
        return self


class SampleFileDownloadResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SampleFileDownloadResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['ResultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObject') is not None:
            self.result_object = m.get('ResultObject')
        return self


class SampleFileDownloadResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SampleFileDownloadResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SampleFileDownloadResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SampleFileDownloadResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveAnalysisColumnRequest(TeaModel):
    def __init__(self, lang=None, columns=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.columns = columns  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveAnalysisColumnRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.columns is not None:
            result['columns'] = self.columns
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('columns') is not None:
            self.columns = m.get('columns')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class SaveAnalysisColumnResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveAnalysisColumnResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class SaveAnalysisColumnResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveAnalysisColumnResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveAnalysisColumnResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveAnalysisColumnResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveByPassOrShuntEventRequest(TeaModel):
    def __init__(self, lang=None, event_id=None, event_name=None, event_type=None, reg_id=None):
        self.lang = lang  # type: str
        self.event_id = event_id  # type: long
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveByPassOrShuntEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.event_type is not None:
            result['eventType'] = self.event_type
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('eventType') is not None:
            self.event_type = m.get('eventType')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class SaveByPassOrShuntEventResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveByPassOrShuntEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class SaveByPassOrShuntEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveByPassOrShuntEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveByPassOrShuntEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveByPassOrShuntEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartOrStopByPassShuntEventRequest(TeaModel):
    def __init__(self, lang=None, event_id=None, reg_id=None, status=None):
        self.lang = lang  # type: str
        self.event_id = event_id  # type: long
        self.reg_id = reg_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartOrStopByPassShuntEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class StartOrStopByPassShuntEventResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartOrStopByPassShuntEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class StartOrStopByPassShuntEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StartOrStopByPassShuntEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartOrStopByPassShuntEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartOrStopByPassShuntEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartSimulationTaskRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartSimulationTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class StartSimulationTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartSimulationTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class StartSimulationTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StartSimulationTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartSimulationTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartSimulationTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopSimulationTaskRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StopSimulationTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class StopSimulationTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(StopSimulationTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class StopSimulationTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StopSimulationTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StopSimulationTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopSimulationTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitImportTaskRequest(TeaModel):
    def __init__(self, lang=None, file_name=None, reg_id=None, url=None):
        self.lang = lang  # type: str
        self.file_name = file_name  # type: str
        self.reg_id = reg_id  # type: str
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitImportTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.file_name is not None:
            result['fileName'] = self.file_name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('fileName') is not None:
            self.file_name = m.get('fileName')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class SubmitImportTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitImportTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class SubmitImportTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SubmitImportTaskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SubmitImportTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitImportTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchExpressionVariableRequest(TeaModel):
    def __init__(self, lang=None, data_version=None, id=None, reg_id=None, status=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.data_version = data_version  # type: long
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchExpressionVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SwitchExpressionVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchExpressionVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class SwitchExpressionVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SwitchExpressionVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SwitchExpressionVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchExpressionVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchFieldRequest(TeaModel):
    def __init__(self, lang=None, id=None, name=None, reg_id=None, source=None, status=None):
        self.lang = lang  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.source = source  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchFieldRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.source is not None:
            result['source'] = self.source
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SwitchFieldResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchFieldResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class SwitchFieldResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SwitchFieldResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SwitchFieldResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchFieldResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchQueryVariableRequest(TeaModel):
    def __init__(self, lang=None, id=None, reg_id=None, status=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchQueryVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SwitchQueryVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchQueryVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class SwitchQueryVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SwitchQueryVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SwitchQueryVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchQueryVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchToOnlineRequest(TeaModel):
    def __init__(self, lang=None, event_id=None, reg_id=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.event_id = event_id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchToOnlineRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class SwitchToOnlineResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchToOnlineResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class SwitchToOnlineResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SwitchToOnlineResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SwitchToOnlineResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchToOnlineResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchVariableRequest(TeaModel):
    def __init__(self, lang=None, data_version=None, id=None, name=None, reg_id=None, status=None):
        self.lang = lang  # type: str
        self.data_version = data_version  # type: long
        self.id = id  # type: long
        self.name = name  # type: str
        self.reg_id = reg_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_version is not None:
            result['dataVersion'] = self.data_version
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataVersion') is not None:
            self.data_version = m.get('dataVersion')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class SwitchVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class SwitchVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SwitchVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SwitchVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TaskNameByUserIdRequest(TeaModel):
    def __init__(self, lang=None, reg_id=None, task_name=None):
        self.lang = lang  # type: str
        self.reg_id = reg_id  # type: str
        self.task_name = task_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TaskNameByUserIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.reg_id is not None:
            result['RegId'] = self.reg_id
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('RegId') is not None:
            self.reg_id = m.get('RegId')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        return self


class TaskNameByUserIdResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(TaskNameByUserIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['ResultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultObject') is not None:
            self.result_object = m.get('ResultObject')
        return self


class TaskNameByUserIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TaskNameByUserIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TaskNameByUserIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TaskNameByUserIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAnalysisConditionFavoriteRequest(TeaModel):
    def __init__(self, lang=None, condition=None, event_begin_time=None, event_code=None, event_end_time=None,
                 field_name=None, field_value=None, id=None, name=None, reg_id=None, type=None):
        self.lang = lang  # type: str
        self.condition = condition  # type: str
        self.event_begin_time = event_begin_time  # type: long
        self.event_code = event_code  # type: str
        self.event_end_time = event_end_time  # type: long
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        # This parameter is required.
        self.id = id  # type: long
        self.name = name  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAnalysisConditionFavoriteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.condition is not None:
            result['condition'] = self.condition
        if self.event_begin_time is not None:
            result['eventBeginTime'] = self.event_begin_time
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.event_end_time is not None:
            result['eventEndTime'] = self.event_end_time
        if self.field_name is not None:
            result['fieldName'] = self.field_name
        if self.field_value is not None:
            result['fieldValue'] = self.field_value
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('condition') is not None:
            self.condition = m.get('condition')
        if m.get('eventBeginTime') is not None:
            self.event_begin_time = m.get('eventBeginTime')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('eventEndTime') is not None:
            self.event_end_time = m.get('eventEndTime')
        if m.get('fieldName') is not None:
            self.field_name = m.get('fieldName')
        if m.get('fieldValue') is not None:
            self.field_value = m.get('fieldValue')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class UpdateAnalysisConditionFavoriteResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAnalysisConditionFavoriteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class UpdateAnalysisConditionFavoriteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateAnalysisConditionFavoriteResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateAnalysisConditionFavoriteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAnalysisConditionFavoriteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAuditRequest(TeaModel):
    def __init__(self, lang=None, audit_msg=None, audit_relation_type=None, audit_status=None, id=None, reg_id=None):
        self.lang = lang  # type: str
        self.audit_msg = audit_msg  # type: str
        self.audit_relation_type = audit_relation_type  # type: str
        self.audit_status = audit_status  # type: str
        self.id = id  # type: long
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAuditRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.audit_msg is not None:
            result['auditMsg'] = self.audit_msg
        if self.audit_relation_type is not None:
            result['auditRelationType'] = self.audit_relation_type
        if self.audit_status is not None:
            result['auditStatus'] = self.audit_status
        if self.id is not None:
            result['id'] = self.id
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('auditMsg') is not None:
            self.audit_msg = m.get('auditMsg')
        if m.get('auditRelationType') is not None:
            self.audit_relation_type = m.get('auditRelationType')
        if m.get('auditStatus') is not None:
            self.audit_status = m.get('auditStatus')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class UpdateAuditResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, result_object=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAuditResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class UpdateAuditResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateAuditResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateAuditResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAuditResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAuthRuleRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, event_code=None, reg_id=None, rule_actions=None,
                 rule_expressions=None, rule_id=None, rule_version_id=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.event_code = event_code  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.rule_actions = rule_actions  # type: str
        # This parameter is required.
        self.rule_expressions = rule_expressions  # type: str
        # This parameter is required.
        self.rule_id = rule_id  # type: str
        self.rule_version_id = rule_version_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAuthRuleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        return self


class UpdateAuthRuleResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAuthRuleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class UpdateAuthRuleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateAuthRuleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateAuthRuleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAuthRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateByPassShuntEventRequest(TeaModel):
    def __init__(self, lang=None, event_id=None, event_name=None, reg_id=None):
        self.lang = lang  # type: str
        self.event_id = event_id  # type: long
        self.event_name = event_name  # type: str
        self.reg_id = reg_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateByPassShuntEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.event_id is not None:
            result['eventId'] = self.event_id
        if self.event_name is not None:
            result['eventName'] = self.event_name
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('eventId') is not None:
            self.event_id = m.get('eventId')
        if m.get('eventName') is not None:
            self.event_name = m.get('eventName')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        return self


class UpdateByPassShuntEventResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, result_object=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateByPassShuntEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class UpdateByPassShuntEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateByPassShuntEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateByPassShuntEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateByPassShuntEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDataSourceRequest(TeaModel):
    def __init__(self, lang=None, description=None, id=None, name=None, oss_key=None, reg_id=None, type=None):
        self.lang = lang  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.id = id  # type: long
        self.name = name  # type: str
        self.oss_key = oss_key  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDataSourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.description is not None:
            result['description'] = self.description
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.oss_key is not None:
            result['ossKey'] = self.oss_key
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('ossKey') is not None:
            self.oss_key = m.get('ossKey')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class UpdateDataSourceResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDataSourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class UpdateDataSourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDataSourceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDataSourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDataSourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateQueryVariableRequest(TeaModel):
    def __init__(self, lang=None, data_source_code=None, description=None, event_code=None, expression=None,
                 expression_title=None, expression_variable=None, id=None, outlier=None, outputs=None, reg_id=None, title=None):
        self.lang = lang  # type: str
        # This parameter is required.
        self.data_source_code = data_source_code  # type: str
        self.description = description  # type: str
        # This parameter is required.
        self.event_code = event_code  # type: str
        # This parameter is required.
        self.expression = expression  # type: str
        # This parameter is required.
        self.expression_title = expression_title  # type: str
        # This parameter is required.
        self.expression_variable = expression_variable  # type: str
        # This parameter is required.
        self.id = id  # type: long
        # This parameter is required.
        self.outlier = outlier  # type: str
        # This parameter is required.
        self.outputs = outputs  # type: str
        # This parameter is required.
        self.reg_id = reg_id  # type: str
        # This parameter is required.
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateQueryVariableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.data_source_code is not None:
            result['dataSourceCode'] = self.data_source_code
        if self.description is not None:
            result['description'] = self.description
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.expression is not None:
            result['expression'] = self.expression
        if self.expression_title is not None:
            result['expressionTitle'] = self.expression_title
        if self.expression_variable is not None:
            result['expressionVariable'] = self.expression_variable
        if self.id is not None:
            result['id'] = self.id
        if self.outlier is not None:
            result['outlier'] = self.outlier
        if self.outputs is not None:
            result['outputs'] = self.outputs
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('dataSourceCode') is not None:
            self.data_source_code = m.get('dataSourceCode')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('expression') is not None:
            self.expression = m.get('expression')
        if m.get('expressionTitle') is not None:
            self.expression_title = m.get('expressionTitle')
        if m.get('expressionVariable') is not None:
            self.expression_variable = m.get('expressionVariable')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('outlier') is not None:
            self.outlier = m.get('outlier')
        if m.get('outputs') is not None:
            self.outputs = m.get('outputs')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class UpdateQueryVariableResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateQueryVariableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class UpdateQueryVariableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateQueryVariableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateQueryVariableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateQueryVariableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateRuleRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, event_code=None, logic_expression=None, memo=None,
                 reg_id=None, rule_actions=None, rule_expressions=None, rule_id=None, rule_name=None, rule_status=None,
                 rule_version_id=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.event_code = event_code  # type: str
        self.logic_expression = logic_expression  # type: str
        self.memo = memo  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_actions = rule_actions  # type: str
        self.rule_expressions = rule_expressions  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str
        self.rule_status = rule_status  # type: str
        self.rule_version_id = rule_version_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRuleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.logic_expression is not None:
            result['logicExpression'] = self.logic_expression
        if self.memo is not None:
            result['memo'] = self.memo
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_actions is not None:
            result['ruleActions'] = self.rule_actions
        if self.rule_expressions is not None:
            result['ruleExpressions'] = self.rule_expressions
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        if self.rule_status is not None:
            result['ruleStatus'] = self.rule_status
        if self.rule_version_id is not None:
            result['ruleVersionId'] = self.rule_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('logicExpression') is not None:
            self.logic_expression = m.get('logicExpression')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleActions') is not None:
            self.rule_actions = m.get('ruleActions')
        if m.get('ruleExpressions') is not None:
            self.rule_expressions = m.get('ruleExpressions')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        if m.get('ruleStatus') is not None:
            self.rule_status = m.get('ruleStatus')
        if m.get('ruleVersionId') is not None:
            self.rule_version_id = m.get('ruleVersionId')
        return self


class UpdateRuleResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRuleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class UpdateRuleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateRuleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateRuleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateRuleBaseRequest(TeaModel):
    def __init__(self, lang=None, console_rule_id=None, event_code=None, memo=None, reg_id=None, rule_id=None,
                 rule_name=None):
        self.lang = lang  # type: str
        self.console_rule_id = console_rule_id  # type: long
        self.event_code = event_code  # type: str
        self.memo = memo  # type: str
        self.reg_id = reg_id  # type: str
        self.rule_id = rule_id  # type: str
        self.rule_name = rule_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRuleBaseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.console_rule_id is not None:
            result['consoleRuleId'] = self.console_rule_id
        if self.event_code is not None:
            result['eventCode'] = self.event_code
        if self.memo is not None:
            result['memo'] = self.memo
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.rule_id is not None:
            result['ruleId'] = self.rule_id
        if self.rule_name is not None:
            result['ruleName'] = self.rule_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('consoleRuleId') is not None:
            self.console_rule_id = m.get('consoleRuleId')
        if m.get('eventCode') is not None:
            self.event_code = m.get('eventCode')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('ruleId') is not None:
            self.rule_id = m.get('ruleId')
        if m.get('ruleName') is not None:
            self.rule_name = m.get('ruleName')
        return self


class UpdateRuleBaseResponseBody(TeaModel):
    def __init__(self, request_id=None, result_object=None):
        self.request_id = request_id  # type: str
        self.result_object = result_object  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateRuleBaseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_object is not None:
            result['resultObject'] = self.result_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('resultObject') is not None:
            self.result_object = m.get('resultObject')
        return self


class UpdateRuleBaseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateRuleBaseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateRuleBaseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateRuleBaseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSampleBatchRequest(TeaModel):
    def __init__(self, lang=None, ids=None, reg_id=None, tags=None, versions=None):
        self.lang = lang  # type: str
        self.ids = ids  # type: str
        self.reg_id = reg_id  # type: str
        self.tags = tags  # type: str
        self.versions = versions  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSampleBatchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.ids is not None:
            result['ids'] = self.ids
        if self.reg_id is not None:
            result['regId'] = self.reg_id
        if self.tags is not None:
            result['tags'] = self.tags
        if self.versions is not None:
            result['versions'] = self.versions
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('regId') is not None:
            self.reg_id = m.get('regId')
        if m.get('tags') is not None:
            self.tags = m.get('tags')
        if m.get('versions') is not None:
            self.versions = m.get('versions')
        return self


class UpdateSampleBatchResponseBody(TeaModel):
    def __init__(self, request_id=None, data=None):
        self.request_id = request_id  # type: str
        self.data = data  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSampleBatchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class UpdateSampleBatchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSampleBatchResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSampleBatchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSampleBatchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadSampleApiRequest(TeaModel):
    def __init__(self, data_type=None, data_value=None, sample_type=None, service=None):
        # This parameter is required.
        self.data_type = data_type  # type: str
        # This parameter is required.
        self.data_value = data_value  # type: str
        # This parameter is required.
        self.sample_type = sample_type  # type: str
        # This parameter is required.
        self.service = service  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadSampleApiRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.data_value is not None:
            result['DataValue'] = self.data_value
        if self.sample_type is not None:
            result['SampleType'] = self.sample_type
        if self.service is not None:
            result['Service'] = self.service
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('DataValue') is not None:
            self.data_value = m.get('DataValue')
        if m.get('SampleType') is not None:
            self.sample_type = m.get('SampleType')
        if m.get('Service') is not None:
            self.service = m.get('Service')
        return self


class UploadSampleApiResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadSampleApiResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UploadSampleApiResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UploadSampleApiResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UploadSampleApiResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadSampleApiResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


