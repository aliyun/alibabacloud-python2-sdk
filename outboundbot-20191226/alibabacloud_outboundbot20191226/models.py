# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class ApplyNumberDistrictInfoParsingResultRequest(TeaModel):
    def __init__(self, version_id=None):
        self.version_id = version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyNumberDistrictInfoParsingResultRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class ApplyNumberDistrictInfoParsingResultResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyNumberDistrictInfoParsingResultResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ApplyNumberDistrictInfoParsingResultResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyNumberDistrictInfoParsingResultResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyNumberDistrictInfoParsingResultResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyNumberDistrictInfoParsingResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AssignJobsRequest(TeaModel):
    def __init__(self, calling_number=None, instance_id=None, is_asynchrony=None, job_data_parsing_task_id=None,
                 job_group_id=None, jobs_json=None, roster_type=None, strategy_json=None):
        self.calling_number = calling_number  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.is_asynchrony = is_asynchrony  # type: bool
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.jobs_json = jobs_json  # type: list[str]
        self.roster_type = roster_type  # type: str
        self.strategy_json = strategy_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AssignJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_asynchrony is not None:
            result['IsAsynchrony'] = self.is_asynchrony
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        if self.roster_type is not None:
            result['RosterType'] = self.roster_type
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsAsynchrony') is not None:
            self.is_asynchrony = m.get('IsAsynchrony')
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        if m.get('RosterType') is not None:
            self.roster_type = m.get('RosterType')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class AssignJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group_id=None, jobs_id=None, message=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group_id = job_group_id  # type: str
        self.jobs_id = jobs_id  # type: list[str]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AssignJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_id is not None:
            result['JobsId'] = self.jobs_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsId') is not None:
            self.jobs_id = m.get('JobsId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AssignJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AssignJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AssignJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AssignJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelJobsRequest(TeaModel):
    def __init__(self, all=None, instance_id=None, job_group_id=None, job_id=None, job_reference_id=None,
                 scenario_id=None):
        self.all = all  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.job_reference_id = job_reference_id  # type: list[str]
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class CancelJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CancelJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CancelJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CancelJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CancelJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChangeResourceGroupRequest(TeaModel):
    def __init__(self, new_resource_group_id=None, resource_id=None):
        self.new_resource_group_id = new_resource_group_id  # type: str
        self.resource_id = resource_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeResourceGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.new_resource_group_id is not None:
            result['NewResourceGroupId'] = self.new_resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NewResourceGroupId') is not None:
            self.new_resource_group_id = m.get('NewResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class ChangeResourceGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ChangeResourceGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ChangeResourceGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ChangeResourceGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ChangeResourceGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ChangeResourceGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBatchJobsRequest(TeaModel):
    def __init__(self, batch_job_description=None, batch_job_name=None, calling_number=None, instance_id=None,
                 job_file_path=None, scenario_id=None, script_id=None, strategy_json=None, submitted=None):
        self.batch_job_description = batch_job_description  # type: str
        self.batch_job_name = batch_job_name  # type: str
        self.calling_number = calling_number  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.scenario_id = scenario_id  # type: str
        self.script_id = script_id  # type: str
        self.strategy_json = strategy_json  # type: str
        self.submitted = submitted  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateBatchJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job_description is not None:
            result['BatchJobDescription'] = self.batch_job_description
        if self.batch_job_name is not None:
            result['BatchJobName'] = self.batch_job_name
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.submitted is not None:
            result['Submitted'] = self.submitted
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BatchJobDescription') is not None:
            self.batch_job_description = m.get('BatchJobDescription')
        if m.get('BatchJobName') is not None:
            self.batch_job_name = m.get('BatchJobName')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('Submitted') is not None:
            self.submitted = m.get('Submitted')
        return self


class CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class CreateBatchJobsResponseBodyBatchJobStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponseBodyBatchJobStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateBatchJobsResponseBodyBatchJob(TeaModel):
    def __init__(self, batch_job_id=None, calling_numbers=None, creation_time=None, job_file_path=None,
                 job_group_description=None, job_group_name=None, scenario_id=None, strategy=None):
        self.batch_job_id = batch_job_id  # type: str
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.job_file_path = job_file_path  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_name = job_group_name  # type: str
        self.scenario_id = scenario_id  # type: str
        self.strategy = strategy  # type: CreateBatchJobsResponseBodyBatchJobStrategy

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponseBodyBatchJob, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job_id is not None:
            result['BatchJobId'] = self.batch_job_id
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BatchJobId') is not None:
            self.batch_job_id = m.get('BatchJobId')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = CreateBatchJobsResponseBodyBatchJobStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class CreateBatchJobsResponseBody(TeaModel):
    def __init__(self, batch_job=None, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.batch_job = batch_job  # type: CreateBatchJobsResponseBodyBatchJob
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.batch_job:
            self.batch_job.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job is not None:
            result['BatchJob'] = self.batch_job.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BatchJob') is not None:
            temp_model = CreateBatchJobsResponseBodyBatchJob()
            self.batch_job = temp_model.from_map(m['BatchJob'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBatchJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateBatchJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBatchRepeatJobRequest(TeaModel):
    def __init__(self, calling_number=None, description=None, filter_status=None, instance_id=None,
                 min_concurrency=None, name=None, priority=None, recall_strategy_json=None, ringing_duration=None, script_id=None,
                 source_group_id=None, strategy_json=None):
        self.calling_number = calling_number  # type: list[str]
        self.description = description  # type: str
        self.filter_status = filter_status  # type: str
        self.instance_id = instance_id  # type: str
        self.min_concurrency = min_concurrency  # type: long
        self.name = name  # type: str
        self.priority = priority  # type: str
        self.recall_strategy_json = recall_strategy_json  # type: str
        self.ringing_duration = ringing_duration  # type: long
        self.script_id = script_id  # type: str
        self.source_group_id = source_group_id  # type: str
        self.strategy_json = strategy_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateBatchRepeatJobRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.filter_status is not None:
            result['FilterStatus'] = self.filter_status
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.name is not None:
            result['Name'] = self.name
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_strategy_json is not None:
            result['RecallStrategyJson'] = self.recall_strategy_json
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.source_group_id is not None:
            result['SourceGroupId'] = self.source_group_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FilterStatus') is not None:
            self.filter_status = m.get('FilterStatus')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallStrategyJson') is not None:
            self.recall_strategy_json = m.get('RecallStrategyJson')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SourceGroupId') is not None:
            self.source_group_id = m.get('SourceGroupId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class CreateBatchRepeatJobResponseBodyJobGroup(TeaModel):
    def __init__(self, id=None, min_concurrency=None, priority=None, ringing_duration=None):
        self.id = id  # type: str
        self.min_concurrency = min_concurrency  # type: long
        self.priority = priority  # type: str
        self.ringing_duration = ringing_duration  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateBatchRepeatJobResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        return self


class CreateBatchRepeatJobResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: CreateBatchRepeatJobResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(CreateBatchRepeatJobResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = CreateBatchRepeatJobResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBatchRepeatJobResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateBatchRepeatJobResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateBatchRepeatJobResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBatchRepeatJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDialogueFlowRequest(TeaModel):
    def __init__(self, dialogue_flow_type=None, dialogue_name=None, instance_id=None, script_id=None):
        self.dialogue_flow_type = dialogue_flow_type  # type: str
        self.dialogue_name = dialogue_name  # type: str
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDialogueFlowRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_type is not None:
            result['DialogueFlowType'] = self.dialogue_flow_type
        if self.dialogue_name is not None:
            result['DialogueName'] = self.dialogue_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DialogueFlowType') is not None:
            self.dialogue_flow_type = m.get('DialogueFlowType')
        if m.get('DialogueName') is not None:
            self.dialogue_name = m.get('DialogueName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateDialogueFlowResponseBody(TeaModel):
    def __init__(self, code=None, dialogue_flow_id=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.dialogue_flow_id = dialogue_flow_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDialogueFlowResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateDialogueFlowResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDialogueFlowResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDialogueFlowResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDialogueFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDownloadUrlRequest(TeaModel):
    def __init__(self, download_task_id=None, file_id=None):
        self.download_task_id = download_task_id  # type: str
        self.file_id = file_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_task_id is not None:
            result['DownloadTaskId'] = self.download_task_id
        if self.file_id is not None:
            result['FileId'] = self.file_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DownloadTaskId') is not None:
            self.download_task_id = m.get('DownloadTaskId')
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        return self


class CreateDownloadUrlResponseBody(TeaModel):
    def __init__(self, code=None, file_http_url=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.file_http_url = file_http_url  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDownloadUrlResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateGlobalQuestionRequest(TeaModel):
    def __init__(self, answers=None, global_question_name=None, global_question_type=None, instance_id=None,
                 questions=None, script_id=None):
        self.answers = answers  # type: str
        self.global_question_name = global_question_name  # type: str
        self.global_question_type = global_question_type  # type: str
        self.instance_id = instance_id  # type: str
        self.questions = questions  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateGlobalQuestionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateGlobalQuestionResponseBody(TeaModel):
    def __init__(self, code=None, global_question_id=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.global_question_id = global_question_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateGlobalQuestionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateGlobalQuestionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateGlobalQuestionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateGlobalQuestionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateInstanceRequest(TeaModel):
    def __init__(self, calling_number=None, instance_description=None, instance_name=None,
                 max_concurrent_conversation=None, nlu_service_type=None, resource_group_id=None):
        self.calling_number = calling_number  # type: list[str]
        self.instance_description = instance_description  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.nlu_service_type = nlu_service_type  # type: str
        self.resource_group_id = resource_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.nlu_service_type is not None:
            result['NluServiceType'] = self.nlu_service_type
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('NluServiceType') is not None:
            self.nlu_service_type = m.get('NluServiceType')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class CreateInstanceResponseBodyInstance(TeaModel):
    def __init__(self, creation_time=None, creator_id=None, creator_name=None, instance_description=None,
                 instance_id=None, instance_name=None, max_concurrent_conversation=None, owner_name=None,
                 resource_group_id=None):
        self.creation_time = creation_time  # type: long
        self.creator_id = creator_id  # type: long
        self.creator_name = creator_name  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.owner_name = owner_name  # type: str
        self.resource_group_id = resource_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class CreateInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance = instance  # type: CreateInstanceResponseBodyInstance
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super(CreateInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = CreateInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateInstanceBindNumberRequest(TeaModel):
    def __init__(self, instance_list=None, number=None):
        self.instance_list = instance_list  # type: str
        self.number = number  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceBindNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_list is not None:
            result['InstanceList'] = self.instance_list
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceList') is not None:
            self.instance_list = m.get('InstanceList')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class CreateInstanceBindNumberResponseBodyDataList(TeaModel):
    def __init__(self, instance_id=None, success=None):
        self.instance_id = instance_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceBindNumberResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceBindNumberResponseBodyData(TeaModel):
    def __init__(self, list=None):
        self.list = list  # type: list[CreateInstanceBindNumberResponseBodyDataList]

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateInstanceBindNumberResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = CreateInstanceBindNumberResponseBodyDataList()
                self.list.append(temp_model.from_map(k))
        return self


class CreateInstanceBindNumberResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: CreateInstanceBindNumberResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(CreateInstanceBindNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateInstanceBindNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceBindNumberResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateInstanceBindNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateInstanceBindNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateInstanceBindNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateIntentRequest(TeaModel):
    def __init__(self, instance_id=None, intent_description=None, intent_name=None, keywords=None, script_id=None,
                 utterances=None):
        self.instance_id = instance_id  # type: str
        self.intent_description = intent_description  # type: str
        self.intent_name = intent_name  # type: str
        self.keywords = keywords  # type: str
        self.script_id = script_id  # type: str
        self.utterances = utterances  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateIntentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class CreateIntentResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, intent_id=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.intent_id = intent_id  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateIntentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateIntentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateIntentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateIntentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobDataParsingTaskRequest(TeaModel):
    def __init__(self, instance_id=None, job_file_path=None):
        self.instance_id = instance_id  # type: str
        self.job_file_path = job_file_path  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobDataParsingTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        return self


class CreateJobDataParsingTaskResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_data_parsing_task_id=None, message=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobDataParsingTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateJobDataParsingTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateJobDataParsingTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateJobDataParsingTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateJobDataParsingTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobGroupRequest(TeaModel):
    def __init__(self, calling_number=None, instance_id=None, job_group_description=None, job_group_name=None,
                 min_concurrency=None, priority=None, recall_strategy_json=None, ringing_duration=None, scenario_id=None,
                 script_id=None, strategy_json=None):
        self.calling_number = calling_number  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_name = job_group_name  # type: str
        self.min_concurrency = min_concurrency  # type: long
        self.priority = priority  # type: str
        self.recall_strategy_json = recall_strategy_json  # type: str
        self.ringing_duration = ringing_duration  # type: long
        self.scenario_id = scenario_id  # type: str
        self.script_id = script_id  # type: str
        self.strategy_json = strategy_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_strategy_json is not None:
            result['RecallStrategyJson'] = self.recall_strategy_json
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallStrategyJson') is not None:
            self.recall_strategy_json = m.get('RecallStrategyJson')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class CreateJobGroupResponseBodyJobGroupExportProgress(TeaModel):
    def __init__(self, file_http_url=None, progress=None, status=None):
        self.file_http_url = file_http_url  # type: str
        self.progress = progress  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroupExportProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateJobGroupResponseBodyJobGroupRecallStrategy(TeaModel):
    def __init__(self, empty_number_ignore=None, in_arrears_ignore=None, out_of_service_ignore=None):
        self.empty_number_ignore = empty_number_ignore  # type: bool
        self.in_arrears_ignore = in_arrears_ignore  # type: bool
        self.out_of_service_ignore = out_of_service_ignore  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroupRecallStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_ignore is not None:
            result['EmptyNumberIgnore'] = self.empty_number_ignore
        if self.in_arrears_ignore is not None:
            result['InArrearsIgnore'] = self.in_arrears_ignore
        if self.out_of_service_ignore is not None:
            result['OutOfServiceIgnore'] = self.out_of_service_ignore
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EmptyNumberIgnore') is not None:
            self.empty_number_ignore = m.get('EmptyNumberIgnore')
        if m.get('InArrearsIgnore') is not None:
            self.in_arrears_ignore = m.get('InArrearsIgnore')
        if m.get('OutOfServiceIgnore') is not None:
            self.out_of_service_ignore = m.get('OutOfServiceIgnore')
        return self


class CreateJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class CreateJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[CreateJobGroupResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, export_progress=None,
                 job_data_parsing_task_id=None, job_file_path=None, job_group_description=None, job_group_id=None, job_group_name=None,
                 min_concurrency=None, modify_time=None, priority=None, recall_strategy=None, ringing_duration=None,
                 scenario_id=None, script_name=None, script_version=None, status=None, strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.export_progress = export_progress  # type: CreateJobGroupResponseBodyJobGroupExportProgress
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.min_concurrency = min_concurrency  # type: long
        self.modify_time = modify_time  # type: str
        self.priority = priority  # type: str
        self.recall_strategy = recall_strategy  # type: CreateJobGroupResponseBodyJobGroupRecallStrategy
        self.ringing_duration = ringing_duration  # type: long
        self.scenario_id = scenario_id  # type: str
        self.script_name = script_name  # type: str
        self.script_version = script_version  # type: str
        self.status = status  # type: str
        self.strategy = strategy  # type: CreateJobGroupResponseBodyJobGroupStrategy

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.recall_strategy:
            self.recall_strategy.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_strategy is not None:
            result['RecallStrategy'] = self.recall_strategy.to_map()
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallStrategy') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupRecallStrategy()
            self.recall_strategy = temp_model.from_map(m['RecallStrategy'])
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class CreateJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: CreateJobGroupResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateJobGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobGroupExportTaskRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, option=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.option = option  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupExportTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.option is not None:
            result['Option'] = self.option
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Option') is not None:
            self.option = m.get('Option')
        return self


class CreateJobGroupExportTaskResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, task_id=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupExportTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class CreateJobGroupExportTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateJobGroupExportTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateJobGroupExportTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateJobGroupExportTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateNumberDistrictInfoDownloadUrlRequest(TeaModel):
    def __init__(self, version_id=None):
        self.version_id = version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateNumberDistrictInfoDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class CreateNumberDistrictInfoDownloadUrlResponseBody(TeaModel):
    def __init__(self, code=None, file_http_url=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.file_http_url = file_http_url  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateNumberDistrictInfoDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateNumberDistrictInfoDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateNumberDistrictInfoDownloadUrlResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateNumberDistrictInfoDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateNumberDistrictInfoDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateNumberDistrictInfoParsingTaskRequest(TeaModel):
    def __init__(self, file_path=None, file_size=None):
        self.file_path = file_path  # type: str
        self.file_size = file_size  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateNumberDistrictInfoParsingTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        return self


class CreateNumberDistrictInfoParsingTaskResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateNumberDistrictInfoParsingTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateNumberDistrictInfoParsingTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateNumberDistrictInfoParsingTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateNumberDistrictInfoParsingTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateNumberDistrictInfoParsingTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOutboundCallNumberRequest(TeaModel):
    def __init__(self, instance_id=None, number=None, rate_limit_count=None, rate_limit_period=None):
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.rate_limit_count = rate_limit_count  # type: int
        self.rate_limit_period = rate_limit_period  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOutboundCallNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class CreateOutboundCallNumberResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, outbound_call_number_id=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.outbound_call_number_id = outbound_call_number_id  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOutboundCallNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateOutboundCallNumberResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateOutboundCallNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateOutboundCallNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOutboundCallNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScriptRequest(TeaModel):
    def __init__(self, asr_config=None, chatbot_id=None, emotion_enable=None, industry=None, instance_id=None,
                 long_wait_enable=None, mini_playback_enable=None, new_barge_in_enable=None, scene=None, script_content=None,
                 script_description=None, script_name=None, script_waveform=None, tts_config=None):
        self.asr_config = asr_config  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.emotion_enable = emotion_enable  # type: bool
        self.industry = industry  # type: str
        self.instance_id = instance_id  # type: str
        self.long_wait_enable = long_wait_enable  # type: bool
        self.mini_playback_enable = mini_playback_enable  # type: bool
        self.new_barge_in_enable = new_barge_in_enable  # type: bool
        self.scene = scene  # type: str
        self.script_content = script_content  # type: list[str]
        self.script_description = script_description  # type: str
        self.script_name = script_name  # type: str
        self.script_waveform = script_waveform  # type: list[str]
        self.tts_config = tts_config  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_waveform is not None:
            result['ScriptWaveform'] = self.script_waveform
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptWaveform') is not None:
            self.script_waveform = m.get('ScriptWaveform')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        return self


class CreateScriptResponseBodyScript(TeaModel):
    def __init__(self, debug_status=None, industry=None, is_debug_drafted=None, is_drafted=None, scene=None,
                 script_description=None, script_id=None, script_name=None, status=None, update_time=None):
        self.debug_status = debug_status  # type: str
        self.industry = industry  # type: str
        self.is_debug_drafted = is_debug_drafted  # type: bool
        self.is_drafted = is_drafted  # type: bool
        self.scene = scene  # type: str
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScriptResponseBodyScript, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class CreateScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script = script  # type: CreateScriptResponseBodyScript
        self.success = success  # type: bool

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super(CreateScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = CreateScriptResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScriptWaveformRequest(TeaModel):
    def __init__(self, file_id=None, file_name=None, instance_id=None, script_content=None, script_id=None):
        self.file_id = file_id  # type: str
        self.file_name = file_name  # type: str
        self.instance_id = instance_id  # type: str
        self.script_content = script_content  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScriptWaveformRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateScriptWaveformResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script_waveform_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_waveform_id = script_waveform_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScriptWaveformResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_waveform_id is not None:
            result['ScriptWaveformId'] = self.script_waveform_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptWaveformId') is not None:
            self.script_waveform_id = m.get('ScriptWaveformId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateScriptWaveformResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateScriptWaveformResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateScriptWaveformResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateScriptWaveformResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTagRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None, tag_group=None, tag_name=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.tag_group = tag_group  # type: str
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTagRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class CreateTagResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, tag_id=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.tag_id = tag_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTagResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        return self


class CreateTagResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateTagResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateTagResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTagResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTaskExportTaskRequest(TeaModel):
    def __init__(self, actual_time_gte=None, actual_time_lte=None, call_duration_gte=None, call_duration_lte=None,
                 called_number=None, has_answered=None, has_hang_up_by_rejection=None, has_reached_end_of_flow=None,
                 instance_id=None, job_group_id=None, job_group_name_query=None, job_id=None, job_status_string_list=None,
                 other_id=None, page_index=None, page_size=None, recording_duration_gte=None, recording_duration_lte=None,
                 script_name_query=None, sort_by=None, sort_order=None, task_create_time_gte=None, task_create_time_lte=None,
                 task_id=None, task_status_string_list=None, user_id_match=None):
        self.actual_time_gte = actual_time_gte  # type: long
        self.actual_time_lte = actual_time_lte  # type: long
        self.call_duration_gte = call_duration_gte  # type: long
        self.call_duration_lte = call_duration_lte  # type: long
        self.called_number = called_number  # type: str
        self.has_answered = has_answered  # type: bool
        self.has_hang_up_by_rejection = has_hang_up_by_rejection  # type: bool
        self.has_reached_end_of_flow = has_reached_end_of_flow  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name_query = job_group_name_query  # type: str
        self.job_id = job_id  # type: str
        self.job_status_string_list = job_status_string_list  # type: str
        self.other_id = other_id  # type: str
        self.page_index = page_index  # type: int
        self.page_size = page_size  # type: int
        self.recording_duration_gte = recording_duration_gte  # type: long
        self.recording_duration_lte = recording_duration_lte  # type: long
        self.script_name_query = script_name_query  # type: str
        self.sort_by = sort_by  # type: str
        self.sort_order = sort_order  # type: str
        self.task_create_time_gte = task_create_time_gte  # type: long
        self.task_create_time_lte = task_create_time_lte  # type: long
        self.task_id = task_id  # type: str
        self.task_status_string_list = task_status_string_list  # type: str
        self.user_id_match = user_id_match  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTaskExportTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time_gte is not None:
            result['ActualTimeGte'] = self.actual_time_gte
        if self.actual_time_lte is not None:
            result['ActualTimeLte'] = self.actual_time_lte
        if self.call_duration_gte is not None:
            result['CallDurationGte'] = self.call_duration_gte
        if self.call_duration_lte is not None:
            result['CallDurationLte'] = self.call_duration_lte
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.has_answered is not None:
            result['HasAnswered'] = self.has_answered
        if self.has_hang_up_by_rejection is not None:
            result['HasHangUpByRejection'] = self.has_hang_up_by_rejection
        if self.has_reached_end_of_flow is not None:
            result['HasReachedEndOfFlow'] = self.has_reached_end_of_flow
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name_query is not None:
            result['JobGroupNameQuery'] = self.job_group_name_query
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_status_string_list is not None:
            result['JobStatusStringList'] = self.job_status_string_list
        if self.other_id is not None:
            result['OtherId'] = self.other_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.recording_duration_gte is not None:
            result['RecordingDurationGte'] = self.recording_duration_gte
        if self.recording_duration_lte is not None:
            result['RecordingDurationLte'] = self.recording_duration_lte
        if self.script_name_query is not None:
            result['ScriptNameQuery'] = self.script_name_query
        if self.sort_by is not None:
            result['SortBy'] = self.sort_by
        if self.sort_order is not None:
            result['SortOrder'] = self.sort_order
        if self.task_create_time_gte is not None:
            result['TaskCreateTimeGte'] = self.task_create_time_gte
        if self.task_create_time_lte is not None:
            result['TaskCreateTimeLte'] = self.task_create_time_lte
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status_string_list is not None:
            result['TaskStatusStringList'] = self.task_status_string_list
        if self.user_id_match is not None:
            result['UserIdMatch'] = self.user_id_match
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTimeGte') is not None:
            self.actual_time_gte = m.get('ActualTimeGte')
        if m.get('ActualTimeLte') is not None:
            self.actual_time_lte = m.get('ActualTimeLte')
        if m.get('CallDurationGte') is not None:
            self.call_duration_gte = m.get('CallDurationGte')
        if m.get('CallDurationLte') is not None:
            self.call_duration_lte = m.get('CallDurationLte')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('HasAnswered') is not None:
            self.has_answered = m.get('HasAnswered')
        if m.get('HasHangUpByRejection') is not None:
            self.has_hang_up_by_rejection = m.get('HasHangUpByRejection')
        if m.get('HasReachedEndOfFlow') is not None:
            self.has_reached_end_of_flow = m.get('HasReachedEndOfFlow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupNameQuery') is not None:
            self.job_group_name_query = m.get('JobGroupNameQuery')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobStatusStringList') is not None:
            self.job_status_string_list = m.get('JobStatusStringList')
        if m.get('OtherId') is not None:
            self.other_id = m.get('OtherId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RecordingDurationGte') is not None:
            self.recording_duration_gte = m.get('RecordingDurationGte')
        if m.get('RecordingDurationLte') is not None:
            self.recording_duration_lte = m.get('RecordingDurationLte')
        if m.get('ScriptNameQuery') is not None:
            self.script_name_query = m.get('ScriptNameQuery')
        if m.get('SortBy') is not None:
            self.sort_by = m.get('SortBy')
        if m.get('SortOrder') is not None:
            self.sort_order = m.get('SortOrder')
        if m.get('TaskCreateTimeGte') is not None:
            self.task_create_time_gte = m.get('TaskCreateTimeGte')
        if m.get('TaskCreateTimeLte') is not None:
            self.task_create_time_lte = m.get('TaskCreateTimeLte')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatusStringList') is not None:
            self.task_status_string_list = m.get('TaskStatusStringList')
        if m.get('UserIdMatch') is not None:
            self.user_id_match = m.get('UserIdMatch')
        return self


class CreateTaskExportTaskResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, task_id=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTaskExportTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class CreateTaskExportTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateTaskExportTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateTaskExportTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTaskExportTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAllNumberDistrictInfoResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAllNumberDistrictInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteAllNumberDistrictInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAllNumberDistrictInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAllNumberDistrictInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAllNumberDistrictInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteContactBlockListRequest(TeaModel):
    def __init__(self, contact_block_list_id=None, instance_id=None, operator=None):
        self.contact_block_list_id = contact_block_list_id  # type: str
        self.instance_id = instance_id  # type: str
        self.operator = operator  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteContactBlockListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_block_list_id is not None:
            result['ContactBlockListId'] = self.contact_block_list_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.operator is not None:
            result['Operator'] = self.operator
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactBlockListId') is not None:
            self.contact_block_list_id = m.get('ContactBlockListId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        return self


class DeleteContactBlockListResponseBody(TeaModel):
    def __init__(self, affected_rows=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.affected_rows = affected_rows  # type: int
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteContactBlockListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteContactBlockListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteContactBlockListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteContactBlockListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteContactBlockListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteContactWhiteListRequest(TeaModel):
    def __init__(self, contact_white_list_id=None, instance_id=None, operator=None):
        self.contact_white_list_id = contact_white_list_id  # type: str
        self.instance_id = instance_id  # type: str
        self.operator = operator  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteContactWhiteListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_white_list_id is not None:
            result['ContactWhiteListId'] = self.contact_white_list_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.operator is not None:
            result['Operator'] = self.operator
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactWhiteListId') is not None:
            self.contact_white_list_id = m.get('ContactWhiteListId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        return self


class DeleteContactWhiteListResponseBody(TeaModel):
    def __init__(self, affected_rows=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.affected_rows = affected_rows  # type: int
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteContactWhiteListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteContactWhiteListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteContactWhiteListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteContactWhiteListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteContactWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDialogueFlowRequest(TeaModel):
    def __init__(self, dialogue_flow_id=None, instance_id=None, script_id=None):
        self.dialogue_flow_id = dialogue_flow_id  # type: str
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDialogueFlowRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteDialogueFlowResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDialogueFlowResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteDialogueFlowResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDialogueFlowResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDialogueFlowResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDialogueFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteGlobalQuestionRequest(TeaModel):
    def __init__(self, global_question_id=None, instance_id=None, script_id=None):
        self.global_question_id = global_question_id  # type: str
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteGlobalQuestionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteGlobalQuestionResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteGlobalQuestionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteGlobalQuestionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteGlobalQuestionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteGlobalQuestionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInstanceRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteIntentRequest(TeaModel):
    def __init__(self, instance_id=None, intent_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.intent_id = intent_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteIntentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteIntentResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteIntentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteIntentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteIntentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteIntentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteJobGroupRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DeleteJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteJobGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteOutboundCallNumberRequest(TeaModel):
    def __init__(self, instance_id=None, outbound_call_number_id=None):
        self.instance_id = instance_id  # type: str
        self.outbound_call_number_id = outbound_call_number_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteOutboundCallNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        return self


class DeleteOutboundCallNumberResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteOutboundCallNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteOutboundCallNumberResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteOutboundCallNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteOutboundCallNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteOutboundCallNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScriptRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScriptRecordingRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None, uuids_json=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.uuids_json = uuids_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScriptRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.uuids_json is not None:
            result['UuidsJson'] = self.uuids_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UuidsJson') is not None:
            self.uuids_json = m.get('UuidsJson')
        return self


class DeleteScriptRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScriptRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteScriptRecordingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteScriptRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteScriptRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScriptWaveformRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None, script_waveform_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.script_waveform_id = script_waveform_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScriptWaveformRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_waveform_id is not None:
            result['ScriptWaveformId'] = self.script_waveform_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptWaveformId') is not None:
            self.script_waveform_id = m.get('ScriptWaveformId')
        return self


class DeleteScriptWaveformResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScriptWaveformResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteScriptWaveformResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteScriptWaveformResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteScriptWaveformResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScriptWaveformResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDialogueNodeStatisticsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, limit=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.limit = limit  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDialogueNodeStatisticsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.limit is not None:
            result['Limit'] = self.limit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        return self


class DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes(TeaModel):
    def __init__(self, group_id=None, hang_up_num=None, hit_num=None, id=None, instance_id=None, no_answer_num=None,
                 node_id=None, node_name=None):
        self.group_id = group_id  # type: str
        self.hang_up_num = hang_up_num  # type: int
        self.hit_num = hit_num  # type: int
        # id
        self.id = id  # type: str
        self.instance_id = instance_id  # type: str
        self.no_answer_num = no_answer_num  # type: int
        self.node_id = node_id  # type: str
        self.node_name = node_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hang_up_num is not None:
            result['HangUpNum'] = self.hang_up_num
        if self.hit_num is not None:
            result['HitNum'] = self.hit_num
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.no_answer_num is not None:
            result['NoAnswerNum'] = self.no_answer_num
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HangUpNum') is not None:
            self.hang_up_num = m.get('HangUpNum')
        if m.get('HitNum') is not None:
            self.hit_num = m.get('HitNum')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NoAnswerNum') is not None:
            self.no_answer_num = m.get('NoAnswerNum')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        return self


class DescribeDialogueNodeStatisticsResponseBody(TeaModel):
    def __init__(self, code=None, group_id=None, http_status_code=None, instance_id=None, message=None,
                 no_answer_dialogue_nodes=None, request_id=None, success=None, total_completed=None):
        self.code = code  # type: str
        self.group_id = group_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance_id = instance_id  # type: str
        self.message = message  # type: str
        self.no_answer_dialogue_nodes = no_answer_dialogue_nodes  # type: list[DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.total_completed = total_completed  # type: int

    def validate(self):
        if self.no_answer_dialogue_nodes:
            for k in self.no_answer_dialogue_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeDialogueNodeStatisticsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.message is not None:
            result['Message'] = self.message
        result['NoAnswerDialogueNodes'] = []
        if self.no_answer_dialogue_nodes is not None:
            for k in self.no_answer_dialogue_nodes:
                result['NoAnswerDialogueNodes'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        self.no_answer_dialogue_nodes = []
        if m.get('NoAnswerDialogueNodes') is not None:
            for k in m.get('NoAnswerDialogueNodes'):
                temp_model = DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes()
                self.no_answer_dialogue_nodes.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        return self


class DescribeDialogueNodeStatisticsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDialogueNodeStatisticsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDialogueNodeStatisticsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDialogueNodeStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDsReportsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDsReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeDsReportsResponseBody(TeaModel):
    def __init__(self, code=None, ds_reports=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.ds_reports = ds_reports  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDsReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.ds_reports is not None:
            result['DsReports'] = self.ds_reports
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DsReports') is not None:
            self.ds_reports = m.get('DsReports')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeDsReportsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDsReportsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDsReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDsReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGlobalQuestionRequest(TeaModel):
    def __init__(self, global_question_id=None, instance_id=None, script_id=None):
        self.global_question_id = global_question_id  # type: str
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGlobalQuestionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeGlobalQuestionResponseBodyGlobalQuestion(TeaModel):
    def __init__(self, answers=None, global_question_id=None, global_question_name=None, global_question_type=None,
                 questions=None, script_id=None):
        self.answers = answers  # type: str
        self.global_question_id = global_question_id  # type: str
        self.global_question_name = global_question_name  # type: str
        self.global_question_type = global_question_type  # type: str
        self.questions = questions  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGlobalQuestionResponseBodyGlobalQuestion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeGlobalQuestionResponseBody(TeaModel):
    def __init__(self, code=None, global_question=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.global_question = global_question  # type: DescribeGlobalQuestionResponseBodyGlobalQuestion
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.global_question:
            self.global_question.validate()

    def to_map(self):
        _map = super(DescribeGlobalQuestionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_question is not None:
            result['GlobalQuestion'] = self.global_question.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalQuestion') is not None:
            temp_model = DescribeGlobalQuestionResponseBodyGlobalQuestion()
            self.global_question = temp_model.from_map(m['GlobalQuestion'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeGlobalQuestionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeGlobalQuestionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeGlobalQuestionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGroupExecutingInfoRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupExecutingInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress(TeaModel):
    def __init__(self, cancelled_num=None, executing_num=None, failed_num=None, paused_num=None,
                 scheduling_num=None, total_completed_num=None, total_jobs=None, total_not_answered_num=None):
        self.cancelled_num = cancelled_num  # type: int
        self.executing_num = executing_num  # type: int
        self.failed_num = failed_num  # type: int
        self.paused_num = paused_num  # type: int
        self.scheduling_num = scheduling_num  # type: int
        self.total_completed_num = total_completed_num  # type: int
        self.total_jobs = total_jobs  # type: int
        self.total_not_answered_num = total_not_answered_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancelled_num is not None:
            result['CancelledNum'] = self.cancelled_num
        if self.executing_num is not None:
            result['ExecutingNum'] = self.executing_num
        if self.failed_num is not None:
            result['FailedNum'] = self.failed_num
        if self.paused_num is not None:
            result['PausedNum'] = self.paused_num
        if self.scheduling_num is not None:
            result['SchedulingNum'] = self.scheduling_num
        if self.total_completed_num is not None:
            result['TotalCompletedNum'] = self.total_completed_num
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered_num is not None:
            result['TotalNotAnsweredNum'] = self.total_not_answered_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CancelledNum') is not None:
            self.cancelled_num = m.get('CancelledNum')
        if m.get('ExecutingNum') is not None:
            self.executing_num = m.get('ExecutingNum')
        if m.get('FailedNum') is not None:
            self.failed_num = m.get('FailedNum')
        if m.get('PausedNum') is not None:
            self.paused_num = m.get('PausedNum')
        if m.get('SchedulingNum') is not None:
            self.scheduling_num = m.get('SchedulingNum')
        if m.get('TotalCompletedNum') is not None:
            self.total_completed_num = m.get('TotalCompletedNum')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnsweredNum') is not None:
            self.total_not_answered_num = m.get('TotalNotAnsweredNum')
        return self


class DescribeGroupExecutingInfoResponseBodyExecutingInfo(TeaModel):
    def __init__(self, call_failed_num=None, call_num=None, creator_name=None, end_time=None, finished_num=None,
                 hang_up_by_client_num=None, jobs_progress=None, start_time=None, transfer_by_intent_num=None,
                 transfer_by_no_answer=None):
        self.call_failed_num = call_failed_num  # type: int
        self.call_num = call_num  # type: int
        self.creator_name = creator_name  # type: str
        self.end_time = end_time  # type: long
        self.finished_num = finished_num  # type: int
        self.hang_up_by_client_num = hang_up_by_client_num  # type: int
        self.jobs_progress = jobs_progress  # type: DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress
        self.start_time = start_time  # type: long
        self.transfer_by_intent_num = transfer_by_intent_num  # type: int
        self.transfer_by_no_answer = transfer_by_no_answer  # type: int

    def validate(self):
        if self.jobs_progress:
            self.jobs_progress.validate()

    def to_map(self):
        _map = super(DescribeGroupExecutingInfoResponseBodyExecutingInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_failed_num is not None:
            result['CallFailedNum'] = self.call_failed_num
        if self.call_num is not None:
            result['CallNum'] = self.call_num
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.finished_num is not None:
            result['FinishedNum'] = self.finished_num
        if self.hang_up_by_client_num is not None:
            result['HangUpByClientNum'] = self.hang_up_by_client_num
        if self.jobs_progress is not None:
            result['JobsProgress'] = self.jobs_progress.to_map()
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.transfer_by_intent_num is not None:
            result['TransferByIntentNum'] = self.transfer_by_intent_num
        if self.transfer_by_no_answer is not None:
            result['TransferByNoAnswer'] = self.transfer_by_no_answer
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallFailedNum') is not None:
            self.call_failed_num = m.get('CallFailedNum')
        if m.get('CallNum') is not None:
            self.call_num = m.get('CallNum')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FinishedNum') is not None:
            self.finished_num = m.get('FinishedNum')
        if m.get('HangUpByClientNum') is not None:
            self.hang_up_by_client_num = m.get('HangUpByClientNum')
        if m.get('JobsProgress') is not None:
            temp_model = DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress()
            self.jobs_progress = temp_model.from_map(m['JobsProgress'])
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TransferByIntentNum') is not None:
            self.transfer_by_intent_num = m.get('TransferByIntentNum')
        if m.get('TransferByNoAnswer') is not None:
            self.transfer_by_no_answer = m.get('TransferByNoAnswer')
        return self


class DescribeGroupExecutingInfoResponseBody(TeaModel):
    def __init__(self, code=None, executing_info=None, group_id=None, http_status_code=None, instance_id=None,
                 message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.executing_info = executing_info  # type: DescribeGroupExecutingInfoResponseBodyExecutingInfo
        self.group_id = group_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance_id = instance_id  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.executing_info:
            self.executing_info.validate()

    def to_map(self):
        _map = super(DescribeGroupExecutingInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.executing_info is not None:
            result['ExecutingInfo'] = self.executing_info.to_map()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ExecutingInfo') is not None:
            temp_model = DescribeGroupExecutingInfoResponseBodyExecutingInfo()
            self.executing_info = temp_model.from_map(m['ExecutingInfo'])
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeGroupExecutingInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeGroupExecutingInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeGroupExecutingInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGroupExecutingInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInstanceRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DescribeInstanceResponseBodyInstance(TeaModel):
    def __init__(self, creation_time=None, creator_id=None, creator_name=None, instance_description=None,
                 instance_id=None, instance_name=None, max_concurrent_conversation=None, owner_name=None,
                 resource_group_id=None):
        self.creation_time = creation_time  # type: long
        self.creator_id = creator_id  # type: long
        self.creator_name = creator_name  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.owner_name = owner_name  # type: str
        self.resource_group_id = resource_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInstanceResponseBodyInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance = instance  # type: DescribeInstanceResponseBodyInstance
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super(DescribeInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = DescribeInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeIntentRequest(TeaModel):
    def __init__(self, instance_id=None, intent_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.intent_id = intent_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeIntentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeIntentResponseBodyIntent(TeaModel):
    def __init__(self, create_time=None, intent_description=None, intent_id=None, intent_name=None, keywords=None,
                 script_id=None, update_time=None, utterances=None):
        self.create_time = create_time  # type: long
        self.intent_description = intent_description  # type: str
        self.intent_id = intent_id  # type: str
        self.intent_name = intent_name  # type: str
        self.keywords = keywords  # type: str
        self.script_id = script_id  # type: str
        self.update_time = update_time  # type: long
        self.utterances = utterances  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeIntentResponseBodyIntent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class DescribeIntentResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, intent=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.intent = intent  # type: DescribeIntentResponseBodyIntent
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.intent:
            self.intent.validate()

    def to_map(self):
        _map = super(DescribeIntentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent is not None:
            result['Intent'] = self.intent.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Intent') is not None:
            temp_model = DescribeIntentResponseBodyIntent()
            self.intent = temp_model.from_map(m['Intent'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeIntentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeIntentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeIntentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeIntentStatisticsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, limit=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.limit = limit  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeIntentStatisticsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.limit is not None:
            result['Limit'] = self.limit
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        return self


class DescribeIntentStatisticsResponseBodyGlobalIntents(TeaModel):
    def __init__(self, group_id=None, hit_after_no_answer=None, hit_num=None, instance_id=None, intent_id=None,
                 intent_name=None, type=None):
        self.group_id = group_id  # type: str
        self.hit_after_no_answer = hit_after_no_answer  # type: int
        self.hit_num = hit_num  # type: int
        self.instance_id = instance_id  # type: str
        self.intent_id = intent_id  # type: str
        self.intent_name = intent_name  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeIntentStatisticsResponseBodyGlobalIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hit_after_no_answer is not None:
            result['HitAfterNoAnswer'] = self.hit_after_no_answer
        if self.hit_num is not None:
            result['HitNum'] = self.hit_num
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HitAfterNoAnswer') is not None:
            self.hit_after_no_answer = m.get('HitAfterNoAnswer')
        if m.get('HitNum') is not None:
            self.hit_num = m.get('HitNum')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DescribeIntentStatisticsResponseBodyProcessIntents(TeaModel):
    def __init__(self, group_id=None, hit_after_no_answer=None, hit_num=None, instance_id=None, intent_id=None,
                 intent_name=None, type=None):
        self.group_id = group_id  # type: str
        self.hit_after_no_answer = hit_after_no_answer  # type: int
        self.hit_num = hit_num  # type: int
        self.instance_id = instance_id  # type: str
        self.intent_id = intent_id  # type: str
        self.intent_name = intent_name  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeIntentStatisticsResponseBodyProcessIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hit_after_no_answer is not None:
            result['HitAfterNoAnswer'] = self.hit_after_no_answer
        if self.hit_num is not None:
            result['HitNum'] = self.hit_num
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HitAfterNoAnswer') is not None:
            self.hit_after_no_answer = m.get('HitAfterNoAnswer')
        if m.get('HitNum') is not None:
            self.hit_num = m.get('HitNum')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeIntentStatisticsResponseBody(TeaModel):
    def __init__(self, code=None, global_intent_num=None, global_intents=None, group_id=None, http_status_code=None,
                 instance_id=None, intents_after_no_answer=None, message=None, process_intent_num=None, process_intents=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.global_intent_num = global_intent_num  # type: int
        self.global_intents = global_intents  # type: list[DescribeIntentStatisticsResponseBodyGlobalIntents]
        self.group_id = group_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance_id = instance_id  # type: str
        self.intents_after_no_answer = intents_after_no_answer  # type: list[DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer]
        self.message = message  # type: str
        self.process_intent_num = process_intent_num  # type: int
        self.process_intents = process_intents  # type: list[DescribeIntentStatisticsResponseBodyProcessIntents]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.global_intents:
            for k in self.global_intents:
                if k:
                    k.validate()
        if self.intents_after_no_answer:
            for k in self.intents_after_no_answer:
                if k:
                    k.validate()
        if self.process_intents:
            for k in self.process_intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeIntentStatisticsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_intent_num is not None:
            result['GlobalIntentNum'] = self.global_intent_num
        result['GlobalIntents'] = []
        if self.global_intents is not None:
            for k in self.global_intents:
                result['GlobalIntents'].append(k.to_map() if k else None)
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['IntentsAfterNoAnswer'] = []
        if self.intents_after_no_answer is not None:
            for k in self.intents_after_no_answer:
                result['IntentsAfterNoAnswer'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.process_intent_num is not None:
            result['ProcessIntentNum'] = self.process_intent_num
        result['ProcessIntents'] = []
        if self.process_intents is not None:
            for k in self.process_intents:
                result['ProcessIntents'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalIntentNum') is not None:
            self.global_intent_num = m.get('GlobalIntentNum')
        self.global_intents = []
        if m.get('GlobalIntents') is not None:
            for k in m.get('GlobalIntents'):
                temp_model = DescribeIntentStatisticsResponseBodyGlobalIntents()
                self.global_intents.append(temp_model.from_map(k))
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.intents_after_no_answer = []
        if m.get('IntentsAfterNoAnswer') is not None:
            for k in m.get('IntentsAfterNoAnswer'):
                temp_model = DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer()
                self.intents_after_no_answer.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('ProcessIntentNum') is not None:
            self.process_intent_num = m.get('ProcessIntentNum')
        self.process_intents = []
        if m.get('ProcessIntents') is not None:
            for k in m.get('ProcessIntents'):
                temp_model = DescribeIntentStatisticsResponseBodyProcessIntents()
                self.process_intents.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeIntentStatisticsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeIntentStatisticsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeIntentStatisticsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeIntentStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobRequest(TeaModel):
    def __init__(self, instance_id=None, job_id=None, with_script=None):
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: str
        self.with_script = with_script  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.with_script is not None:
            result['WithScript'] = self.with_script
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('WithScript') is not None:
            self.with_script = m.get('WithScript')
        return self


class DescribeJobResponseBodyJobContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeJobResponseBodyJobExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeJobResponseBodyJobScript(TeaModel):
    def __init__(self, asr_config=None, chatbot_id=None, debug_status=None, industry=None, is_debug_drafted=None,
                 is_drafted=None, mini_playback_config_enabled=None, name=None, scene=None, script_description=None,
                 script_id=None, status=None, tts_config=None, update_time=None):
        self.asr_config = asr_config  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.debug_status = debug_status  # type: str
        self.industry = industry  # type: str
        self.is_debug_drafted = is_debug_drafted  # type: bool
        self.is_drafted = is_drafted  # type: bool
        self.mini_playback_config_enabled = mini_playback_config_enabled  # type: bool
        self.name = name  # type: str
        self.scene = scene  # type: str
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.status = status  # type: str
        self.tts_config = tts_config  # type: str
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobScript, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.mini_playback_config_enabled is not None:
            result['MiniPlaybackConfigEnabled'] = self.mini_playback_config_enabled
        if self.name is not None:
            result['Name'] = self.name
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.status is not None:
            result['Status'] = self.status
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('MiniPlaybackConfigEnabled') is not None:
            self.mini_playback_config_enabled = m.get('MiniPlaybackConfigEnabled')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeJobResponseBodyJobSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class DescribeJobResponseBodyJobTasksContact(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobTasksContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeJobResponseBodyJobTasksConversationSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobTasksConversationSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class DescribeJobResponseBodyJobTasksConversation(TeaModel):
    def __init__(self, action=None, action_params=None, script=None, sequence_id=None, speaker=None, summary=None,
                 timestamp=None):
        self.action = action  # type: str
        self.action_params = action_params  # type: str
        self.script = script  # type: str
        self.sequence_id = sequence_id  # type: str
        self.speaker = speaker  # type: str
        self.summary = summary  # type: list[DescribeJobResponseBodyJobTasksConversationSummary]
        self.timestamp = timestamp  # type: long

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobTasksConversation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.script is not None:
            result['Script'] = self.script
        if self.sequence_id is not None:
            result['SequenceId'] = self.sequence_id
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('SequenceId') is not None:
            self.sequence_id = m.get('SequenceId')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = DescribeJobResponseBodyJobTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class DescribeJobResponseBodyJobTasks(TeaModel):
    def __init__(self, actual_time=None, brief=None, call_id=None, called_number=None, calling_number=None,
                 chatbot_id=None, contact=None, conversation=None, duration=None, end_reason=None, end_time=None,
                 hang_up_direction=None, job_id=None, planed_time=None, ringing_duration=None, scenario_id=None, status=None,
                 task_id=None):
        self.actual_time = actual_time  # type: long
        self.brief = brief  # type: str
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.contact = contact  # type: DescribeJobResponseBodyJobTasksContact
        self.conversation = conversation  # type: list[DescribeJobResponseBodyJobTasksConversation]
        self.duration = duration  # type: int
        self.end_reason = end_reason  # type: str
        self.end_time = end_time  # type: long
        self.hang_up_direction = hang_up_direction  # type: str
        self.job_id = job_id  # type: str
        self.planed_time = planed_time  # type: long
        self.ringing_duration = ringing_duration  # type: long
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeJobResponseBodyJobTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.end_reason is not None:
            result['EndReason'] = self.end_reason
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.hang_up_direction is not None:
            result['HangUpDirection'] = self.hang_up_direction
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = DescribeJobResponseBodyJobTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = DescribeJobResponseBodyJobTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('EndReason') is not None:
            self.end_reason = m.get('EndReason')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('HangUpDirection') is not None:
            self.hang_up_direction = m.get('HangUpDirection')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeJobResponseBodyJob(TeaModel):
    def __init__(self, actual_time=None, called_number=None, calling_numbers=None, contacts=None, ds_report=None,
                 end_reason=None, extras=None, failure_reason=None, instance_id=None, job_group_id=None, job_id=None,
                 next_execution_time=None, priority=None, reference_id=None, scenario_id=None, script=None, status=None,
                 strategy_id=None, summary=None, system_priority=None, tasks=None):
        self.actual_time = actual_time  # type: long
        self.called_number = called_number  # type: str
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[DescribeJobResponseBodyJobContacts]
        self.ds_report = ds_report  # type: str
        self.end_reason = end_reason  # type: int
        self.extras = extras  # type: list[DescribeJobResponseBodyJobExtras]
        self.failure_reason = failure_reason  # type: str
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: str
        self.next_execution_time = next_execution_time  # type: long
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.script = script  # type: DescribeJobResponseBodyJobScript
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[DescribeJobResponseBodyJobSummary]
        self.system_priority = system_priority  # type: int
        self.tasks = tasks  # type: list[DescribeJobResponseBodyJobTasks]

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.script:
            self.script.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeJobResponseBodyJob, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        if self.ds_report is not None:
            result['DsReport'] = self.ds_report
        if self.end_reason is not None:
            result['EndReason'] = self.end_reason
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.next_execution_time is not None:
            result['NextExecutionTime'] = self.next_execution_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = DescribeJobResponseBodyJobContacts()
                self.contacts.append(temp_model.from_map(k))
        if m.get('DsReport') is not None:
            self.ds_report = m.get('DsReport')
        if m.get('EndReason') is not None:
            self.end_reason = m.get('EndReason')
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = DescribeJobResponseBodyJobExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('NextExecutionTime') is not None:
            self.next_execution_time = m.get('NextExecutionTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Script') is not None:
            temp_model = DescribeJobResponseBodyJobScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = DescribeJobResponseBodyJobSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = DescribeJobResponseBodyJobTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class DescribeJobResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job = job  # type: DescribeJobResponseBodyJob
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job:
            self.job.validate()

    def to_map(self):
        _map = super(DescribeJobResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job is not None:
            result['Job'] = self.job.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Job') is not None:
            temp_model = DescribeJobResponseBodyJob()
            self.job = temp_model.from_map(m['Job'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeJobResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeJobResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobDataParsingTaskProgressRequest(TeaModel):
    def __init__(self, instance_id=None, job_data_parsing_task_id=None):
        self.instance_id = instance_id  # type: str
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobDataParsingTaskProgressRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        return self


class DescribeJobDataParsingTaskProgressResponseBodyProgress(TeaModel):
    def __init__(self, fail_error_code=None, fail_reason=None, feedback_url=None, handled_job_count=None,
                 status=None, total_job_count=None):
        self.fail_error_code = fail_error_code  # type: str
        self.fail_reason = fail_reason  # type: str
        self.feedback_url = feedback_url  # type: str
        self.handled_job_count = handled_job_count  # type: int
        self.status = status  # type: str
        self.total_job_count = total_job_count  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobDataParsingTaskProgressResponseBodyProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_error_code is not None:
            result['FailErrorCode'] = self.fail_error_code
        if self.fail_reason is not None:
            result['FailReason'] = self.fail_reason
        if self.feedback_url is not None:
            result['FeedbackUrl'] = self.feedback_url
        if self.handled_job_count is not None:
            result['HandledJobCount'] = self.handled_job_count
        if self.status is not None:
            result['Status'] = self.status
        if self.total_job_count is not None:
            result['TotalJobCount'] = self.total_job_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FailErrorCode') is not None:
            self.fail_error_code = m.get('FailErrorCode')
        if m.get('FailReason') is not None:
            self.fail_reason = m.get('FailReason')
        if m.get('FeedbackUrl') is not None:
            self.feedback_url = m.get('FeedbackUrl')
        if m.get('HandledJobCount') is not None:
            self.handled_job_count = m.get('HandledJobCount')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalJobCount') is not None:
            self.total_job_count = m.get('TotalJobCount')
        return self


class DescribeJobDataParsingTaskProgressResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, progress=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.progress = progress  # type: DescribeJobDataParsingTaskProgressResponseBodyProgress
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.progress:
            self.progress.validate()

    def to_map(self):
        _map = super(DescribeJobDataParsingTaskProgressResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Progress') is not None:
            temp_model = DescribeJobDataParsingTaskProgressResponseBodyProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobDataParsingTaskProgressResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeJobDataParsingTaskProgressResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeJobDataParsingTaskProgressResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobDataParsingTaskProgressResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobGroupRequest(TeaModel):
    def __init__(self, brief_types=None, instance_id=None, job_group_id=None):
        self.brief_types = brief_types  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.brief_types is not None:
            result['BriefTypes'] = self.brief_types
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BriefTypes') is not None:
            self.brief_types = m.get('BriefTypes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeJobGroupResponseBodyJobGroupExportProgress(TeaModel):
    def __init__(self, file_http_url=None, progress=None, status=None):
        self.file_http_url = file_http_url  # type: str
        self.progress = progress  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupExportProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeJobGroupResponseBodyJobGroupProgressBriefs(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupProgressBriefs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeJobGroupResponseBodyJobGroupProgressCategories(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupProgressCategories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeJobGroupResponseBodyJobGroupProgress(TeaModel):
    def __init__(self, briefs=None, cancelled=None, categories=None, duration=None, executing=None, failed=None,
                 paused=None, scheduling=None, start_time=None, status=None, total_completed=None, total_jobs=None,
                 total_not_answered=None):
        self.briefs = briefs  # type: list[DescribeJobGroupResponseBodyJobGroupProgressBriefs]
        self.cancelled = cancelled  # type: int
        self.categories = categories  # type: list[DescribeJobGroupResponseBodyJobGroupProgressCategories]
        self.duration = duration  # type: int
        self.executing = executing  # type: int
        self.failed = failed  # type: int
        self.paused = paused  # type: int
        self.scheduling = scheduling  # type: int
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.total_completed = total_completed  # type: int
        self.total_jobs = total_jobs  # type: int
        self.total_not_answered = total_not_answered  # type: int

    def validate(self):
        if self.briefs:
            for k in self.briefs:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Briefs'] = []
        if self.briefs is not None:
            for k in self.briefs:
                result['Briefs'].append(k.to_map() if k else None)
        if self.cancelled is not None:
            result['Cancelled'] = self.cancelled
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.executing is not None:
            result['Executing'] = self.executing
        if self.failed is not None:
            result['Failed'] = self.failed
        if self.paused is not None:
            result['Paused'] = self.paused
        if self.scheduling is not None:
            result['Scheduling'] = self.scheduling
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.briefs = []
        if m.get('Briefs') is not None:
            for k in m.get('Briefs'):
                temp_model = DescribeJobGroupResponseBodyJobGroupProgressBriefs()
                self.briefs.append(temp_model.from_map(k))
        if m.get('Cancelled') is not None:
            self.cancelled = m.get('Cancelled')
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = DescribeJobGroupResponseBodyJobGroupProgressCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Executing') is not None:
            self.executing = m.get('Executing')
        if m.get('Failed') is not None:
            self.failed = m.get('Failed')
        if m.get('Paused') is not None:
            self.paused = m.get('Paused')
        if m.get('Scheduling') is not None:
            self.scheduling = m.get('Scheduling')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class DescribeJobGroupResponseBodyJobGroupRecallStrategy(TeaModel):
    def __init__(self, empty_number_ignore=None, in_arrears_ignore=None, out_of_service_ignore=None):
        self.empty_number_ignore = empty_number_ignore  # type: bool
        self.in_arrears_ignore = in_arrears_ignore  # type: bool
        self.out_of_service_ignore = out_of_service_ignore  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupRecallStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_ignore is not None:
            result['EmptyNumberIgnore'] = self.empty_number_ignore
        if self.in_arrears_ignore is not None:
            result['InArrearsIgnore'] = self.in_arrears_ignore
        if self.out_of_service_ignore is not None:
            result['OutOfServiceIgnore'] = self.out_of_service_ignore
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EmptyNumberIgnore') is not None:
            self.empty_number_ignore = m.get('EmptyNumberIgnore')
        if m.get('InArrearsIgnore') is not None:
            self.in_arrears_ignore = m.get('InArrearsIgnore')
        if m.get('OutOfServiceIgnore') is not None:
            self.out_of_service_ignore = m.get('OutOfServiceIgnore')
        return self


class DescribeJobGroupResponseBodyJobGroupResult(TeaModel):
    def __init__(self, client_hangup_num=None, finished_num=None, no_interact_num=None, timeout_hangup_num=None,
                 unrecognized_num=None):
        self.client_hangup_num = client_hangup_num  # type: int
        self.finished_num = finished_num  # type: int
        self.no_interact_num = no_interact_num  # type: int
        self.timeout_hangup_num = timeout_hangup_num  # type: int
        self.unrecognized_num = unrecognized_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupResult, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_hangup_num is not None:
            result['ClientHangupNum'] = self.client_hangup_num
        if self.finished_num is not None:
            result['FinishedNum'] = self.finished_num
        if self.no_interact_num is not None:
            result['NoInteractNum'] = self.no_interact_num
        if self.timeout_hangup_num is not None:
            result['TimeoutHangupNum'] = self.timeout_hangup_num
        if self.unrecognized_num is not None:
            result['UnrecognizedNum'] = self.unrecognized_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientHangupNum') is not None:
            self.client_hangup_num = m.get('ClientHangupNum')
        if m.get('FinishedNum') is not None:
            self.finished_num = m.get('FinishedNum')
        if m.get('NoInteractNum') is not None:
            self.no_interact_num = m.get('NoInteractNum')
        if m.get('TimeoutHangupNum') is not None:
            self.timeout_hangup_num = m.get('TimeoutHangupNum')
        if m.get('UnrecognizedNum') is not None:
            self.unrecognized_num = m.get('UnrecognizedNum')
        return self


class DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class DescribeJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class DescribeJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, export_progress=None,
                 job_data_parsing_task_id=None, job_file_path=None, job_group_description=None, job_group_id=None, job_group_name=None,
                 min_concurrency=None, modify_time=None, priority=None, progress=None, recall_strategy=None, result=None,
                 ringing_duration=None, scenario_id=None, script_id=None, script_name=None, script_version=None, status=None,
                 strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.export_progress = export_progress  # type: DescribeJobGroupResponseBodyJobGroupExportProgress
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.min_concurrency = min_concurrency  # type: long
        self.modify_time = modify_time  # type: str
        self.priority = priority  # type: str
        self.progress = progress  # type: DescribeJobGroupResponseBodyJobGroupProgress
        self.recall_strategy = recall_strategy  # type: DescribeJobGroupResponseBodyJobGroupRecallStrategy
        self.result = result  # type: DescribeJobGroupResponseBodyJobGroupResult
        self.ringing_duration = ringing_duration  # type: long
        self.scenario_id = scenario_id  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.script_version = script_version  # type: str
        self.status = status  # type: str
        self.strategy = strategy  # type: DescribeJobGroupResponseBodyJobGroupStrategy

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.progress:
            self.progress.validate()
        if self.recall_strategy:
            self.recall_strategy.validate()
        if self.result:
            self.result.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(DescribeJobGroupResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.recall_strategy is not None:
            result['RecallStrategy'] = self.recall_strategy.to_map()
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('Progress') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('RecallStrategy') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupRecallStrategy()
            self.recall_strategy = temp_model.from_map(m['RecallStrategy'])
        if m.get('Result') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class DescribeJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: DescribeJobGroupResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(DescribeJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobGroupExportTaskProgressRequest(TeaModel):
    def __init__(self, instance_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupExportTaskProgressRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeJobGroupExportTaskProgressResponseBody(TeaModel):
    def __init__(self, code=None, file_http_url=None, http_status_code=None, message=None, progress=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.file_http_url = file_http_url  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.progress = progress  # type: float
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeJobGroupExportTaskProgressResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobGroupExportTaskProgressResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeJobGroupExportTaskProgressResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeJobGroupExportTaskProgressResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobGroupExportTaskProgressResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion(TeaModel):
    def __init__(self, file_name=None, file_size=None, version_id=None):
        self.file_name = file_name  # type: str
        self.file_size = file_size  # type: long
        self.version_id = version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class DescribeNumberDistrictInfoStatusResponseBodyParsingVersion(TeaModel):
    def __init__(self, file_name=None, file_size=None, parse_progress=None, version_id=None):
        self.file_name = file_name  # type: str
        self.file_size = file_size  # type: long
        self.parse_progress = parse_progress  # type: long
        self.version_id = version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeNumberDistrictInfoStatusResponseBodyParsingVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.parse_progress is not None:
            result['ParseProgress'] = self.parse_progress
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('ParseProgress') is not None:
            self.parse_progress = m.get('ParseProgress')
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class DescribeNumberDistrictInfoStatusResponseBody(TeaModel):
    def __init__(self, applied_version=None, code=None, http_status_code=None, message=None, parsing_version=None,
                 request_id=None, status=None, success=None):
        self.applied_version = applied_version  # type: DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.parsing_version = parsing_version  # type: DescribeNumberDistrictInfoStatusResponseBodyParsingVersion
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.applied_version:
            self.applied_version.validate()
        if self.parsing_version:
            self.parsing_version.validate()

    def to_map(self):
        _map = super(DescribeNumberDistrictInfoStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.parsing_version is not None:
            result['ParsingVersion'] = self.parsing_version.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppliedVersion') is not None:
            temp_model = DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion()
            self.applied_version = temp_model.from_map(m['AppliedVersion'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('ParsingVersion') is not None:
            temp_model = DescribeNumberDistrictInfoStatusResponseBodyParsingVersion()
            self.parsing_version = temp_model.from_map(m['ParsingVersion'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeNumberDistrictInfoStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeNumberDistrictInfoStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeNumberDistrictInfoStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNumberDistrictInfoStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScriptRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeScriptResponseBodyScript(TeaModel):
    def __init__(self, asr_config=None, chatbot_id=None, debug_status=None, emotion_enable=None, industry=None,
                 is_debug_drafted=None, is_drafted=None, long_wait_enable=None, mini_playback_enable=None, new_barge_in_enable=None,
                 scene=None, script_description=None, script_id=None, script_name=None, status=None, tts_config=None,
                 update_time=None):
        self.asr_config = asr_config  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.debug_status = debug_status  # type: str
        self.emotion_enable = emotion_enable  # type: bool
        self.industry = industry  # type: str
        self.is_debug_drafted = is_debug_drafted  # type: bool
        self.is_drafted = is_drafted  # type: bool
        self.long_wait_enable = long_wait_enable  # type: bool
        self.mini_playback_enable = mini_playback_enable  # type: bool
        self.new_barge_in_enable = new_barge_in_enable  # type: bool
        self.scene = scene  # type: str
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.status = status  # type: str
        self.tts_config = tts_config  # type: str
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScriptResponseBodyScript, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, nls_config=None, request_id=None, script=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.nls_config = nls_config  # type: str
        self.request_id = request_id  # type: str
        self.script = script  # type: DescribeScriptResponseBodyScript
        self.success = success  # type: bool

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super(DescribeScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.nls_config is not None:
            result['NlsConfig'] = self.nls_config
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NlsConfig') is not None:
            self.nls_config = m.get('NlsConfig')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = DescribeScriptResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScriptVoiceConfigRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None, script_voice_config_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.script_voice_config_id = script_voice_config_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScriptVoiceConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        return self


class DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig(TeaModel):
    def __init__(self, instance_id=None, script_content=None, script_id=None, script_voice_config_id=None,
                 script_waveform_relation=None, source=None, type=None):
        self.instance_id = instance_id  # type: str
        self.script_content = script_content  # type: str
        self.script_id = script_id  # type: str
        self.script_voice_config_id = script_voice_config_id  # type: str
        self.script_waveform_relation = script_waveform_relation  # type: str
        self.source = source  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.source is not None:
            result['Source'] = self.source
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeScriptVoiceConfigResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script_voice_config=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_voice_config = script_voice_config  # type: DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig
        self.success = success  # type: bool

    def validate(self):
        if self.script_voice_config:
            self.script_voice_config.validate()

    def to_map(self):
        _map = super(DescribeScriptVoiceConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_voice_config is not None:
            result['ScriptVoiceConfig'] = self.script_voice_config.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptVoiceConfig') is not None:
            temp_model = DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig()
            self.script_voice_config = temp_model.from_map(m['ScriptVoiceConfig'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeScriptVoiceConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeScriptVoiceConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeScriptVoiceConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScriptVoiceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTTSConfigRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTTSConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeTTSConfigResponseBodyTTSConfig(TeaModel):
    def __init__(self, app_key=None, instance_id=None, nls_service_type=None, speech_rate=None, voice=None,
                 volume=None):
        self.app_key = app_key  # type: str
        self.instance_id = instance_id  # type: str
        self.nls_service_type = nls_service_type  # type: str
        self.speech_rate = speech_rate  # type: str
        self.voice = voice  # type: str
        self.volume = volume  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTTSConfigResponseBodyTTSConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nls_service_type is not None:
            result['NlsServiceType'] = self.nls_service_type
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NlsServiceType') is not None:
            self.nls_service_type = m.get('NlsServiceType')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class DescribeTTSConfigResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, ttsconfig=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.ttsconfig = ttsconfig  # type: DescribeTTSConfigResponseBodyTTSConfig

    def validate(self):
        if self.ttsconfig:
            self.ttsconfig.validate()

    def to_map(self):
        _map = super(DescribeTTSConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.ttsconfig is not None:
            result['TTSConfig'] = self.ttsconfig.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TTSConfig') is not None:
            temp_model = DescribeTTSConfigResponseBodyTTSConfig()
            self.ttsconfig = temp_model.from_map(m['TTSConfig'])
        return self


class DescribeTTSConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTTSConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTTSConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTTSConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTTSDemoRequest(TeaModel):
    def __init__(self, instance_id=None, pitch_rate=None, script_id=None, speech_rate=None, text=None, voice=None,
                 volume=None):
        self.instance_id = instance_id  # type: str
        self.pitch_rate = pitch_rate  # type: int
        self.script_id = script_id  # type: str
        self.speech_rate = speech_rate  # type: int
        self.text = text  # type: str
        self.voice = voice  # type: str
        self.volume = volume  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTTSDemoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.pitch_rate is not None:
            result['PitchRate'] = self.pitch_rate
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.text is not None:
            result['Text'] = self.text
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PitchRate') is not None:
            self.pitch_rate = m.get('PitchRate')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('Text') is not None:
            self.text = m.get('Text')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class DescribeTTSDemoResponseBody(TeaModel):
    def __init__(self, audition_url=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.audition_url = audition_url  # type: str
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTTSDemoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audition_url is not None:
            result['AuditionUrl'] = self.audition_url
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AuditionUrl') is not None:
            self.audition_url = m.get('AuditionUrl')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeTTSDemoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTTSDemoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTTSDemoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTTSDemoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagHitsSummaryRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagHitsSummaryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeTagHitsSummaryResponseBodyTagGroups(TeaModel):
    def __init__(self, id=None, script_id=None, tag_group=None, tag_group_index=None):
        # ID
        self.id = id  # type: str
        self.script_id = script_id  # type: str
        self.tag_group = tag_group  # type: str
        self.tag_group_index = tag_group_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagHitsSummaryResponseBodyTagGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_group_index is not None:
            result['TagGroupIndex'] = self.tag_group_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagGroupIndex') is not None:
            self.tag_group_index = m.get('TagGroupIndex')
        return self


class DescribeTagHitsSummaryResponseBodyTagHitsList(TeaModel):
    def __init__(self, hit_count=None, tag_group=None, tag_name=None):
        self.hit_count = hit_count  # type: int
        self.tag_group = tag_group  # type: str
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTagHitsSummaryResponseBodyTagHitsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hit_count is not None:
            result['HitCount'] = self.hit_count
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HitCount') is not None:
            self.hit_count = m.get('HitCount')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class DescribeTagHitsSummaryResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 tag_groups=None, tag_hits_list=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.tag_groups = tag_groups  # type: list[DescribeTagHitsSummaryResponseBodyTagGroups]
        self.tag_hits_list = tag_hits_list  # type: list[DescribeTagHitsSummaryResponseBodyTagHitsList]

    def validate(self):
        if self.tag_groups:
            for k in self.tag_groups:
                if k:
                    k.validate()
        if self.tag_hits_list:
            for k in self.tag_hits_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTagHitsSummaryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagGroups'] = []
        if self.tag_groups is not None:
            for k in self.tag_groups:
                result['TagGroups'].append(k.to_map() if k else None)
        result['TagHitsList'] = []
        if self.tag_hits_list is not None:
            for k in self.tag_hits_list:
                result['TagHitsList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_groups = []
        if m.get('TagGroups') is not None:
            for k in m.get('TagGroups'):
                temp_model = DescribeTagHitsSummaryResponseBodyTagGroups()
                self.tag_groups.append(temp_model.from_map(k))
        self.tag_hits_list = []
        if m.get('TagHitsList') is not None:
            for k in m.get('TagHitsList'):
                temp_model = DescribeTagHitsSummaryResponseBodyTagHitsList()
                self.tag_hits_list.append(temp_model.from_map(k))
        return self


class DescribeTagHitsSummaryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTagHitsSummaryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTagHitsSummaryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagHitsSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTenantBindNumberRequest(TeaModel):
    def __init__(self, number=None):
        self.number = number  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTenantBindNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class DescribeTenantBindNumberResponseBodyDataList(TeaModel):
    def __init__(self, instance_id=None, instance_name=None, is_binding=None):
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.is_binding = is_binding  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeTenantBindNumberResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.is_binding is not None:
            result['IsBinding'] = self.is_binding
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('IsBinding') is not None:
            self.is_binding = m.get('IsBinding')
        return self


class DescribeTenantBindNumberResponseBodyData(TeaModel):
    def __init__(self, list=None):
        self.list = list  # type: list[DescribeTenantBindNumberResponseBodyDataList]

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeTenantBindNumberResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = DescribeTenantBindNumberResponseBodyDataList()
                self.list.append(temp_model.from_map(k))
        return self


class DescribeTenantBindNumberResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: DescribeTenantBindNumberResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(DescribeTenantBindNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeTenantBindNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeTenantBindNumberResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeTenantBindNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeTenantBindNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTenantBindNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DialogueRequest(TeaModel):
    def __init__(self, action_key=None, action_params=None, call_id=None, call_type=None, called_number=None,
                 calling_number=None, instance_id=None, scenario_id=None, script_id=None, task_id=None, utterance=None):
        self.action_key = action_key  # type: str
        self.action_params = action_params  # type: str
        self.call_id = call_id  # type: str
        self.call_type = call_type  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.script_id = script_id  # type: str
        self.task_id = task_id  # type: str
        self.utterance = utterance  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DialogueRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_key is not None:
            result['ActionKey'] = self.action_key
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.call_type is not None:
            result['CallType'] = self.call_type
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.utterance is not None:
            result['Utterance'] = self.utterance
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActionKey') is not None:
            self.action_key = m.get('ActionKey')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallType') is not None:
            self.call_type = m.get('CallType')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Utterance') is not None:
            self.utterance = m.get('Utterance')
        return self


class DialogueResponseBodyFeedback(TeaModel):
    def __init__(self, action=None, action_params=None, content=None, content_params=None, interruptible=None):
        self.action = action  # type: str
        self.action_params = action_params  # type: str
        self.content = content  # type: str
        self.content_params = content_params  # type: str
        self.interruptible = interruptible  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DialogueResponseBodyFeedback, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.content is not None:
            result['Content'] = self.content
        if self.content_params is not None:
            result['ContentParams'] = self.content_params
        if self.interruptible is not None:
            result['Interruptible'] = self.interruptible
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentParams') is not None:
            self.content_params = m.get('ContentParams')
        if m.get('Interruptible') is not None:
            self.interruptible = m.get('Interruptible')
        return self


class DialogueResponseBody(TeaModel):
    def __init__(self, code=None, feedback=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.feedback = feedback  # type: DialogueResponseBodyFeedback
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.feedback:
            self.feedback.validate()

    def to_map(self):
        _map = super(DialogueResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.feedback is not None:
            result['Feedback'] = self.feedback.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Feedback') is not None:
            temp_model = DialogueResponseBodyFeedback()
            self.feedback = temp_model.from_map(m['Feedback'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DialogueResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DialogueResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DialogueResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DialogueResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DismissNumberDistrictInfoParsingResultRequest(TeaModel):
    def __init__(self, version_id=None):
        self.version_id = version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DismissNumberDistrictInfoParsingResultRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class DismissNumberDistrictInfoParsingResultResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DismissNumberDistrictInfoParsingResultResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DismissNumberDistrictInfoParsingResultResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DismissNumberDistrictInfoParsingResultResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DismissNumberDistrictInfoParsingResultResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DismissNumberDistrictInfoParsingResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadRecordingRequest(TeaModel):
    def __init__(self, instance_id=None, need_voice_slice_recording=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.need_voice_slice_recording = need_voice_slice_recording  # type: bool
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.need_voice_slice_recording is not None:
            result['NeedVoiceSliceRecording'] = self.need_voice_slice_recording
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NeedVoiceSliceRecording') is not None:
            self.need_voice_slice_recording = m.get('NeedVoiceSliceRecording')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DownloadRecordingResponseBodyDownloadParams(TeaModel):
    def __init__(self, file_name=None, signature_url=None, voice_slice_recording_list_json=None):
        self.file_name = file_name  # type: str
        self.signature_url = signature_url  # type: str
        self.voice_slice_recording_list_json = voice_slice_recording_list_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadRecordingResponseBodyDownloadParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        if self.voice_slice_recording_list_json is not None:
            result['VoiceSliceRecordingListJson'] = self.voice_slice_recording_list_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        if m.get('VoiceSliceRecordingListJson') is not None:
            self.voice_slice_recording_list_json = m.get('VoiceSliceRecordingListJson')
        return self


class DownloadRecordingResponseBody(TeaModel):
    def __init__(self, code=None, download_params=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.download_params = download_params  # type: DownloadRecordingResponseBodyDownloadParams
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super(DownloadRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadRecordingResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadRecordingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DownloadRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadScriptRecordingRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None, uuid=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.uuid = uuid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadScriptRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class DownloadScriptRecordingResponseBodyDownloadParams(TeaModel):
    def __init__(self, file_name=None, signature_url=None):
        self.file_name = file_name  # type: str
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadScriptRecordingResponseBodyDownloadParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadScriptRecordingResponseBody(TeaModel):
    def __init__(self, code=None, download_params=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.download_params = download_params  # type: DownloadScriptRecordingResponseBodyDownloadParams
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super(DownloadScriptRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadScriptRecordingResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadScriptRecordingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DownloadScriptRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadScriptRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DuplicateScriptRequest(TeaModel):
    def __init__(self, instance_id=None, name=None, source_script_id=None):
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.source_script_id = source_script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DuplicateScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.source_script_id is not None:
            result['SourceScriptId'] = self.source_script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SourceScriptId') is not None:
            self.source_script_id = m.get('SourceScriptId')
        return self


class DuplicateScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_id = script_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DuplicateScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DuplicateScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DuplicateScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DuplicateScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DuplicateScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExportScriptRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExportScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ExportScriptResponseBodyDownloadParams(TeaModel):
    def __init__(self, signature_url=None):
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExportScriptResponseBodyDownloadParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class ExportScriptResponseBody(TeaModel):
    def __init__(self, code=None, download_params=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.download_params = download_params  # type: ExportScriptResponseBodyDownloadParams
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super(ExportScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = ExportScriptResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExportScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ExportScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ExportScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExportScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GenerateUploadUrlRequest(TeaModel):
    def __init__(self, file_name=None, key=None):
        self.file_name = file_name  # type: str
        self.key = key  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GenerateUploadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.key is not None:
            result['Key'] = self.key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        return self


class GenerateUploadUrlResponseBodyData(TeaModel):
    def __init__(self, access_id=None, expire=None, folder=None, host=None, message=None, policy=None, signature=None,
                 success=None):
        self.access_id = access_id  # type: str
        self.expire = expire  # type: int
        self.folder = folder  # type: str
        self.host = host  # type: str
        self.message = message  # type: str
        self.policy = policy  # type: str
        self.signature = signature  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GenerateUploadUrlResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.folder is not None:
            result['Folder'] = self.folder
        if self.host is not None:
            result['Host'] = self.host
        if self.message is not None:
            result['Message'] = self.message
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Folder') is not None:
            self.folder = m.get('Folder')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GenerateUploadUrlResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: GenerateUploadUrlResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GenerateUploadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GenerateUploadUrlResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GenerateUploadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GenerateUploadUrlResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GenerateUploadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GenerateUploadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAfterAnswerDelayPlaybackRequest(TeaModel):
    def __init__(self, entry_id=None, strategy_level=None):
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAfterAnswerDelayPlaybackRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetAfterAnswerDelayPlaybackResponseBody(TeaModel):
    def __init__(self, after_answer_delay_playback=None, code=None, http_status_code=None, message=None,
                 request_id=None, success=None):
        self.after_answer_delay_playback = after_answer_delay_playback  # type: int
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAfterAnswerDelayPlaybackResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_answer_delay_playback is not None:
            result['AfterAnswerDelayPlayback'] = self.after_answer_delay_playback
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AfterAnswerDelayPlayback') is not None:
            self.after_answer_delay_playback = m.get('AfterAnswerDelayPlayback')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAfterAnswerDelayPlaybackResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAfterAnswerDelayPlaybackResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAfterAnswerDelayPlaybackResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAfterAnswerDelayPlaybackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAsrServerInfoRequest(TeaModel):
    def __init__(self, entry_id=None, strategy_level=None):
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAsrServerInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetAsrServerInfoResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAsrServerInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAsrServerInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAsrServerInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAsrServerInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAsrServerInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBaseStrategyPeriodRequest(TeaModel):
    def __init__(self, entry_id=None, strategy_level=None):
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBaseStrategyPeriodRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetBaseStrategyPeriodResponseBodyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, begin_time_millis=None, end_time=None, end_time_millis=None):
        self.begin_time = begin_time  # type: str
        self.begin_time_millis = begin_time_millis  # type: long
        self.end_time = end_time  # type: str
        self.end_time_millis = end_time_millis  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBaseStrategyPeriodResponseBodyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.begin_time_millis is not None:
            result['BeginTimeMillis'] = self.begin_time_millis
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.end_time_millis is not None:
            result['EndTimeMillis'] = self.end_time_millis
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('BeginTimeMillis') is not None:
            self.begin_time_millis = m.get('BeginTimeMillis')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('EndTimeMillis') is not None:
            self.end_time_millis = m.get('EndTimeMillis')
        return self


class GetBaseStrategyPeriodResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, only_weekdays=None, request_id=None,
                 success=None, working_time=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.only_weekdays = only_weekdays  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.working_time = working_time  # type: list[GetBaseStrategyPeriodResponseBodyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetBaseStrategyPeriodResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.only_weekdays is not None:
            result['OnlyWeekdays'] = self.only_weekdays
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OnlyWeekdays') is not None:
            self.only_weekdays = m.get('OnlyWeekdays')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = GetBaseStrategyPeriodResponseBodyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class GetBaseStrategyPeriodResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBaseStrategyPeriodResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBaseStrategyPeriodResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBaseStrategyPeriodResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConcurrentConversationQuotaResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, max_concurrent=None, message=None,
                 remaining_concurrent=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        # maxConcurrent
        self.max_concurrent = max_concurrent  # type: int
        self.message = message  # type: str
        self.remaining_concurrent = remaining_concurrent  # type: int
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConcurrentConversationQuotaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.max_concurrent is not None:
            result['MaxConcurrent'] = self.max_concurrent
        if self.message is not None:
            result['Message'] = self.message
        if self.remaining_concurrent is not None:
            result['RemainingConcurrent'] = self.remaining_concurrent
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MaxConcurrent') is not None:
            self.max_concurrent = m.get('MaxConcurrent')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RemainingConcurrent') is not None:
            self.remaining_concurrent = m.get('RemainingConcurrent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConcurrentConversationQuotaResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetConcurrentConversationQuotaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetConcurrentConversationQuotaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetConcurrentConversationQuotaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetContactBlockListRequest(TeaModel):
    def __init__(self, count_total_row=None, instance_id=None, page_number=None, page_size=None):
        self.count_total_row = count_total_row  # type: bool
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetContactBlockListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count_total_row is not None:
            result['CountTotalRow'] = self.count_total_row
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CountTotalRow') is not None:
            self.count_total_row = m.get('CountTotalRow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetContactBlockListResponseBodyContactBlocklistListList(TeaModel):
    def __init__(self, contact_block_list_id=None, creation_time=None, creator=None, instance_id=None, name=None,
                 operator=None, phone_number=None, remark=None):
        self.contact_block_list_id = contact_block_list_id  # type: str
        self.creation_time = creation_time  # type: long
        self.creator = creator  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.operator = operator  # type: str
        self.phone_number = phone_number  # type: str
        self.remark = remark  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetContactBlockListResponseBodyContactBlocklistListList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_block_list_id is not None:
            result['ContactBlockListId'] = self.contact_block_list_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactBlockListId') is not None:
            self.contact_block_list_id = m.get('ContactBlockListId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class GetContactBlockListResponseBodyContactBlocklistList(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[GetContactBlockListResponseBodyContactBlocklistListList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetContactBlockListResponseBodyContactBlocklistList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetContactBlockListResponseBodyContactBlocklistListList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetContactBlockListResponseBody(TeaModel):
    def __init__(self, code=None, contact_blocklist_list=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.contact_blocklist_list = contact_blocklist_list  # type: GetContactBlockListResponseBodyContactBlocklistList
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.contact_blocklist_list:
            self.contact_blocklist_list.validate()

    def to_map(self):
        _map = super(GetContactBlockListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_blocklist_list is not None:
            result['ContactBlocklistList'] = self.contact_blocklist_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactBlocklistList') is not None:
            temp_model = GetContactBlockListResponseBodyContactBlocklistList()
            self.contact_blocklist_list = temp_model.from_map(m['ContactBlocklistList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetContactBlockListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetContactBlockListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetContactBlockListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetContactBlockListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetContactWhiteListRequest(TeaModel):
    def __init__(self, count_total_row=None, instance_id=None, page_number=None, page_size=None):
        self.count_total_row = count_total_row  # type: bool
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetContactWhiteListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count_total_row is not None:
            result['CountTotalRow'] = self.count_total_row
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CountTotalRow') is not None:
            self.count_total_row = m.get('CountTotalRow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetContactWhiteListResponseBodyContactWhitelistListList(TeaModel):
    def __init__(self, contact_white_list_id=None, creation_time=None, creator=None, instance_id=None, name=None,
                 operator=None, phone_number=None, remark=None):
        self.contact_white_list_id = contact_white_list_id  # type: str
        self.creation_time = creation_time  # type: long
        self.creator = creator  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.operator = operator  # type: str
        self.phone_number = phone_number  # type: str
        self.remark = remark  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetContactWhiteListResponseBodyContactWhitelistListList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_white_list_id is not None:
            result['ContactWhiteListId'] = self.contact_white_list_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactWhiteListId') is not None:
            self.contact_white_list_id = m.get('ContactWhiteListId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class GetContactWhiteListResponseBodyContactWhitelistList(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[GetContactWhiteListResponseBodyContactWhitelistListList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetContactWhiteListResponseBodyContactWhitelistList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetContactWhiteListResponseBodyContactWhitelistListList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetContactWhiteListResponseBody(TeaModel):
    def __init__(self, code=None, contact_whitelist_list=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.contact_whitelist_list = contact_whitelist_list  # type: GetContactWhiteListResponseBodyContactWhitelistList
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.contact_whitelist_list:
            self.contact_whitelist_list.validate()

    def to_map(self):
        _map = super(GetContactWhiteListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_whitelist_list is not None:
            result['ContactWhitelistList'] = self.contact_whitelist_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactWhitelistList') is not None:
            temp_model = GetContactWhiteListResponseBodyContactWhitelistList()
            self.contact_whitelist_list = temp_model.from_map(m['ContactWhitelistList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetContactWhiteListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetContactWhiteListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetContactWhiteListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetContactWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCurrentConcurrencyRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCurrentConcurrencyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetCurrentConcurrencyResponseBody(TeaModel):
    def __init__(self, code=None, current_concurrency=None, http_status_code=None, instance_id=None,
                 max_concurrent_conversation=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.current_concurrency = current_concurrency  # type: int
        self.http_status_code = http_status_code  # type: int
        self.instance_id = instance_id  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCurrentConcurrencyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.current_concurrency is not None:
            result['CurrentConcurrency'] = self.current_concurrency
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CurrentConcurrency') is not None:
            self.current_concurrency = m.get('CurrentConcurrency')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetCurrentConcurrencyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetCurrentConcurrencyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetCurrentConcurrencyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCurrentConcurrencyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEffectiveDaysRequest(TeaModel):
    def __init__(self, entry_id=None, strategy_level=None):
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEffectiveDaysRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetEffectiveDaysResponseBody(TeaModel):
    def __init__(self, code=None, effective_days=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.effective_days = effective_days  # type: int
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEffectiveDaysResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.effective_days is not None:
            result['EffectiveDays'] = self.effective_days
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('EffectiveDays') is not None:
            self.effective_days = m.get('EffectiveDays')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEffectiveDaysResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEffectiveDaysResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEffectiveDaysResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEffectiveDaysResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEmptyNumberNoMoreCallsInfoRequest(TeaModel):
    def __init__(self, entry_id=None, strategy_level=None):
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEmptyNumberNoMoreCallsInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetEmptyNumberNoMoreCallsInfoResponseBody(TeaModel):
    def __init__(self, code=None, empty_number_no_more_calls=None, http_status_code=None, message=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.empty_number_no_more_calls = empty_number_no_more_calls  # type: bool
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEmptyNumberNoMoreCallsInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.empty_number_no_more_calls is not None:
            result['EmptyNumberNoMoreCalls'] = self.empty_number_no_more_calls
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('EmptyNumberNoMoreCalls') is not None:
            self.empty_number_no_more_calls = m.get('EmptyNumberNoMoreCalls')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEmptyNumberNoMoreCallsInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEmptyNumberNoMoreCallsInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEmptyNumberNoMoreCallsInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEmptyNumberNoMoreCallsInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMaxAttemptsPerDayRequest(TeaModel):
    def __init__(self, entry_id=None, strategy_level=None):
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMaxAttemptsPerDayRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetMaxAttemptsPerDayResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, max_attempts_per_day=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMaxAttemptsPerDayResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMaxAttemptsPerDayResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMaxAttemptsPerDayResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMaxAttemptsPerDayResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMaxAttemptsPerDayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNumberDistrictInfoTemplateDownloadUrlResponseBody(TeaModel):
    def __init__(self, code=None, file_http_url=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.file_http_url = file_http_url  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNumberDistrictInfoTemplateDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetNumberDistrictInfoTemplateDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetNumberDistrictInfoTemplateDownloadUrlResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetNumberDistrictInfoTemplateDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetNumberDistrictInfoTemplateDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSummaryInfoRequest(TeaModel):
    def __init__(self, instance_id_list=None):
        self.instance_id_list = instance_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSummaryInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id_list is not None:
            result['InstanceIdList'] = self.instance_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceIdList') is not None:
            self.instance_id_list = m.get('InstanceIdList')
        return self


class GetSummaryInfoResponseBodyAgentBotInstanceSummaryList(TeaModel):
    def __init__(self, instance_id=None, total_call_count=None, total_call_time=None,
                 used_recording_storage_space=None):
        self.instance_id = instance_id  # type: str
        self.total_call_count = total_call_count  # type: long
        self.total_call_time = total_call_time  # type: long
        self.used_recording_storage_space = used_recording_storage_space  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSummaryInfoResponseBodyAgentBotInstanceSummaryList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.total_call_count is not None:
            result['TotalCallCount'] = self.total_call_count
        if self.total_call_time is not None:
            result['TotalCallTime'] = self.total_call_time
        if self.used_recording_storage_space is not None:
            result['UsedRecordingStorageSpace'] = self.used_recording_storage_space
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TotalCallCount') is not None:
            self.total_call_count = m.get('TotalCallCount')
        if m.get('TotalCallTime') is not None:
            self.total_call_time = m.get('TotalCallTime')
        if m.get('UsedRecordingStorageSpace') is not None:
            self.used_recording_storage_space = m.get('UsedRecordingStorageSpace')
        return self


class GetSummaryInfoResponseBody(TeaModel):
    def __init__(self, agent_bot_instance_summary_list=None, code=None, http_status_code=None, message=None,
                 request_id=None, success=None):
        self.agent_bot_instance_summary_list = agent_bot_instance_summary_list  # type: list[GetSummaryInfoResponseBodyAgentBotInstanceSummaryList]
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.agent_bot_instance_summary_list:
            for k in self.agent_bot_instance_summary_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetSummaryInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentBotInstanceSummaryList'] = []
        if self.agent_bot_instance_summary_list is not None:
            for k in self.agent_bot_instance_summary_list:
                result['AgentBotInstanceSummaryList'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_bot_instance_summary_list = []
        if m.get('AgentBotInstanceSummaryList') is not None:
            for k in m.get('AgentBotInstanceSummaryList'):
                temp_model = GetSummaryInfoResponseBodyAgentBotInstanceSummaryList()
                self.agent_bot_instance_summary_list.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetSummaryInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSummaryInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSummaryInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSummaryInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTaskByUuidRequest(TeaModel):
    def __init__(self, instance_id=None, task_id=None, with_conversations=None):
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str
        self.with_conversations = with_conversations  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTaskByUuidRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.with_conversations is not None:
            result['WithConversations'] = self.with_conversations
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('WithConversations') is not None:
            self.with_conversations = m.get('WithConversations')
        return self


class GetTaskByUuidResponseBodyTask(TeaModel):
    def __init__(self, actual_time=None, call_id=None, called_number=None, calling_number=None, end_reason=None,
                 end_time=None, id=None, instance_id=None, job_group_id=None, job_id=None, planned_time=None):
        self.actual_time = actual_time  # type: long
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.end_reason = end_reason  # type: int
        self.end_time = end_time  # type: long
        self.id = id  # type: str
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: str
        self.planned_time = planned_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTaskByUuidResponseBodyTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.end_reason is not None:
            result['EndReason'] = self.end_reason
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planned_time is not None:
            result['PlannedTime'] = self.planned_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('EndReason') is not None:
            self.end_reason = m.get('EndReason')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlannedTime') is not None:
            self.planned_time = m.get('PlannedTime')
        return self


class GetTaskByUuidResponseBody(TeaModel):
    def __init__(self, request_id=None, task=None):
        self.request_id = request_id  # type: str
        self.task = task  # type: GetTaskByUuidResponseBodyTask

    def validate(self):
        if self.task:
            self.task.validate()

    def to_map(self):
        _map = super(GetTaskByUuidResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.task is not None:
            result['Task'] = self.task.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Task') is not None:
            temp_model = GetTaskByUuidResponseBodyTask()
            self.task = temp_model.from_map(m['Task'])
        return self


class GetTaskByUuidResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetTaskByUuidResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTaskByUuidResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTaskByUuidResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetVersionResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, version=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.version = version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetVersionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetVersionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ImportScriptRequest(TeaModel):
    def __init__(self, instance_id=None, signature_url=None):
        self.instance_id = instance_id  # type: str
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ImportScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class ImportScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_id = script_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ImportScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ImportScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ImportScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ImportScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ImportScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InflightTaskTimeoutRequest(TeaModel):
    def __init__(self, instance_id=None, instance_owner_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.instance_owner_id = instance_owner_id  # type: long
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InflightTaskTimeoutRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class InflightTaskTimeoutResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(InflightTaskTimeoutResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InflightTaskTimeoutResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InflightTaskTimeoutResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InflightTaskTimeoutResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InflightTaskTimeoutResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAllTenantBindNumberBindingResponseBodyDataList(TeaModel):
    def __init__(self, billing_type=None, binding_id=None, instance_name_list=None, number=None,
                 serialized_params=None, trunk_name=None):
        self.billing_type = billing_type  # type: str
        self.binding_id = binding_id  # type: str
        self.instance_name_list = instance_name_list  # type: list[str]
        self.number = number  # type: str
        self.serialized_params = serialized_params  # type: str
        self.trunk_name = trunk_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAllTenantBindNumberBindingResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.billing_type is not None:
            result['BillingType'] = self.billing_type
        if self.binding_id is not None:
            result['BindingId'] = self.binding_id
        if self.instance_name_list is not None:
            result['InstanceNameList'] = self.instance_name_list
        if self.number is not None:
            result['Number'] = self.number
        if self.serialized_params is not None:
            result['SerializedParams'] = self.serialized_params
        if self.trunk_name is not None:
            result['TrunkName'] = self.trunk_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BillingType') is not None:
            self.billing_type = m.get('BillingType')
        if m.get('BindingId') is not None:
            self.binding_id = m.get('BindingId')
        if m.get('InstanceNameList') is not None:
            self.instance_name_list = m.get('InstanceNameList')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('SerializedParams') is not None:
            self.serialized_params = m.get('SerializedParams')
        if m.get('TrunkName') is not None:
            self.trunk_name = m.get('TrunkName')
        return self


class ListAllTenantBindNumberBindingResponseBodyData(TeaModel):
    def __init__(self, list=None):
        self.list = list  # type: list[ListAllTenantBindNumberBindingResponseBodyDataList]

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAllTenantBindNumberBindingResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListAllTenantBindNumberBindingResponseBodyDataList()
                self.list.append(temp_model.from_map(k))
        return self


class ListAllTenantBindNumberBindingResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: ListAllTenantBindNumberBindingResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(ListAllTenantBindNumberBindingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListAllTenantBindNumberBindingResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAllTenantBindNumberBindingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListAllTenantBindNumberBindingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAllTenantBindNumberBindingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAllTenantBindNumberBindingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListChatbotInstancesRequest(TeaModel):
    def __init__(self, page_number=None, page_size=None):
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListChatbotInstancesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListChatbotInstancesResponseBodyBots(TeaModel):
    def __init__(self, avatar=None, create_time=None, instance_id=None, introduction=None, language_code=None,
                 name=None, time_zone=None):
        self.avatar = avatar  # type: str
        self.create_time = create_time  # type: str
        self.instance_id = instance_id  # type: str
        self.introduction = introduction  # type: str
        self.language_code = language_code  # type: str
        self.name = name  # type: str
        self.time_zone = time_zone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListChatbotInstancesResponseBodyBots, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avatar is not None:
            result['Avatar'] = self.avatar
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.introduction is not None:
            result['Introduction'] = self.introduction
        if self.language_code is not None:
            result['LanguageCode'] = self.language_code
        if self.name is not None:
            result['Name'] = self.name
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Avatar') is not None:
            self.avatar = m.get('Avatar')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Introduction') is not None:
            self.introduction = m.get('Introduction')
        if m.get('LanguageCode') is not None:
            self.language_code = m.get('LanguageCode')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class ListChatbotInstancesResponseBody(TeaModel):
    def __init__(self, bots=None, code=None, http_status_code=None, message=None, page_number=None, page_size=None,
                 request_id=None, success=None, total_count=None):
        self.bots = bots  # type: list[ListChatbotInstancesResponseBodyBots]
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.page_number = page_number  # type: long
        self.page_size = page_size  # type: long
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.total_count = total_count  # type: long

    def validate(self):
        if self.bots:
            for k in self.bots:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListChatbotInstancesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Bots'] = []
        if self.bots is not None:
            for k in self.bots:
                result['Bots'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.bots = []
        if m.get('Bots') is not None:
            for k in m.get('Bots'):
                temp_model = ListChatbotInstancesResponseBodyBots()
                self.bots.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListChatbotInstancesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListChatbotInstancesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListChatbotInstancesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListChatbotInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDialogueFlowsRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDialogueFlowsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListDialogueFlowsResponseBodyDialogueFlows(TeaModel):
    def __init__(self, dialogue_flow_definition=None, dialogue_flow_id=None, dialogue_flow_name=None,
                 dialogue_flow_type=None, script_id=None, script_version=None):
        self.dialogue_flow_definition = dialogue_flow_definition  # type: str
        self.dialogue_flow_id = dialogue_flow_id  # type: str
        self.dialogue_flow_name = dialogue_flow_name  # type: str
        self.dialogue_flow_type = dialogue_flow_type  # type: str
        self.script_id = script_id  # type: str
        self.script_version = script_version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDialogueFlowsResponseBodyDialogueFlows, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_definition is not None:
            result['DialogueFlowDefinition'] = self.dialogue_flow_definition
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.dialogue_flow_name is not None:
            result['DialogueFlowName'] = self.dialogue_flow_name
        if self.dialogue_flow_type is not None:
            result['DialogueFlowType'] = self.dialogue_flow_type
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DialogueFlowDefinition') is not None:
            self.dialogue_flow_definition = m.get('DialogueFlowDefinition')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('DialogueFlowName') is not None:
            self.dialogue_flow_name = m.get('DialogueFlowName')
        if m.get('DialogueFlowType') is not None:
            self.dialogue_flow_type = m.get('DialogueFlowType')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        return self


class ListDialogueFlowsResponseBody(TeaModel):
    def __init__(self, code=None, dialogue_flows=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.dialogue_flows = dialogue_flows  # type: list[ListDialogueFlowsResponseBodyDialogueFlows]
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.dialogue_flows:
            for k in self.dialogue_flows:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDialogueFlowsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['DialogueFlows'] = []
        if self.dialogue_flows is not None:
            for k in self.dialogue_flows:
                result['DialogueFlows'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.dialogue_flows = []
        if m.get('DialogueFlows') is not None:
            for k in m.get('DialogueFlows'):
                temp_model = ListDialogueFlowsResponseBodyDialogueFlows()
                self.dialogue_flows.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListDialogueFlowsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDialogueFlowsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDialogueFlowsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDialogueFlowsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDownloadTasksRequest(TeaModel):
    def __init__(self, page_number=None, page_size=None):
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDownloadTasksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles(TeaModel):
    def __init__(self, file_id=None, progress=None, status=None, title=None):
        self.file_id = file_id  # type: str
        self.progress = progress  # type: int
        self.status = status  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class ListDownloadTasksResponseBodyDownloadTasksList(TeaModel):
    def __init__(self, download_task_files=None, expire_time=None, status=None, task_id=None, title=None):
        self.download_task_files = download_task_files  # type: list[ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles]
        self.expire_time = expire_time  # type: long
        self.status = status  # type: str
        self.task_id = task_id  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.download_task_files:
            for k in self.download_task_files:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDownloadTasksResponseBodyDownloadTasksList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DownloadTaskFiles'] = []
        if self.download_task_files is not None:
            for k in self.download_task_files:
                result['DownloadTaskFiles'].append(k.to_map() if k else None)
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.download_task_files = []
        if m.get('DownloadTaskFiles') is not None:
            for k in m.get('DownloadTaskFiles'):
                temp_model = ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles()
                self.download_task_files.append(temp_model.from_map(k))
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class ListDownloadTasksResponseBodyDownloadTasks(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListDownloadTasksResponseBodyDownloadTasksList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDownloadTasksResponseBodyDownloadTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListDownloadTasksResponseBodyDownloadTasksList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDownloadTasksResponseBody(TeaModel):
    def __init__(self, code=None, download_tasks=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.download_tasks = download_tasks  # type: ListDownloadTasksResponseBodyDownloadTasks
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.download_tasks:
            self.download_tasks.validate()

    def to_map(self):
        _map = super(ListDownloadTasksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_tasks is not None:
            result['DownloadTasks'] = self.download_tasks.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadTasks') is not None:
            temp_model = ListDownloadTasksResponseBodyDownloadTasks()
            self.download_tasks = temp_model.from_map(m['DownloadTasks'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListDownloadTasksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDownloadTasksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDownloadTasksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDownloadTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListGlobalQuestionsRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListGlobalQuestionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListGlobalQuestionsResponseBodyGlobalQuestionsList(TeaModel):
    def __init__(self, answers=None, global_question_id=None, global_question_name=None, global_question_type=None,
                 questions=None, script_id=None):
        self.answers = answers  # type: str
        self.global_question_id = global_question_id  # type: str
        self.global_question_name = global_question_name  # type: str
        self.global_question_type = global_question_type  # type: str
        self.questions = questions  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListGlobalQuestionsResponseBodyGlobalQuestionsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListGlobalQuestionsResponseBodyGlobalQuestions(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListGlobalQuestionsResponseBodyGlobalQuestionsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListGlobalQuestionsResponseBodyGlobalQuestions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListGlobalQuestionsResponseBodyGlobalQuestionsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListGlobalQuestionsResponseBody(TeaModel):
    def __init__(self, code=None, global_questions=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.global_questions = global_questions  # type: ListGlobalQuestionsResponseBodyGlobalQuestions
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.global_questions:
            self.global_questions.validate()

    def to_map(self):
        _map = super(ListGlobalQuestionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalQuestions') is not None:
            temp_model = ListGlobalQuestionsResponseBodyGlobalQuestions()
            self.global_questions = temp_model.from_map(m['GlobalQuestions'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListGlobalQuestionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListGlobalQuestionsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListGlobalQuestionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListGlobalQuestionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInstancesRequestTag(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInstancesRequestTag, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListInstancesRequest(TeaModel):
    def __init__(self, resource_group_id=None, tag=None):
        self.resource_group_id = resource_group_id  # type: str
        self.tag = tag  # type: list[ListInstancesRequestTag]

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstancesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = ListInstancesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class ListInstancesResponseBodyInstancesResourceTags(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInstancesResponseBodyInstancesResourceTags, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListInstancesResponseBodyInstances(TeaModel):
    def __init__(self, creation_time=None, creator_id=None, creator_name=None, instance_description=None,
                 instance_id=None, instance_name=None, is_preset=None, max_concurrent_conversation=None, owner_name=None,
                 resource_group_id=None, resource_tags=None):
        self.creation_time = creation_time  # type: long
        self.creator_id = creator_id  # type: long
        self.creator_name = creator_name  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.is_preset = is_preset  # type: bool
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.owner_name = owner_name  # type: str
        self.resource_group_id = resource_group_id  # type: str
        self.resource_tags = resource_tags  # type: list[ListInstancesResponseBodyInstancesResourceTags]

    def validate(self):
        if self.resource_tags:
            for k in self.resource_tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstancesResponseBodyInstances, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.is_preset is not None:
            result['IsPreset'] = self.is_preset
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        result['ResourceTags'] = []
        if self.resource_tags is not None:
            for k in self.resource_tags:
                result['ResourceTags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('IsPreset') is not None:
            self.is_preset = m.get('IsPreset')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        self.resource_tags = []
        if m.get('ResourceTags') is not None:
            for k in m.get('ResourceTags'):
                temp_model = ListInstancesResponseBodyInstancesResourceTags()
                self.resource_tags.append(temp_model.from_map(k))
        return self


class ListInstancesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instances=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instances = instances  # type: list[ListInstancesResponseBodyInstances]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instances:
            for k in self.instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstancesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Instances'] = []
        if self.instances is not None:
            for k in self.instances:
                result['Instances'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.instances = []
        if m.get('Instances') is not None:
            for k in m.get('Instances'):
                temp_model = ListInstancesResponseBodyInstances()
                self.instances.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListInstancesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListInstancesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListInstancesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListIntentsRequest(TeaModel):
    def __init__(self, instance_id=None, keyword=None, page_number=None, page_size=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.keyword = keyword  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIntentsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListIntentsResponseBodyIntentsList(TeaModel):
    def __init__(self, create_time=None, intent_description=None, intent_id=None, intent_name=None, keywords=None,
                 script_id=None, update_time=None, utterances=None):
        self.create_time = create_time  # type: long
        self.intent_description = intent_description  # type: str
        self.intent_id = intent_id  # type: str
        self.intent_name = intent_name  # type: str
        self.keywords = keywords  # type: str
        self.script_id = script_id  # type: str
        self.update_time = update_time  # type: long
        self.utterances = utterances  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIntentsResponseBodyIntentsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class ListIntentsResponseBodyIntents(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListIntentsResponseBodyIntentsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListIntentsResponseBodyIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListIntentsResponseBodyIntentsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListIntentsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, intents=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.intents = intents  # type: ListIntentsResponseBodyIntents
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.intents:
            self.intents.validate()

    def to_map(self):
        _map = super(ListIntentsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intents is not None:
            result['Intents'] = self.intents.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Intents') is not None:
            temp_model = ListIntentsResponseBodyIntents()
            self.intents = temp_model.from_map(m['Intents'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListIntentsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListIntentsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListIntentsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListIntentsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobGroupsRequest(TeaModel):
    def __init__(self, async_query=None, end_time=None, instance_id=None, job_group_status_filter=None,
                 page_number=None, page_size=None, search_text=None, start_time=None):
        self.async_query = async_query  # type: bool
        self.end_time = end_time  # type: long
        self.instance_id = instance_id  # type: str
        self.job_group_status_filter = job_group_status_filter  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.search_text = search_text  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_query is not None:
            result['AsyncQuery'] = self.async_query
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_status_filter is not None:
            result['JobGroupStatusFilter'] = self.job_group_status_filter
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_text is not None:
            result['SearchText'] = self.search_text
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsyncQuery') is not None:
            self.async_query = m.get('AsyncQuery')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupStatusFilter') is not None:
            self.job_group_status_filter = m.get('JobGroupStatusFilter')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchText') is not None:
            self.search_text = m.get('SearchText')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListJobGroupsResponseBodyJobGroupsListExportProgress(TeaModel):
    def __init__(self, file_http_url=None, progress=None, status=None):
        self.file_http_url = file_http_url  # type: str
        self.progress = progress  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsListExportProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListJobGroupsResponseBodyJobGroupsListProgress(TeaModel):
    def __init__(self, cancelled_num=None, duration=None, executing_num=None, failed_num=None, paused_num=None,
                 scheduling=None, start_time=None, status=None, total_completed=None, total_jobs=None, total_not_answered=None):
        self.cancelled_num = cancelled_num  # type: int
        self.duration = duration  # type: int
        self.executing_num = executing_num  # type: int
        self.failed_num = failed_num  # type: int
        self.paused_num = paused_num  # type: int
        self.scheduling = scheduling  # type: int
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.total_completed = total_completed  # type: int
        self.total_jobs = total_jobs  # type: int
        self.total_not_answered = total_not_answered  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsListProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancelled_num is not None:
            result['CancelledNum'] = self.cancelled_num
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.executing_num is not None:
            result['ExecutingNum'] = self.executing_num
        if self.failed_num is not None:
            result['FailedNum'] = self.failed_num
        if self.paused_num is not None:
            result['PausedNum'] = self.paused_num
        if self.scheduling is not None:
            result['Scheduling'] = self.scheduling
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CancelledNum') is not None:
            self.cancelled_num = m.get('CancelledNum')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('ExecutingNum') is not None:
            self.executing_num = m.get('ExecutingNum')
        if m.get('FailedNum') is not None:
            self.failed_num = m.get('FailedNum')
        if m.get('PausedNum') is not None:
            self.paused_num = m.get('PausedNum')
        if m.get('Scheduling') is not None:
            self.scheduling = m.get('Scheduling')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class ListJobGroupsResponseBodyJobGroupsListStrategy(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsListStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListJobGroupsResponseBodyJobGroupsList(TeaModel):
    def __init__(self, creation_time=None, export_progress=None, job_data_parsing_task_id=None,
                 job_group_description=None, job_group_id=None, job_group_name=None, modify_time=None, progress=None, script_id=None,
                 script_name=None, script_version=None, status=None, strategy=None, total_call_num=None):
        self.creation_time = creation_time  # type: long
        self.export_progress = export_progress  # type: ListJobGroupsResponseBodyJobGroupsListExportProgress
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.modify_time = modify_time  # type: str
        self.progress = progress  # type: ListJobGroupsResponseBodyJobGroupsListProgress
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.script_version = script_version  # type: str
        self.status = status  # type: str
        self.strategy = strategy  # type: ListJobGroupsResponseBodyJobGroupsListStrategy
        self.total_call_num = total_call_num  # type: int

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.progress:
            self.progress.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.total_call_num is not None:
            result['TotalCallNum'] = self.total_call_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Progress') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('TotalCallNum') is not None:
            self.total_call_num = m.get('TotalCallNum')
        return self


class ListJobGroupsResponseBodyJobGroups(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListJobGroupsResponseBodyJobGroupsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobGroupsResponseBodyJobGroupsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobGroupsResponseBody(TeaModel):
    def __init__(self, async_task_id=None, code=None, http_status_code=None, job_groups=None, message=None,
                 request_id=None, success=None):
        self.async_task_id = async_task_id  # type: str
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_groups = job_groups  # type: ListJobGroupsResponseBodyJobGroups
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_groups:
            self.job_groups.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_task_id is not None:
            result['AsyncTaskId'] = self.async_task_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_groups is not None:
            result['JobGroups'] = self.job_groups.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsyncTaskId') is not None:
            self.async_task_id = m.get('AsyncTaskId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroups') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroups()
            self.job_groups = temp_model.from_map(m['JobGroups'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobGroupsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListJobGroupsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobGroupsAsyncRequest(TeaModel):
    def __init__(self, async_task_id=None):
        self.async_task_id = async_task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsAsyncRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_task_id is not None:
            result['AsyncTaskId'] = self.async_task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsyncTaskId') is not None:
            self.async_task_id = m.get('AsyncTaskId')
        return self


class ListJobGroupsAsyncResponseBodyJobGroupsExportProgress(TeaModel):
    def __init__(self, file_http_url=None, progress=None, status=None):
        self.file_http_url = file_http_url  # type: str
        self.progress = progress  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsAsyncResponseBodyJobGroupsExportProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListJobGroupsAsyncResponseBodyJobGroupsProgress(TeaModel):
    def __init__(self, cancelled_num=None, duration=None, executing_num=None, failed_num=None, paused_num=None,
                 scheduling=None, start_time=None, status=None, total_completed=None, total_jobs=None, total_not_answered=None):
        self.cancelled_num = cancelled_num  # type: int
        self.duration = duration  # type: int
        self.executing_num = executing_num  # type: int
        self.failed_num = failed_num  # type: int
        self.paused_num = paused_num  # type: int
        self.scheduling = scheduling  # type: int
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.total_completed = total_completed  # type: int
        self.total_jobs = total_jobs  # type: int
        self.total_not_answered = total_not_answered  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsAsyncResponseBodyJobGroupsProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancelled_num is not None:
            result['CancelledNum'] = self.cancelled_num
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.executing_num is not None:
            result['ExecutingNum'] = self.executing_num
        if self.failed_num is not None:
            result['FailedNum'] = self.failed_num
        if self.paused_num is not None:
            result['PausedNum'] = self.paused_num
        if self.scheduling is not None:
            result['Scheduling'] = self.scheduling
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CancelledNum') is not None:
            self.cancelled_num = m.get('CancelledNum')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('ExecutingNum') is not None:
            self.executing_num = m.get('ExecutingNum')
        if m.get('FailedNum') is not None:
            self.failed_num = m.get('FailedNum')
        if m.get('PausedNum') is not None:
            self.paused_num = m.get('PausedNum')
        if m.get('Scheduling') is not None:
            self.scheduling = m.get('Scheduling')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class ListJobGroupsAsyncResponseBodyJobGroupsStrategy(TeaModel):
    def __init__(self, end_time=None, start_time=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsAsyncResponseBodyJobGroupsStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListJobGroupsAsyncResponseBodyJobGroups(TeaModel):
    def __init__(self, creation_time=None, export_progress=None, job_data_parsing_task_id=None,
                 job_group_description=None, job_group_id=None, job_group_name=None, modify_time=None, progress=None, script_id=None,
                 script_name=None, script_version=None, status=None, strategy=None, total_call_num=None):
        self.creation_time = creation_time  # type: long
        self.export_progress = export_progress  # type: ListJobGroupsAsyncResponseBodyJobGroupsExportProgress
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.modify_time = modify_time  # type: str
        self.progress = progress  # type: ListJobGroupsAsyncResponseBodyJobGroupsProgress
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.script_version = script_version  # type: str
        self.status = status  # type: str
        self.strategy = strategy  # type: ListJobGroupsAsyncResponseBodyJobGroupsStrategy
        self.total_call_num = total_call_num  # type: int

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.progress:
            self.progress.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(ListJobGroupsAsyncResponseBodyJobGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.total_call_num is not None:
            result['TotalCallNum'] = self.total_call_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = ListJobGroupsAsyncResponseBodyJobGroupsExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Progress') is not None:
            temp_model = ListJobGroupsAsyncResponseBodyJobGroupsProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = ListJobGroupsAsyncResponseBodyJobGroupsStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('TotalCallNum') is not None:
            self.total_call_num = m.get('TotalCallNum')
        return self


class ListJobGroupsAsyncResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_groups=None, message=None, page_number=None,
                 page_size=None, request_id=None, success=None, timeout=None, total_count=None, vaild=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_groups = job_groups  # type: list[ListJobGroupsAsyncResponseBodyJobGroups]
        self.message = message  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.timeout = timeout  # type: bool
        self.total_count = total_count  # type: int
        self.vaild = vaild  # type: bool

    def validate(self):
        if self.job_groups:
            for k in self.job_groups:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobGroupsAsyncResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['JobGroups'] = []
        if self.job_groups is not None:
            for k in self.job_groups:
                result['JobGroups'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.vaild is not None:
            result['Vaild'] = self.vaild
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.job_groups = []
        if m.get('JobGroups') is not None:
            for k in m.get('JobGroups'):
                temp_model = ListJobGroupsAsyncResponseBodyJobGroups()
                self.job_groups.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('Vaild') is not None:
            self.vaild = m.get('Vaild')
        return self


class ListJobGroupsAsyncResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListJobGroupsAsyncResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListJobGroupsAsyncResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobGroupsAsyncResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobsRequest(TeaModel):
    def __init__(self, instance_id=None, job_id=None):
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class ListJobsResponseBodyJobsContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsResponseBodyJobsContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobsResponseBodyJobsExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsResponseBodyJobsExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobsResponseBodyJobsSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsResponseBodyJobsSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class ListJobsResponseBodyJobsTasksContact(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsResponseBodyJobsTasksContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobsResponseBodyJobsTasksConversationSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsResponseBodyJobsTasksConversationSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class ListJobsResponseBodyJobsTasksConversation(TeaModel):
    def __init__(self, script=None, speaker=None, summary=None, timestamp=None):
        self.script = script  # type: str
        self.speaker = speaker  # type: str
        self.summary = summary  # type: list[ListJobsResponseBodyJobsTasksConversationSummary]
        self.timestamp = timestamp  # type: long

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsResponseBodyJobsTasksConversation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script is not None:
            result['Script'] = self.script
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsResponseBodyJobsTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class ListJobsResponseBodyJobsTasks(TeaModel):
    def __init__(self, actual_time=None, brief=None, call_id=None, called_number=None, calling_number=None,
                 chatbot_id=None, contact=None, conversation=None, duration=None, job_id=None, planed_time=None,
                 scenario_id=None, status=None, task_id=None):
        self.actual_time = actual_time  # type: long
        self.brief = brief  # type: str
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.contact = contact  # type: ListJobsResponseBodyJobsTasksContact
        self.conversation = conversation  # type: list[ListJobsResponseBodyJobsTasksConversation]
        self.duration = duration  # type: int
        self.job_id = job_id  # type: str
        self.planed_time = planed_time  # type: long
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsResponseBodyJobsTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = ListJobsResponseBodyJobsTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = ListJobsResponseBodyJobsTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobsResponseBodyJobs(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, job_group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, system_priority=None, tasks=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[ListJobsResponseBodyJobsContacts]
        self.extras = extras  # type: list[ListJobsResponseBodyJobsExtras]
        self.failure_reason = failure_reason  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[ListJobsResponseBodyJobsSummary]
        self.system_priority = system_priority  # type: int
        self.tasks = tasks  # type: list[ListJobsResponseBodyJobsTasks]

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsResponseBodyJobs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobsResponseBodyJobsContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobsResponseBodyJobsExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsResponseBodyJobsSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = ListJobsResponseBodyJobsTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class ListJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, jobs=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.jobs = jobs  # type: list[ListJobsResponseBodyJobs]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.jobs:
            for k in self.jobs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Jobs'] = []
        if self.jobs is not None:
            for k in self.jobs:
                result['Jobs'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.jobs = []
        if m.get('Jobs') is not None:
            for k in m.get('Jobs'):
                temp_model = ListJobsResponseBodyJobs()
                self.jobs.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobsByGroupRequest(TeaModel):
    def __init__(self, instance_id=None, job_failure_reason=None, job_group_id=None, job_status=None,
                 page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.job_failure_reason = job_failure_reason  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_status = job_status  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_failure_reason is not None:
            result['JobFailureReason'] = self.job_failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_status is not None:
            result['JobStatus'] = self.job_status
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFailureReason') is not None:
            self.job_failure_reason = m.get('JobFailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobStatus') is not None:
            self.job_status = m.get('JobStatus')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListJobsByGroupResponseBodyJobsListContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsListContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobsByGroupResponseBodyJobsListExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsListExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobsByGroupResponseBodyJobsListSummary(TeaModel):
    def __init__(self, category=None, content=None, conversation_detail_id=None, job_group_id=None, job_id=None,
                 summary_id=None, summary_name=None, task_id=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.conversation_detail_id = conversation_detail_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: str
        self.summary_id = summary_id  # type: str
        self.summary_name = summary_name  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsListSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobsByGroupResponseBodyJobsList(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, job_group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, system_priority=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[ListJobsByGroupResponseBodyJobsListContacts]
        self.extras = extras  # type: list[ListJobsByGroupResponseBodyJobsListExtras]
        self.failure_reason = failure_reason  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[ListJobsByGroupResponseBodyJobsListSummary]
        self.system_priority = system_priority  # type: int

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobsByGroupResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobsByGroupResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsByGroupResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        return self


class ListJobsByGroupResponseBodyJobs(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListJobsByGroupResponseBodyJobsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobsByGroupResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobsByGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, jobs=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.jobs = jobs  # type: ListJobsByGroupResponseBodyJobs
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = ListJobsByGroupResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobsByGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListJobsByGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobsByGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListOutboundCallNumbersRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListOutboundCallNumbersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListOutboundCallNumbersResponseBodyOutboundCallNumbersList(TeaModel):
    def __init__(self, number=None, outbound_call_number_id=None, rate_limit_count=None, rate_limit_period=None):
        self.number = number  # type: str
        self.outbound_call_number_id = outbound_call_number_id  # type: str
        self.rate_limit_count = rate_limit_count  # type: str
        self.rate_limit_period = rate_limit_period  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListOutboundCallNumbersResponseBodyOutboundCallNumbersList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class ListOutboundCallNumbersResponseBodyOutboundCallNumbers(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListOutboundCallNumbersResponseBodyOutboundCallNumbersList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListOutboundCallNumbersResponseBodyOutboundCallNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListOutboundCallNumbersResponseBodyOutboundCallNumbersList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListOutboundCallNumbersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, outbound_call_numbers=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.outbound_call_numbers = outbound_call_numbers  # type: ListOutboundCallNumbersResponseBodyOutboundCallNumbers
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.outbound_call_numbers:
            self.outbound_call_numbers.validate()

    def to_map(self):
        _map = super(ListOutboundCallNumbersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.outbound_call_numbers is not None:
            result['OutboundCallNumbers'] = self.outbound_call_numbers.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutboundCallNumbers') is not None:
            temp_model = ListOutboundCallNumbersResponseBodyOutboundCallNumbers()
            self.outbound_call_numbers = temp_model.from_map(m['OutboundCallNumbers'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListOutboundCallNumbersResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListOutboundCallNumbersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListOutboundCallNumbersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListOutboundCallNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListResourceTagsRequest(TeaModel):
    def __init__(self, page_number=None, page_size=None, resource_type=None):
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.resource_type = resource_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListResourceTagsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class ListResourceTagsResponseBodyResourceTagsList(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListResourceTagsResponseBodyResourceTagsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListResourceTagsResponseBodyResourceTags(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListResourceTagsResponseBodyResourceTagsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListResourceTagsResponseBodyResourceTags, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListResourceTagsResponseBodyResourceTagsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListResourceTagsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, resource_tags=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.resource_tags = resource_tags  # type: ListResourceTagsResponseBodyResourceTags
        self.success = success  # type: bool

    def validate(self):
        if self.resource_tags:
            self.resource_tags.validate()

    def to_map(self):
        _map = super(ListResourceTagsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_tags is not None:
            result['ResourceTags'] = self.resource_tags.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceTags') is not None:
            temp_model = ListResourceTagsResponseBodyResourceTags()
            self.resource_tags = temp_model.from_map(m['ResourceTags'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListResourceTagsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListResourceTagsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListResourceTagsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListResourceTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSchedulerInstancesRequest(TeaModel):
    def __init__(self, instance_owner_id=None):
        self.instance_owner_id = instance_owner_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSchedulerInstancesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        return self


class ListSchedulerInstancesResponseBodySchedulerInstances(TeaModel):
    def __init__(self, base_strategy=None, business=None, instance_id=None, max_concurrency=None, owner_id=None):
        self.base_strategy = base_strategy  # type: str
        self.business = business  # type: str
        self.instance_id = instance_id  # type: str
        self.max_concurrency = max_concurrency  # type: int
        self.owner_id = owner_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSchedulerInstancesResponseBodySchedulerInstances, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.base_strategy is not None:
            result['BaseStrategy'] = self.base_strategy
        if self.business is not None:
            result['Business'] = self.business
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_concurrency is not None:
            result['MaxConcurrency'] = self.max_concurrency
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BaseStrategy') is not None:
            self.base_strategy = m.get('BaseStrategy')
        if m.get('Business') is not None:
            self.business = m.get('Business')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxConcurrency') is not None:
            self.max_concurrency = m.get('MaxConcurrency')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        return self


class ListSchedulerInstancesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scheduler_instances=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scheduler_instances = scheduler_instances  # type: list[ListSchedulerInstancesResponseBodySchedulerInstances]
        self.success = success  # type: bool

    def validate(self):
        if self.scheduler_instances:
            for k in self.scheduler_instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSchedulerInstancesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SchedulerInstances'] = []
        if self.scheduler_instances is not None:
            for k in self.scheduler_instances:
                result['SchedulerInstances'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.scheduler_instances = []
        if m.get('SchedulerInstances') is not None:
            for k in m.get('SchedulerInstances'):
                temp_model = ListSchedulerInstancesResponseBodySchedulerInstances()
                self.scheduler_instances.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSchedulerInstancesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListSchedulerInstancesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSchedulerInstancesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListSchedulerInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptPublishHistoriesRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptPublishHistoriesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList(TeaModel):
    def __init__(self, description=None, instance_id=None, publish_time=None, script_id=None, script_version=None):
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.publish_time = publish_time  # type: long
        self.script_id = script_id  # type: str
        self.script_version = script_version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.publish_time is not None:
            result['PublishTime'] = self.publish_time
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PublishTime') is not None:
            self.publish_time = m.get('PublishTime')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        return self


class ListScriptPublishHistoriesResponseBodyScriptPublishHistories(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScriptPublishHistoriesResponseBodyScriptPublishHistories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptPublishHistoriesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None,
                 script_publish_histories=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_publish_histories = script_publish_histories  # type: ListScriptPublishHistoriesResponseBodyScriptPublishHistories
        self.success = success  # type: bool

    def validate(self):
        if self.script_publish_histories:
            self.script_publish_histories.validate()

    def to_map(self):
        _map = super(ListScriptPublishHistoriesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_publish_histories is not None:
            result['ScriptPublishHistories'] = self.script_publish_histories.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptPublishHistories') is not None:
            temp_model = ListScriptPublishHistoriesResponseBodyScriptPublishHistories()
            self.script_publish_histories = temp_model.from_map(m['ScriptPublishHistories'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScriptPublishHistoriesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListScriptPublishHistoriesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListScriptPublishHistoriesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptPublishHistoriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptRecordingRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, script_id=None, search=None,
                 states_json=None, uuids_json=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.script_id = script_id  # type: str
        self.search = search  # type: str
        self.states_json = states_json  # type: str
        self.uuids_json = uuids_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.search is not None:
            result['Search'] = self.search
        if self.states_json is not None:
            result['StatesJson'] = self.states_json
        if self.uuids_json is not None:
            result['UuidsJson'] = self.uuids_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Search') is not None:
            self.search = m.get('Search')
        if m.get('StatesJson') is not None:
            self.states_json = m.get('StatesJson')
        if m.get('UuidsJson') is not None:
            self.uuids_json = m.get('UuidsJson')
        return self


class ListScriptRecordingResponseBodyScriptRecordings(TeaModel):
    def __init__(self, gmt_create=None, gmt_modified=None, gmt_upload=None, inner_id=None, instance_id=None,
                 recording_content=None, recording_duration=None, recording_name=None, script_id=None, state=None, state_extend=None,
                 storage_uuid=None, uuid=None):
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.gmt_upload = gmt_upload  # type: long
        self.inner_id = inner_id  # type: str
        self.instance_id = instance_id  # type: str
        self.recording_content = recording_content  # type: str
        self.recording_duration = recording_duration  # type: int
        self.recording_name = recording_name  # type: str
        self.script_id = script_id  # type: str
        self.state = state  # type: int
        self.state_extend = state_extend  # type: str
        self.storage_uuid = storage_uuid  # type: str
        self.uuid = uuid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptRecordingResponseBodyScriptRecordings, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_upload is not None:
            result['GmtUpload'] = self.gmt_upload
        if self.inner_id is not None:
            result['InnerId'] = self.inner_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.recording_content is not None:
            result['RecordingContent'] = self.recording_content
        if self.recording_duration is not None:
            result['RecordingDuration'] = self.recording_duration
        if self.recording_name is not None:
            result['RecordingName'] = self.recording_name
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.state is not None:
            result['State'] = self.state
        if self.state_extend is not None:
            result['StateExtend'] = self.state_extend
        if self.storage_uuid is not None:
            result['StorageUuid'] = self.storage_uuid
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtUpload') is not None:
            self.gmt_upload = m.get('GmtUpload')
        if m.get('InnerId') is not None:
            self.inner_id = m.get('InnerId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordingContent') is not None:
            self.recording_content = m.get('RecordingContent')
        if m.get('RecordingDuration') is not None:
            self.recording_duration = m.get('RecordingDuration')
        if m.get('RecordingName') is not None:
            self.recording_name = m.get('RecordingName')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('StateExtend') is not None:
            self.state_extend = m.get('StateExtend')
        if m.get('StorageUuid') is not None:
            self.storage_uuid = m.get('StorageUuid')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class ListScriptRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, page_number=None, page_size=None,
                 request_id=None, script_recordings=None, success=None, total_count=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.script_recordings = script_recordings  # type: list[ListScriptRecordingResponseBodyScriptRecordings]
        self.success = success  # type: bool
        self.total_count = total_count  # type: long

    def validate(self):
        if self.script_recordings:
            for k in self.script_recordings:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScriptRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ScriptRecordings'] = []
        if self.script_recordings is not None:
            for k in self.script_recordings:
                result['ScriptRecordings'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.script_recordings = []
        if m.get('ScriptRecordings') is not None:
            for k in m.get('ScriptRecordings'):
                temp_model = ListScriptRecordingResponseBodyScriptRecordings()
                self.script_recordings.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptRecordingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListScriptRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListScriptRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptVoiceConfigsRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptVoiceConfigsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList(TeaModel):
    def __init__(self, instance_id=None, script_content=None, script_id=None, script_voice_config_id=None,
                 script_waveform_relation=None, source=None, type=None):
        self.instance_id = instance_id  # type: str
        self.script_content = script_content  # type: str
        self.script_id = script_id  # type: str
        self.script_voice_config_id = script_voice_config_id  # type: str
        self.script_waveform_relation = script_waveform_relation  # type: str
        self.source = source  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.source is not None:
            result['Source'] = self.source
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptVoiceConfigsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script_voice_configs=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_voice_configs = script_voice_configs  # type: ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs
        self.success = success  # type: bool

    def validate(self):
        if self.script_voice_configs:
            self.script_voice_configs.validate()

    def to_map(self):
        _map = super(ListScriptVoiceConfigsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_voice_configs is not None:
            result['ScriptVoiceConfigs'] = self.script_voice_configs.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptVoiceConfigs') is not None:
            temp_model = ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs()
            self.script_voice_configs = temp_model.from_map(m['ScriptVoiceConfigs'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScriptVoiceConfigsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListScriptVoiceConfigsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListScriptVoiceConfigsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptVoiceConfigsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptsRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListScriptsResponseBodyScriptsList(TeaModel):
    def __init__(self, debug_status=None, emotion_enable=None, industry=None, is_debug_drafted=None,
                 is_drafted=None, is_preset=None, long_wait_enable=None, mini_playback_enable=None, new_barge_in_enable=None,
                 reject_reason=None, scene=None, script_description=None, script_id=None, script_name=None, status=None,
                 update_time=None):
        self.debug_status = debug_status  # type: str
        self.emotion_enable = emotion_enable  # type: bool
        self.industry = industry  # type: str
        self.is_debug_drafted = is_debug_drafted  # type: bool
        self.is_drafted = is_drafted  # type: bool
        self.is_preset = is_preset  # type: bool
        self.long_wait_enable = long_wait_enable  # type: bool
        self.mini_playback_enable = mini_playback_enable  # type: bool
        self.new_barge_in_enable = new_barge_in_enable  # type: bool
        self.reject_reason = reject_reason  # type: str
        self.scene = scene  # type: str
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScriptsResponseBodyScriptsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.is_preset is not None:
            result['IsPreset'] = self.is_preset
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('IsPreset') is not None:
            self.is_preset = m.get('IsPreset')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ListScriptsResponseBodyScripts(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListScriptsResponseBodyScriptsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScriptsResponseBodyScripts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListScriptsResponseBodyScriptsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scripts=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scripts = scripts  # type: ListScriptsResponseBodyScripts
        self.success = success  # type: bool

    def validate(self):
        if self.scripts:
            self.scripts.validate()

    def to_map(self):
        _map = super(ListScriptsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scripts is not None:
            result['Scripts'] = self.scripts.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scripts') is not None:
            temp_model = ListScriptsResponseBodyScripts()
            self.scripts = temp_model.from_map(m['Scripts'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScriptsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListScriptsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListScriptsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagResourcesRequestTag(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTagResourcesRequestTag, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListTagResourcesRequest(TeaModel):
    def __init__(self, next_token=None, region_id=None, resource_id=None, resource_type=None, tag=None):
        self.next_token = next_token  # type: str
        self.region_id = region_id  # type: str
        self.resource_id = resource_id  # type: list[str]
        self.resource_type = resource_type  # type: str
        self.tag = tag  # type: list[ListTagResourcesRequestTag]

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTagResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = ListTagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponseBodyTagResources(TeaModel):
    def __init__(self, resource_id=None, resource_type=None, tag_key=None, tag_value=None):
        self.resource_id = resource_id  # type: str
        self.resource_type = resource_type  # type: str
        self.tag_key = tag_key  # type: str
        self.tag_value = tag_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTagResourcesResponseBodyTagResources, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class ListTagResourcesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, next_token=None, request_id=None,
                 success=None, tag_resources=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.next_token = next_token  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.tag_resources = tag_resources  # type: list[ListTagResourcesResponseBodyTagResources]

    def validate(self):
        if self.tag_resources:
            for k in self.tag_resources:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTagResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagResources'] = []
        if self.tag_resources is not None:
            for k in self.tag_resources:
                result['TagResources'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_resources = []
        if m.get('TagResources') is not None:
            for k in m.get('TagResources'):
                temp_model = ListTagResourcesResponseBodyTagResources()
                self.tag_resources.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListTagResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTagResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagsRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTagsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListTagsResponseBodyTagGroups(TeaModel):
    def __init__(self, script_id=None, tag_group=None, tag_group_id=None, tag_group_index=None):
        self.script_id = script_id  # type: str
        self.tag_group = tag_group  # type: str
        self.tag_group_id = tag_group_id  # type: str
        self.tag_group_index = tag_group_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTagsResponseBodyTagGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_group_id is not None:
            result['TagGroupId'] = self.tag_group_id
        if self.tag_group_index is not None:
            result['TagGroupIndex'] = self.tag_group_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagGroupId') is not None:
            self.tag_group_id = m.get('TagGroupId')
        if m.get('TagGroupIndex') is not None:
            self.tag_group_index = m.get('TagGroupIndex')
        return self


class ListTagsResponseBodyTags(TeaModel):
    def __init__(self, script_id=None, tag_group=None, tag_id=None, tag_index=None, tag_name=None):
        self.script_id = script_id  # type: str
        self.tag_group = tag_group  # type: str
        self.tag_id = tag_id  # type: str
        self.tag_index = tag_index  # type: int
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTagsResponseBodyTags, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        if self.tag_index is not None:
            result['TagIndex'] = self.tag_index
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        if m.get('TagIndex') is not None:
            self.tag_index = m.get('TagIndex')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class ListTagsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 tag_groups=None, tags=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.tag_groups = tag_groups  # type: list[ListTagsResponseBodyTagGroups]
        self.tags = tags  # type: list[ListTagsResponseBodyTags]

    def validate(self):
        if self.tag_groups:
            for k in self.tag_groups:
                if k:
                    k.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTagsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagGroups'] = []
        if self.tag_groups is not None:
            for k in self.tag_groups:
                result['TagGroups'].append(k.to_map() if k else None)
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_groups = []
        if m.get('TagGroups') is not None:
            for k in m.get('TagGroups'):
                temp_model = ListTagsResponseBodyTagGroups()
                self.tag_groups.append(temp_model.from_map(k))
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = ListTagsResponseBodyTags()
                self.tags.append(temp_model.from_map(k))
        return self


class ListTagsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListTagsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTagsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyBatchJobsRequest(TeaModel):
    def __init__(self, batch_job_name=None, calling_number=None, description=None, instance_id=None,
                 job_file_path=None, job_group_id=None, scenario_id=None, script_id=None, strategy_json=None, submitted=None):
        self.batch_job_name = batch_job_name  # type: str
        self.calling_number = calling_number  # type: list[str]
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.job_group_id = job_group_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.script_id = script_id  # type: str
        self.strategy_json = strategy_json  # type: str
        self.submitted = submitted  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyBatchJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job_name is not None:
            result['BatchJobName'] = self.batch_job_name
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.submitted is not None:
            result['Submitted'] = self.submitted
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BatchJobName') is not None:
            self.batch_job_name = m.get('BatchJobName')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('Submitted') is not None:
            self.submitted = m.get('Submitted')
        return self


class ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class ModifyBatchJobsResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyBatchJobsResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class ModifyBatchJobsResponseBodyJobGroup(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, job_file_path=None, job_group_description=None,
                 job_group_id=None, job_group_name=None, scenario_id=None, strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.job_file_path = job_file_path  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.scenario_id = scenario_id  # type: str
        self.strategy = strategy  # type: ModifyBatchJobsResponseBodyJobGroupStrategy

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(ModifyBatchJobsResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = ModifyBatchJobsResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class ModifyBatchJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: ModifyBatchJobsResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(ModifyBatchJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = ModifyBatchJobsResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyBatchJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyBatchJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyBatchJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDialogueFlowRequest(TeaModel):
    def __init__(self, dialogue_flow_definition=None, dialogue_flow_id=None, instance_id=None, is_drafted=None,
                 script_id=None):
        self.dialogue_flow_definition = dialogue_flow_definition  # type: str
        self.dialogue_flow_id = dialogue_flow_id  # type: str
        self.instance_id = instance_id  # type: str
        self.is_drafted = is_drafted  # type: bool
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyDialogueFlowRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_definition is not None:
            result['DialogueFlowDefinition'] = self.dialogue_flow_definition
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DialogueFlowDefinition') is not None:
            self.dialogue_flow_definition = m.get('DialogueFlowDefinition')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyDialogueFlowResponseBody(TeaModel):
    def __init__(self, code=None, dialogue_flow_definition=None, dialogue_flow_id=None, http_status_code=None,
                 message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.dialogue_flow_definition = dialogue_flow_definition  # type: str
        self.dialogue_flow_id = dialogue_flow_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyDialogueFlowResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dialogue_flow_definition is not None:
            result['DialogueFlowDefinition'] = self.dialogue_flow_definition
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialogueFlowDefinition') is not None:
            self.dialogue_flow_definition = m.get('DialogueFlowDefinition')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDialogueFlowResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyDialogueFlowResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyDialogueFlowResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDialogueFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyEmptyNumberNoMoreCallsInfoRequest(TeaModel):
    def __init__(self, empty_number_no_more_calls=None, entry_id=None, strategy_level=None):
        self.empty_number_no_more_calls = empty_number_no_more_calls  # type: bool
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyEmptyNumberNoMoreCallsInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_no_more_calls is not None:
            result['EmptyNumberNoMoreCalls'] = self.empty_number_no_more_calls
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EmptyNumberNoMoreCalls') is not None:
            self.empty_number_no_more_calls = m.get('EmptyNumberNoMoreCalls')
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class ModifyEmptyNumberNoMoreCallsInfoResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyEmptyNumberNoMoreCallsInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyEmptyNumberNoMoreCallsInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyEmptyNumberNoMoreCallsInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyEmptyNumberNoMoreCallsInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyEmptyNumberNoMoreCallsInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyGlobalQuestionRequest(TeaModel):
    def __init__(self, answers=None, global_question_id=None, global_question_name=None, global_question_type=None,
                 instance_id=None, questions=None, script_id=None):
        self.answers = answers  # type: str
        self.global_question_id = global_question_id  # type: str
        self.global_question_name = global_question_name  # type: str
        self.global_question_type = global_question_type  # type: str
        self.instance_id = instance_id  # type: str
        self.questions = questions  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyGlobalQuestionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyGlobalQuestionResponseBody(TeaModel):
    def __init__(self, code=None, dialogue_question_id=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.dialogue_question_id = dialogue_question_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyGlobalQuestionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dialogue_question_id is not None:
            result['DialogueQuestionId'] = self.dialogue_question_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialogueQuestionId') is not None:
            self.dialogue_question_id = m.get('DialogueQuestionId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyGlobalQuestionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyGlobalQuestionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyGlobalQuestionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyInstanceRequest(TeaModel):
    def __init__(self, calling_number=None, instance_description=None, instance_id=None, instance_name=None,
                 max_concurrent_conversation=None):
        self.calling_number = calling_number  # type: list[str]
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        return self


class ModifyInstanceResponseBodyInstance(TeaModel):
    def __init__(self, creation_time=None, creator_id=None, creator_name=None, instance_description=None,
                 instance_id=None, instance_name=None, max_concurrent_conversation=None, owner_name=None):
        self.creation_time = creation_time  # type: long
        self.creator_id = creator_id  # type: long
        self.creator_name = creator_name  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.owner_name = owner_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyInstanceResponseBodyInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        return self


class ModifyInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance = instance  # type: ModifyInstanceResponseBodyInstance
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super(ModifyInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = ModifyInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyIntentRequest(TeaModel):
    def __init__(self, instance_id=None, intent_description=None, intent_id=None, intent_name=None, keywords=None,
                 script_id=None, utterances=None):
        self.instance_id = instance_id  # type: str
        self.intent_description = intent_description  # type: str
        self.intent_id = intent_id  # type: str
        self.intent_name = intent_name  # type: str
        self.keywords = keywords  # type: str
        self.script_id = script_id  # type: str
        self.utterances = utterances  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyIntentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class ModifyIntentResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, intent_id=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.intent_id = intent_id  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyIntentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyIntentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyIntentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyIntentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyJobGroupRequest(TeaModel):
    def __init__(self, calling_number=None, description=None, instance_id=None, job_group_id=None,
                 job_group_status=None, min_concurrency=None, name=None, priority=None, recall_strategy_json=None,
                 ringing_duration=None, scenario_id=None, script_id=None, strategy_json=None):
        self.calling_number = calling_number  # type: list[str]
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_status = job_group_status  # type: str
        self.min_concurrency = min_concurrency  # type: long
        self.name = name  # type: str
        self.priority = priority  # type: str
        self.recall_strategy_json = recall_strategy_json  # type: str
        self.ringing_duration = ringing_duration  # type: long
        self.scenario_id = scenario_id  # type: str
        self.script_id = script_id  # type: str
        self.strategy_json = strategy_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_status is not None:
            result['JobGroupStatus'] = self.job_group_status
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.name is not None:
            result['Name'] = self.name
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_strategy_json is not None:
            result['RecallStrategyJson'] = self.recall_strategy_json
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupStatus') is not None:
            self.job_group_status = m.get('JobGroupStatus')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallStrategyJson') is not None:
            self.recall_strategy_json = m.get('RecallStrategyJson')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class ModifyJobGroupResponseBodyJobGroupExportProgress(TeaModel):
    def __init__(self, file_http_url=None, progress=None, status=None):
        self.file_http_url = file_http_url  # type: str
        self.progress = progress  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyJobGroupResponseBodyJobGroupExportProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ModifyJobGroupResponseBodyJobGroupRecallStrategy(TeaModel):
    def __init__(self, empty_number_ignore=None, in_arrears_ignore=None, out_of_service_ignore=None):
        self.empty_number_ignore = empty_number_ignore  # type: bool
        self.in_arrears_ignore = in_arrears_ignore  # type: bool
        self.out_of_service_ignore = out_of_service_ignore  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyJobGroupResponseBodyJobGroupRecallStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_ignore is not None:
            result['EmptyNumberIgnore'] = self.empty_number_ignore
        if self.in_arrears_ignore is not None:
            result['InArrearsIgnore'] = self.in_arrears_ignore
        if self.out_of_service_ignore is not None:
            result['OutOfServiceIgnore'] = self.out_of_service_ignore
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EmptyNumberIgnore') is not None:
            self.empty_number_ignore = m.get('EmptyNumberIgnore')
        if m.get('InArrearsIgnore') is not None:
            self.in_arrears_ignore = m.get('InArrearsIgnore')
        if m.get('OutOfServiceIgnore') is not None:
            self.out_of_service_ignore = m.get('OutOfServiceIgnore')
        return self


class ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class ModifyJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyJobGroupResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class ModifyJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, export_progress=None,
                 job_data_parsing_task_id=None, job_file_path=None, job_group_description=None, job_group_id=None, job_group_name=None,
                 min_concurrency=None, modify_time=None, priority=None, recall_strategy=None, ringing_duration=None,
                 scenario_id=None, script_name=None, script_version=None, status=None, strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.export_progress = export_progress  # type: ModifyJobGroupResponseBodyJobGroupExportProgress
        self.job_data_parsing_task_id = job_data_parsing_task_id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.min_concurrency = min_concurrency  # type: long
        self.modify_time = modify_time  # type: str
        self.priority = priority  # type: str
        self.recall_strategy = recall_strategy  # type: ModifyJobGroupResponseBodyJobGroupRecallStrategy
        self.ringing_duration = ringing_duration  # type: long
        self.scenario_id = scenario_id  # type: str
        self.script_name = script_name  # type: str
        self.script_version = script_version  # type: str
        self.status = status  # type: str
        self.strategy = strategy  # type: ModifyJobGroupResponseBodyJobGroupStrategy

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.recall_strategy:
            self.recall_strategy.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(ModifyJobGroupResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_strategy is not None:
            result['RecallStrategy'] = self.recall_strategy.to_map()
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroupExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallStrategy') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroupRecallStrategy()
            self.recall_strategy = temp_model.from_map(m['RecallStrategy'])
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class ModifyJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: ModifyJobGroupResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(ModifyJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyJobGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyOutboundCallNumberRequest(TeaModel):
    def __init__(self, instance_id=None, number=None, outbound_call_number_id=None, rate_limit_count=None,
                 rate_limit_period=None):
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.outbound_call_number_id = outbound_call_number_id  # type: str
        self.rate_limit_count = rate_limit_count  # type: int
        self.rate_limit_period = rate_limit_period  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyOutboundCallNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class ModifyOutboundCallNumberResponseBodyOutboundCallNumber(TeaModel):
    def __init__(self, number=None, outbound_call_number_id=None, rate_limit_count=None, rate_limit_period=None):
        self.number = number  # type: str
        self.outbound_call_number_id = outbound_call_number_id  # type: str
        self.rate_limit_count = rate_limit_count  # type: str
        self.rate_limit_period = rate_limit_period  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyOutboundCallNumberResponseBodyOutboundCallNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class ModifyOutboundCallNumberResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, outbound_call_number=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.outbound_call_number = outbound_call_number  # type: ModifyOutboundCallNumberResponseBodyOutboundCallNumber
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.outbound_call_number:
            self.outbound_call_number.validate()

    def to_map(self):
        _map = super(ModifyOutboundCallNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.outbound_call_number is not None:
            result['OutboundCallNumber'] = self.outbound_call_number.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutboundCallNumber') is not None:
            temp_model = ModifyOutboundCallNumberResponseBodyOutboundCallNumber()
            self.outbound_call_number = temp_model.from_map(m['OutboundCallNumber'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyOutboundCallNumberResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyOutboundCallNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyOutboundCallNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyOutboundCallNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyScriptRequest(TeaModel):
    def __init__(self, asr_config=None, chatbot_id=None, emotion_enable=None, industry=None, instance_id=None,
                 long_wait_enable=None, mini_playback_config_list_json_string=None, mini_playback_enable=None,
                 new_barge_in_enable=None, nls_config=None, scene=None, script_content=None, script_description=None, script_id=None,
                 script_name=None, script_waveform=None, tts_config=None):
        self.asr_config = asr_config  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.emotion_enable = emotion_enable  # type: bool
        self.industry = industry  # type: str
        self.instance_id = instance_id  # type: str
        self.long_wait_enable = long_wait_enable  # type: bool
        self.mini_playback_config_list_json_string = mini_playback_config_list_json_string  # type: str
        self.mini_playback_enable = mini_playback_enable  # type: bool
        self.new_barge_in_enable = new_barge_in_enable  # type: bool
        self.nls_config = nls_config  # type: str
        self.scene = scene  # type: str
        self.script_content = script_content  # type: list[str]
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.script_waveform = script_waveform  # type: list[str]
        self.tts_config = tts_config  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_config_list_json_string is not None:
            result['MiniPlaybackConfigListJsonString'] = self.mini_playback_config_list_json_string
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.nls_config is not None:
            result['NlsConfig'] = self.nls_config
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_waveform is not None:
            result['ScriptWaveform'] = self.script_waveform
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackConfigListJsonString') is not None:
            self.mini_playback_config_list_json_string = m.get('MiniPlaybackConfigListJsonString')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('NlsConfig') is not None:
            self.nls_config = m.get('NlsConfig')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptWaveform') is not None:
            self.script_waveform = m.get('ScriptWaveform')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        return self


class ModifyScriptResponseBodyScript(TeaModel):
    def __init__(self, debug_status=None, industry=None, is_debug_drafted=None, is_drafted=None, scene=None,
                 script_description=None, script_id=None, script_name=None, status=None, update_time=None):
        self.debug_status = debug_status  # type: str
        self.industry = industry  # type: str
        self.is_debug_drafted = is_debug_drafted  # type: bool
        self.is_drafted = is_drafted  # type: bool
        self.scene = scene  # type: str
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScriptResponseBodyScript, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ModifyScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script = script  # type: ModifyScriptResponseBodyScript
        self.success = success  # type: bool

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super(ModifyScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = ModifyScriptResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyScriptVoiceConfigRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None, script_voice_config_id=None,
                 script_waveform_relation=None, type=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.script_voice_config_id = script_voice_config_id  # type: str
        self.script_waveform_relation = script_waveform_relation  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScriptVoiceConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig(TeaModel):
    def __init__(self, instance_id=None, script_content=None, script_id=None, script_voice_config_id=None,
                 script_waveform_relation=None, source=None, type=None):
        self.instance_id = instance_id  # type: str
        self.script_content = script_content  # type: str
        self.script_id = script_id  # type: str
        self.script_voice_config_id = script_voice_config_id  # type: str
        self.script_waveform_relation = script_waveform_relation  # type: str
        self.source = source  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.source is not None:
            result['Source'] = self.source
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ModifyScriptVoiceConfigResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script_voice_config=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_voice_config = script_voice_config  # type: ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig
        self.success = success  # type: bool

    def validate(self):
        if self.script_voice_config:
            self.script_voice_config.validate()

    def to_map(self):
        _map = super(ModifyScriptVoiceConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_voice_config is not None:
            result['ScriptVoiceConfig'] = self.script_voice_config.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptVoiceConfig') is not None:
            temp_model = ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig()
            self.script_voice_config = temp_model.from_map(m['ScriptVoiceConfig'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyScriptVoiceConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyScriptVoiceConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyScriptVoiceConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyScriptVoiceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyTTSConfigRequest(TeaModel):
    def __init__(self, app_key=None, instance_id=None, nls_service_type=None, script_id=None, speech_rate=None,
                 voice=None, volume=None):
        self.app_key = app_key  # type: str
        self.instance_id = instance_id  # type: str
        self.nls_service_type = nls_service_type  # type: str
        self.script_id = script_id  # type: str
        self.speech_rate = speech_rate  # type: str
        self.voice = voice  # type: str
        self.volume = volume  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTTSConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nls_service_type is not None:
            result['NlsServiceType'] = self.nls_service_type
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NlsServiceType') is not None:
            self.nls_service_type = m.get('NlsServiceType')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class ModifyTTSConfigResponseBodyTTSConfig(TeaModel):
    def __init__(self, instance_id=None, script_id=None, speech_rate=None, ttsconfig_id=None, voice=None,
                 volume=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.speech_rate = speech_rate  # type: str
        self.ttsconfig_id = ttsconfig_id  # type: str
        self.voice = voice  # type: str
        self.volume = volume  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTTSConfigResponseBodyTTSConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.ttsconfig_id is not None:
            result['TTSConfigId'] = self.ttsconfig_id
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('TTSConfigId') is not None:
            self.ttsconfig_id = m.get('TTSConfigId')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class ModifyTTSConfigResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, ttsconfig=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.ttsconfig = ttsconfig  # type: ModifyTTSConfigResponseBodyTTSConfig

    def validate(self):
        if self.ttsconfig:
            self.ttsconfig.validate()

    def to_map(self):
        _map = super(ModifyTTSConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.ttsconfig is not None:
            result['TTSConfig'] = self.ttsconfig.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TTSConfig') is not None:
            temp_model = ModifyTTSConfigResponseBodyTTSConfig()
            self.ttsconfig = temp_model.from_map(m['TTSConfig'])
        return self


class ModifyTTSConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyTTSConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyTTSConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyTTSConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyTagGroupsRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None, tag_groups=None, tags=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str
        self.tag_groups = tag_groups  # type: str
        self.tags = tags  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTagGroupsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_groups is not None:
            result['TagGroups'] = self.tag_groups
        if self.tags is not None:
            result['Tags'] = self.tags
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroups') is not None:
            self.tag_groups = m.get('TagGroups')
        if m.get('Tags') is not None:
            self.tags = m.get('Tags')
        return self


class ModifyTagGroupsResponseBodyTagGroups(TeaModel):
    def __init__(self, script_id=None, tag_group=None, tag_group_id=None, tag_group_index=None):
        self.script_id = script_id  # type: str
        self.tag_group = tag_group  # type: str
        self.tag_group_id = tag_group_id  # type: str
        self.tag_group_index = tag_group_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTagGroupsResponseBodyTagGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_group_id is not None:
            result['TagGroupId'] = self.tag_group_id
        if self.tag_group_index is not None:
            result['TagGroupIndex'] = self.tag_group_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagGroupId') is not None:
            self.tag_group_id = m.get('TagGroupId')
        if m.get('TagGroupIndex') is not None:
            self.tag_group_index = m.get('TagGroupIndex')
        return self


class ModifyTagGroupsResponseBodyTags(TeaModel):
    def __init__(self, script_id=None, tag_group=None, tag_id=None, tag_index=None, tag_name=None):
        self.script_id = script_id  # type: str
        self.tag_group = tag_group  # type: str
        self.tag_id = tag_id  # type: str
        self.tag_index = tag_index  # type: int
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyTagGroupsResponseBodyTags, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        if self.tag_index is not None:
            result['TagIndex'] = self.tag_index
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        if m.get('TagIndex') is not None:
            self.tag_index = m.get('TagIndex')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class ModifyTagGroupsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 tag_groups=None, tags=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.tag_groups = tag_groups  # type: list[ModifyTagGroupsResponseBodyTagGroups]
        self.tags = tags  # type: list[ModifyTagGroupsResponseBodyTags]

    def validate(self):
        if self.tag_groups:
            for k in self.tag_groups:
                if k:
                    k.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyTagGroupsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagGroups'] = []
        if self.tag_groups is not None:
            for k in self.tag_groups:
                result['TagGroups'].append(k.to_map() if k else None)
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_groups = []
        if m.get('TagGroups') is not None:
            for k in m.get('TagGroups'):
                temp_model = ModifyTagGroupsResponseBodyTagGroups()
                self.tag_groups.append(temp_model.from_map(k))
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = ModifyTagGroupsResponseBodyTags()
                self.tags.append(temp_model.from_map(k))
        return self


class ModifyTagGroupsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ModifyTagGroupsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyTagGroupsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyTagGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishScriptRequest(TeaModel):
    def __init__(self, description=None, instance_id=None, script_id=None):
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class PublishScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PublishScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PublishScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PublishScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishScriptForDebugRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishScriptForDebugRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class PublishScriptForDebugResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishScriptForDebugResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishScriptForDebugResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PublishScriptForDebugResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PublishScriptForDebugResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PublishScriptForDebugResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryJobsRequest(TeaModel):
    def __init__(self, contact_name=None, end_time=None, instance_id=None, job_group_id=None, page_number=None,
                 page_size=None, phone_number=None, scenario_id=None, start_time=None, time_alignment=None):
        self.contact_name = contact_name  # type: str
        self.end_time = end_time  # type: long
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.phone_number = phone_number  # type: str
        self.scenario_id = scenario_id  # type: str
        self.start_time = start_time  # type: long
        self.time_alignment = time_alignment  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.time_alignment is not None:
            result['TimeAlignment'] = self.time_alignment
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TimeAlignment') is not None:
            self.time_alignment = m.get('TimeAlignment')
        return self


class QueryJobsResponseBodyJobsListContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsResponseBodyJobsListContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class QueryJobsResponseBodyJobsListExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsResponseBodyJobsListExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryJobsResponseBodyJobsListSummary(TeaModel):
    def __init__(self, category=None, content=None, conversation_detail_id=None, group_id=None, job_id=None,
                 summary_id=None, summary_name=None, task_id=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.conversation_detail_id = conversation_detail_id  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.summary_id = summary_id  # type: str
        self.summary_name = summary_name  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsResponseBodyJobsListSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class QueryJobsResponseBodyJobsListTasksContact(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsResponseBodyJobsListTasksContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class QueryJobsResponseBodyJobsListTasks(TeaModel):
    def __init__(self, actual_time=None, brief=None, call_id=None, called_number=None, calling_number=None,
                 chatbot_id=None, contact=None, duration=None, job_id=None, planed_time=None, scenario_id=None, status=None,
                 task_id=None):
        self.actual_time = actual_time  # type: long
        self.brief = brief  # type: str
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.contact = contact  # type: QueryJobsResponseBodyJobsListTasksContact
        self.duration = duration  # type: int
        self.job_id = job_id  # type: str
        self.planed_time = planed_time  # type: long
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()

    def to_map(self):
        _map = super(QueryJobsResponseBodyJobsListTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = QueryJobsResponseBodyJobsListTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class QueryJobsResponseBodyJobsList(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, job_group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, tasks=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[QueryJobsResponseBodyJobsListContacts]
        self.extras = extras  # type: list[QueryJobsResponseBodyJobsListExtras]
        self.failure_reason = failure_reason  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[QueryJobsResponseBodyJobsListSummary]
        self.tasks = tasks  # type: list[QueryJobsResponseBodyJobsListTasks]

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryJobsResponseBodyJobsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = QueryJobsResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = QueryJobsResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = QueryJobsResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = QueryJobsResponseBodyJobsListTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class QueryJobsResponseBodyJobs(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[QueryJobsResponseBodyJobsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryJobsResponseBodyJobs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryJobsResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, jobs=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.jobs = jobs  # type: QueryJobsResponseBodyJobs
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super(QueryJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = QueryJobsResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryJobsWithResultRequest(TeaModel):
    def __init__(self, has_answered_filter=None, has_hang_up_by_rejection_filter=None,
                 has_reached_end_of_flow_filter=None, instance_id=None, job_group_id=None, job_status_filter=None, page_number=None,
                 page_size=None, query_text=None, task_status_filter=None):
        self.has_answered_filter = has_answered_filter  # type: bool
        self.has_hang_up_by_rejection_filter = has_hang_up_by_rejection_filter  # type: bool
        self.has_reached_end_of_flow_filter = has_reached_end_of_flow_filter  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_status_filter = job_status_filter  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.query_text = query_text  # type: str
        self.task_status_filter = task_status_filter  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsWithResultRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.has_answered_filter is not None:
            result['HasAnsweredFilter'] = self.has_answered_filter
        if self.has_hang_up_by_rejection_filter is not None:
            result['HasHangUpByRejectionFilter'] = self.has_hang_up_by_rejection_filter
        if self.has_reached_end_of_flow_filter is not None:
            result['HasReachedEndOfFlowFilter'] = self.has_reached_end_of_flow_filter
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_status_filter is not None:
            result['JobStatusFilter'] = self.job_status_filter
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.query_text is not None:
            result['QueryText'] = self.query_text
        if self.task_status_filter is not None:
            result['TaskStatusFilter'] = self.task_status_filter
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HasAnsweredFilter') is not None:
            self.has_answered_filter = m.get('HasAnsweredFilter')
        if m.get('HasHangUpByRejectionFilter') is not None:
            self.has_hang_up_by_rejection_filter = m.get('HasHangUpByRejectionFilter')
        if m.get('HasReachedEndOfFlowFilter') is not None:
            self.has_reached_end_of_flow_filter = m.get('HasReachedEndOfFlowFilter')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobStatusFilter') is not None:
            self.job_status_filter = m.get('JobStatusFilter')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('QueryText') is not None:
            self.query_text = m.get('QueryText')
        if m.get('TaskStatusFilter') is not None:
            self.task_status_filter = m.get('TaskStatusFilter')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskContact(TeaModel):
    def __init__(self, honorific=None, id=None, job_uuid=None, name=None, phone_number=None,
                 preferred_phone_number=None, reference_id=None, role=None, round=None, state=None):
        self.honorific = honorific  # type: str
        self.id = id  # type: str
        self.job_uuid = job_uuid  # type: str
        self.name = name  # type: str
        self.phone_number = phone_number  # type: str
        self.preferred_phone_number = preferred_phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.round = round  # type: int
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBodyJobsListLatestTaskContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.id is not None:
            result['Id'] = self.id
        if self.job_uuid is not None:
            result['JobUuid'] = self.job_uuid
        if self.name is not None:
            result['Name'] = self.name
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.preferred_phone_number is not None:
            result['PreferredPhoneNumber'] = self.preferred_phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JobUuid') is not None:
            self.job_uuid = m.get('JobUuid')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PreferredPhoneNumber') is not None:
            self.preferred_phone_number = m.get('PreferredPhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes(TeaModel):
    def __init__(self, code=None, hint=None):
        self.code = code  # type: str
        self.hint = hint  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.hint is not None:
            result['Hint'] = self.hint
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Hint') is not None:
            self.hint = m.get('Hint')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBodyJobsListLatestTaskExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits(TeaModel):
    def __init__(self, tag_group=None, tag_name=None):
        self.tag_group = tag_group  # type: str
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTask(TeaModel):
    def __init__(self, call_duration=None, call_duration_display=None, call_time=None, contact=None,
                 dial_exception_codes=None, extras=None, has_answered=None, has_hang_up_by_rejection=None,
                 has_last_playback_completed=None, has_reached_end_of_flow=None, status=None, status_name=None, tag_hits=None,
                 task_end_reason=None):
        self.call_duration = call_duration  # type: int
        self.call_duration_display = call_duration_display  # type: str
        self.call_time = call_time  # type: long
        self.contact = contact  # type: QueryJobsWithResultResponseBodyJobsListLatestTaskContact
        self.dial_exception_codes = dial_exception_codes  # type: list[QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes]
        self.extras = extras  # type: list[QueryJobsWithResultResponseBodyJobsListLatestTaskExtras]
        self.has_answered = has_answered  # type: bool
        self.has_hang_up_by_rejection = has_hang_up_by_rejection  # type: bool
        self.has_last_playback_completed = has_last_playback_completed  # type: bool
        self.has_reached_end_of_flow = has_reached_end_of_flow  # type: bool
        self.status = status  # type: str
        self.status_name = status_name  # type: str
        self.tag_hits = tag_hits  # type: list[QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits]
        self.task_end_reason = task_end_reason  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.dial_exception_codes:
            for k in self.dial_exception_codes:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.tag_hits:
            for k in self.tag_hits:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBodyJobsListLatestTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_duration is not None:
            result['CallDuration'] = self.call_duration
        if self.call_duration_display is not None:
            result['CallDurationDisplay'] = self.call_duration_display
        if self.call_time is not None:
            result['CallTime'] = self.call_time
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['DialExceptionCodes'] = []
        if self.dial_exception_codes is not None:
            for k in self.dial_exception_codes:
                result['DialExceptionCodes'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.has_answered is not None:
            result['HasAnswered'] = self.has_answered
        if self.has_hang_up_by_rejection is not None:
            result['HasHangUpByRejection'] = self.has_hang_up_by_rejection
        if self.has_last_playback_completed is not None:
            result['HasLastPlaybackCompleted'] = self.has_last_playback_completed
        if self.has_reached_end_of_flow is not None:
            result['HasReachedEndOfFlow'] = self.has_reached_end_of_flow
        if self.status is not None:
            result['Status'] = self.status
        if self.status_name is not None:
            result['StatusName'] = self.status_name
        result['TagHits'] = []
        if self.tag_hits is not None:
            for k in self.tag_hits:
                result['TagHits'].append(k.to_map() if k else None)
        if self.task_end_reason is not None:
            result['TaskEndReason'] = self.task_end_reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallDuration') is not None:
            self.call_duration = m.get('CallDuration')
        if m.get('CallDurationDisplay') is not None:
            self.call_duration_display = m.get('CallDurationDisplay')
        if m.get('CallTime') is not None:
            self.call_time = m.get('CallTime')
        if m.get('Contact') is not None:
            temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.dial_exception_codes = []
        if m.get('DialExceptionCodes') is not None:
            for k in m.get('DialExceptionCodes'):
                temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes()
                self.dial_exception_codes.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('HasAnswered') is not None:
            self.has_answered = m.get('HasAnswered')
        if m.get('HasHangUpByRejection') is not None:
            self.has_hang_up_by_rejection = m.get('HasHangUpByRejection')
        if m.get('HasLastPlaybackCompleted') is not None:
            self.has_last_playback_completed = m.get('HasLastPlaybackCompleted')
        if m.get('HasReachedEndOfFlow') is not None:
            self.has_reached_end_of_flow = m.get('HasReachedEndOfFlow')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StatusName') is not None:
            self.status_name = m.get('StatusName')
        self.tag_hits = []
        if m.get('TagHits') is not None:
            for k in m.get('TagHits'):
                temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits()
                self.tag_hits.append(temp_model.from_map(k))
        if m.get('TaskEndReason') is not None:
            self.task_end_reason = m.get('TaskEndReason')
        return self


class QueryJobsWithResultResponseBodyJobsList(TeaModel):
    def __init__(self, id=None, job_failure_reason=None, latest_task=None, status=None, status_name=None):
        self.id = id  # type: str
        self.job_failure_reason = job_failure_reason  # type: str
        self.latest_task = latest_task  # type: QueryJobsWithResultResponseBodyJobsListLatestTask
        self.status = status  # type: str
        self.status_name = status_name  # type: str

    def validate(self):
        if self.latest_task:
            self.latest_task.validate()

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBodyJobsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.job_failure_reason is not None:
            result['JobFailureReason'] = self.job_failure_reason
        if self.latest_task is not None:
            result['LatestTask'] = self.latest_task.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.status_name is not None:
            result['StatusName'] = self.status_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JobFailureReason') is not None:
            self.job_failure_reason = m.get('JobFailureReason')
        if m.get('LatestTask') is not None:
            temp_model = QueryJobsWithResultResponseBodyJobsListLatestTask()
            self.latest_task = temp_model.from_map(m['LatestTask'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StatusName') is not None:
            self.status_name = m.get('StatusName')
        return self


class QueryJobsWithResultResponseBodyJobs(TeaModel):
    def __init__(self, list=None, page_count=None, page_number=None, page_size=None, row_count=None):
        self.list = list  # type: list[QueryJobsWithResultResponseBodyJobsList]
        self.page_count = page_count  # type: int
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.row_count = row_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBodyJobs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_count is not None:
            result['PageCount'] = self.page_count
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryJobsWithResultResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageCount') is not None:
            self.page_count = m.get('PageCount')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        return self


class QueryJobsWithResultResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, jobs=None, message=None, request_id=None, success=None,
                 variable_names=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.jobs = jobs  # type: QueryJobsWithResultResponseBodyJobs
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.variable_names = variable_names  # type: list[str]

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super(QueryJobsWithResultResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.variable_names is not None:
            result['VariableNames'] = self.variable_names
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = QueryJobsWithResultResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('VariableNames') is not None:
            self.variable_names = m.get('VariableNames')
        return self


class QueryJobsWithResultResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryJobsWithResultResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryJobsWithResultResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryJobsWithResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryScriptWaveformsRequest(TeaModel):
    def __init__(self, instance_id=None, script_content=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_content = script_content  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScriptWaveformsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class QueryScriptWaveformsResponseBodyScriptWaveforms(TeaModel):
    def __init__(self, file_id=None, file_name=None, script_content=None, script_id=None, script_waveform_id=None):
        self.file_id = file_id  # type: str
        self.file_name = file_name  # type: str
        self.script_content = script_content  # type: str
        self.script_id = script_id  # type: str
        self.script_waveform_id = script_waveform_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScriptWaveformsResponseBodyScriptWaveforms, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_waveform_id is not None:
            result['ScriptWaveformId'] = self.script_waveform_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptWaveformId') is not None:
            self.script_waveform_id = m.get('ScriptWaveformId')
        return self


class QueryScriptWaveformsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script_waveforms=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script_waveforms = script_waveforms  # type: list[QueryScriptWaveformsResponseBodyScriptWaveforms]
        self.success = success  # type: bool

    def validate(self):
        if self.script_waveforms:
            for k in self.script_waveforms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryScriptWaveformsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ScriptWaveforms'] = []
        if self.script_waveforms is not None:
            for k in self.script_waveforms:
                result['ScriptWaveforms'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.script_waveforms = []
        if m.get('ScriptWaveforms') is not None:
            for k in m.get('ScriptWaveforms'):
                temp_model = QueryScriptWaveformsResponseBodyScriptWaveforms()
                self.script_waveforms.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryScriptWaveformsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryScriptWaveformsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryScriptWaveformsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryScriptWaveformsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryScriptsByStatusRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, status_list=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.status_list = status_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScriptsByStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status_list is not None:
            result['StatusList'] = self.status_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StatusList') is not None:
            self.status_list = m.get('StatusList')
        return self


class QueryScriptsByStatusResponseBodyScriptsList(TeaModel):
    def __init__(self, applied_version=None, debug_status=None, debug_version=None, industry=None,
                 is_debug_drafted=None, is_drafted=None, scene=None, script_description=None, script_id=None, script_name=None,
                 status=None, update_time=None):
        self.applied_version = applied_version  # type: str
        self.debug_status = debug_status  # type: str
        self.debug_version = debug_version  # type: str
        self.industry = industry  # type: str
        self.is_debug_drafted = is_debug_drafted  # type: bool
        self.is_drafted = is_drafted  # type: bool
        self.scene = scene  # type: str
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryScriptsByStatusResponseBodyScriptsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.debug_version is not None:
            result['DebugVersion'] = self.debug_version
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('DebugVersion') is not None:
            self.debug_version = m.get('DebugVersion')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class QueryScriptsByStatusResponseBodyScripts(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[QueryScriptsByStatusResponseBodyScriptsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryScriptsByStatusResponseBodyScripts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryScriptsByStatusResponseBodyScriptsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryScriptsByStatusResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scripts=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scripts = scripts  # type: QueryScriptsByStatusResponseBodyScripts
        self.success = success  # type: bool

    def validate(self):
        if self.scripts:
            self.scripts.validate()

    def to_map(self):
        _map = super(QueryScriptsByStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scripts is not None:
            result['Scripts'] = self.scripts.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scripts') is not None:
            temp_model = QueryScriptsByStatusResponseBodyScripts()
            self.scripts = temp_model.from_map(m['Scripts'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryScriptsByStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryScriptsByStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryScriptsByStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryScriptsByStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RecordFailureRequest(TeaModel):
    def __init__(self, actual_time=None, call_id=None, called_number=None, calling_number=None,
                 disposition_code=None, exception_codes=None, instance_id=None, task_id=None):
        self.actual_time = actual_time  # type: long
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.disposition_code = disposition_code  # type: str
        self.exception_codes = exception_codes  # type: str
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecordFailureRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.disposition_code is not None:
            result['DispositionCode'] = self.disposition_code
        if self.exception_codes is not None:
            result['ExceptionCodes'] = self.exception_codes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('DispositionCode') is not None:
            self.disposition_code = m.get('DispositionCode')
        if m.get('ExceptionCodes') is not None:
            self.exception_codes = m.get('ExceptionCodes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class RecordFailureResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RecordFailureResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RecordFailureResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RecordFailureResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RecordFailureResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RecordFailureResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResumeJobsRequest(TeaModel):
    def __init__(self, all=None, instance_id=None, job_group_id=None, job_id=None, job_reference_id=None,
                 scenario_id=None):
        self.all = all  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.job_reference_id = job_reference_id  # type: list[str]
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResumeJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class ResumeJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResumeJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResumeJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ResumeJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ResumeJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResumeJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RollbackScriptRequest(TeaModel):
    def __init__(self, instance_id=None, rollback_version=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.rollback_version = rollback_version  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RollbackScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.rollback_version is not None:
            result['RollbackVersion'] = self.rollback_version
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RollbackVersion') is not None:
            self.rollback_version = m.get('RollbackVersion')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class RollbackScriptResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RollbackScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RollbackScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RollbackScriptResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RollbackScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RollbackScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveAfterAnswerDelayPlaybackRequest(TeaModel):
    def __init__(self, after_answer_delay_playback=None, entry_id=None, strategy_level=None):
        self.after_answer_delay_playback = after_answer_delay_playback  # type: int
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveAfterAnswerDelayPlaybackRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_answer_delay_playback is not None:
            result['AfterAnswerDelayPlayback'] = self.after_answer_delay_playback
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AfterAnswerDelayPlayback') is not None:
            self.after_answer_delay_playback = m.get('AfterAnswerDelayPlayback')
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class SaveAfterAnswerDelayPlaybackResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveAfterAnswerDelayPlaybackResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveAfterAnswerDelayPlaybackResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveAfterAnswerDelayPlaybackResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveAfterAnswerDelayPlaybackResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveAfterAnswerDelayPlaybackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveBaseStrategyPeriodRequest(TeaModel):
    def __init__(self, entry_id=None, only_weekdays=None, strategy_level=None, working_time=None,
                 working_time_frames_json=None):
        self.entry_id = entry_id  # type: str
        self.only_weekdays = only_weekdays  # type: bool
        self.strategy_level = strategy_level  # type: int
        self.working_time = working_time  # type: list[str]
        self.working_time_frames_json = working_time_frames_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveBaseStrategyPeriodRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.only_weekdays is not None:
            result['OnlyWeekdays'] = self.only_weekdays
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        if self.working_time is not None:
            result['WorkingTime'] = self.working_time
        if self.working_time_frames_json is not None:
            result['WorkingTimeFramesJson'] = self.working_time_frames_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('OnlyWeekdays') is not None:
            self.only_weekdays = m.get('OnlyWeekdays')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        if m.get('WorkingTime') is not None:
            self.working_time = m.get('WorkingTime')
        if m.get('WorkingTimeFramesJson') is not None:
            self.working_time_frames_json = m.get('WorkingTimeFramesJson')
        return self


class SaveBaseStrategyPeriodResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveBaseStrategyPeriodResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveBaseStrategyPeriodResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveBaseStrategyPeriodResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveBaseStrategyPeriodResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveBaseStrategyPeriodResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveContactBlockListRequest(TeaModel):
    def __init__(self, contact_block_list_list=None, contact_block_lists_json=None, instance_id=None):
        self.contact_block_list_list = contact_block_list_list  # type: list[str]
        self.contact_block_lists_json = contact_block_lists_json  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContactBlockListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_block_list_list is not None:
            result['ContactBlockListList'] = self.contact_block_list_list
        if self.contact_block_lists_json is not None:
            result['ContactBlockListsJson'] = self.contact_block_lists_json
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactBlockListList') is not None:
            self.contact_block_list_list = m.get('ContactBlockListList')
        if m.get('ContactBlockListsJson') is not None:
            self.contact_block_lists_json = m.get('ContactBlockListsJson')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SaveContactBlockListResponseBody(TeaModel):
    def __init__(self, affected_rows=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.affected_rows = affected_rows  # type: int
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContactBlockListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveContactBlockListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveContactBlockListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveContactBlockListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveContactBlockListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveContactWhiteListRequest(TeaModel):
    def __init__(self, contact_white_list_list=None, contact_white_lists_json=None, instance_id=None):
        self.contact_white_list_list = contact_white_list_list  # type: list[str]
        self.contact_white_lists_json = contact_white_lists_json  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContactWhiteListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_white_list_list is not None:
            result['ContactWhiteListList'] = self.contact_white_list_list
        if self.contact_white_lists_json is not None:
            result['ContactWhiteListsJson'] = self.contact_white_lists_json
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactWhiteListList') is not None:
            self.contact_white_list_list = m.get('ContactWhiteListList')
        if m.get('ContactWhiteListsJson') is not None:
            self.contact_white_lists_json = m.get('ContactWhiteListsJson')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SaveContactWhiteListResponseBody(TeaModel):
    def __init__(self, affected_rows=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.affected_rows = affected_rows  # type: int
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveContactWhiteListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveContactWhiteListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveContactWhiteListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveContactWhiteListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveContactWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveEffectiveDaysRequest(TeaModel):
    def __init__(self, effective_days=None, entry_id=None, strategy_level=None):
        self.effective_days = effective_days  # type: int
        self.entry_id = entry_id  # type: str
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveEffectiveDaysRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effective_days is not None:
            result['EffectiveDays'] = self.effective_days
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EffectiveDays') is not None:
            self.effective_days = m.get('EffectiveDays')
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class SaveEffectiveDaysResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveEffectiveDaysResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveEffectiveDaysResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveEffectiveDaysResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveEffectiveDaysResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveEffectiveDaysResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveMaxAttemptsPerDayRequest(TeaModel):
    def __init__(self, entry_id=None, max_attempts_per_day=None, strategy_level=None):
        self.entry_id = entry_id  # type: str
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.strategy_level = strategy_level  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveMaxAttemptsPerDayRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class SaveMaxAttemptsPerDayResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveMaxAttemptsPerDayResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveMaxAttemptsPerDayResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SaveMaxAttemptsPerDayResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveMaxAttemptsPerDayResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveMaxAttemptsPerDayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchTaskRequest(TeaModel):
    def __init__(self, actual_time_gte=None, actual_time_lte=None, call_duration_gte=None, call_duration_lte=None,
                 called_number=None, instance_id=None, job_group_id=None, job_group_name_query=None, job_id=None,
                 job_status_string_list=None, other_id=None, page_index=None, page_size=None, recording_duration_gte=None,
                 recording_duration_lte=None, script_name_query=None, sort_by=None, sort_order=None, task_create_time_gte=None,
                 task_create_time_lte=None, task_id=None, task_status_string_list=None, user_id_match=None):
        self.actual_time_gte = actual_time_gte  # type: long
        self.actual_time_lte = actual_time_lte  # type: long
        self.call_duration_gte = call_duration_gte  # type: long
        self.call_duration_lte = call_duration_lte  # type: long
        self.called_number = called_number  # type: str
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name_query = job_group_name_query  # type: str
        self.job_id = job_id  # type: str
        self.job_status_string_list = job_status_string_list  # type: str
        self.other_id = other_id  # type: str
        self.page_index = page_index  # type: int
        self.page_size = page_size  # type: int
        self.recording_duration_gte = recording_duration_gte  # type: long
        self.recording_duration_lte = recording_duration_lte  # type: long
        self.script_name_query = script_name_query  # type: str
        self.sort_by = sort_by  # type: str
        self.sort_order = sort_order  # type: str
        self.task_create_time_gte = task_create_time_gte  # type: long
        self.task_create_time_lte = task_create_time_lte  # type: long
        self.task_id = task_id  # type: str
        self.task_status_string_list = task_status_string_list  # type: str
        self.user_id_match = user_id_match  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time_gte is not None:
            result['ActualTimeGte'] = self.actual_time_gte
        if self.actual_time_lte is not None:
            result['ActualTimeLte'] = self.actual_time_lte
        if self.call_duration_gte is not None:
            result['CallDurationGte'] = self.call_duration_gte
        if self.call_duration_lte is not None:
            result['CallDurationLte'] = self.call_duration_lte
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name_query is not None:
            result['JobGroupNameQuery'] = self.job_group_name_query
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_status_string_list is not None:
            result['JobStatusStringList'] = self.job_status_string_list
        if self.other_id is not None:
            result['OtherId'] = self.other_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.recording_duration_gte is not None:
            result['RecordingDurationGte'] = self.recording_duration_gte
        if self.recording_duration_lte is not None:
            result['RecordingDurationLte'] = self.recording_duration_lte
        if self.script_name_query is not None:
            result['ScriptNameQuery'] = self.script_name_query
        if self.sort_by is not None:
            result['SortBy'] = self.sort_by
        if self.sort_order is not None:
            result['SortOrder'] = self.sort_order
        if self.task_create_time_gte is not None:
            result['TaskCreateTimeGte'] = self.task_create_time_gte
        if self.task_create_time_lte is not None:
            result['TaskCreateTimeLte'] = self.task_create_time_lte
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status_string_list is not None:
            result['TaskStatusStringList'] = self.task_status_string_list
        if self.user_id_match is not None:
            result['UserIdMatch'] = self.user_id_match
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTimeGte') is not None:
            self.actual_time_gte = m.get('ActualTimeGte')
        if m.get('ActualTimeLte') is not None:
            self.actual_time_lte = m.get('ActualTimeLte')
        if m.get('CallDurationGte') is not None:
            self.call_duration_gte = m.get('CallDurationGte')
        if m.get('CallDurationLte') is not None:
            self.call_duration_lte = m.get('CallDurationLte')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupNameQuery') is not None:
            self.job_group_name_query = m.get('JobGroupNameQuery')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobStatusStringList') is not None:
            self.job_status_string_list = m.get('JobStatusStringList')
        if m.get('OtherId') is not None:
            self.other_id = m.get('OtherId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RecordingDurationGte') is not None:
            self.recording_duration_gte = m.get('RecordingDurationGte')
        if m.get('RecordingDurationLte') is not None:
            self.recording_duration_lte = m.get('RecordingDurationLte')
        if m.get('ScriptNameQuery') is not None:
            self.script_name_query = m.get('ScriptNameQuery')
        if m.get('SortBy') is not None:
            self.sort_by = m.get('SortBy')
        if m.get('SortOrder') is not None:
            self.sort_order = m.get('SortOrder')
        if m.get('TaskCreateTimeGte') is not None:
            self.task_create_time_gte = m.get('TaskCreateTimeGte')
        if m.get('TaskCreateTimeLte') is not None:
            self.task_create_time_lte = m.get('TaskCreateTimeLte')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatusStringList') is not None:
            self.task_status_string_list = m.get('TaskStatusStringList')
        if m.get('UserIdMatch') is not None:
            self.user_id_match = m.get('UserIdMatch')
        return self


class SearchTaskResponseBodySearchTaskInfoList(TeaModel):
    def __init__(self, actual_time=None, call_duration=None, call_duration_display=None, called_number=None,
                 dial_exception=None, dial_exception_codes=None, dial_exception_old=None, has_answered=None,
                 has_hang_up_by_rejection=None, has_last_playback_completed=None, has_reached_end_of_flow=None, instance_id=None,
                 job_group_id=None, job_group_name=None, job_id=None, job_status=None, job_status_name=None,
                 job_status_string=None, recording_duration=None, script_name=None, task_create_time=None, task_end_reason=None,
                 task_id=None, task_status=None, task_status_name=None, task_status_string=None, user_id=None,
                 user_name=None):
        self.actual_time = actual_time  # type: long
        self.call_duration = call_duration  # type: int
        self.call_duration_display = call_duration_display  # type: str
        self.called_number = called_number  # type: str
        self.dial_exception = dial_exception  # type: str
        self.dial_exception_codes = dial_exception_codes  # type: list[str]
        self.dial_exception_old = dial_exception_old  # type: str
        self.has_answered = has_answered  # type: bool
        self.has_hang_up_by_rejection = has_hang_up_by_rejection  # type: bool
        self.has_last_playback_completed = has_last_playback_completed  # type: bool
        self.has_reached_end_of_flow = has_reached_end_of_flow  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.job_id = job_id  # type: str
        self.job_status = job_status  # type: int
        self.job_status_name = job_status_name  # type: str
        self.job_status_string = job_status_string  # type: str
        self.recording_duration = recording_duration  # type: int
        self.script_name = script_name  # type: str
        self.task_create_time = task_create_time  # type: long
        self.task_end_reason = task_end_reason  # type: int
        self.task_id = task_id  # type: str
        self.task_status = task_status  # type: int
        self.task_status_name = task_status_name  # type: str
        self.task_status_string = task_status_string  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SearchTaskResponseBodySearchTaskInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.call_duration is not None:
            result['CallDuration'] = self.call_duration
        if self.call_duration_display is not None:
            result['CallDurationDisplay'] = self.call_duration_display
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.dial_exception is not None:
            result['DialException'] = self.dial_exception
        if self.dial_exception_codes is not None:
            result['DialExceptionCodes'] = self.dial_exception_codes
        if self.dial_exception_old is not None:
            result['DialExceptionOld'] = self.dial_exception_old
        if self.has_answered is not None:
            result['HasAnswered'] = self.has_answered
        if self.has_hang_up_by_rejection is not None:
            result['HasHangUpByRejection'] = self.has_hang_up_by_rejection
        if self.has_last_playback_completed is not None:
            result['HasLastPlaybackCompleted'] = self.has_last_playback_completed
        if self.has_reached_end_of_flow is not None:
            result['HasReachedEndOfFlow'] = self.has_reached_end_of_flow
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_status is not None:
            result['JobStatus'] = self.job_status
        if self.job_status_name is not None:
            result['JobStatusName'] = self.job_status_name
        if self.job_status_string is not None:
            result['JobStatusString'] = self.job_status_string
        if self.recording_duration is not None:
            result['RecordingDuration'] = self.recording_duration
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.task_create_time is not None:
            result['TaskCreateTime'] = self.task_create_time
        if self.task_end_reason is not None:
            result['TaskEndReason'] = self.task_end_reason
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.task_status_name is not None:
            result['TaskStatusName'] = self.task_status_name
        if self.task_status_string is not None:
            result['TaskStatusString'] = self.task_status_string
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CallDuration') is not None:
            self.call_duration = m.get('CallDuration')
        if m.get('CallDurationDisplay') is not None:
            self.call_duration_display = m.get('CallDurationDisplay')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('DialException') is not None:
            self.dial_exception = m.get('DialException')
        if m.get('DialExceptionCodes') is not None:
            self.dial_exception_codes = m.get('DialExceptionCodes')
        if m.get('DialExceptionOld') is not None:
            self.dial_exception_old = m.get('DialExceptionOld')
        if m.get('HasAnswered') is not None:
            self.has_answered = m.get('HasAnswered')
        if m.get('HasHangUpByRejection') is not None:
            self.has_hang_up_by_rejection = m.get('HasHangUpByRejection')
        if m.get('HasLastPlaybackCompleted') is not None:
            self.has_last_playback_completed = m.get('HasLastPlaybackCompleted')
        if m.get('HasReachedEndOfFlow') is not None:
            self.has_reached_end_of_flow = m.get('HasReachedEndOfFlow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobStatus') is not None:
            self.job_status = m.get('JobStatus')
        if m.get('JobStatusName') is not None:
            self.job_status_name = m.get('JobStatusName')
        if m.get('JobStatusString') is not None:
            self.job_status_string = m.get('JobStatusString')
        if m.get('RecordingDuration') is not None:
            self.recording_duration = m.get('RecordingDuration')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('TaskCreateTime') is not None:
            self.task_create_time = m.get('TaskCreateTime')
        if m.get('TaskEndReason') is not None:
            self.task_end_reason = m.get('TaskEndReason')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TaskStatusName') is not None:
            self.task_status_name = m.get('TaskStatusName')
        if m.get('TaskStatusString') is not None:
            self.task_status_string = m.get('TaskStatusString')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class SearchTaskResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, page_index=None, page_size=None,
                 request_id=None, search_task_info_list=None, success=None, total=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.page_index = page_index  # type: int
        self.page_size = page_size  # type: int
        self.request_id = request_id  # type: str
        self.search_task_info_list = search_task_info_list  # type: list[SearchTaskResponseBodySearchTaskInfoList]
        self.success = success  # type: bool
        self.total = total  # type: long

    def validate(self):
        if self.search_task_info_list:
            for k in self.search_task_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(SearchTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SearchTaskInfoList'] = []
        if self.search_task_info_list is not None:
            for k in self.search_task_info_list:
                result['SearchTaskInfoList'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.search_task_info_list = []
        if m.get('SearchTaskInfoList') is not None:
            for k in m.get('SearchTaskInfoList'):
                temp_model = SearchTaskResponseBodySearchTaskInfoList()
                self.search_task_info_list.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class SearchTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SearchTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SearchTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartJobRequest(TeaModel):
    def __init__(self, calling_number=None, instance_id=None, job_group_id=None, job_json=None, scenario_id=None,
                 script_id=None):
        self.calling_number = calling_number  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_json = job_json  # type: str
        self.scenario_id = scenario_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartJobRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_json is not None:
            result['JobJson'] = self.job_json
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobJson') is not None:
            self.job_json = m.get('JobJson')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class StartJobResponseBodyCallIds(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartJobResponseBodyCallIds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class StartJobResponseBodyTaskIds(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartJobResponseBodyTaskIds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class StartJobResponseBody(TeaModel):
    def __init__(self, call_ids=None, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 task_ids=None):
        self.call_ids = call_ids  # type: list[StartJobResponseBodyCallIds]
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.task_ids = task_ids  # type: list[StartJobResponseBodyTaskIds]

    def validate(self):
        if self.call_ids:
            for k in self.call_ids:
                if k:
                    k.validate()
        if self.task_ids:
            for k in self.task_ids:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(StartJobResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallIds'] = []
        if self.call_ids is not None:
            for k in self.call_ids:
                result['CallIds'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TaskIds'] = []
        if self.task_ids is not None:
            for k in self.task_ids:
                result['TaskIds'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_ids = []
        if m.get('CallIds') is not None:
            for k in m.get('CallIds'):
                temp_model = StartJobResponseBodyCallIds()
                self.call_ids.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.task_ids = []
        if m.get('TaskIds') is not None:
            for k in m.get('TaskIds'):
                temp_model = StartJobResponseBodyTaskIds()
                self.task_ids.append(temp_model.from_map(k))
        return self


class StartJobResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: StartJobResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartJobResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitBatchJobsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitBatchJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class SubmitBatchJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitBatchJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitBatchJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SubmitBatchJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SubmitBatchJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitRecordingRequest(TeaModel):
    def __init__(self, instance_id=None, merged_recording=None, resource_recording=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.merged_recording = merged_recording  # type: str
        self.resource_recording = resource_recording  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.merged_recording is not None:
            result['MergedRecording'] = self.merged_recording
        if self.resource_recording is not None:
            result['ResourceRecording'] = self.resource_recording
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MergedRecording') is not None:
            self.merged_recording = m.get('MergedRecording')
        if m.get('ResourceRecording') is not None:
            self.resource_recording = m.get('ResourceRecording')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class SubmitRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitRecordingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SubmitRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SubmitRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitScriptReviewRequest(TeaModel):
    def __init__(self, description=None, instance_id=None, script_id=None):
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitScriptReviewRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class SubmitScriptReviewResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitScriptReviewResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitScriptReviewResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SubmitScriptReviewResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SubmitScriptReviewResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitScriptReviewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendCallRequest(TeaModel):
    def __init__(self, called_numbers=None, group_id=None, instance_id=None):
        self.called_numbers = called_numbers  # type: list[str]
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendCallRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.called_numbers is not None:
            result['CalledNumbers'] = self.called_numbers
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalledNumbers') is not None:
            self.called_numbers = m.get('CalledNumbers')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SuspendCallResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendCallResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendCallResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SuspendCallResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SuspendCallResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendCallResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendCallWithFileRequest(TeaModel):
    def __init__(self, file_path=None, group_id=None, instance_id=None):
        self.file_path = file_path  # type: str
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendCallWithFileRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SuspendCallWithFileResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendCallWithFileResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendCallWithFileResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SuspendCallWithFileResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SuspendCallWithFileResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendCallWithFileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendJobsRequest(TeaModel):
    def __init__(self, all=None, instance_id=None, job_group_id=None, job_id=None, job_reference_id=None,
                 scenario_id=None):
        self.all = all  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.job_reference_id = job_reference_id  # type: list[str]
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class SuspendJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendJobsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SuspendJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SuspendJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesRequestTag(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TagResourcesRequestTag, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResourcesRequest(TeaModel):
    def __init__(self, region_id=None, resource_id=None, resource_type=None, tag=None):
        self.region_id = region_id  # type: str
        self.resource_id = resource_id  # type: list[str]
        self.resource_type = resource_type  # type: str
        self.tag = tag  # type: list[TagResourcesRequestTag]

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TagResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = TagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class TagResourcesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(TagResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TagResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TagResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TagResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TaskPreparingRequest(TeaModel):
    def __init__(self, instance_id=None, instance_owner_id=None, job_id=None):
        self.instance_id = instance_id  # type: str
        self.instance_owner_id = instance_owner_id  # type: long
        self.job_id = job_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TaskPreparingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class TaskPreparingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, task_id=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TaskPreparingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class TaskPreparingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TaskPreparingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TaskPreparingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TaskPreparingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TerminateCallRequest(TeaModel):
    def __init__(self, call_id=None, instance_id=None):
        self.call_id = call_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TerminateCallRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class TerminateCallResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(TerminateCallResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TerminateCallResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TerminateCallResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TerminateCallResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TerminateCallResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesRequest(TeaModel):
    def __init__(self, all=None, region_id=None, resource_id=None, resource_type=None, tag_key=None):
        self.all = all  # type: bool
        self.region_id = region_id  # type: str
        self.resource_id = resource_id  # type: list[str]
        self.resource_type = resource_type  # type: str
        self.tag_key = tag_key  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(UntagResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        return self


class UntagResourcesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UntagResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UntagResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UntagResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UntagResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadScriptRecordingRequest(TeaModel):
    def __init__(self, content=None, file_id=None, file_name=None, instance_id=None, script_id=None):
        self.content = content  # type: str
        self.file_id = file_id  # type: str
        self.file_name = file_name  # type: str
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadScriptRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class UploadScriptRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, uuid=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.uuid = uuid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UploadScriptRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class UploadScriptRecordingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UploadScriptRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UploadScriptRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class WithdrawScriptReviewRequest(TeaModel):
    def __init__(self, instance_id=None, script_id=None):
        self.instance_id = instance_id  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(WithdrawScriptReviewRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class WithdrawScriptReviewResponseBodyScript(TeaModel):
    def __init__(self, debug_status=None, industry=None, is_debug_drafted=None, is_drafted=None, scene=None,
                 script_description=None, script_id=None, script_name=None, status=None, update_time=None):
        self.debug_status = debug_status  # type: str
        self.industry = industry  # type: str
        self.is_debug_drafted = is_debug_drafted  # type: bool
        self.is_drafted = is_drafted  # type: bool
        self.scene = scene  # type: str
        self.script_description = script_description  # type: str
        self.script_id = script_id  # type: str
        self.script_name = script_name  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(WithdrawScriptReviewResponseBodyScript, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class WithdrawScriptReviewResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, script=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.script = script  # type: WithdrawScriptReviewResponseBodyScript
        self.success = success  # type: bool

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super(WithdrawScriptReviewResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = WithdrawScriptReviewResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class WithdrawScriptReviewResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: WithdrawScriptReviewResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(WithdrawScriptReviewResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = WithdrawScriptReviewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


