# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class AbortPredictiveJobsRequest(TeaModel):
    def __init__(self, all=None, instance_id=None, job_group_id=None, job_id=None, skill_group_id=None):
        self.all = all  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AbortPredictiveJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class AbortPredictiveJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AbortPredictiveJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AbortPredictiveJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AbortPredictiveJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AbortPredictiveJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AbortPredictiveJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAgentDeviceRequest(TeaModel):
    def __init__(self, browser_version=None, client_ip=None, client_port=None, instance_id=None, remark=None):
        self.browser_version = browser_version  # type: str
        self.client_ip = client_ip  # type: str
        self.client_port = client_port  # type: str
        self.instance_id = instance_id  # type: str
        self.remark = remark  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAgentDeviceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.browser_version is not None:
            result['BrowserVersion'] = self.browser_version
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BrowserVersion') is not None:
            self.browser_version = m.get('BrowserVersion')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class AddAgentDeviceResponseBody(TeaModel):
    def __init__(self, agent_device_id=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.agent_device_id = agent_device_id  # type: long
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAgentDeviceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_device_id is not None:
            result['AgentDeviceId'] = self.agent_device_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentDeviceId') is not None:
            self.agent_device_id = m.get('AgentDeviceId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddAgentDeviceResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AddAgentDeviceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddAgentDeviceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddAgentDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddBulkPhoneNumbersRequest(TeaModel):
    def __init__(self, contact_flow_id=None, instance_id=None, phone_number=None, skill_group_id=None, usage=None):
        self.contact_flow_id = contact_flow_id  # type: str
        self.instance_id = instance_id  # type: str
        self.phone_number = phone_number  # type: list[str]
        self.skill_group_id = skill_group_id  # type: list[str]
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBulkPhoneNumbersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers(TeaModel):
    def __init__(self, arrearage_phone_number=None):
        self.arrearage_phone_number = arrearage_phone_number  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arrearage_phone_number is not None:
            result['ArrearagePhoneNumber'] = self.arrearage_phone_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArrearagePhoneNumber') is not None:
            self.arrearage_phone_number = m.get('ArrearagePhoneNumber')
        return self


class AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers(TeaModel):
    def __init__(self, failed_phone_number=None):
        self.failed_phone_number = failed_phone_number  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.failed_phone_number is not None:
            result['FailedPhoneNumber'] = self.failed_phone_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FailedPhoneNumber') is not None:
            self.failed_phone_number = m.get('FailedPhoneNumber')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow(TeaModel):
    def __init__(self, contact_flow_description=None, contact_flow_id=None, contact_flow_name=None,
                 instance_id=None, type=None):
        self.contact_flow_description = contact_flow_description  # type: str
        self.contact_flow_id = contact_flow_id  # type: str
        self.contact_flow_name = contact_flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup(TeaModel):
    def __init__(self, skill_group_id=None, skill_group_name=None):
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups(TeaModel):
    def __init__(self, skill_group=None):
        self.skill_group = skill_group  # type: list[AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup]

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, contact_flow=None, instance_id=None, number=None,
                 phone_number_description=None, phone_number_id=None, remaining_time=None, skill_groups=None, test_only=None, trunks=None,
                 usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.contact_flow = contact_flow  # type: AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.skill_groups = skill_groups  # type: AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()
        if self.skill_groups:
            self.skill_groups.validate()

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('ContactFlow') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('SkillGroups') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers(TeaModel):
    def __init__(self, userd_phone_number=None):
        self.userd_phone_number = userd_phone_number  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.userd_phone_number is not None:
            result['UserdPhoneNumber'] = self.userd_phone_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserdPhoneNumber') is not None:
            self.userd_phone_number = m.get('UserdPhoneNumber')
        return self


class AddBulkPhoneNumbersResponseBody(TeaModel):
    def __init__(self, arrearage_phone_numbers=None, code=None, failed_phone_numbers=None, http_status_code=None,
                 message=None, phone_numbers=None, request_id=None, success=None, userd_phone_numbers=None):
        self.arrearage_phone_numbers = arrearage_phone_numbers  # type: AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers
        self.code = code  # type: str
        self.failed_phone_numbers = failed_phone_numbers  # type: AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.phone_numbers = phone_numbers  # type: AddBulkPhoneNumbersResponseBodyPhoneNumbers
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.userd_phone_numbers = userd_phone_numbers  # type: AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers

    def validate(self):
        if self.arrearage_phone_numbers:
            self.arrearage_phone_numbers.validate()
        if self.failed_phone_numbers:
            self.failed_phone_numbers.validate()
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.userd_phone_numbers:
            self.userd_phone_numbers.validate()

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arrearage_phone_numbers is not None:
            result['ArrearagePhoneNumbers'] = self.arrearage_phone_numbers.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.failed_phone_numbers is not None:
            result['FailedPhoneNumbers'] = self.failed_phone_numbers.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.userd_phone_numbers is not None:
            result['UserdPhoneNumbers'] = self.userd_phone_numbers.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArrearagePhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers()
            self.arrearage_phone_numbers = temp_model.from_map(m['ArrearagePhoneNumbers'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FailedPhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers()
            self.failed_phone_numbers = temp_model.from_map(m['FailedPhoneNumbers'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UserdPhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers()
            self.userd_phone_numbers = temp_model.from_map(m['UserdPhoneNumbers'])
        return self


class AddBulkPhoneNumbersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AddBulkPhoneNumbersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddBulkPhoneNumbersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddBulkPhoneNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddJobsToPredictiveJobGroupRequest(TeaModel):
    def __init__(self, client_token=None, instance_id=None, job_group_id=None, jobs_json=None, skill_group_id=None):
        self.client_token = client_token  # type: str
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.jobs_json = jobs_json  # type: list[str]
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddJobsToPredictiveJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class AddJobsToPredictiveJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddJobsToPredictiveJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddJobsToPredictiveJobGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AddJobsToPredictiveJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddJobsToPredictiveJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddJobsToPredictiveJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddPhoneNumberRequest(TeaModel):
    def __init__(self, contact_flow_id=None, instance_id=None, phone_number=None, usage=None):
        self.contact_flow_id = contact_flow_id  # type: str
        self.instance_id = instance_id  # type: str
        self.phone_number = phone_number  # type: str
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddPhoneNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class AddPhoneNumberResponseBodyPhoneNumberContactFlow(TeaModel):
    def __init__(self, contact_flow_description=None, contact_flow_id=None, contact_flow_name=None,
                 instance_id=None, type=None):
        self.contact_flow_description = contact_flow_description  # type: str
        self.contact_flow_id = contact_flow_id  # type: str
        self.contact_flow_name = contact_flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddPhoneNumberResponseBodyPhoneNumberContactFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AddPhoneNumberResponseBodyPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, contact_flow=None, instance_id=None, number=None,
                 phone_number_description=None, phone_number_id=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.contact_flow = contact_flow  # type: AddPhoneNumberResponseBodyPhoneNumberContactFlow
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        _map = super(AddPhoneNumberResponseBodyPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('ContactFlow') is not None:
            temp_model = AddPhoneNumberResponseBodyPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class AddPhoneNumberResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, phone_number=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.phone_number = phone_number  # type: AddPhoneNumberResponseBodyPhoneNumber
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.phone_number:
            self.phone_number.validate()

    def to_map(self):
        _map = super(AddPhoneNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PhoneNumber') is not None:
            temp_model = AddPhoneNumberResponseBodyPhoneNumber()
            self.phone_number = temp_model.from_map(m['PhoneNumber'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddPhoneNumberResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AddPhoneNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddPhoneNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddPhoneNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddPhoneTagsRequest(TeaModel):
    def __init__(self, concurrency=None, instance_id=None, phone_number_list=None, provider=None,
                 region_name_city=None, region_name_province=None, service_tag=None, sip_tag=None, type=None):
        self.concurrency = concurrency  # type: int
        self.instance_id = instance_id  # type: str
        self.phone_number_list = phone_number_list  # type: list[str]
        self.provider = provider  # type: str
        self.region_name_city = region_name_city  # type: str
        self.region_name_province = region_name_province  # type: str
        self.service_tag = service_tag  # type: str
        self.sip_tag = sip_tag  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddPhoneTagsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.concurrency is not None:
            result['Concurrency'] = self.concurrency
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_list is not None:
            result['PhoneNumberList'] = self.phone_number_list
        if self.provider is not None:
            result['Provider'] = self.provider
        if self.region_name_city is not None:
            result['RegionNameCity'] = self.region_name_city
        if self.region_name_province is not None:
            result['RegionNameProvince'] = self.region_name_province
        if self.service_tag is not None:
            result['ServiceTag'] = self.service_tag
        if self.sip_tag is not None:
            result['SipTag'] = self.sip_tag
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Concurrency') is not None:
            self.concurrency = m.get('Concurrency')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberList') is not None:
            self.phone_number_list = m.get('PhoneNumberList')
        if m.get('Provider') is not None:
            self.provider = m.get('Provider')
        if m.get('RegionNameCity') is not None:
            self.region_name_city = m.get('RegionNameCity')
        if m.get('RegionNameProvince') is not None:
            self.region_name_province = m.get('RegionNameProvince')
        if m.get('ServiceTag') is not None:
            self.service_tag = m.get('ServiceTag')
        if m.get('SipTag') is not None:
            self.sip_tag = m.get('SipTag')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AddPhoneTagsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddPhoneTagsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddPhoneTagsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AddPhoneTagsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddPhoneTagsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddPhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AssignJobsRequest(TeaModel):
    def __init__(self, calling_number=None, group_id=None, instance_id=None, jobs_json=None, scenario_id=None,
                 strategy_json=None):
        self.calling_number = calling_number  # type: list[str]
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str
        self.jobs_json = jobs_json  # type: list[str]
        self.scenario_id = scenario_id  # type: str
        self.strategy_json = strategy_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AssignJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class AssignJobsResponseBody(TeaModel):
    def __init__(self, code=None, group_id=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.group_id = group_id  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AssignJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AssignJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AssignJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AssignJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AssignJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AssignUsersRequest(TeaModel):
    def __init__(self, instance_id=None, role_id=None, skill_group_id=None, skill_level=None, user_ram_id=None):
        self.instance_id = instance_id  # type: str
        self.role_id = role_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: list[str]
        self.skill_level = skill_level  # type: list[int]
        self.user_ram_id = user_ram_id  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(AssignUsersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        if self.user_ram_id is not None:
            result['UserRamId'] = self.user_ram_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        if m.get('UserRamId') is not None:
            self.user_ram_id = m.get('UserRamId')
        return self


class AssignUsersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(AssignUsersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AssignUsersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: AssignUsersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AssignUsersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AssignUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CallOnlinePrivacyNumberRequest(TeaModel):
    def __init__(self, instance_id=None, tel_a=None, tel_b=None):
        self.instance_id = instance_id  # type: str
        self.tel_a = tel_a  # type: str
        self.tel_b = tel_b  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CallOnlinePrivacyNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.tel_a is not None:
            result['TelA'] = self.tel_a
        if self.tel_b is not None:
            result['TelB'] = self.tel_b
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TelA') is not None:
            self.tel_a = m.get('TelA')
        if m.get('TelB') is not None:
            self.tel_b = m.get('TelB')
        return self


class CallOnlinePrivacyNumberResponseBodyData(TeaModel):
    def __init__(self, call_id=None, date_created=None, represent=None, status_code=None, tel_x=None):
        self.call_id = call_id  # type: str
        self.date_created = date_created  # type: str
        self.represent = represent  # type: str
        self.status_code = status_code  # type: str
        self.tel_x = tel_x  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CallOnlinePrivacyNumberResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.date_created is not None:
            result['DateCreated'] = self.date_created
        if self.represent is not None:
            result['Represent'] = self.represent
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.tel_x is not None:
            result['TelX'] = self.tel_x
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('DateCreated') is not None:
            self.date_created = m.get('DateCreated')
        if m.get('Represent') is not None:
            self.represent = m.get('Represent')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('TelX') is not None:
            self.tel_x = m.get('TelX')
        return self


class CallOnlinePrivacyNumberResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: CallOnlinePrivacyNumberResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(CallOnlinePrivacyNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CallOnlinePrivacyNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CallOnlinePrivacyNumberResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CallOnlinePrivacyNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CallOnlinePrivacyNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CallOnlinePrivacyNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelJobsRequest(TeaModel):
    def __init__(self, all=None, group_id=None, instance_id=None, job_id=None, job_reference_id=None,
                 scenario_id=None):
        self.all = all  # type: bool
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.job_reference_id = job_reference_id  # type: list[str]
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class CancelJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CancelJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CancelJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CancelJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CancelJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CancelJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckNumberAvaliableRequest(TeaModel):
    def __init__(self, callee=None, caller=None, instance_id=None):
        self.callee = callee  # type: str
        self.caller = caller  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckNumberAvaliableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee is not None:
            result['Callee'] = self.callee
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CheckNumberAvaliableResponseBodyCalleeAvaliable(TeaModel):
    def __init__(self, avaliable=None, reason=None):
        self.avaliable = avaliable  # type: bool
        self.reason = reason  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckNumberAvaliableResponseBodyCalleeAvaliable, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avaliable is not None:
            result['Avaliable'] = self.avaliable
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Avaliable') is not None:
            self.avaliable = m.get('Avaliable')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class CheckNumberAvaliableResponseBodyCallerAvaliable(TeaModel):
    def __init__(self, avaliable=None, reason=None):
        self.avaliable = avaliable  # type: bool
        self.reason = reason  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckNumberAvaliableResponseBodyCallerAvaliable, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avaliable is not None:
            result['Avaliable'] = self.avaliable
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Avaliable') is not None:
            self.avaliable = m.get('Avaliable')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class CheckNumberAvaliableResponseBody(TeaModel):
    def __init__(self, callee_avaliable=None, caller_avaliable=None, code=None, http_status_code=None, message=None,
                 request_id=None, success=None):
        self.callee_avaliable = callee_avaliable  # type: CheckNumberAvaliableResponseBodyCalleeAvaliable
        self.caller_avaliable = caller_avaliable  # type: CheckNumberAvaliableResponseBodyCallerAvaliable
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.callee_avaliable:
            self.callee_avaliable.validate()
        if self.caller_avaliable:
            self.caller_avaliable.validate()

    def to_map(self):
        _map = super(CheckNumberAvaliableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee_avaliable is not None:
            result['CalleeAvaliable'] = self.callee_avaliable.to_map()
        if self.caller_avaliable is not None:
            result['CallerAvaliable'] = self.caller_avaliable.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalleeAvaliable') is not None:
            temp_model = CheckNumberAvaliableResponseBodyCalleeAvaliable()
            self.callee_avaliable = temp_model.from_map(m['CalleeAvaliable'])
        if m.get('CallerAvaliable') is not None:
            temp_model = CheckNumberAvaliableResponseBodyCallerAvaliable()
            self.caller_avaliable = temp_model.from_map(m['CallerAvaliable'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CheckNumberAvaliableResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CheckNumberAvaliableResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckNumberAvaliableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CheckNumberAvaliableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommitContactFlowVersionModificationRequest(TeaModel):
    def __init__(self, canvas=None, contact_flow_version_id=None, content=None, instance_id=None):
        self.canvas = canvas  # type: str
        self.contact_flow_version_id = contact_flow_version_id  # type: str
        self.content = content  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommitContactFlowVersionModificationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.content is not None:
            result['Content'] = self.content
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CommitContactFlowVersionModificationResponseBodyContactFlowVersion(TeaModel):
    def __init__(self, canvas=None, contact_flow_version_description=None, contact_flow_version_id=None,
                 content=None, last_modified=None, last_modified_by=None, locked_by=None, status=None, version=None):
        self.canvas = canvas  # type: str
        self.contact_flow_version_description = contact_flow_version_description  # type: str
        self.contact_flow_version_id = contact_flow_version_id  # type: str
        self.content = content  # type: str
        self.last_modified = last_modified  # type: str
        self.last_modified_by = last_modified_by  # type: str
        self.locked_by = locked_by  # type: str
        self.status = status  # type: str
        self.version = version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommitContactFlowVersionModificationResponseBodyContactFlowVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.content is not None:
            result['Content'] = self.content
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        if self.locked_by is not None:
            result['LockedBy'] = self.locked_by
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        if m.get('LockedBy') is not None:
            self.locked_by = m.get('LockedBy')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class CommitContactFlowVersionModificationResponseBody(TeaModel):
    def __init__(self, code=None, contact_flow_version=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.contact_flow_version = contact_flow_version  # type: CommitContactFlowVersionModificationResponseBodyContactFlowVersion
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.contact_flow_version:
            self.contact_flow_version.validate()

    def to_map(self):
        _map = super(CommitContactFlowVersionModificationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_flow_version is not None:
            result['ContactFlowVersion'] = self.contact_flow_version.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactFlowVersion') is not None:
            temp_model = CommitContactFlowVersionModificationResponseBodyContactFlowVersion()
            self.contact_flow_version = temp_model.from_map(m['ContactFlowVersion'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CommitContactFlowVersionModificationResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CommitContactFlowVersionModificationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CommitContactFlowVersionModificationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CommitContactFlowVersionModificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBatchJobsRequest(TeaModel):
    def __init__(self, calling_number=None, description=None, instance_id=None, job_file_path=None, name=None,
                 scenario_id=None, strategy_json=None, submitted=None):
        self.calling_number = calling_number  # type: list[str]
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.name = name  # type: str
        self.scenario_id = scenario_id  # type: str
        self.strategy_json = strategy_json  # type: str
        self.submitted = submitted  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateBatchJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.submitted is not None:
            result['Submitted'] = self.submitted
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('Submitted') is not None:
            self.submitted = m.get('Submitted')
        return self


class CreateBatchJobsResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateBatchJobsResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class CreateBatchJobsResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[CreateBatchJobsResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateBatchJobsResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateBatchJobsResponseBodyJobGroup(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, job_file_path=None, job_group_description=None,
                 job_group_id=None, job_group_name=None, scenario_id=None, strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.job_file_path = job_file_path  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.scenario_id = scenario_id  # type: str
        self.strategy = strategy  # type: CreateBatchJobsResponseBodyJobGroupStrategy

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = CreateBatchJobsResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class CreateBatchJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: CreateBatchJobsResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = CreateBatchJobsResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBatchJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateBatchJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateBatchJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCabInstanceRequest(TeaModel):
    def __init__(self, call_center_instance_id=None, instance_description=None, instance_name=None,
                 max_concurrent_conversation=None):
        self.call_center_instance_id = call_center_instance_id  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateCabInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        return self


class CreateCabInstanceResponseBodyInstance(TeaModel):
    def __init__(self, call_center_instance_id=None, creation_time=None, instance_description=None,
                 instance_id=None, instance_name=None, max_concurrent_conversation=None, owner=None):
        self.call_center_instance_id = call_center_instance_id  # type: str
        self.creation_time = creation_time  # type: long
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.owner = owner  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateCabInstanceResponseBodyInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner is not None:
            result['Owner'] = self.owner
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        return self


class CreateCabInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance = instance  # type: CreateCabInstanceResponseBodyInstance
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super(CreateCabInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = CreateCabInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateCabInstanceResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateCabInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateCabInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateCabInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateContactFlowRequest(TeaModel):
    def __init__(self, canvas=None, content=None, description=None, instance_id=None, name=None, type=None):
        self.canvas = canvas  # type: str
        self.content = content  # type: str
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateContactFlowRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.content is not None:
            result['Content'] = self.content
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class CreateContactFlowResponseBodyContactFlowPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateContactFlowResponseBodyContactFlowPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion(TeaModel):
    def __init__(self, canvas=None, contact_flow_version_description=None, contact_flow_version_id=None,
                 content=None, last_modified=None, last_modified_by=None, locked_by=None, status=None, version=None):
        self.canvas = canvas  # type: str
        self.contact_flow_version_description = contact_flow_version_description  # type: str
        self.contact_flow_version_id = contact_flow_version_id  # type: str
        self.content = content  # type: str
        self.last_modified = last_modified  # type: str
        self.last_modified_by = last_modified_by  # type: str
        self.locked_by = locked_by  # type: str
        self.status = status  # type: str
        self.version = version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.content is not None:
            result['Content'] = self.content
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        if self.locked_by is not None:
            result['LockedBy'] = self.locked_by
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        if m.get('LockedBy') is not None:
            self.locked_by = m.get('LockedBy')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class CreateContactFlowResponseBodyContactFlowVersions(TeaModel):
    def __init__(self, contact_flow_version=None):
        self.contact_flow_version = contact_flow_version  # type: list[CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion]

    def validate(self):
        if self.contact_flow_version:
            for k in self.contact_flow_version:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateContactFlowResponseBodyContactFlowVersions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ContactFlowVersion'] = []
        if self.contact_flow_version is not None:
            for k in self.contact_flow_version:
                result['ContactFlowVersion'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contact_flow_version = []
        if m.get('ContactFlowVersion') is not None:
            for k in m.get('ContactFlowVersion'):
                temp_model = CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion()
                self.contact_flow_version.append(temp_model.from_map(k))
        return self


class CreateContactFlowResponseBodyContactFlow(TeaModel):
    def __init__(self, applied_version=None, contact_flow_description=None, contact_flow_id=None,
                 contact_flow_name=None, instance_id=None, phone_numbers=None, type=None, versions=None):
        self.applied_version = applied_version  # type: str
        self.contact_flow_description = contact_flow_description  # type: str
        self.contact_flow_id = contact_flow_id  # type: str
        self.contact_flow_name = contact_flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.phone_numbers = phone_numbers  # type: CreateContactFlowResponseBodyContactFlowPhoneNumbers
        self.type = type  # type: str
        self.versions = versions  # type: CreateContactFlowResponseBodyContactFlowVersions

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.versions:
            self.versions.validate()

    def to_map(self):
        _map = super(CreateContactFlowResponseBodyContactFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.type is not None:
            result['Type'] = self.type
        if self.versions is not None:
            result['Versions'] = self.versions.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumbers') is not None:
            temp_model = CreateContactFlowResponseBodyContactFlowPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Versions') is not None:
            temp_model = CreateContactFlowResponseBodyContactFlowVersions()
            self.versions = temp_model.from_map(m['Versions'])
        return self


class CreateContactFlowResponseBody(TeaModel):
    def __init__(self, code=None, contact_flow=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.contact_flow = contact_flow  # type: CreateContactFlowResponseBodyContactFlow
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        _map = super(CreateContactFlowResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactFlow') is not None:
            temp_model = CreateContactFlowResponseBodyContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateContactFlowResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateContactFlowResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateContactFlowResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateContactFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateFaultRequest(TeaModel):
    def __init__(self, agent_file_path=None, agent_id=None, agent_oss_file_name=None, browser_version=None,
                 client_ip=None, client_port=None, connect_id=None, custom_file_path=None, custom_oss_file_name=None,
                 description=None, end_time=None, instance_id=None, microphone_equipment=None, microphone_list=None,
                 operating_system_version=None, service_ip=None, service_port=None, speaker_equipment=None, speaker_list=None,
                 start_time=None):
        self.agent_file_path = agent_file_path  # type: str
        self.agent_id = agent_id  # type: long
        self.agent_oss_file_name = agent_oss_file_name  # type: str
        self.browser_version = browser_version  # type: str
        self.client_ip = client_ip  # type: str
        self.client_port = client_port  # type: str
        self.connect_id = connect_id  # type: str
        self.custom_file_path = custom_file_path  # type: str
        self.custom_oss_file_name = custom_oss_file_name  # type: str
        self.description = description  # type: str
        self.end_time = end_time  # type: long
        self.instance_id = instance_id  # type: str
        self.microphone_equipment = microphone_equipment  # type: str
        self.microphone_list = microphone_list  # type: str
        self.operating_system_version = operating_system_version  # type: str
        self.service_ip = service_ip  # type: str
        self.service_port = service_port  # type: str
        self.speaker_equipment = speaker_equipment  # type: str
        self.speaker_list = speaker_list  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateFaultRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_file_path is not None:
            result['AgentFilePath'] = self.agent_file_path
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_oss_file_name is not None:
            result['AgentOssFileName'] = self.agent_oss_file_name
        if self.browser_version is not None:
            result['BrowserVersion'] = self.browser_version
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        if self.connect_id is not None:
            result['ConnectId'] = self.connect_id
        if self.custom_file_path is not None:
            result['CustomFilePath'] = self.custom_file_path
        if self.custom_oss_file_name is not None:
            result['CustomOssFileName'] = self.custom_oss_file_name
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.microphone_equipment is not None:
            result['MicrophoneEquipment'] = self.microphone_equipment
        if self.microphone_list is not None:
            result['MicrophoneList'] = self.microphone_list
        if self.operating_system_version is not None:
            result['OperatingSystemVersion'] = self.operating_system_version
        if self.service_ip is not None:
            result['ServiceIp'] = self.service_ip
        if self.service_port is not None:
            result['ServicePort'] = self.service_port
        if self.speaker_equipment is not None:
            result['SpeakerEquipment'] = self.speaker_equipment
        if self.speaker_list is not None:
            result['SpeakerList'] = self.speaker_list
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentFilePath') is not None:
            self.agent_file_path = m.get('AgentFilePath')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentOssFileName') is not None:
            self.agent_oss_file_name = m.get('AgentOssFileName')
        if m.get('BrowserVersion') is not None:
            self.browser_version = m.get('BrowserVersion')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        if m.get('ConnectId') is not None:
            self.connect_id = m.get('ConnectId')
        if m.get('CustomFilePath') is not None:
            self.custom_file_path = m.get('CustomFilePath')
        if m.get('CustomOssFileName') is not None:
            self.custom_oss_file_name = m.get('CustomOssFileName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MicrophoneEquipment') is not None:
            self.microphone_equipment = m.get('MicrophoneEquipment')
        if m.get('MicrophoneList') is not None:
            self.microphone_list = m.get('MicrophoneList')
        if m.get('OperatingSystemVersion') is not None:
            self.operating_system_version = m.get('OperatingSystemVersion')
        if m.get('ServiceIp') is not None:
            self.service_ip = m.get('ServiceIp')
        if m.get('ServicePort') is not None:
            self.service_port = m.get('ServicePort')
        if m.get('SpeakerEquipment') is not None:
            self.speaker_equipment = m.get('SpeakerEquipment')
        if m.get('SpeakerList') is not None:
            self.speaker_list = m.get('SpeakerList')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class CreateFaultResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateFaultResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateFaultResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateFaultResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateFaultResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateFaultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateInstanceRequest(TeaModel):
    def __init__(self, admin_ram_id=None, description=None, directory_id=None, domain_name=None, name=None,
                 phone_number=None, phone_numbers=None, storage_max_days=None, storage_max_size=None, user_object=None):
        self.admin_ram_id = admin_ram_id  # type: list[str]
        self.description = description  # type: str
        self.directory_id = directory_id  # type: str
        self.domain_name = domain_name  # type: str
        self.name = name  # type: str
        self.phone_number = phone_number  # type: str
        self.phone_numbers = phone_numbers  # type: list[str]
        self.storage_max_days = storage_max_days  # type: int
        self.storage_max_size = storage_max_size  # type: int
        self.user_object = user_object  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.admin_ram_id is not None:
            result['AdminRamId'] = self.admin_ram_id
        if self.description is not None:
            result['Description'] = self.description
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.name is not None:
            result['Name'] = self.name
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.user_object is not None:
            result['UserObject'] = self.user_object
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AdminRamId') is not None:
            self.admin_ram_id = m.get('AdminRamId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('UserObject') is not None:
            self.user_object = m.get('UserObject')
        return self


class CreateInstanceResponseBodyInstanceAdminUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstanceAdminUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class CreateInstanceResponseBodyInstanceAdminUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, ram_id=None, user_id=None):
        self.detail = detail  # type: CreateInstanceResponseBodyInstanceAdminUserDetail
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstanceAdminUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = CreateInstanceResponseBodyInstanceAdminUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class CreateInstanceResponseBodyInstanceAdmin(TeaModel):
    def __init__(self, user=None):
        self.user = user  # type: list[CreateInstanceResponseBodyInstanceAdminUser]

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstanceAdmin, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = CreateInstanceResponseBodyInstanceAdminUser()
                self.user.append(temp_model.from_map(k))
        return self


class CreateInstanceResponseBodyInstanceFailLoginNames(TeaModel):
    def __init__(self, fail_login_name=None):
        self.fail_login_name = fail_login_name  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstanceFailLoginNames, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_login_name is not None:
            result['FailLoginName'] = self.fail_login_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FailLoginName') is not None:
            self.fail_login_name = m.get('FailLoginName')
        return self


class CreateInstanceResponseBodyInstanceFailPhoneNumbers(TeaModel):
    def __init__(self, fail_phone_number=None):
        self.fail_phone_number = fail_phone_number  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstanceFailPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_phone_number is not None:
            result['FailPhoneNumber'] = self.fail_phone_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FailPhoneNumber') is not None:
            self.fail_phone_number = m.get('FailPhoneNumber')
        return self


class CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class CreateInstanceResponseBodyInstancePhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstancePhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class CreateInstanceResponseBodyInstanceSuccessLoginNames(TeaModel):
    def __init__(self, success_login_name=None):
        self.success_login_name = success_login_name  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstanceSuccessLoginNames, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success_login_name is not None:
            result['SuccessLoginName'] = self.success_login_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SuccessLoginName') is not None:
            self.success_login_name = m.get('SuccessLoginName')
        return self


class CreateInstanceResponseBodyInstanceSuccessPhoneNumbers(TeaModel):
    def __init__(self, success_phone_number=None):
        self.success_phone_number = success_phone_number  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstanceSuccessPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success_phone_number is not None:
            result['SuccessPhoneNumber'] = self.success_phone_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SuccessPhoneNumber') is not None:
            self.success_phone_number = m.get('SuccessPhoneNumber')
        return self


class CreateInstanceResponseBodyInstance(TeaModel):
    def __init__(self, admin=None, console_url=None, created_time=None, directory_id=None, domain_name=None,
                 fail_login_names=None, fail_phone_numbers=None, instance_description=None, instance_id=None, instance_name=None,
                 max_online_agents=None, owner=None, phone_numbers=None, status=None, storage_bucket=None, storage_max_days=None,
                 storage_max_size=None, success_login_names=None, success_phone_numbers=None, tenant_id=None):
        self.admin = admin  # type: CreateInstanceResponseBodyInstanceAdmin
        self.console_url = console_url  # type: str
        self.created_time = created_time  # type: long
        self.directory_id = directory_id  # type: str
        self.domain_name = domain_name  # type: str
        self.fail_login_names = fail_login_names  # type: CreateInstanceResponseBodyInstanceFailLoginNames
        self.fail_phone_numbers = fail_phone_numbers  # type: CreateInstanceResponseBodyInstanceFailPhoneNumbers
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_online_agents = max_online_agents  # type: int
        self.owner = owner  # type: str
        self.phone_numbers = phone_numbers  # type: CreateInstanceResponseBodyInstancePhoneNumbers
        self.status = status  # type: str
        self.storage_bucket = storage_bucket  # type: str
        self.storage_max_days = storage_max_days  # type: int
        self.storage_max_size = storage_max_size  # type: int
        self.success_login_names = success_login_names  # type: CreateInstanceResponseBodyInstanceSuccessLoginNames
        self.success_phone_numbers = success_phone_numbers  # type: CreateInstanceResponseBodyInstanceSuccessPhoneNumbers
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        if self.admin:
            self.admin.validate()
        if self.fail_login_names:
            self.fail_login_names.validate()
        if self.fail_phone_numbers:
            self.fail_phone_numbers.validate()
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.success_login_names:
            self.success_login_names.validate()
        if self.success_phone_numbers:
            self.success_phone_numbers.validate()

    def to_map(self):
        _map = super(CreateInstanceResponseBodyInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.admin is not None:
            result['Admin'] = self.admin.to_map()
        if self.console_url is not None:
            result['ConsoleUrl'] = self.console_url
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.fail_login_names is not None:
            result['FailLoginNames'] = self.fail_login_names.to_map()
        if self.fail_phone_numbers is not None:
            result['FailPhoneNumbers'] = self.fail_phone_numbers.to_map()
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_online_agents is not None:
            result['MaxOnlineAgents'] = self.max_online_agents
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.storage_bucket is not None:
            result['StorageBucket'] = self.storage_bucket
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.success_login_names is not None:
            result['SuccessLoginNames'] = self.success_login_names.to_map()
        if self.success_phone_numbers is not None:
            result['SuccessPhoneNumbers'] = self.success_phone_numbers.to_map()
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Admin') is not None:
            temp_model = CreateInstanceResponseBodyInstanceAdmin()
            self.admin = temp_model.from_map(m['Admin'])
        if m.get('ConsoleUrl') is not None:
            self.console_url = m.get('ConsoleUrl')
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('FailLoginNames') is not None:
            temp_model = CreateInstanceResponseBodyInstanceFailLoginNames()
            self.fail_login_names = temp_model.from_map(m['FailLoginNames'])
        if m.get('FailPhoneNumbers') is not None:
            temp_model = CreateInstanceResponseBodyInstanceFailPhoneNumbers()
            self.fail_phone_numbers = temp_model.from_map(m['FailPhoneNumbers'])
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxOnlineAgents') is not None:
            self.max_online_agents = m.get('MaxOnlineAgents')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('PhoneNumbers') is not None:
            temp_model = CreateInstanceResponseBodyInstancePhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StorageBucket') is not None:
            self.storage_bucket = m.get('StorageBucket')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('SuccessLoginNames') is not None:
            temp_model = CreateInstanceResponseBodyInstanceSuccessLoginNames()
            self.success_login_names = temp_model.from_map(m['SuccessLoginNames'])
        if m.get('SuccessPhoneNumbers') is not None:
            temp_model = CreateInstanceResponseBodyInstanceSuccessPhoneNumbers()
            self.success_phone_numbers = temp_model.from_map(m['SuccessPhoneNumbers'])
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class CreateInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance = instance  # type: CreateInstanceResponseBodyInstance
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super(CreateInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = CreateInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobGroupRequest(TeaModel):
    def __init__(self, calling_number=None, description=None, instance_id=None, name=None, scenario_id=None,
                 strategy_json=None):
        self.calling_number = calling_number  # type: list[str]
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.scenario_id = scenario_id  # type: str
        self.strategy_json = strategy_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class CreateJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, from_=None, to=None):
        self.from_ = from_  # type: str
        self.to = to  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.from_ is not None:
            result['From'] = self.from_
        if self.to is not None:
            result['To'] = self.to
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('To') is not None:
            self.to = m.get('To')
        return self


class CreateJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[CreateJobGroupResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, job_file_path=None, job_group_description=None,
                 job_group_id=None, job_group_name=None, scenario_id=None, strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.job_file_path = job_file_path  # type: str
        self.job_group_description = job_group_description  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_group_name = job_group_name  # type: str
        self.scenario_id = scenario_id  # type: str
        self.strategy = strategy  # type: CreateJobGroupResponseBodyJobGroupStrategy

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class CreateJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: CreateJobGroupResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateJobGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMediaRequest(TeaModel):
    def __init__(self, content=None, description=None, file_name=None, instance_id=None, name=None,
                 oss_file_name=None, oss_file_path=None, type=None, upload_result=None):
        self.content = content  # type: str
        self.description = description  # type: str
        self.file_name = file_name  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.oss_file_name = oss_file_name  # type: str
        self.oss_file_path = oss_file_path  # type: str
        self.type = type  # type: str
        self.upload_result = upload_result  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMediaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.description is not None:
            result['Description'] = self.description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.oss_file_path is not None:
            result['OssFilePath'] = self.oss_file_path
        if self.type is not None:
            result['Type'] = self.type
        if self.upload_result is not None:
            result['UploadResult'] = self.upload_result
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('OssFilePath') is not None:
            self.oss_file_path = m.get('OssFilePath')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UploadResult') is not None:
            self.upload_result = m.get('UploadResult')
        return self


class CreateMediaResponseBodyMediaUploadParam(TeaModel):
    def __init__(self, file_name=None, id=None, instance=None, name=None, oss_file_name=None, oss_file_path=None):
        self.file_name = file_name  # type: str
        self.id = id  # type: str
        self.instance = instance  # type: str
        self.name = name  # type: str
        self.oss_file_name = oss_file_name  # type: str
        self.oss_file_path = oss_file_path  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMediaResponseBodyMediaUploadParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.id is not None:
            result['Id'] = self.id
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.name is not None:
            result['Name'] = self.name
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.oss_file_path is not None:
            result['OssFilePath'] = self.oss_file_path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('OssFilePath') is not None:
            self.oss_file_path = m.get('OssFilePath')
        return self


class CreateMediaResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, media_upload_param=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.media_upload_param = media_upload_param  # type: CreateMediaResponseBodyMediaUploadParam
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.media_upload_param:
            self.media_upload_param.validate()

    def to_map(self):
        _map = super(CreateMediaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.media_upload_param is not None:
            result['MediaUploadParam'] = self.media_upload_param.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MediaUploadParam') is not None:
            temp_model = CreateMediaResponseBodyMediaUploadParam()
            self.media_upload_param = temp_model.from_map(m['MediaUploadParam'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMediaResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateMediaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMediaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateMediaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePredictiveJobGroupRequest(TeaModel):
    def __init__(self, description=None, instance_id=None, is_draft=None, job_file_path=None, jobs_json=None,
                 name=None, ratio=None, skill_group_id=None, strategy_json=None, timing_schedule=None):
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.is_draft = is_draft  # type: bool
        self.job_file_path = job_file_path  # type: str
        self.jobs_json = jobs_json  # type: list[str]
        self.name = name  # type: str
        self.ratio = ratio  # type: int
        self.skill_group_id = skill_group_id  # type: str
        self.strategy_json = strategy_json  # type: str
        self.timing_schedule = timing_schedule  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePredictiveJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_draft is not None:
            result['IsDraft'] = self.is_draft
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        if self.name is not None:
            result['Name'] = self.name
        if self.ratio is not None:
            result['Ratio'] = self.ratio
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.timing_schedule is not None:
            result['TimingSchedule'] = self.timing_schedule
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsDraft') is not None:
            self.is_draft = m.get('IsDraft')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Ratio') is not None:
            self.ratio = m.get('Ratio')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('TimingSchedule') is not None:
            self.timing_schedule = m.get('TimingSchedule')
        return self


class CreatePredictiveJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group_id=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group_id = job_group_id  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePredictiveJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreatePredictiveJobGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreatePredictiveJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreatePredictiveJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreatePredictiveJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScenarioRequest(TeaModel):
    def __init__(self, description=None, instance_id=None, name=None, strategy_json=None, surveys_json=None,
                 type=None):
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.strategy_json = strategy_json  # type: str
        self.surveys_json = surveys_json  # type: list[str]
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.surveys_json is not None:
            result['SurveysJson'] = self.surveys_json
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('SurveysJson') is not None:
            self.surveys_json = m.get('SurveysJson')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateScenarioResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioResponseBodyScenarioStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class CreateScenarioResponseBodyScenarioStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[CreateScenarioResponseBodyScenarioStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateScenarioResponseBodyScenarioStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateScenarioResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateScenarioResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(self, intent_id=None, node_id=None):
        self.intent_id = intent_id  # type: str
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioResponseBodyScenarioSurveysIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class CreateScenarioResponseBodyScenarioSurveys(TeaModel):
    def __init__(self, beebot_id=None, intents=None, role=None, round=None, survey_description=None, survey_id=None,
                 survey_name=None):
        self.beebot_id = beebot_id  # type: str
        self.intents = intents  # type: list[CreateScenarioResponseBodyScenarioSurveysIntents]
        self.role = role  # type: str
        self.round = round  # type: int
        self.survey_description = survey_description  # type: str
        self.survey_id = survey_id  # type: str
        self.survey_name = survey_name  # type: str

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateScenarioResponseBodyScenarioSurveys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.survey_description is not None:
            result['SurveyDescription'] = self.survey_description
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        if self.survey_name is not None:
            result['SurveyName'] = self.survey_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = CreateScenarioResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SurveyDescription') is not None:
            self.survey_description = m.get('SurveyDescription')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        if m.get('SurveyName') is not None:
            self.survey_name = m.get('SurveyName')
        return self


class CreateScenarioResponseBodyScenarioVariables(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioResponseBodyScenarioVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class CreateScenarioResponseBodyScenario(TeaModel):
    def __init__(self, is_template=None, scenario_description=None, scenario_id=None, scenario_name=None,
                 strategy=None, surveys=None, type=None, variables=None):
        self.is_template = is_template  # type: bool
        self.scenario_description = scenario_description  # type: str
        self.scenario_id = scenario_id  # type: str
        self.scenario_name = scenario_name  # type: str
        self.strategy = strategy  # type: CreateScenarioResponseBodyScenarioStrategy
        self.surveys = surveys  # type: list[CreateScenarioResponseBodyScenarioSurveys]
        self.type = type  # type: str
        self.variables = variables  # type: list[CreateScenarioResponseBodyScenarioVariables]

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateScenarioResponseBodyScenario, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.scenario_description is not None:
            result['ScenarioDescription'] = self.scenario_description
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.scenario_name is not None:
            result['ScenarioName'] = self.scenario_name
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('ScenarioDescription') is not None:
            self.scenario_description = m.get('ScenarioDescription')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScenarioName') is not None:
            self.scenario_name = m.get('ScenarioName')
        if m.get('Strategy') is not None:
            temp_model = CreateScenarioResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = CreateScenarioResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = CreateScenarioResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class CreateScenarioResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scenario=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scenario = scenario  # type: CreateScenarioResponseBodyScenario
        self.success = success  # type: bool

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        _map = super(CreateScenarioResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scenario') is not None:
            temp_model = CreateScenarioResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateScenarioResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateScenarioResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateScenarioResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScenarioFromTemplateRequest(TeaModel):
    def __init__(self, description=None, instance_id=None, name=None, template_id=None, variables=None):
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.template_id = template_id  # type: str
        self.variables = variables  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioFromTemplateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.variables is not None:
            result['Variables'] = self.variables
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('Variables') is not None:
            self.variables = m.get('Variables')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponseBodyScenarioStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[CreateScenarioFromTemplateResponseBodyScenarioStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponseBodyScenarioStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateScenarioFromTemplateResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(self, intent_id=None, node_id=None):
        self.intent_id = intent_id  # type: str
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponseBodyScenarioSurveysIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioSurveys(TeaModel):
    def __init__(self, beebot_id=None, intents=None, role=None, round=None, survey_description=None, survey_id=None,
                 survey_name=None):
        self.beebot_id = beebot_id  # type: str
        self.intents = intents  # type: list[CreateScenarioFromTemplateResponseBodyScenarioSurveysIntents]
        self.role = role  # type: str
        self.round = round  # type: int
        self.survey_description = survey_description  # type: str
        self.survey_id = survey_id  # type: str
        self.survey_name = survey_name  # type: str

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponseBodyScenarioSurveys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.survey_description is not None:
            result['SurveyDescription'] = self.survey_description
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        if self.survey_name is not None:
            result['SurveyName'] = self.survey_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SurveyDescription') is not None:
            self.survey_description = m.get('SurveyDescription')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        if m.get('SurveyName') is not None:
            self.survey_name = m.get('SurveyName')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioVariables(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponseBodyScenarioVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class CreateScenarioFromTemplateResponseBodyScenario(TeaModel):
    def __init__(self, is_template=None, scenario_description=None, scenario_id=None, scenario_name=None,
                 strategy=None, surveys=None, type=None, variables=None):
        self.is_template = is_template  # type: bool
        self.scenario_description = scenario_description  # type: str
        self.scenario_id = scenario_id  # type: str
        self.scenario_name = scenario_name  # type: str
        self.strategy = strategy  # type: CreateScenarioFromTemplateResponseBodyScenarioStrategy
        self.surveys = surveys  # type: list[CreateScenarioFromTemplateResponseBodyScenarioSurveys]
        self.type = type  # type: str
        self.variables = variables  # type: list[CreateScenarioFromTemplateResponseBodyScenarioVariables]

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponseBodyScenario, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.scenario_description is not None:
            result['ScenarioDescription'] = self.scenario_description
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.scenario_name is not None:
            result['ScenarioName'] = self.scenario_name
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('ScenarioDescription') is not None:
            self.scenario_description = m.get('ScenarioDescription')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScenarioName') is not None:
            self.scenario_name = m.get('ScenarioName')
        if m.get('Strategy') is not None:
            temp_model = CreateScenarioFromTemplateResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class CreateScenarioFromTemplateResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scenario=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scenario = scenario  # type: CreateScenarioFromTemplateResponseBodyScenario
        self.success = success  # type: bool

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scenario') is not None:
            temp_model = CreateScenarioFromTemplateResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateScenarioFromTemplateResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateScenarioFromTemplateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateScenarioFromTemplateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateScenarioFromTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSkillGroupRequest(TeaModel):
    def __init__(self, allow_private_outbound_number=None, description=None, instance_id=None, name=None,
                 outbound_phone_number_id=None, routing_strategy=None, skill_level=None, user_id=None):
        self.allow_private_outbound_number = allow_private_outbound_number  # type: bool
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.outbound_phone_number_id = outbound_phone_number_id  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.skill_level = skill_level  # type: list[int]
        self.user_id = user_id  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSkillGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_private_outbound_number is not None:
            result['AllowPrivateOutboundNumber'] = self.allow_private_outbound_number
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.outbound_phone_number_id is not None:
            result['OutboundPhoneNumberId'] = self.outbound_phone_number_id
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowPrivateOutboundNumber') is not None:
            self.allow_private_outbound_number = m.get('AllowPrivateOutboundNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OutboundPhoneNumberId') is not None:
            self.outbound_phone_number_id = m.get('OutboundPhoneNumberId')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class CreateSkillGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, skill_group_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSkillGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateSkillGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateSkillGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSkillGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSurveyRequest(TeaModel):
    def __init__(self, corpora=None, description=None, flow_json=None, global_questions=None, instance_id=None,
                 name=None, role=None, round=None, scenario_id=None, speech_optimization_param=None):
        self.corpora = corpora  # type: str
        self.description = description  # type: str
        self.flow_json = flow_json  # type: str
        self.global_questions = global_questions  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int
        self.scenario_id = scenario_id  # type: str
        self.speech_optimization_param = speech_optimization_param  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSurveyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.description is not None:
            result['Description'] = self.description
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        return self


class CreateSurveyResponseBodySurveyAsrCustomModel(TeaModel):
    def __init__(self, corpora=None, custom_model_status=None):
        self.corpora = corpora  # type: str
        self.custom_model_status = custom_model_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSurveyResponseBodySurveyAsrCustomModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        return self


class CreateSurveyResponseBodySurveyFlow(TeaModel):
    def __init__(self, flow_id=None, flow_json=None, is_published=None):
        self.flow_id = flow_id  # type: str
        self.flow_json = flow_json  # type: str
        self.is_published = is_published  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSurveyResponseBodySurveyFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        return self


class CreateSurveyResponseBodySurvey(TeaModel):
    def __init__(self, asr_custom_model=None, description=None, flow=None, global_questions=None, hot_words=None,
                 id=None, name=None, role=None, round=None, scenario_uuid=None, speech_optimization_param=None):
        self.asr_custom_model = asr_custom_model  # type: CreateSurveyResponseBodySurveyAsrCustomModel
        self.description = description  # type: str
        self.flow = flow  # type: CreateSurveyResponseBodySurveyFlow
        self.global_questions = global_questions  # type: str
        self.hot_words = hot_words  # type: str
        self.id = id  # type: str
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int
        self.scenario_uuid = scenario_uuid  # type: str
        self.speech_optimization_param = speech_optimization_param  # type: str

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        _map = super(CreateSurveyResponseBodySurvey, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrCustomModel') is not None:
            temp_model = CreateSurveyResponseBodySurveyAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Flow') is not None:
            temp_model = CreateSurveyResponseBodySurveyFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        return self


class CreateSurveyResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, survey=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.survey = survey  # type: CreateSurveyResponseBodySurvey

    def validate(self):
        if self.survey:
            self.survey.validate()

    def to_map(self):
        _map = super(CreateSurveyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.survey is not None:
            result['Survey'] = self.survey.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Survey') is not None:
            temp_model = CreateSurveyResponseBodySurvey()
            self.survey = temp_model.from_map(m['Survey'])
        return self


class CreateSurveyResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateSurveyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSurveyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateUserRequest(TeaModel):
    def __init__(self, display_name=None, email=None, instance_id=None, login_name=None, phone=None,
                 private_outbound_number_id=None, role_id=None, skill_group_id=None, skill_level=None):
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str
        self.private_outbound_number_id = private_outbound_number_id  # type: str
        self.role_id = role_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: list[str]
        self.skill_level = skill_level  # type: list[int]

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        return self


class CreateUserResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, user_id=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class CreateUserResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateVoiceAppraiseRequest(TeaModel):
    def __init__(self, contact_flow_version_id=None, content=None, instance_id=None, is_appraise=None):
        self.contact_flow_version_id = contact_flow_version_id  # type: str
        self.content = content  # type: str
        self.instance_id = instance_id  # type: str
        self.is_appraise = is_appraise  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateVoiceAppraiseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.content is not None:
            result['Content'] = self.content
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_appraise is not None:
            result['IsAppraise'] = self.is_appraise
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsAppraise') is not None:
            self.is_appraise = m.get('IsAppraise')
        return self


class CreateVoiceAppraiseResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateVoiceAppraiseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateVoiceAppraiseResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: CreateVoiceAppraiseResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateVoiceAppraiseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateVoiceAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInstanceRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteInstanceResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DeleteInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteJobGroupRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DeleteJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteJobGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DeleteJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMediaRequest(TeaModel):
    def __init__(self, instance_id=None, name=None):
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMediaRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class DeleteMediaResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteMediaResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMediaResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DeleteMediaResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteMediaResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteMediaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeletePhoneTagsRequest(TeaModel):
    def __init__(self, instance_id=None, phone_number_list=None):
        self.instance_id = instance_id  # type: str
        self.phone_number_list = phone_number_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeletePhoneTagsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_list is not None:
            result['PhoneNumberList'] = self.phone_number_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberList') is not None:
            self.phone_number_list = m.get('PhoneNumberList')
        return self


class DeletePhoneTagsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeletePhoneTagsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeletePhoneTagsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DeletePhoneTagsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeletePhoneTagsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeletePhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSkillGroupRequest(TeaModel):
    def __init__(self, instance_id=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSkillGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class DeleteSkillGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSkillGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteSkillGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DeleteSkillGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSkillGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSurveyRequest(TeaModel):
    def __init__(self, instance_id=None, scenario_id=None, survey_id=None):
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.survey_id = survey_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSurveyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class DeleteSurveyResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSurveyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteSurveyResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DeleteSurveyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSurveyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DialExRequest(TeaModel):
    def __init__(self, answer_mode=None, callee=None, caller=None, instance_id=None, provider=None, rout_point=None):
        self.answer_mode = answer_mode  # type: int
        self.callee = callee  # type: str
        self.caller = caller  # type: str
        self.instance_id = instance_id  # type: str
        self.provider = provider  # type: str
        self.rout_point = rout_point  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DialExRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_mode is not None:
            result['AnswerMode'] = self.answer_mode
        if self.callee is not None:
            result['Callee'] = self.callee
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.provider is not None:
            result['Provider'] = self.provider
        if self.rout_point is not None:
            result['RoutPoint'] = self.rout_point
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerMode') is not None:
            self.answer_mode = m.get('AnswerMode')
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Provider') is not None:
            self.provider = m.get('Provider')
        if m.get('RoutPoint') is not None:
            self.rout_point = m.get('RoutPoint')
        return self


class DialExResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, status_code=None,
                 status_desc=None, success=None, task_id=None, time_stamp=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status_code = status_code  # type: str
        self.status_desc = status_desc  # type: str
        self.success = success  # type: bool
        self.task_id = task_id  # type: str
        self.time_stamp = time_stamp  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DialExResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.status_desc is not None:
            result['StatusDesc'] = self.status_desc
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('StatusDesc') is not None:
            self.status_desc = m.get('StatusDesc')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        return self


class DialExResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DialExResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DialExResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DialExResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DialogueRequest(TeaModel):
    def __init__(self, action_key=None, action_params=None, call_id=None, call_type=None, called_number=None,
                 calling_number=None, instance_id=None, scenario_id=None, task_id=None, utterance=None):
        self.action_key = action_key  # type: str
        self.action_params = action_params  # type: str
        self.call_id = call_id  # type: str
        self.call_type = call_type  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.task_id = task_id  # type: str
        self.utterance = utterance  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DialogueRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_key is not None:
            result['ActionKey'] = self.action_key
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.call_type is not None:
            result['CallType'] = self.call_type
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.utterance is not None:
            result['Utterance'] = self.utterance
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActionKey') is not None:
            self.action_key = m.get('ActionKey')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallType') is not None:
            self.call_type = m.get('CallType')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Utterance') is not None:
            self.utterance = m.get('Utterance')
        return self


class DialogueResponseBodyFeedback(TeaModel):
    def __init__(self, action=None, action_params=None, content=None, interruptible=None):
        self.action = action  # type: str
        self.action_params = action_params  # type: str
        self.content = content  # type: str
        self.interruptible = interruptible  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DialogueResponseBodyFeedback, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.content is not None:
            result['Content'] = self.content
        if self.interruptible is not None:
            result['Interruptible'] = self.interruptible
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Interruptible') is not None:
            self.interruptible = m.get('Interruptible')
        return self


class DialogueResponseBody(TeaModel):
    def __init__(self, code=None, feedback=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.feedback = feedback  # type: DialogueResponseBodyFeedback
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.feedback:
            self.feedback.validate()

    def to_map(self):
        _map = super(DialogueResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.feedback is not None:
            result['Feedback'] = self.feedback.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Feedback') is not None:
            temp_model = DialogueResponseBodyFeedback()
            self.feedback = temp_model.from_map(m['Feedback'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DialogueResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DialogueResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DialogueResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DialogueResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DisableTrunkProvidersRequest(TeaModel):
    def __init__(self, provider_name=None):
        self.provider_name = provider_name  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DisableTrunkProvidersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        return self


class DisableTrunkProvidersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DisableTrunkProvidersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DisableTrunkProvidersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DisableTrunkProvidersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DisableTrunkProvidersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DisableTrunkProvidersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadAllTypeRecordingRequest(TeaModel):
    def __init__(self, channel=None, contact_id=None, instance_id=None):
        self.channel = channel  # type: str
        self.contact_id = contact_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadAllTypeRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam(TeaModel):
    def __init__(self, file_name=None, signature_url=None):
        self.file_name = file_name  # type: str
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadAllTypeRecordingResponseBodyMediaDownloadParamList(TeaModel):
    def __init__(self, media_download_param=None):
        self.media_download_param = media_download_param  # type: list[DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam]

    def validate(self):
        if self.media_download_param:
            for k in self.media_download_param:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DownloadAllTypeRecordingResponseBodyMediaDownloadParamList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['MediaDownloadParam'] = []
        if self.media_download_param is not None:
            for k in self.media_download_param:
                result['MediaDownloadParam'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.media_download_param = []
        if m.get('MediaDownloadParam') is not None:
            for k in m.get('MediaDownloadParam'):
                temp_model = DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam()
                self.media_download_param.append(temp_model.from_map(k))
        return self


class DownloadAllTypeRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, media_download_param_list=None, message=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.media_download_param_list = media_download_param_list  # type: DownloadAllTypeRecordingResponseBodyMediaDownloadParamList
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.media_download_param_list:
            self.media_download_param_list.validate()

    def to_map(self):
        _map = super(DownloadAllTypeRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.media_download_param_list is not None:
            result['MediaDownloadParamList'] = self.media_download_param_list.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MediaDownloadParamList') is not None:
            temp_model = DownloadAllTypeRecordingResponseBodyMediaDownloadParamList()
            self.media_download_param_list = temp_model.from_map(m['MediaDownloadParamList'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadAllTypeRecordingResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DownloadAllTypeRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadAllTypeRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadAllTypeRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadCabRecordingRequest(TeaModel):
    def __init__(self, instance_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadCabRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DownloadCabRecordingResponseBodyMediaDownloadParam(TeaModel):
    def __init__(self, file_name=None, signature_url=None):
        self.file_name = file_name  # type: str
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadCabRecordingResponseBodyMediaDownloadParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadCabRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, media_download_param=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.media_download_param = media_download_param  # type: DownloadCabRecordingResponseBodyMediaDownloadParam
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.media_download_param:
            self.media_download_param.validate()

    def to_map(self):
        _map = super(DownloadCabRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.media_download_param is not None:
            result['MediaDownloadParam'] = self.media_download_param.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MediaDownloadParam') is not None:
            temp_model = DownloadCabRecordingResponseBodyMediaDownloadParam()
            self.media_download_param = temp_model.from_map(m['MediaDownloadParam'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadCabRecordingResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DownloadCabRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadCabRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadCabRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadOriginalStatisticsReportRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadOriginalStatisticsReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DownloadOriginalStatisticsReportResponseBodyDownloadParams(TeaModel):
    def __init__(self, signature_url=None):
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadOriginalStatisticsReportResponseBodyDownloadParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadOriginalStatisticsReportResponseBody(TeaModel):
    def __init__(self, code=None, download_params=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.download_params = download_params  # type: DownloadOriginalStatisticsReportResponseBodyDownloadParams
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super(DownloadOriginalStatisticsReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadOriginalStatisticsReportResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadOriginalStatisticsReportResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DownloadOriginalStatisticsReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadOriginalStatisticsReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadOriginalStatisticsReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadRecordingRequest(TeaModel):
    def __init__(self, channel=None, file_name=None, instance_id=None):
        self.channel = channel  # type: str
        self.file_name = file_name  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DownloadRecordingResponseBodyMediaDownloadParam(TeaModel):
    def __init__(self, file_name=None, signature_url=None):
        self.file_name = file_name  # type: str
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadRecordingResponseBodyMediaDownloadParam, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, media_download_param=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.media_download_param = media_download_param  # type: DownloadRecordingResponseBodyMediaDownloadParam
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.media_download_param:
            self.media_download_param.validate()

    def to_map(self):
        _map = super(DownloadRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.media_download_param is not None:
            result['MediaDownloadParam'] = self.media_download_param.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MediaDownloadParam') is not None:
            temp_model = DownloadRecordingResponseBodyMediaDownloadParam()
            self.media_download_param = temp_model.from_map(m['MediaDownloadParam'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadRecordingResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DownloadRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadUnreachableContactsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadUnreachableContactsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DownloadUnreachableContactsResponseBodyDownloadParams(TeaModel):
    def __init__(self, signature_url=None):
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadUnreachableContactsResponseBodyDownloadParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadUnreachableContactsResponseBody(TeaModel):
    def __init__(self, code=None, download_params=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.download_params = download_params  # type: DownloadUnreachableContactsResponseBodyDownloadParams
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super(DownloadUnreachableContactsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadUnreachableContactsResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadUnreachableContactsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: DownloadUnreachableContactsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadUnreachableContactsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadUnreachableContactsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FindUsersRequest(TeaModel):
    def __init__(self, criteria=None, instance_id=None, page_number=None, page_size=None):
        self.criteria = criteria  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FindUsersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class FindUsersResponseBodyUsersListUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersListUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class FindUsersResponseBodyUsersListUserRolesRole(TeaModel):
    def __init__(self, instance_id=None, role_description=None, role_id=None, role_name=None):
        self.instance_id = instance_id  # type: str
        self.role_description = role_description  # type: str
        self.role_id = role_id  # type: str
        self.role_name = role_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersListUserRolesRole, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        return self


class FindUsersResponseBodyUsersListUserRoles(TeaModel):
    def __init__(self, role=None):
        self.role = role  # type: list[FindUsersResponseBodyUsersListUserRolesRole]

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersListUserRoles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = FindUsersResponseBodyUsersListUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(self, instance_id=None, skill_group_description=None, skill_group_id=None, skill_group_name=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel(TeaModel):
    def __init__(self, level=None, skill=None, skill_level_id=None):
        self.level = level  # type: int
        self.skill = skill  # type: FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill
        self.skill_level_id = skill_level_id  # type: str

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Skill') is not None:
            temp_model = FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        return self


class FindUsersResponseBodyUsersListUserSkillLevels(TeaModel):
    def __init__(self, skill_level=None):
        self.skill_level = skill_level  # type: list[FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel]

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersListUserSkillLevels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class FindUsersResponseBodyUsersListUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, private_outbound_number_id=None, ram_id=None, roles=None,
                 skill_levels=None, user_id=None):
        self.detail = detail  # type: FindUsersResponseBodyUsersListUserDetail
        self.instance_id = instance_id  # type: str
        self.private_outbound_number_id = private_outbound_number_id  # type: str
        self.ram_id = ram_id  # type: str
        self.roles = roles  # type: FindUsersResponseBodyUsersListUserRoles
        self.skill_levels = skill_levels  # type: FindUsersResponseBodyUsersListUserSkillLevels
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()
        if self.roles:
            self.roles.validate()
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersListUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = FindUsersResponseBodyUsersListUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Roles') is not None:
            temp_model = FindUsersResponseBodyUsersListUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('SkillLevels') is not None:
            temp_model = FindUsersResponseBodyUsersListUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class FindUsersResponseBodyUsersList(TeaModel):
    def __init__(self, user=None):
        self.user = user  # type: list[FindUsersResponseBodyUsersListUser]

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FindUsersResponseBodyUsersList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = FindUsersResponseBodyUsersListUser()
                self.user.append(temp_model.from_map(k))
        return self


class FindUsersResponseBodyUsers(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: FindUsersResponseBodyUsersList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(FindUsersResponseBodyUsers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = FindUsersResponseBodyUsersList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class FindUsersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, users=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.users = users  # type: FindUsersResponseBodyUsers

    def validate(self):
        if self.users:
            self.users.validate()

    def to_map(self):
        _map = super(FindUsersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.users is not None:
            result['Users'] = self.users.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Users') is not None:
            temp_model = FindUsersResponseBodyUsers()
            self.users = temp_model.from_map(m['Users'])
        return self


class FindUsersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: FindUsersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FindUsersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = FindUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GenerateAgentStatisticReportRequest(TeaModel):
    def __init__(self, agent_id=None, end_date=None, instance_id=None, page_number=None, page_size=None,
                 start_date=None):
        self.agent_id = agent_id  # type: str
        self.end_date = end_date  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GenerateAgentStatisticReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound(TeaModel):
    def __init__(self, average_hold_time=None, average_ring_time=None, average_talk_time=None,
                 average_work_time=None, calls_handled=None, calls_offered=None, handle_rate=None, max_hold_time=None,
                 max_ring_time=None, max_talk_time=None, max_work_time=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_hold_time=None, total_ring_time=None,
                 total_talk_time=None, total_work_time=None):
        self.average_hold_time = average_hold_time  # type: long
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_hold_time = max_hold_time  # type: long
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_hold_time = total_hold_time  # type: long
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_hold_time=None, average_talk_time=None,
                 average_work_time=None, calls_answered=None, calls_dialed=None, max_dialing_time=None, max_hold_time=None,
                 max_talk_time=None, max_work_time=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, total_dialing_time=None, total_hold_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_hold_time = average_hold_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_hold_time = max_hold_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_hold_time = total_hold_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall(TeaModel):
    def __init__(self, average_hold_time=None, average_talk_time=None, average_work_time=None, max_hold_time=None,
                 max_talk_time=None, max_work_time=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, total_calls=None, total_hold_time=None, total_talk_time=None, total_work_time=None):
        self.average_hold_time = average_hold_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_hold_time = max_hold_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_calls = total_calls  # type: long
        self.total_hold_time = total_hold_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, average_ready_time=None, inbound=None, instance_id=None,
                 login_name=None, max_ready_time=None, occupancy_rate=None, outbound=None, overall=None, record_date=None,
                 skill_group_ids=None, skill_group_names=None, total_break_time=None, total_logged_in_time=None,
                 total_ready_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.average_ready_time = average_ready_time  # type: long
        self.inbound = inbound  # type: GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.max_ready_time = max_ready_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.outbound = outbound  # type: GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound
        self.overall = overall  # type: GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall
        self.record_date = record_date  # type: str
        self.skill_group_ids = skill_group_ids  # type: str
        self.skill_group_names = skill_group_names  # type: str
        self.total_break_time = total_break_time  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.record_date is not None:
            result['RecordDate'] = self.record_date
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('Inbound') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('Outbound') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('RecordDate') is not None:
            self.record_date = m.get('RecordDate')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        return self


class GenerateAgentStatisticReportResponseBodyDataListList(TeaModel):
    def __init__(self, generate_agent_statistic=None):
        self.generate_agent_statistic = generate_agent_statistic  # type: list[GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic]

    def validate(self):
        if self.generate_agent_statistic:
            for k in self.generate_agent_statistic:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponseBodyDataListList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['GenerateAgentStatistic'] = []
        if self.generate_agent_statistic is not None:
            for k in self.generate_agent_statistic:
                result['GenerateAgentStatistic'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.generate_agent_statistic = []
        if m.get('GenerateAgentStatistic') is not None:
            for k in m.get('GenerateAgentStatistic'):
                temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic()
                self.generate_agent_statistic.append(temp_model.from_map(k))
        return self


class GenerateAgentStatisticReportResponseBodyDataList(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: GenerateAgentStatisticReportResponseBodyDataListList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GenerateAgentStatisticReportResponseBody(TeaModel):
    def __init__(self, code=None, data_list=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data_list = data_list  # type: GenerateAgentStatisticReportResponseBodyDataList
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data_list:
            self.data_list.validate()

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data_list is not None:
            result['DataList'] = self.data_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DataList') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataList()
            self.data_list = temp_model.from_map(m['DataList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GenerateAgentStatisticReportResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GenerateAgentStatisticReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GenerateAgentStatisticReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GenerateAgentStatisticReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAgentDataRequest(TeaModel):
    def __init__(self, end_day=None, instance_id=None, page_number=None, page_size=None, start_day=None,
                 user_id=None):
        self.end_day = end_day  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_day = start_day  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAgentDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_day is not None:
            result['EndDay'] = self.end_day
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_day is not None:
            result['StartDay'] = self.start_day
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndDay') is not None:
            self.end_day = m.get('EndDay')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartDay') is not None:
            self.start_day = m.get('StartDay')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetAgentDataResponseBodyDataListListInbound(TeaModel):
    def __init__(self, average_hold_time=None, average_ring_time=None, average_talk_time=None,
                 average_work_time=None, calls_handled=None, calls_offered=None, handle_rate=None, max_hold_time=None,
                 max_ring_time=None, max_talk_time=None, max_work_time=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_hold_time=None, total_ring_time=None,
                 total_talk_time=None, total_work_time=None):
        self.average_hold_time = average_hold_time  # type: long
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_hold_time = max_hold_time  # type: long
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_hold_time = total_hold_time  # type: long
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAgentDataResponseBodyDataListListInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetAgentDataResponseBodyDataListListOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_hold_time=None, average_talk_time=None,
                 average_work_time=None, calls_answered=None, calls_dialed=None, max_dialing_time=None, max_hold_time=None,
                 max_talk_time=None, max_work_time=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, total_dialing_time=None, total_hold_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_hold_time = average_hold_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_hold_time = max_hold_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_hold_time = total_hold_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAgentDataResponseBodyDataListListOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetAgentDataResponseBodyDataListListOverall(TeaModel):
    def __init__(self, average_hold_time=None, average_talk_time=None, average_work_time=None, max_hold_time=None,
                 max_talk_time=None, max_work_time=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, total_calls=None, total_hold_time=None, total_talk_time=None, total_work_time=None):
        self.average_hold_time = average_hold_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_hold_time = max_hold_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_calls = total_calls  # type: long
        self.total_hold_time = total_hold_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAgentDataResponseBodyDataListListOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetAgentDataResponseBodyDataListList(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, average_ready_time=None, inbound=None, instance_id=None,
                 login_name=None, max_ready_time=None, occupancy_rate=None, outbound=None, overall=None, record_date=None,
                 skill_group_ids=None, skill_group_names=None, total_break_time=None, total_logged_in_time=None,
                 total_ready_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.average_ready_time = average_ready_time  # type: long
        self.inbound = inbound  # type: GetAgentDataResponseBodyDataListListInbound
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.max_ready_time = max_ready_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.outbound = outbound  # type: GetAgentDataResponseBodyDataListListOutbound
        self.overall = overall  # type: GetAgentDataResponseBodyDataListListOverall
        self.record_date = record_date  # type: str
        self.skill_group_ids = skill_group_ids  # type: str
        self.skill_group_names = skill_group_names  # type: str
        self.total_break_time = total_break_time  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(GetAgentDataResponseBodyDataListList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.record_date is not None:
            result['RecordDate'] = self.record_date
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('Inbound') is not None:
            temp_model = GetAgentDataResponseBodyDataListListInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('Outbound') is not None:
            temp_model = GetAgentDataResponseBodyDataListListOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = GetAgentDataResponseBodyDataListListOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('RecordDate') is not None:
            self.record_date = m.get('RecordDate')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        return self


class GetAgentDataResponseBodyDataList(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[GetAgentDataResponseBodyDataListList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetAgentDataResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetAgentDataResponseBodyDataListList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetAgentDataResponseBody(TeaModel):
    def __init__(self, code=None, data_list=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data_list = data_list  # type: GetAgentDataResponseBodyDataList
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data_list:
            self.data_list.validate()

    def to_map(self):
        _map = super(GetAgentDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data_list is not None:
            result['DataList'] = self.data_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DataList') is not None:
            temp_model = GetAgentDataResponseBodyDataList()
            self.data_list = temp_model.from_map(m['DataList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAgentDataResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetAgentDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAgentDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetAgentDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCallMeasureSummaryReportRequest(TeaModel):
    def __init__(self, day=None, interval_type=None, month=None, page_number=None, page_size=None, year=None):
        self.day = day  # type: int
        self.interval_type = interval_type  # type: str
        self.month = month  # type: int
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.year = year  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCallMeasureSummaryReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day is not None:
            result['Day'] = self.day
        if self.interval_type is not None:
            result['IntervalType'] = self.interval_type
        if self.month is not None:
            result['Month'] = self.month
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.year is not None:
            result['Year'] = self.year
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('IntervalType') is not None:
            self.interval_type = m.get('IntervalType')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        return self


class GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport(TeaModel):
    def __init__(self, day=None, inbound_count=None, inbound_duration_by_minute=None, month=None, number=None,
                 outbound_count=None, outbound_duration_by_minute=None, year=None):
        self.day = day  # type: int
        self.inbound_count = inbound_count  # type: long
        self.inbound_duration_by_minute = inbound_duration_by_minute  # type: long
        self.month = month  # type: int
        self.number = number  # type: str
        self.outbound_count = outbound_count  # type: long
        self.outbound_duration_by_minute = outbound_duration_by_minute  # type: long
        self.year = year  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day is not None:
            result['Day'] = self.day
        if self.inbound_count is not None:
            result['InboundCount'] = self.inbound_count
        if self.inbound_duration_by_minute is not None:
            result['InboundDurationByMinute'] = self.inbound_duration_by_minute
        if self.month is not None:
            result['Month'] = self.month
        if self.number is not None:
            result['Number'] = self.number
        if self.outbound_count is not None:
            result['OutboundCount'] = self.outbound_count
        if self.outbound_duration_by_minute is not None:
            result['OutboundDurationByMinute'] = self.outbound_duration_by_minute
        if self.year is not None:
            result['Year'] = self.year
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('InboundCount') is not None:
            self.inbound_count = m.get('InboundCount')
        if m.get('InboundDurationByMinute') is not None:
            self.inbound_duration_by_minute = m.get('InboundDurationByMinute')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('OutboundCount') is not None:
            self.outbound_count = m.get('OutboundCount')
        if m.get('OutboundDurationByMinute') is not None:
            self.outbound_duration_by_minute = m.get('OutboundDurationByMinute')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        return self


class GetCallMeasureSummaryReportResponseBodyNumberReportsList(TeaModel):
    def __init__(self, number_report=None):
        self.number_report = number_report  # type: list[GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport]

    def validate(self):
        if self.number_report:
            for k in self.number_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetCallMeasureSummaryReportResponseBodyNumberReportsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['NumberReport'] = []
        if self.number_report is not None:
            for k in self.number_report:
                result['NumberReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.number_report = []
        if m.get('NumberReport') is not None:
            for k in m.get('NumberReport'):
                temp_model = GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport()
                self.number_report.append(temp_model.from_map(k))
        return self


class GetCallMeasureSummaryReportResponseBodyNumberReports(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: GetCallMeasureSummaryReportResponseBodyNumberReportsList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(GetCallMeasureSummaryReportResponseBodyNumberReports, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBodyNumberReportsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetCallMeasureSummaryReportResponseBodySummaryReport(TeaModel):
    def __init__(self, day=None, inbound_count=None, inbound_duration_by_minute=None, month=None,
                 outbound_count=None, outbound_duration_by_minute=None, year=None):
        self.day = day  # type: int
        self.inbound_count = inbound_count  # type: long
        self.inbound_duration_by_minute = inbound_duration_by_minute  # type: long
        self.month = month  # type: int
        self.outbound_count = outbound_count  # type: long
        self.outbound_duration_by_minute = outbound_duration_by_minute  # type: long
        self.year = year  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCallMeasureSummaryReportResponseBodySummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day is not None:
            result['Day'] = self.day
        if self.inbound_count is not None:
            result['InboundCount'] = self.inbound_count
        if self.inbound_duration_by_minute is not None:
            result['InboundDurationByMinute'] = self.inbound_duration_by_minute
        if self.month is not None:
            result['Month'] = self.month
        if self.outbound_count is not None:
            result['OutboundCount'] = self.outbound_count
        if self.outbound_duration_by_minute is not None:
            result['OutboundDurationByMinute'] = self.outbound_duration_by_minute
        if self.year is not None:
            result['Year'] = self.year
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('InboundCount') is not None:
            self.inbound_count = m.get('InboundCount')
        if m.get('InboundDurationByMinute') is not None:
            self.inbound_duration_by_minute = m.get('InboundDurationByMinute')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        if m.get('OutboundCount') is not None:
            self.outbound_count = m.get('OutboundCount')
        if m.get('OutboundDurationByMinute') is not None:
            self.outbound_duration_by_minute = m.get('OutboundDurationByMinute')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        return self


class GetCallMeasureSummaryReportResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, number_reports=None, request_id=None,
                 success=None, summary_report=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.number_reports = number_reports  # type: GetCallMeasureSummaryReportResponseBodyNumberReports
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.summary_report = summary_report  # type: GetCallMeasureSummaryReportResponseBodySummaryReport

    def validate(self):
        if self.number_reports:
            self.number_reports.validate()
        if self.summary_report:
            self.summary_report.validate()

    def to_map(self):
        _map = super(GetCallMeasureSummaryReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.number_reports is not None:
            result['NumberReports'] = self.number_reports.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.summary_report is not None:
            result['SummaryReport'] = self.summary_report.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NumberReports') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBodyNumberReports()
            self.number_reports = temp_model.from_map(m['NumberReports'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('SummaryReport') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBodySummaryReport()
            self.summary_report = temp_model.from_map(m['SummaryReport'])
        return self


class GetCallMeasureSummaryReportResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetCallMeasureSummaryReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetCallMeasureSummaryReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConfigRequest(TeaModel):
    def __init__(self, instance_id=None, name=None, object_id=None, object_type=None):
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.object_id = object_id  # type: str
        self.object_type = object_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.object_id is not None:
            result['ObjectId'] = self.object_id
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ObjectId') is not None:
            self.object_id = m.get('ObjectId')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        return self


class GetConfigResponseBodyConfigItem(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConfigResponseBodyConfigItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetConfigResponseBody(TeaModel):
    def __init__(self, code=None, config_item=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.config_item = config_item  # type: GetConfigResponseBodyConfigItem
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.config_item:
            self.config_item.validate()

    def to_map(self):
        _map = super(GetConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.config_item is not None:
            result['ConfigItem'] = self.config_item.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConfigItem') is not None:
            temp_model = GetConfigResponseBodyConfigItem()
            self.config_item = temp_model.from_map(m['ConfigItem'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConfigResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetContactInfoByOutboundTaskIdRequest(TeaModel):
    def __init__(self, instance_id=None, outbound_task_id=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.outbound_task_id = outbound_task_id  # type: str
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetContactInfoByOutboundTaskIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_task_id is not None:
            result['OutboundTaskId'] = self.outbound_task_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundTaskId') is not None:
            self.outbound_task_id = m.get('OutboundTaskId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class GetContactInfoByOutboundTaskIdResponseBodyContactIdentity(TeaModel):
    def __init__(self, caller=None, contact_referrnce_id=None, job_group_id=None, user_phone=None):
        self.caller = caller  # type: str
        self.contact_referrnce_id = contact_referrnce_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.user_phone = user_phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetContactInfoByOutboundTaskIdResponseBodyContactIdentity, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.contact_referrnce_id is not None:
            result['ContactReferrnceId'] = self.contact_referrnce_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.user_phone is not None:
            result['UserPhone'] = self.user_phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('ContactReferrnceId') is not None:
            self.contact_referrnce_id = m.get('ContactReferrnceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('UserPhone') is not None:
            self.user_phone = m.get('UserPhone')
        return self


class GetContactInfoByOutboundTaskIdResponseBody(TeaModel):
    def __init__(self, code=None, contact_identity=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.contact_identity = contact_identity  # type: GetContactInfoByOutboundTaskIdResponseBodyContactIdentity
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.contact_identity:
            self.contact_identity.validate()

    def to_map(self):
        _map = super(GetContactInfoByOutboundTaskIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_identity is not None:
            result['ContactIdentity'] = self.contact_identity.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactIdentity') is not None:
            temp_model = GetContactInfoByOutboundTaskIdResponseBodyContactIdentity()
            self.contact_identity = temp_model.from_map(m['ContactIdentity'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetContactInfoByOutboundTaskIdResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetContactInfoByOutboundTaskIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetContactInfoByOutboundTaskIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetContactInfoByOutboundTaskIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConversationDetailByContactIdRequest(TeaModel):
    def __init__(self, contact_id=None, instance_id=None, page_number=None, page_size=None):
        self.contact_id = contact_id  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConversationDetailByContactIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase(TeaModel):
    def __init__(self, begin=None, end=None, identity=None, role=None, words=None):
        self.begin = begin  # type: long
        self.end = end  # type: long
        self.identity = identity  # type: str
        self.role = role  # type: str
        self.words = words  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin is not None:
            result['Begin'] = self.begin
        if self.end is not None:
            result['End'] = self.end
        if self.identity is not None:
            result['Identity'] = self.identity
        if self.role is not None:
            result['Role'] = self.role
        if self.words is not None:
            result['Words'] = self.words
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Begin') is not None:
            self.begin = m.get('Begin')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('Identity') is not None:
            self.identity = m.get('Identity')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Words') is not None:
            self.words = m.get('Words')
        return self


class GetConversationDetailByContactIdResponseBodyDataListList(TeaModel):
    def __init__(self, quality_check_phrase=None):
        self.quality_check_phrase = quality_check_phrase  # type: list[GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase]

    def validate(self):
        if self.quality_check_phrase:
            for k in self.quality_check_phrase:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetConversationDetailByContactIdResponseBodyDataListList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['QualityCheckPhrase'] = []
        if self.quality_check_phrase is not None:
            for k in self.quality_check_phrase:
                result['QualityCheckPhrase'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.quality_check_phrase = []
        if m.get('QualityCheckPhrase') is not None:
            for k in m.get('QualityCheckPhrase'):
                temp_model = GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase()
                self.quality_check_phrase.append(temp_model.from_map(k))
        return self


class GetConversationDetailByContactIdResponseBodyDataList(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: GetConversationDetailByContactIdResponseBodyDataListList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(GetConversationDetailByContactIdResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = GetConversationDetailByContactIdResponseBodyDataListList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetConversationDetailByContactIdResponseBody(TeaModel):
    def __init__(self, code=None, data_list=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data_list = data_list  # type: GetConversationDetailByContactIdResponseBodyDataList
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data_list:
            self.data_list.validate()

    def to_map(self):
        _map = super(GetConversationDetailByContactIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data_list is not None:
            result['DataList'] = self.data_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DataList') is not None:
            temp_model = GetConversationDetailByContactIdResponseBodyDataList()
            self.data_list = temp_model.from_map(m['DataList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConversationDetailByContactIdResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetConversationDetailByContactIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetConversationDetailByContactIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetConversationDetailByContactIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConversationListRequest(TeaModel):
    def __init__(self, instance_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConversationListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetConversationListResponseBodyConversationsSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConversationListResponseBodyConversationsSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class GetConversationListResponseBodyConversations(TeaModel):
    def __init__(self, script=None, speaker=None, summary=None, timestamp=None):
        self.script = script  # type: str
        self.speaker = speaker  # type: str
        self.summary = summary  # type: list[GetConversationListResponseBodyConversationsSummary]
        self.timestamp = timestamp  # type: long

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetConversationListResponseBodyConversations, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script is not None:
            result['Script'] = self.script
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetConversationListResponseBodyConversationsSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetConversationListResponseBody(TeaModel):
    def __init__(self, code=None, conversations=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.conversations = conversations  # type: list[GetConversationListResponseBodyConversations]
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.conversations:
            for k in self.conversations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetConversationListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Conversations'] = []
        if self.conversations is not None:
            for k in self.conversations:
                result['Conversations'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.conversations = []
        if m.get('Conversations') is not None:
            for k in m.get('Conversations'):
                temp_model = GetConversationListResponseBodyConversations()
                self.conversations.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConversationListResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetConversationListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetConversationListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetConversationListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetInstanceResponseBodyInstanceAdminUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceResponseBodyInstanceAdminUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class GetInstanceResponseBodyInstanceAdminUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, ram_id=None, user_id=None):
        self.detail = detail  # type: GetInstanceResponseBodyInstanceAdminUserDetail
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()

    def to_map(self):
        _map = super(GetInstanceResponseBodyInstanceAdminUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = GetInstanceResponseBodyInstanceAdminUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetInstanceResponseBodyInstanceAdmin(TeaModel):
    def __init__(self, user=None):
        self.user = user  # type: list[GetInstanceResponseBodyInstanceAdminUser]

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetInstanceResponseBodyInstanceAdmin, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = GetInstanceResponseBodyInstanceAdminUser()
                self.user.append(temp_model.from_map(k))
        return self


class GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class GetInstanceResponseBodyInstancePhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetInstanceResponseBodyInstancePhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class GetInstanceResponseBodyInstance(TeaModel):
    def __init__(self, admin=None, console_url=None, created_time=None, directory_id=None, domain_name=None,
                 instance_description=None, instance_id=None, instance_name=None, max_online_agents=None, owner=None, phone_numbers=None,
                 status=None, storage_bucket=None, storage_max_days=None, storage_max_size=None, tenant_id=None):
        self.admin = admin  # type: GetInstanceResponseBodyInstanceAdmin
        self.console_url = console_url  # type: str
        self.created_time = created_time  # type: long
        self.directory_id = directory_id  # type: str
        self.domain_name = domain_name  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_online_agents = max_online_agents  # type: int
        self.owner = owner  # type: str
        self.phone_numbers = phone_numbers  # type: GetInstanceResponseBodyInstancePhoneNumbers
        self.status = status  # type: str
        self.storage_bucket = storage_bucket  # type: str
        self.storage_max_days = storage_max_days  # type: int
        self.storage_max_size = storage_max_size  # type: int
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        if self.admin:
            self.admin.validate()
        if self.phone_numbers:
            self.phone_numbers.validate()

    def to_map(self):
        _map = super(GetInstanceResponseBodyInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.admin is not None:
            result['Admin'] = self.admin.to_map()
        if self.console_url is not None:
            result['ConsoleUrl'] = self.console_url
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_online_agents is not None:
            result['MaxOnlineAgents'] = self.max_online_agents
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.storage_bucket is not None:
            result['StorageBucket'] = self.storage_bucket
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Admin') is not None:
            temp_model = GetInstanceResponseBodyInstanceAdmin()
            self.admin = temp_model.from_map(m['Admin'])
        if m.get('ConsoleUrl') is not None:
            self.console_url = m.get('ConsoleUrl')
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxOnlineAgents') is not None:
            self.max_online_agents = m.get('MaxOnlineAgents')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('PhoneNumbers') is not None:
            temp_model = GetInstanceResponseBodyInstancePhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StorageBucket') is not None:
            self.storage_bucket = m.get('StorageBucket')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class GetInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance = instance  # type: GetInstanceResponseBodyInstance
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super(GetInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = GetInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceStateRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceStateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount(TeaModel):
    def __init__(self, count=None, state=None):
        self.count = count  # type: long
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions(TeaModel):
    def __init__(self, agent_state_count=None):
        self.agent_state_count = agent_state_count  # type: list[GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount]

    def validate(self):
        if self.agent_state_count:
            for k in self.agent_state_count:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentStateCount'] = []
        if self.agent_state_count is not None:
            for k in self.agent_state_count:
                result['AgentStateCount'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_state_count = []
        if m.get('AgentStateCount') is not None:
            for k in m.get('AgentStateCount'):
                temp_model = GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount()
                self.agent_state_count.append(temp_model.from_map(k))
        return self


class GetInstanceStateResponseBodyRealTimeInstanceState(TeaModel):
    def __init__(self, agent_state_distributions=None):
        self.agent_state_distributions = agent_state_distributions  # type: GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions

    def validate(self):
        if self.agent_state_distributions:
            self.agent_state_distributions.validate()

    def to_map(self):
        _map = super(GetInstanceStateResponseBodyRealTimeInstanceState, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_state_distributions is not None:
            result['AgentStateDistributions'] = self.agent_state_distributions.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentStateDistributions') is not None:
            temp_model = GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions()
            self.agent_state_distributions = temp_model.from_map(m['AgentStateDistributions'])
        return self


class GetInstanceStateResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, real_time_instance_state=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.real_time_instance_state = real_time_instance_state  # type: GetInstanceStateResponseBodyRealTimeInstanceState
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.real_time_instance_state:
            self.real_time_instance_state.validate()

    def to_map(self):
        _map = super(GetInstanceStateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.real_time_instance_state is not None:
            result['RealTimeInstanceState'] = self.real_time_instance_state.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RealTimeInstanceState') is not None:
            temp_model = GetInstanceStateResponseBodyRealTimeInstanceState()
            self.real_time_instance_state = temp_model.from_map(m['RealTimeInstanceState'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceStateResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetInstanceStateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstanceStateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceStateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceSummaryReportRequest(TeaModel):
    def __init__(self, end_time=None, instance_id=None, page_number=None, page_size=None, start_time=None):
        self.end_time = end_time  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound(TeaModel):
    def __init__(self, average_ring_time=None, average_talk_time=None, average_wait_time=None,
                 average_work_time=None, calls_abandoned_in_ivr=None, calls_abandoned_in_queue=None, calls_handled=None,
                 calls_incoming_ivr=None, calls_incoming_line=None, calls_incoming_queue=None, calls_offered=None, handle_rate=None,
                 max_ring_time=None, max_talk_time=None, max_wait_time=None, max_work_time=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, service_level_20=None, total_ring_time=None,
                 total_talk_time=None, total_wait_time=None, total_work_time=None):
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_wait_time = average_wait_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_abandoned_in_ivr = calls_abandoned_in_ivr  # type: long
        self.calls_abandoned_in_queue = calls_abandoned_in_queue  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_incoming_ivr = calls_incoming_ivr  # type: long
        self.calls_incoming_line = calls_incoming_line  # type: long
        self.calls_incoming_queue = calls_incoming_queue  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: str
        self.max_wait_time = max_wait_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_wait_time = total_wait_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_wait_time is not None:
            result['AverageWaitTime'] = self.average_wait_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_abandoned_in_ivr is not None:
            result['CallsAbandonedInIVR'] = self.calls_abandoned_in_ivr
        if self.calls_abandoned_in_queue is not None:
            result['CallsAbandonedInQueue'] = self.calls_abandoned_in_queue
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_incoming_ivr is not None:
            result['CallsIncomingIVR'] = self.calls_incoming_ivr
        if self.calls_incoming_line is not None:
            result['CallsIncomingLine'] = self.calls_incoming_line
        if self.calls_incoming_queue is not None:
            result['CallsIncomingQueue'] = self.calls_incoming_queue
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_wait_time is not None:
            result['MaxWaitTime'] = self.max_wait_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_wait_time is not None:
            result['TotalWaitTime'] = self.total_wait_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWaitTime') is not None:
            self.average_wait_time = m.get('AverageWaitTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAbandonedInIVR') is not None:
            self.calls_abandoned_in_ivr = m.get('CallsAbandonedInIVR')
        if m.get('CallsAbandonedInQueue') is not None:
            self.calls_abandoned_in_queue = m.get('CallsAbandonedInQueue')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsIncomingIVR') is not None:
            self.calls_incoming_ivr = m.get('CallsIncomingIVR')
        if m.get('CallsIncomingLine') is not None:
            self.calls_incoming_line = m.get('CallsIncomingLine')
        if m.get('CallsIncomingQueue') is not None:
            self.calls_incoming_queue = m.get('CallsIncomingQueue')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWaitTime') is not None:
            self.max_wait_time = m.get('MaxWaitTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWaitTime') is not None:
            self.total_wait_time = m.get('TotalWaitTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 max_ready_time=None, max_talk_time=None, max_work_time=None, occupancy_rate=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_break_time=None, total_calls=None,
                 total_logged_in_time=None, total_ready_time=None, total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReport(TeaModel):
    def __init__(self, inbound=None, instance_id=None, outbound=None, overall=None):
        self.inbound = inbound  # type: GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.outbound = outbound  # type: GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound
        self.overall = overall  # type: GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportResponseBodyInstanceSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Inbound') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Outbound') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        return self


class GetInstanceSummaryReportResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance_summary_report=None, message=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance_summary_report = instance_summary_report  # type: GetInstanceSummaryReportResponseBodyInstanceSummaryReport
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance_summary_report:
            self.instance_summary_report.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_summary_report is not None:
            result['InstanceSummaryReport'] = self.instance_summary_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceSummaryReport') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReport()
            self.instance_summary_report = temp_model.from_map(m['InstanceSummaryReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceSummaryReportResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetInstanceSummaryReportResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceSummaryReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceSummaryReportByIntervalRequest(TeaModel):
    def __init__(self, end_time=None, instance_id=None, interval=None, page_number=None, page_size=None,
                 start_time=None):
        self.end_time = end_time  # type: str
        self.instance_id = instance_id  # type: str
        self.interval = interval  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound(TeaModel):
    def __init__(self, average_ring_time=None, average_talk_time=None, average_wait_time=None,
                 average_work_time=None, calls_abandoned_in_ivr=None, calls_abandoned_in_queue=None, calls_handled=None,
                 calls_incoming_ivr=None, calls_incoming_line=None, calls_incoming_queue=None, calls_offered=None, handle_rate=None,
                 max_ring_time=None, max_talk_time=None, max_wait_time=None, max_work_time=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, service_level_20=None, total_ring_time=None,
                 total_talk_time=None, total_wait_time=None, total_work_time=None):
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_wait_time = average_wait_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_abandoned_in_ivr = calls_abandoned_in_ivr  # type: long
        self.calls_abandoned_in_queue = calls_abandoned_in_queue  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_incoming_ivr = calls_incoming_ivr  # type: long
        self.calls_incoming_line = calls_incoming_line  # type: long
        self.calls_incoming_queue = calls_incoming_queue  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: str
        self.max_wait_time = max_wait_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_wait_time = total_wait_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_wait_time is not None:
            result['AverageWaitTime'] = self.average_wait_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_abandoned_in_ivr is not None:
            result['CallsAbandonedInIVR'] = self.calls_abandoned_in_ivr
        if self.calls_abandoned_in_queue is not None:
            result['CallsAbandonedInQueue'] = self.calls_abandoned_in_queue
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_incoming_ivr is not None:
            result['CallsIncomingIVR'] = self.calls_incoming_ivr
        if self.calls_incoming_line is not None:
            result['CallsIncomingLine'] = self.calls_incoming_line
        if self.calls_incoming_queue is not None:
            result['CallsIncomingQueue'] = self.calls_incoming_queue
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_wait_time is not None:
            result['MaxWaitTime'] = self.max_wait_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_wait_time is not None:
            result['TotalWaitTime'] = self.total_wait_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWaitTime') is not None:
            self.average_wait_time = m.get('AverageWaitTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAbandonedInIVR') is not None:
            self.calls_abandoned_in_ivr = m.get('CallsAbandonedInIVR')
        if m.get('CallsAbandonedInQueue') is not None:
            self.calls_abandoned_in_queue = m.get('CallsAbandonedInQueue')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsIncomingIVR') is not None:
            self.calls_incoming_ivr = m.get('CallsIncomingIVR')
        if m.get('CallsIncomingLine') is not None:
            self.calls_incoming_line = m.get('CallsIncomingLine')
        if m.get('CallsIncomingQueue') is not None:
            self.calls_incoming_queue = m.get('CallsIncomingQueue')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWaitTime') is not None:
            self.max_wait_time = m.get('MaxWaitTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWaitTime') is not None:
            self.total_wait_time = m.get('TotalWaitTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 max_ready_time=None, max_talk_time=None, max_work_time=None, occupancy_rate=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_break_time=None, total_calls=None,
                 total_logged_in_time=None, total_ready_time=None, total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport(TeaModel):
    def __init__(self, inbound=None, instance_id=None, outbound=None, overall=None, timestamp=None):
        self.inbound = inbound  # type: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.outbound = outbound  # type: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound
        self.overall = overall  # type: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall
        self.timestamp = timestamp  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Inbound') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Outbound') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList(TeaModel):
    def __init__(self, instance_summary_report=None):
        self.instance_summary_report = instance_summary_report  # type: list[GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport]

    def validate(self):
        if self.instance_summary_report:
            for k in self.instance_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InstanceSummaryReport'] = []
        if self.instance_summary_report is not None:
            for k in self.instance_summary_report:
                result['InstanceSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.instance_summary_report = []
        if m.get('InstanceSummaryReport') is not None:
            for k in m.get('InstanceSummaryReport'):
                temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport()
                self.instance_summary_report.append(temp_model.from_map(k))
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport(TeaModel):
    def __init__(self, instance_id=None, interval_list=None):
        self.instance_id = instance_id  # type: str
        self.interval_list = interval_list  # type: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList

    def validate(self):
        if self.interval_list:
            self.interval_list.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.interval_list is not None:
            result['IntervalList'] = self.interval_list.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntervalList') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList()
            self.interval_list = temp_model.from_map(m['IntervalList'])
        return self


class GetInstanceSummaryReportByIntervalResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance_time_interval_report=None, message=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance_time_interval_report = instance_time_interval_report  # type: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance_time_interval_report:
            self.instance_time_interval_report.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_time_interval_report is not None:
            result['InstanceTimeIntervalReport'] = self.instance_time_interval_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceTimeIntervalReport') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport()
            self.instance_time_interval_report = temp_model.from_map(m['InstanceTimeIntervalReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceSummaryReportByIntervalResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetInstanceSummaryReportByIntervalResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportByIntervalResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceSummaryReportSinceMidnightRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportSinceMidnightRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound(TeaModel):
    def __init__(self, average_ring_time=None, average_talk_time=None, average_wait_time=None,
                 average_work_time=None, calls_abandoned_in_ivr=None, calls_abandoned_in_queue=None, calls_handled=None,
                 calls_incoming_ivr=None, calls_incoming_line=None, calls_incoming_queue=None, calls_offered=None, handle_rate=None,
                 max_ring_time=None, max_talk_time=None, max_wait_time=None, max_work_time=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, service_level_20=None, total_ring_time=None,
                 total_talk_time=None, total_wait_time=None, total_work_time=None):
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_wait_time = average_wait_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_abandoned_in_ivr = calls_abandoned_in_ivr  # type: long
        self.calls_abandoned_in_queue = calls_abandoned_in_queue  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_incoming_ivr = calls_incoming_ivr  # type: long
        self.calls_incoming_line = calls_incoming_line  # type: long
        self.calls_incoming_queue = calls_incoming_queue  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: str
        self.max_wait_time = max_wait_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_wait_time = total_wait_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_wait_time is not None:
            result['AverageWaitTime'] = self.average_wait_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_abandoned_in_ivr is not None:
            result['CallsAbandonedInIVR'] = self.calls_abandoned_in_ivr
        if self.calls_abandoned_in_queue is not None:
            result['CallsAbandonedInQueue'] = self.calls_abandoned_in_queue
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_incoming_ivr is not None:
            result['CallsIncomingIVR'] = self.calls_incoming_ivr
        if self.calls_incoming_line is not None:
            result['CallsIncomingLine'] = self.calls_incoming_line
        if self.calls_incoming_queue is not None:
            result['CallsIncomingQueue'] = self.calls_incoming_queue
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_wait_time is not None:
            result['MaxWaitTime'] = self.max_wait_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_wait_time is not None:
            result['TotalWaitTime'] = self.total_wait_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWaitTime') is not None:
            self.average_wait_time = m.get('AverageWaitTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAbandonedInIVR') is not None:
            self.calls_abandoned_in_ivr = m.get('CallsAbandonedInIVR')
        if m.get('CallsAbandonedInQueue') is not None:
            self.calls_abandoned_in_queue = m.get('CallsAbandonedInQueue')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsIncomingIVR') is not None:
            self.calls_incoming_ivr = m.get('CallsIncomingIVR')
        if m.get('CallsIncomingLine') is not None:
            self.calls_incoming_line = m.get('CallsIncomingLine')
        if m.get('CallsIncomingQueue') is not None:
            self.calls_incoming_queue = m.get('CallsIncomingQueue')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWaitTime') is not None:
            self.max_wait_time = m.get('MaxWaitTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWaitTime') is not None:
            self.total_wait_time = m.get('TotalWaitTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 max_ready_time=None, max_talk_time=None, max_work_time=None, occupancy_rate=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_break_time=None, total_calls=None,
                 total_logged_in_time=None, total_ready_time=None, total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport(TeaModel):
    def __init__(self, inbound=None, instance_id=None, outbound=None, overall=None, timestamp=None):
        self.inbound = inbound  # type: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.outbound = outbound  # type: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound
        self.overall = overall  # type: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall
        self.timestamp = timestamp  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Inbound') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Outbound') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance_summary_report=None, message=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance_summary_report = instance_summary_report  # type: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance_summary_report:
            self.instance_summary_report.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportSinceMidnightResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_summary_report is not None:
            result['InstanceSummaryReport'] = self.instance_summary_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceSummaryReport') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport()
            self.instance_summary_report = temp_model.from_map(m['InstanceSummaryReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceSummaryReportSinceMidnightResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetInstanceSummaryReportSinceMidnightResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstanceSummaryReportSinceMidnightResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobRequest(TeaModel):
    def __init__(self, instance_id=None, job_id=None):
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class GetJobResponseBodyJobContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, phone_number=None, reference_id=None,
                 role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobResponseBodyJobContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class GetJobResponseBodyJobExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobResponseBodyJobExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobResponseBodyJobSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobResponseBodyJobSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class GetJobResponseBodyJobTasksContact(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, phone_number=None, reference_id=None,
                 role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobResponseBodyJobTasksContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class GetJobResponseBodyJobTasksConversationSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobResponseBodyJobTasksConversationSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class GetJobResponseBodyJobTasksConversation(TeaModel):
    def __init__(self, script=None, speaker=None, summary=None, timestamp=None):
        self.script = script  # type: str
        self.speaker = speaker  # type: str
        self.summary = summary  # type: list[GetJobResponseBodyJobTasksConversationSummary]
        self.timestamp = timestamp  # type: long

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobResponseBodyJobTasksConversation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script is not None:
            result['Script'] = self.script
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobResponseBodyJobTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetJobResponseBodyJobTasks(TeaModel):
    def __init__(self, actual_time=None, brief=None, call_id=None, called_number=None, calling_number=None,
                 chatbot_id=None, contact=None, conversation=None, duration=None, job_id=None, planed_time=None,
                 scenario_id=None, status=None, task_id=None):
        self.actual_time = actual_time  # type: long
        self.brief = brief  # type: str
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.contact = contact  # type: GetJobResponseBodyJobTasksContact
        self.conversation = conversation  # type: list[GetJobResponseBodyJobTasksConversation]
        self.duration = duration  # type: int
        self.job_id = job_id  # type: str
        self.planed_time = planed_time  # type: long
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobResponseBodyJobTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = GetJobResponseBodyJobTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = GetJobResponseBodyJobTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetJobResponseBodyJob(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, system_priority=None, tasks=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[GetJobResponseBodyJobContacts]
        self.extras = extras  # type: list[GetJobResponseBodyJobExtras]
        self.failure_reason = failure_reason  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[GetJobResponseBodyJobSummary]
        self.system_priority = system_priority  # type: int
        self.tasks = tasks  # type: list[GetJobResponseBodyJobTasks]

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobResponseBodyJob, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = GetJobResponseBodyJobContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = GetJobResponseBodyJobExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobResponseBodyJobSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = GetJobResponseBodyJobTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class GetJobResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job = job  # type: GetJobResponseBodyJob
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job:
            self.job.validate()

    def to_map(self):
        _map = super(GetJobResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job is not None:
            result['Job'] = self.job.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Job') is not None:
            temp_model = GetJobResponseBodyJob()
            self.job = temp_model.from_map(m['Job'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetJobResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetJobResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobDataUploadParamsRequest(TeaModel):
    def __init__(self, file_name=None, instance_id=None):
        self.file_name = file_name  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobDataUploadParamsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetJobDataUploadParamsResponseBodyUploadParams(TeaModel):
    def __init__(self, access_id=None, expire=None, folder=None, host=None, policy=None, signature=None):
        self.access_id = access_id  # type: str
        self.expire = expire  # type: int
        self.folder = folder  # type: str
        self.host = host  # type: str
        self.policy = policy  # type: str
        self.signature = signature  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobDataUploadParamsResponseBodyUploadParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.folder is not None:
            result['Folder'] = self.folder
        if self.host is not None:
            result['Host'] = self.host
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Folder') is not None:
            self.folder = m.get('Folder')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class GetJobDataUploadParamsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 upload_params=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.upload_params = upload_params  # type: GetJobDataUploadParamsResponseBodyUploadParams

    def validate(self):
        if self.upload_params:
            self.upload_params.validate()

    def to_map(self):
        _map = super(GetJobDataUploadParamsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.upload_params is not None:
            result['UploadParams'] = self.upload_params.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UploadParams') is not None:
            temp_model = GetJobDataUploadParamsResponseBodyUploadParams()
            self.upload_params = temp_model.from_map(m['UploadParams'])
        return self


class GetJobDataUploadParamsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetJobDataUploadParamsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetJobDataUploadParamsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobDataUploadParamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobFileUploadUrlRequest(TeaModel):
    def __init__(self, file_name=None, instance_id=None):
        self.file_name = file_name  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobFileUploadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetJobFileUploadUrlResponseBody(TeaModel):
    def __init__(self, code=None, file_path=None, http_status_code=None, message=None, request_id=None, success=None,
                 upload_url=None):
        self.code = code  # type: str
        self.file_path = file_path  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.upload_url = upload_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobFileUploadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.upload_url is not None:
            result['UploadUrl'] = self.upload_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UploadUrl') is not None:
            self.upload_url = m.get('UploadUrl')
        return self


class GetJobFileUploadUrlResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetJobFileUploadUrlResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetJobFileUploadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobFileUploadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobGroupRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class GetJobGroupResponseBodyJobGroupProgressCategories(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobGroupResponseBodyJobGroupProgressCategories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobGroupResponseBodyJobGroupProgress(TeaModel):
    def __init__(self, categories=None, duration=None, start_time=None, status=None, total_completed=None,
                 total_jobs=None, total_not_answered=None):
        self.categories = categories  # type: list[GetJobGroupResponseBodyJobGroupProgressCategories]
        self.duration = duration  # type: int
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.total_completed = total_completed  # type: int
        self.total_jobs = total_jobs  # type: int
        self.total_not_answered = total_not_answered  # type: int

    def validate(self):
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobGroupResponseBodyJobGroupProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = GetJobGroupResponseBodyJobGroupProgressCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class GetJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobGroupResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class GetJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, customized=None, description=None, end_time=None, follow_up_strategy=None, id=None,
                 is_template=None, max_attempts_per_day=None, min_attempt_interval=None, name=None, repeat_by=None,
                 repeat_days=None, routing_strategy=None, start_time=None, type=None, working_time=None):
        self.customized = customized  # type: str
        self.description = description  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.id = id  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.name = name  # type: str
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.type = type  # type: str
        self.working_time = working_time  # type: list[GetJobGroupResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobGroupResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.name is not None:
            result['Name'] = self.name
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = GetJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class GetJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, description=None, id=None, job_file_path=None,
                 name=None, progress=None, scenario_id=None, strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.description = description  # type: str
        self.id = id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.name = name  # type: str
        self.progress = progress  # type: GetJobGroupResponseBodyJobGroupProgress
        self.scenario_id = scenario_id  # type: str
        self.strategy = strategy  # type: GetJobGroupResponseBodyJobGroupStrategy

    def validate(self):
        if self.progress:
            self.progress.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(GetJobGroupResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.name is not None:
            result['Name'] = self.name
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Progress') is not None:
            temp_model = GetJobGroupResponseBodyJobGroupProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = GetJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class GetJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: GetJobGroupResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(GetJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = GetJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobListRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, page_number=None, page_size=None, query_all=None,
                 status=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.query_all = query_all  # type: bool
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.query_all is not None:
            result['QueryAll'] = self.query_all
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('QueryAll') is not None:
            self.query_all = m.get('QueryAll')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetJobListResponseBodyJobsListContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobListResponseBodyJobsListContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class GetJobListResponseBodyJobsListExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobListResponseBodyJobsListExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobListResponseBodyJobsListSummary(TeaModel):
    def __init__(self, category=None, content=None, conversation_detail_id=None, group_id=None, job_id=None,
                 summary_id=None, summary_name=None, task_id=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.conversation_detail_id = conversation_detail_id  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.summary_id = summary_id  # type: str
        self.summary_name = summary_name  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobListResponseBodyJobsListSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetJobListResponseBodyJobsList(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, system_priority=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[GetJobListResponseBodyJobsListContacts]
        self.extras = extras  # type: list[GetJobListResponseBodyJobsListExtras]
        self.failure_reason = failure_reason  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[GetJobListResponseBodyJobsListSummary]
        self.system_priority = system_priority  # type: int

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobListResponseBodyJobsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = GetJobListResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = GetJobListResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobListResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        return self


class GetJobListResponseBodyJobs(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[GetJobListResponseBodyJobsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobListResponseBodyJobs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetJobListResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetJobListResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, jobs=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.jobs = jobs  # type: GetJobListResponseBodyJobs
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super(GetJobListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = GetJobListResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobListResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetJobListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetJobListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobStatusByCallIdRequest(TeaModel):
    def __init__(self, call_id=None, instance_id=None):
        self.call_id = call_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobStatusByCallIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetJobStatusByCallIdResponseBodyJobContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJobContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class GetJobStatusByCallIdResponseBodyJobExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJobExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobStatusByCallIdResponseBodyJobSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_id=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_id = summary_id  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJobSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class GetJobStatusByCallIdResponseBodyJobTasksContact(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJobTasksContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class GetJobStatusByCallIdResponseBodyJobTasksConversationSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_id=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_id = summary_id  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJobTasksConversationSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class GetJobStatusByCallIdResponseBodyJobTasksConversation(TeaModel):
    def __init__(self, conversation_detail_id=None, script=None, speaker=None, summary=None, task_id=None,
                 timestamp=None):
        self.conversation_detail_id = conversation_detail_id  # type: str
        self.script = script  # type: str
        self.speaker = speaker  # type: str
        self.summary = summary  # type: list[GetJobStatusByCallIdResponseBodyJobTasksConversationSummary]
        self.task_id = task_id  # type: str
        self.timestamp = timestamp  # type: long

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJobTasksConversation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.script is not None:
            result['Script'] = self.script
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobStatusByCallIdResponseBodyJobTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetJobStatusByCallIdResponseBodyJobTasks(TeaModel):
    def __init__(self, actual_time=None, brief=None, call_id=None, called_number=None, calling_number=None,
                 chatbot_id=None, contact=None, conversation=None, duration=None, end_time=None, job_id=None, planed_time=None,
                 scenario_id=None, status=None, task_id=None):
        self.actual_time = actual_time  # type: long
        self.brief = brief  # type: str
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.contact = contact  # type: GetJobStatusByCallIdResponseBodyJobTasksContact
        self.conversation = conversation  # type: list[GetJobStatusByCallIdResponseBodyJobTasksConversation]
        self.duration = duration  # type: int
        self.end_time = end_time  # type: long
        self.job_id = job_id  # type: str
        self.planed_time = planed_time  # type: long
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJobTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = GetJobStatusByCallIdResponseBodyJobTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = GetJobStatusByCallIdResponseBodyJobTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetJobStatusByCallIdResponseBodyJob(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, tasks=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[GetJobStatusByCallIdResponseBodyJobContacts]
        self.extras = extras  # type: list[GetJobStatusByCallIdResponseBodyJobExtras]
        self.failure_reason = failure_reason  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[GetJobStatusByCallIdResponseBodyJobSummary]
        self.tasks = tasks  # type: list[GetJobStatusByCallIdResponseBodyJobTasks]

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBodyJob, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = GetJobStatusByCallIdResponseBodyJobContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = GetJobStatusByCallIdResponseBodyJobExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobStatusByCallIdResponseBodyJobSummary()
                self.summary.append(temp_model.from_map(k))
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = GetJobStatusByCallIdResponseBodyJobTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class GetJobStatusByCallIdResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job = job  # type: GetJobStatusByCallIdResponseBodyJob
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job:
            self.job.validate()

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job is not None:
            result['Job'] = self.job.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Job') is not None:
            temp_model = GetJobStatusByCallIdResponseBodyJob()
            self.job = temp_model.from_map(m['Job'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobStatusByCallIdResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetJobStatusByCallIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetJobStatusByCallIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobStatusByCallIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobTemplateDownloadParamsRequest(TeaModel):
    def __init__(self, instance_id=None, scenario_id=None):
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobTemplateDownloadParamsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class GetJobTemplateDownloadParamsResponseBodyDownloadParams(TeaModel):
    def __init__(self, signature_url=None):
        self.signature_url = signature_url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetJobTemplateDownloadParamsResponseBodyDownloadParams, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class GetJobTemplateDownloadParamsResponseBody(TeaModel):
    def __init__(self, code=None, download_params=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.download_params = download_params  # type: GetJobTemplateDownloadParamsResponseBodyDownloadParams
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super(GetJobTemplateDownloadParamsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = GetJobTemplateDownloadParamsResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobTemplateDownloadParamsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetJobTemplateDownloadParamsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetJobTemplateDownloadParamsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobTemplateDownloadParamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNumberRegionInfoRequest(TeaModel):
    def __init__(self, instance_id=None, number=None):
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNumberRegionInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class GetNumberRegionInfoResponseBodyPhoneNumber(TeaModel):
    def __init__(self, city=None, number=None, province=None):
        self.city = city  # type: str
        self.number = number  # type: str
        self.province = province  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNumberRegionInfoResponseBodyPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.number is not None:
            result['Number'] = self.number
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class GetNumberRegionInfoResponseBody(TeaModel):
    def __init__(self, code=None, message=None, phone_number=None, request_id=None, success=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.phone_number = phone_number  # type: GetNumberRegionInfoResponseBodyPhoneNumber
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.phone_number:
            self.phone_number.validate()

    def to_map(self):
        _map = super(GetNumberRegionInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PhoneNumber') is not None:
            temp_model = GetNumberRegionInfoResponseBodyPhoneNumber()
            self.phone_number = temp_model.from_map(m['PhoneNumber'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetNumberRegionInfoResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetNumberRegionInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetNumberRegionInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetNumberRegionInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPredictiveJobGroupRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPredictiveJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class GetPredictiveJobGroupResponseBodyJobGroupProgressCategories(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPredictiveJobGroupResponseBodyJobGroupProgressCategories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetPredictiveJobGroupResponseBodyJobGroupProgress(TeaModel):
    def __init__(self, categories=None, duration=None, start_time=None, status=None, total_completed=None,
                 total_jobs=None, total_not_answered=None):
        self.categories = categories  # type: list[GetPredictiveJobGroupResponseBodyJobGroupProgressCategories]
        self.duration = duration  # type: int
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.total_completed = total_completed  # type: int
        self.total_jobs = total_jobs  # type: int
        self.total_not_answered = total_not_answered  # type: int

    def validate(self):
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetPredictiveJobGroupResponseBodyJobGroupProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = GetPredictiveJobGroupResponseBodyJobGroupProgressCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class GetPredictiveJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPredictiveJobGroupResponseBodyJobGroupStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class GetPredictiveJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(self, end_time=None, max_attempts_per_day=None, min_attempt_interval=None, start_time=None,
                 strategy_id=None, working_time=None):
        self.end_time = end_time  # type: long
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.start_time = start_time  # type: long
        self.strategy_id = strategy_id  # type: str
        self.working_time = working_time  # type: list[GetPredictiveJobGroupResponseBodyJobGroupStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetPredictiveJobGroupResponseBodyJobGroupStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = GetPredictiveJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class GetPredictiveJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(self, creation_time=None, description=None, instance_id=None, job_group_id=None, name=None,
                 progress=None, ratio=None, skill_group_id=None, skill_group_name=None, strategy=None):
        self.creation_time = creation_time  # type: long
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.name = name  # type: str
        self.progress = progress  # type: GetPredictiveJobGroupResponseBodyJobGroupProgress
        self.ratio = ratio  # type: long
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str
        self.strategy = strategy  # type: GetPredictiveJobGroupResponseBodyJobGroupStrategy

    def validate(self):
        if self.progress:
            self.progress.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(GetPredictiveJobGroupResponseBodyJobGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.name is not None:
            result['Name'] = self.name
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.ratio is not None:
            result['Ratio'] = self.ratio
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Progress') is not None:
            temp_model = GetPredictiveJobGroupResponseBodyJobGroupProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('Ratio') is not None:
            self.ratio = m.get('Ratio')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('Strategy') is not None:
            temp_model = GetPredictiveJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class GetPredictiveJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_group=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_group = job_group  # type: GetPredictiveJobGroupResponseBodyJobGroup
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super(GetPredictiveJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = GetPredictiveJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetPredictiveJobGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetPredictiveJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPredictiveJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetPredictiveJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPredictiveTaskDataRequest(TeaModel):
    def __init__(self, instance_id=None, skill_group_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPredictiveTaskDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetPredictiveTaskDataResponseBodyData(TeaModel):
    def __init__(self, abandoned=None, answered=None, connected=None, contact_id=None, dial_duration=None,
                 end_time=None, job_group_id=None, queue_duration=None, start_time=None, talk_duration=None, task_id=None):
        self.abandoned = abandoned  # type: bool
        self.answered = answered  # type: bool
        self.connected = connected  # type: bool
        self.contact_id = contact_id  # type: str
        self.dial_duration = dial_duration  # type: long
        self.end_time = end_time  # type: long
        self.job_group_id = job_group_id  # type: str
        self.queue_duration = queue_duration  # type: long
        self.start_time = start_time  # type: long
        self.talk_duration = talk_duration  # type: long
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPredictiveTaskDataResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abandoned is not None:
            result['Abandoned'] = self.abandoned
        if self.answered is not None:
            result['Answered'] = self.answered
        if self.connected is not None:
            result['Connected'] = self.connected
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.dial_duration is not None:
            result['DialDuration'] = self.dial_duration
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.queue_duration is not None:
            result['QueueDuration'] = self.queue_duration
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.talk_duration is not None:
            result['TalkDuration'] = self.talk_duration
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Abandoned') is not None:
            self.abandoned = m.get('Abandoned')
        if m.get('Answered') is not None:
            self.answered = m.get('Answered')
        if m.get('Connected') is not None:
            self.connected = m.get('Connected')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('DialDuration') is not None:
            self.dial_duration = m.get('DialDuration')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('QueueDuration') is not None:
            self.queue_duration = m.get('QueueDuration')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TalkDuration') is not None:
            self.talk_duration = m.get('TalkDuration')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetPredictiveTaskDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: GetPredictiveTaskDataResponseBodyData
        self.http_status_code = http_status_code  # type: long
        self.message = message  # type: str
        # Id of the request
        self.request_id = request_id  # type: str
        self.success = success  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(GetPredictiveTaskDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetPredictiveTaskDataResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetPredictiveTaskDataResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetPredictiveTaskDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPredictiveTaskDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetPredictiveTaskDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRecordOssUploadParamRequest(TeaModel):
    def __init__(self, file_name=None, instance_id=None):
        self.file_name = file_name  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRecordOssUploadParamRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetRecordOssUploadParamResponseBody(TeaModel):
    def __init__(self, code=None, dir=None, expires=None, host=None, http_status_code=None, message=None,
                 oss_access_key_id=None, oss_file_name=None, policy=None, request_id=None, signature=None, success=None):
        self.code = code  # type: str
        self.dir = dir  # type: str
        self.expires = expires  # type: str
        self.host = host  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.oss_access_key_id = oss_access_key_id  # type: str
        self.oss_file_name = oss_file_name  # type: str
        self.policy = policy  # type: str
        self.request_id = request_id  # type: str
        self.signature = signature  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRecordOssUploadParamResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dir is not None:
            result['Dir'] = self.dir
        if self.expires is not None:
            result['Expires'] = self.expires
        if self.host is not None:
            result['Host'] = self.host
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.oss_access_key_id is not None:
            result['OssAccessKeyId'] = self.oss_access_key_id
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Dir') is not None:
            self.dir = m.get('Dir')
        if m.get('Expires') is not None:
            self.expires = m.get('Expires')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OssAccessKeyId') is not None:
            self.oss_access_key_id = m.get('OssAccessKeyId')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetRecordOssUploadParamResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetRecordOssUploadParamResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRecordOssUploadParamResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetRecordOssUploadParamResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRoutePointRequest(TeaModel):
    def __init__(self, contact_flow_id=None, instance_id=None):
        self.contact_flow_id = contact_flow_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRoutePointRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetRoutePointResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, route_point=None,
                 status_code=None, status_desc=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.route_point = route_point  # type: str
        self.status_code = status_code  # type: str
        self.status_desc = status_desc  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRoutePointResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.route_point is not None:
            result['RoutePoint'] = self.route_point
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.status_desc is not None:
            result['StatusDesc'] = self.status_desc
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RoutePoint') is not None:
            self.route_point = m.get('RoutePoint')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('StatusDesc') is not None:
            self.status_desc = m.get('StatusDesc')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetRoutePointResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetRoutePointResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRoutePointResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetRoutePointResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScenarioRequest(TeaModel):
    def __init__(self, instance_id=None, scenario_id=None):
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class GetScenarioResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioResponseBodyScenarioStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class GetScenarioResponseBodyScenarioStrategy(TeaModel):
    def __init__(self, customized=None, description=None, end_time=None, follow_up_strategy=None, id=None,
                 is_template=None, max_attempts_per_day=None, min_attempt_interval=None, name=None, repeat_by=None,
                 repeat_days=None, routing_strategy=None, start_time=None, type=None, working_time=None):
        self.customized = customized  # type: str
        self.description = description  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.id = id  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.name = name  # type: str
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.type = type  # type: str
        self.working_time = working_time  # type: list[GetScenarioResponseBodyScenarioStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetScenarioResponseBodyScenarioStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.name is not None:
            result['Name'] = self.name
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = GetScenarioResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class GetScenarioResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(self, intent_id=None, node_id=None):
        self.intent_id = intent_id  # type: str
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioResponseBodyScenarioSurveysIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class GetScenarioResponseBodyScenarioSurveys(TeaModel):
    def __init__(self, beebot_id=None, description=None, id=None, intents=None, name=None, role=None, round=None):
        self.beebot_id = beebot_id  # type: str
        self.description = description  # type: str
        self.id = id  # type: str
        self.intents = intents  # type: list[GetScenarioResponseBodyScenarioSurveysIntents]
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetScenarioResponseBodyScenarioSurveys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = GetScenarioResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        return self


class GetScenarioResponseBodyScenarioVariables(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioResponseBodyScenarioVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetScenarioResponseBodyScenario(TeaModel):
    def __init__(self, description=None, id=None, is_template=None, name=None, strategy=None, surveys=None, type=None,
                 variables=None):
        self.description = description  # type: str
        self.id = id  # type: str
        self.is_template = is_template  # type: bool
        self.name = name  # type: str
        self.strategy = strategy  # type: GetScenarioResponseBodyScenarioStrategy
        self.surveys = surveys  # type: list[GetScenarioResponseBodyScenarioSurveys]
        self.type = type  # type: str
        self.variables = variables  # type: list[GetScenarioResponseBodyScenarioVariables]

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetScenarioResponseBodyScenario, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Strategy') is not None:
            temp_model = GetScenarioResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = GetScenarioResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = GetScenarioResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class GetScenarioResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scenario=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scenario = scenario  # type: GetScenarioResponseBodyScenario
        self.success = success  # type: bool

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        _map = super(GetScenarioResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scenario') is not None:
            temp_model = GetScenarioResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetScenarioResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetScenarioResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetScenarioResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetServiceExtensionsRequest(TeaModel):
    def __init__(self, instance_id=None, service_type=None):
        self.instance_id = instance_id  # type: str
        self.service_type = service_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetServiceExtensionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        return self


class GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension(TeaModel):
    def __init__(self, name=None, number=None):
        self.name = name  # type: str
        self.number = number  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class GetServiceExtensionsResponseBodyServiceExtensions(TeaModel):
    def __init__(self, service_extension=None):
        self.service_extension = service_extension  # type: list[GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension]

    def validate(self):
        if self.service_extension:
            for k in self.service_extension:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetServiceExtensionsResponseBodyServiceExtensions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ServiceExtension'] = []
        if self.service_extension is not None:
            for k in self.service_extension:
                result['ServiceExtension'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.service_extension = []
        if m.get('ServiceExtension') is not None:
            for k in m.get('ServiceExtension'):
                temp_model = GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension()
                self.service_extension.append(temp_model.from_map(k))
        return self


class GetServiceExtensionsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, service_extensions=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.service_extensions = service_extensions  # type: GetServiceExtensionsResponseBodyServiceExtensions
        self.success = success  # type: bool

    def validate(self):
        if self.service_extensions:
            self.service_extensions.validate()

    def to_map(self):
        _map = super(GetServiceExtensionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.service_extensions is not None:
            result['ServiceExtensions'] = self.service_extensions.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ServiceExtensions') is not None:
            temp_model = GetServiceExtensionsResponseBodyServiceExtensions()
            self.service_extensions = temp_model.from_map(m['ServiceExtensions'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetServiceExtensionsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetServiceExtensionsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetServiceExtensionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetServiceExtensionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSmsConfigRequest(TeaModel):
    def __init__(self, instance_id=None, scenario=None):
        self.instance_id = instance_id  # type: str
        self.scenario = scenario  # type: list[int]

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSmsConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        return self


class GetSmsConfigResponseBodySmsConfigsSmsConfig(TeaModel):
    def __init__(self, description=None, extra=None, gmt_create=None, gmt_modified=None, id=None, instance=None,
                 name=None, scenario=None, sign_name=None, template_code=None):
        self.description = description  # type: str
        self.extra = extra  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.instance = instance  # type: str
        self.name = name  # type: str
        self.scenario = scenario  # type: int
        self.sign_name = sign_name  # type: str
        self.template_code = template_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSmsConfigResponseBodySmsConfigsSmsConfig, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class GetSmsConfigResponseBodySmsConfigs(TeaModel):
    def __init__(self, sms_config=None):
        self.sms_config = sms_config  # type: list[GetSmsConfigResponseBodySmsConfigsSmsConfig]

    def validate(self):
        if self.sms_config:
            for k in self.sms_config:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetSmsConfigResponseBodySmsConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsConfig'] = []
        if self.sms_config is not None:
            for k in self.sms_config:
                result['SmsConfig'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.sms_config = []
        if m.get('SmsConfig') is not None:
            for k in m.get('SmsConfig'):
                temp_model = GetSmsConfigResponseBodySmsConfigsSmsConfig()
                self.sms_config.append(temp_model.from_map(k))
        return self


class GetSmsConfigResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, sms_configs=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.sms_configs = sms_configs  # type: GetSmsConfigResponseBodySmsConfigs
        self.success = success  # type: bool

    def validate(self):
        if self.sms_configs:
            self.sms_configs.validate()

    def to_map(self):
        _map = super(GetSmsConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.sms_configs is not None:
            result['SmsConfigs'] = self.sms_configs.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SmsConfigs') is not None:
            temp_model = GetSmsConfigResponseBodySmsConfigs()
            self.sms_configs = temp_model.from_map(m['SmsConfigs'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetSmsConfigResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetSmsConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSmsConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetSmsConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSurveyRequest(TeaModel):
    def __init__(self, instance_id=None, scenario_id=None, survey_id=None):
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.survey_id = survey_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSurveyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class GetSurveyResponseBodySurveyAsrCustomModel(TeaModel):
    def __init__(self, corpora=None, custom_model_status=None):
        self.corpora = corpora  # type: str
        self.custom_model_status = custom_model_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSurveyResponseBodySurveyAsrCustomModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        return self


class GetSurveyResponseBodySurveyFlow(TeaModel):
    def __init__(self, flow_id=None, flow_json=None, is_published=None):
        self.flow_id = flow_id  # type: str
        self.flow_json = flow_json  # type: str
        self.is_published = is_published  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSurveyResponseBodySurveyFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        return self


class GetSurveyResponseBodySurvey(TeaModel):
    def __init__(self, asr_custom_model=None, description=None, flow=None, global_questions=None, hot_words=None,
                 id=None, name=None, role=None, round=None, scenario_uuid=None, speech_optimization_param=None):
        self.asr_custom_model = asr_custom_model  # type: GetSurveyResponseBodySurveyAsrCustomModel
        self.description = description  # type: str
        self.flow = flow  # type: GetSurveyResponseBodySurveyFlow
        self.global_questions = global_questions  # type: str
        self.hot_words = hot_words  # type: str
        self.id = id  # type: str
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int
        self.scenario_uuid = scenario_uuid  # type: str
        self.speech_optimization_param = speech_optimization_param  # type: str

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        _map = super(GetSurveyResponseBodySurvey, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrCustomModel') is not None:
            temp_model = GetSurveyResponseBodySurveyAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Flow') is not None:
            temp_model = GetSurveyResponseBodySurveyFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        return self


class GetSurveyResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, survey=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.survey = survey  # type: GetSurveyResponseBodySurvey

    def validate(self):
        if self.survey:
            self.survey.validate()

    def to_map(self):
        _map = super(GetSurveyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.survey is not None:
            result['Survey'] = self.survey.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Survey') is not None:
            temp_model = GetSurveyResponseBodySurvey()
            self.survey = temp_model.from_map(m['Survey'])
        return self


class GetSurveyResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetSurveyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSurveyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTURNCredentialsRequest(TeaModel):
    def __init__(self, instance_id=None, user_name=None):
        self.instance_id = instance_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTURNCredentialsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class GetTURNCredentialsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, password=None, request_id=None, success=None,
                 username=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.password = password  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.username = username  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTURNCredentialsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.password is not None:
            result['Password'] = self.password
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class GetTURNCredentialsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetTURNCredentialsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTURNCredentialsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTURNCredentialsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTURNServerListRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTURNServerListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetTURNServerListResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 turn_server_list_config=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.turn_server_list_config = turn_server_list_config  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTURNServerListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.turn_server_list_config is not None:
            result['TurnServerListConfig'] = self.turn_server_list_config
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TurnServerListConfig') is not None:
            self.turn_server_list_config = m.get('TurnServerListConfig')
        return self


class GetTURNServerListResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetTURNServerListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTURNServerListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTURNServerListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTaskListRequest(TeaModel):
    def __init__(self, instance_id=None, job_id=None):
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTaskListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class GetTaskListResponseBodyTasksContact(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTaskListResponseBodyTasksContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class GetTaskListResponseBodyTasksConversationSummary(TeaModel):
    def __init__(self, category=None, content=None, summary_name=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.summary_name = summary_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTaskListResponseBodyTasksConversationSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class GetTaskListResponseBodyTasksConversation(TeaModel):
    def __init__(self, script=None, speaker=None, summary=None, timestamp=None):
        self.script = script  # type: str
        self.speaker = speaker  # type: str
        self.summary = summary  # type: list[GetTaskListResponseBodyTasksConversationSummary]
        self.timestamp = timestamp  # type: long

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetTaskListResponseBodyTasksConversation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script is not None:
            result['Script'] = self.script
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetTaskListResponseBodyTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetTaskListResponseBodyTasks(TeaModel):
    def __init__(self, actual_time=None, brief=None, call_id=None, called_number=None, calling_number=None,
                 chatbot_id=None, contact=None, conversation=None, duration=None, job_id=None, planed_time=None,
                 scenario_id=None, status=None, task_id=None):
        self.actual_time = actual_time  # type: long
        self.brief = brief  # type: str
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.contact = contact  # type: GetTaskListResponseBodyTasksContact
        self.conversation = conversation  # type: list[GetTaskListResponseBodyTasksConversation]
        self.duration = duration  # type: int
        self.job_id = job_id  # type: str
        self.planed_time = planed_time  # type: long
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetTaskListResponseBodyTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = GetTaskListResponseBodyTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = GetTaskListResponseBodyTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetTaskListResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, tasks=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.tasks = tasks  # type: list[GetTaskListResponseBodyTasks]

    def validate(self):
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetTaskListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = GetTaskListResponseBodyTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class GetTaskListResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetTaskListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTaskListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserRequest(TeaModel):
    def __init__(self, instance_id=None, user_id=None):
        self.instance_id = instance_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetUserResponseBodyUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserResponseBodyUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class GetUserResponseBodyUserRolesRole(TeaModel):
    def __init__(self, instance_id=None, role_description=None, role_id=None, role_name=None):
        self.instance_id = instance_id  # type: str
        self.role_description = role_description  # type: str
        self.role_id = role_id  # type: str
        self.role_name = role_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserResponseBodyUserRolesRole, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        return self


class GetUserResponseBodyUserRoles(TeaModel):
    def __init__(self, role=None):
        self.role = role  # type: list[GetUserResponseBodyUserRolesRole]

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetUserResponseBodyUserRoles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = GetUserResponseBodyUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class GetUserResponseBodyUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(self, instance_id=None, skill_group_description=None, skill_group_id=None, skill_group_name=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserResponseBodyUserSkillLevelsSkillLevelSkill, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class GetUserResponseBodyUserSkillLevelsSkillLevel(TeaModel):
    def __init__(self, level=None, skill=None, skill_level_id=None):
        self.level = level  # type: int
        self.skill = skill  # type: GetUserResponseBodyUserSkillLevelsSkillLevelSkill
        self.skill_level_id = skill_level_id  # type: str

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        _map = super(GetUserResponseBodyUserSkillLevelsSkillLevel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Skill') is not None:
            temp_model = GetUserResponseBodyUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        return self


class GetUserResponseBodyUserSkillLevels(TeaModel):
    def __init__(self, skill_level=None):
        self.skill_level = skill_level  # type: list[GetUserResponseBodyUserSkillLevelsSkillLevel]

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetUserResponseBodyUserSkillLevels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = GetUserResponseBodyUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class GetUserResponseBodyUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, ram_id=None, roles=None, skill_levels=None, user_id=None):
        self.detail = detail  # type: GetUserResponseBodyUserDetail
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: str
        self.roles = roles  # type: GetUserResponseBodyUserRoles
        self.skill_levels = skill_levels  # type: GetUserResponseBodyUserSkillLevels
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()
        if self.roles:
            self.roles.validate()
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        _map = super(GetUserResponseBodyUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = GetUserResponseBodyUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Roles') is not None:
            temp_model = GetUserResponseBodyUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('SkillLevels') is not None:
            temp_model = GetUserResponseBodyUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetUserResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, user=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.user = user  # type: GetUserResponseBodyUser

    def validate(self):
        if self.user:
            self.user.validate()

    def to_map(self):
        _map = super(GetUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.user is not None:
            result['User'] = self.user.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('User') is not None:
            temp_model = GetUserResponseBodyUser()
            self.user = temp_model.from_map(m['User'])
        return self


class GetUserResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserByExtensionRequest(TeaModel):
    def __init__(self, extension=None, instance_id=None):
        self.extension = extension  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserByExtensionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetUserByExtensionResponseBodyUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, extension=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.extension = extension  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserByExtensionResponseBodyUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class GetUserByExtensionResponseBodyUserRoles(TeaModel):
    def __init__(self, instance_id=None, role_description=None, role_id=None, role_name=None):
        self.instance_id = instance_id  # type: str
        self.role_description = role_description  # type: str
        self.role_id = role_id  # type: str
        self.role_name = role_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserByExtensionResponseBodyUserRoles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        return self


class GetUserByExtensionResponseBodyUserSkillLevelsSkill(TeaModel):
    def __init__(self, instance_id=None, skill_group_description=None, skill_group_id=None, skill_group_name=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserByExtensionResponseBodyUserSkillLevelsSkill, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class GetUserByExtensionResponseBodyUserSkillLevels(TeaModel):
    def __init__(self, level=None, skill=None, skill_level_id=None):
        self.level = level  # type: int
        self.skill = skill  # type: GetUserByExtensionResponseBodyUserSkillLevelsSkill
        self.skill_level_id = skill_level_id  # type: str

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        _map = super(GetUserByExtensionResponseBodyUserSkillLevels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Skill') is not None:
            temp_model = GetUserByExtensionResponseBodyUserSkillLevelsSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        return self


class GetUserByExtensionResponseBodyUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, ram_id=None, roles=None, skill_levels=None, user_id=None):
        self.detail = detail  # type: GetUserByExtensionResponseBodyUserDetail
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: str
        self.roles = roles  # type: list[GetUserByExtensionResponseBodyUserRoles]
        self.skill_levels = skill_levels  # type: list[GetUserByExtensionResponseBodyUserSkillLevels]
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()
        if self.roles:
            for k in self.roles:
                if k:
                    k.validate()
        if self.skill_levels:
            for k in self.skill_levels:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetUserByExtensionResponseBodyUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        result['Roles'] = []
        if self.roles is not None:
            for k in self.roles:
                result['Roles'].append(k.to_map() if k else None)
        result['SkillLevels'] = []
        if self.skill_levels is not None:
            for k in self.skill_levels:
                result['SkillLevels'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = GetUserByExtensionResponseBodyUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        self.roles = []
        if m.get('Roles') is not None:
            for k in m.get('Roles'):
                temp_model = GetUserByExtensionResponseBodyUserRoles()
                self.roles.append(temp_model.from_map(k))
        self.skill_levels = []
        if m.get('SkillLevels') is not None:
            for k in m.get('SkillLevels'):
                temp_model = GetUserByExtensionResponseBodyUserSkillLevels()
                self.skill_levels.append(temp_model.from_map(k))
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetUserByExtensionResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, user=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.user = user  # type: GetUserByExtensionResponseBodyUser

    def validate(self):
        if self.user:
            self.user.validate()

    def to_map(self):
        _map = super(GetUserByExtensionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.user is not None:
            result['User'] = self.user.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('User') is not None:
            temp_model = GetUserByExtensionResponseBodyUser()
            self.user = temp_model.from_map(m['User'])
        return self


class GetUserByExtensionResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: GetUserByExtensionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserByExtensionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetUserByExtensionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InflightTaskTimeoutRequest(TeaModel):
    def __init__(self, instance_id=None, instance_owner_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.instance_owner_id = instance_owner_id  # type: long
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InflightTaskTimeoutRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class InflightTaskTimeoutResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(InflightTaskTimeoutResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InflightTaskTimeoutResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: InflightTaskTimeoutResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InflightTaskTimeoutResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = InflightTaskTimeoutResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class LaunchAppraiseRequest(TeaModel):
    def __init__(self, acid=None, instance_id=None):
        self.acid = acid  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(LaunchAppraiseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acid is not None:
            result['Acid'] = self.acid
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Acid') is not None:
            self.acid = m.get('Acid')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class LaunchAppraiseResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(LaunchAppraiseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class LaunchAppraiseResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: LaunchAppraiseResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(LaunchAppraiseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = LaunchAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class LaunchShortMessageAppraiseRequest(TeaModel):
    def __init__(self, acid=None, contact_type=None, instance_id=None, phone_numbers=None, skill_group_id=None):
        self.acid = acid  # type: str
        self.contact_type = contact_type  # type: int
        self.instance_id = instance_id  # type: str
        self.phone_numbers = phone_numbers  # type: str
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(LaunchShortMessageAppraiseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acid is not None:
            result['Acid'] = self.acid
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Acid') is not None:
            self.acid = m.get('Acid')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class LaunchShortMessageAppraiseResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(LaunchShortMessageAppraiseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class LaunchShortMessageAppraiseResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: LaunchShortMessageAppraiseResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(LaunchShortMessageAppraiseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = LaunchShortMessageAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentDevicesRequest(TeaModel):
    def __init__(self, instance_id=None, ram_ids=None, start_time=None, stop_time=None):
        self.instance_id = instance_id  # type: str
        self.ram_ids = ram_ids  # type: str
        self.start_time = start_time  # type: long
        self.stop_time = stop_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentDevicesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_ids is not None:
            result['RamIds'] = self.ram_ids
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamIds') is not None:
            self.ram_ids = m.get('RamIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        return self


class ListAgentDevicesResponseBodyAgentDeviceListAgentDevice(TeaModel):
    def __init__(self, browser_version=None, client_ip=None, client_port=None, instance_id=None, is_login=None,
                 login_time=None, ram_id=None, remark=None):
        self.browser_version = browser_version  # type: str
        self.client_ip = client_ip  # type: str
        self.client_port = client_port  # type: str
        self.instance_id = instance_id  # type: str
        self.is_login = is_login  # type: int
        self.login_time = login_time  # type: long
        self.ram_id = ram_id  # type: long
        self.remark = remark  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentDevicesResponseBodyAgentDeviceListAgentDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.browser_version is not None:
            result['BrowserVersion'] = self.browser_version
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_login is not None:
            result['IsLogin'] = self.is_login
        if self.login_time is not None:
            result['LoginTime'] = self.login_time
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BrowserVersion') is not None:
            self.browser_version = m.get('BrowserVersion')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsLogin') is not None:
            self.is_login = m.get('IsLogin')
        if m.get('LoginTime') is not None:
            self.login_time = m.get('LoginTime')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class ListAgentDevicesResponseBodyAgentDeviceList(TeaModel):
    def __init__(self, agent_device=None):
        self.agent_device = agent_device  # type: list[ListAgentDevicesResponseBodyAgentDeviceListAgentDevice]

    def validate(self):
        if self.agent_device:
            for k in self.agent_device:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentDevicesResponseBodyAgentDeviceList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentDevice'] = []
        if self.agent_device is not None:
            for k in self.agent_device:
                result['AgentDevice'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_device = []
        if m.get('AgentDevice') is not None:
            for k in m.get('AgentDevice'):
                temp_model = ListAgentDevicesResponseBodyAgentDeviceListAgentDevice()
                self.agent_device.append(temp_model.from_map(k))
        return self


class ListAgentDevicesResponseBody(TeaModel):
    def __init__(self, agent_device_list=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.agent_device_list = agent_device_list  # type: ListAgentDevicesResponseBodyAgentDeviceList
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.agent_device_list:
            self.agent_device_list.validate()

    def to_map(self):
        _map = super(ListAgentDevicesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_device_list is not None:
            result['AgentDeviceList'] = self.agent_device_list.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentDeviceList') is not None:
            temp_model = ListAgentDevicesResponseBodyAgentDeviceList()
            self.agent_device_list = temp_model.from_map(m['AgentDeviceList'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentDevicesResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListAgentDevicesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAgentDevicesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentEventsRequest(TeaModel):
    def __init__(self, event=None, instance_id=None, ram_id=None, start_time=None, stop_time=None):
        self.event = event  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: list[str]
        self.start_time = start_time  # type: long
        self.stop_time = stop_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentEventsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event is not None:
            result['Event'] = self.event
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Event') is not None:
            self.event = m.get('Event')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        return self


class ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup(TeaModel):
    def __init__(self, skill_group_id=None, skill_group_name=None):
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds(TeaModel):
    def __init__(self, skill_group=None):
        self.skill_group = skill_group  # type: list[ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup]

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ListAgentEventsResponseBodyAgentEventListAgentEvent(TeaModel):
    def __init__(self, event=None, event_time=None, instance_id=None, login_name=None, ram_id=None,
                 skill_group_ids=None):
        self.event = event  # type: str
        self.event_time = event_time  # type: long
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.ram_id = ram_id  # type: long
        self.skill_group_ids = skill_group_ids  # type: ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds

    def validate(self):
        if self.skill_group_ids:
            self.skill_group_ids.validate()

    def to_map(self):
        _map = super(ListAgentEventsResponseBodyAgentEventListAgentEvent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event is not None:
            result['Event'] = self.event
        if self.event_time is not None:
            result['EventTime'] = self.event_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Event') is not None:
            self.event = m.get('Event')
        if m.get('EventTime') is not None:
            self.event_time = m.get('EventTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('SkillGroupIds') is not None:
            temp_model = ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds()
            self.skill_group_ids = temp_model.from_map(m['SkillGroupIds'])
        return self


class ListAgentEventsResponseBodyAgentEventList(TeaModel):
    def __init__(self, agent_event=None):
        self.agent_event = agent_event  # type: list[ListAgentEventsResponseBodyAgentEventListAgentEvent]

    def validate(self):
        if self.agent_event:
            for k in self.agent_event:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentEventsResponseBodyAgentEventList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentEvent'] = []
        if self.agent_event is not None:
            for k in self.agent_event:
                result['AgentEvent'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_event = []
        if m.get('AgentEvent') is not None:
            for k in m.get('AgentEvent'):
                temp_model = ListAgentEventsResponseBodyAgentEventListAgentEvent()
                self.agent_event.append(temp_model.from_map(k))
        return self


class ListAgentEventsResponseBody(TeaModel):
    def __init__(self, agent_event_list=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.agent_event_list = agent_event_list  # type: ListAgentEventsResponseBodyAgentEventList
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.agent_event_list:
            self.agent_event_list.validate()

    def to_map(self):
        _map = super(ListAgentEventsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_event_list is not None:
            result['AgentEventList'] = self.agent_event_list.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentEventList') is not None:
            temp_model = ListAgentEventsResponseBodyAgentEventList()
            self.agent_event_list = temp_model.from_map(m['AgentEventList'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentEventsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListAgentEventsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAgentEventsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentEventsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentStateLogsRequest(TeaModel):
    def __init__(self, end_time=None, instance_id=None, page_number=None, page_size=None, ram_id=None,
                 start_time=None):
        self.end_time = end_time  # type: long
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.ram_id = ram_id  # type: long
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentStateLogsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListAgentStateLogsResponseBodyAgentStateLogPageList(TeaModel):
    def __init__(self, connect_id=None, contact_id=None, counter_party=None, instance_id=None, ram_id=None,
                 skill_group_ids=None, state=None, state_code=None, state_time=None):
        self.connect_id = connect_id  # type: str
        self.contact_id = contact_id  # type: str
        self.counter_party = counter_party  # type: str
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: long
        self.skill_group_ids = skill_group_ids  # type: str
        self.state = state  # type: str
        self.state_code = state_code  # type: str
        self.state_time = state_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentStateLogsResponseBodyAgentStateLogPageList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.connect_id is not None:
            result['ConnectId'] = self.connect_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.counter_party is not None:
            result['CounterParty'] = self.counter_party
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.state is not None:
            result['State'] = self.state
        if self.state_code is not None:
            result['StateCode'] = self.state_code
        if self.state_time is not None:
            result['StateTime'] = self.state_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConnectId') is not None:
            self.connect_id = m.get('ConnectId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('CounterParty') is not None:
            self.counter_party = m.get('CounterParty')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('StateCode') is not None:
            self.state_code = m.get('StateCode')
        if m.get('StateTime') is not None:
            self.state_time = m.get('StateTime')
        return self


class ListAgentStateLogsResponseBodyAgentStateLogPage(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListAgentStateLogsResponseBodyAgentStateLogPageList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentStateLogsResponseBodyAgentStateLogPage, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListAgentStateLogsResponseBodyAgentStateLogPageList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentStateLogsResponseBody(TeaModel):
    def __init__(self, agent_state_log_page=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.agent_state_log_page = agent_state_log_page  # type: ListAgentStateLogsResponseBodyAgentStateLogPage
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.agent_state_log_page:
            self.agent_state_log_page.validate()

    def to_map(self):
        _map = super(ListAgentStateLogsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_state_log_page is not None:
            result['AgentStateLogPage'] = self.agent_state_log_page.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentStateLogPage') is not None:
            temp_model = ListAgentStateLogsResponseBodyAgentStateLogPage()
            self.agent_state_log_page = temp_model.from_map(m['AgentStateLogPage'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentStateLogsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListAgentStateLogsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAgentStateLogsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentStateLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentStatesRequest(TeaModel):
    def __init__(self, agent_ids=None, instance_id=None, page_number=None, page_size=None, skill_group_id=None,
                 state=None):
        self.agent_ids = agent_ids  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_id = skill_group_id  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentStatesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListAgentStatesResponseBodyDataListRealTimeAgentState(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, dn=None, instance_id=None, login_name=None, state=None,
                 state_duration=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.dn = dn  # type: str
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.state = state  # type: str
        self.state_duration = state_duration  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentStatesResponseBodyDataListRealTimeAgentState, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.dn is not None:
            result['Dn'] = self.dn
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.state is not None:
            result['State'] = self.state
        if self.state_duration is not None:
            result['StateDuration'] = self.state_duration
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('Dn') is not None:
            self.dn = m.get('Dn')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('StateDuration') is not None:
            self.state_duration = m.get('StateDuration')
        return self


class ListAgentStatesResponseBodyDataList(TeaModel):
    def __init__(self, real_time_agent_state=None):
        self.real_time_agent_state = real_time_agent_state  # type: list[ListAgentStatesResponseBodyDataListRealTimeAgentState]

    def validate(self):
        if self.real_time_agent_state:
            for k in self.real_time_agent_state:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentStatesResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['RealTimeAgentState'] = []
        if self.real_time_agent_state is not None:
            for k in self.real_time_agent_state:
                result['RealTimeAgentState'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.real_time_agent_state = []
        if m.get('RealTimeAgentState') is not None:
            for k in m.get('RealTimeAgentState'):
                temp_model = ListAgentStatesResponseBodyDataListRealTimeAgentState()
                self.real_time_agent_state.append(temp_model.from_map(k))
        return self


class ListAgentStatesResponseBodyData(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListAgentStatesResponseBodyDataList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListAgentStatesResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentStatesResponseBodyDataList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentStatesResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: ListAgentStatesResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(ListAgentStatesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListAgentStatesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentStatesResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListAgentStatesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAgentStatesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentStatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentSummaryReportsRequest(TeaModel):
    def __init__(self, agent_ids=None, end_time=None, instance_id=None, page_number=None, page_size=None,
                 skill_group_id=None, start_time=None):
        self.agent_ids = agent_ids  # type: str
        self.end_time = end_time  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_id = skill_group_id  # type: str
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound(TeaModel):
    def __init__(self, average_ring_time=None, average_talk_time=None, average_work_time=None, calls_handled=None,
                 calls_offered=None, handle_rate=None, max_ring_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 service_level_20=None, total_ring_time=None, total_talk_time=None, total_work_time=None):
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: str
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 first_log_in_time=None, last_log_out_time=None, max_ready_time=None, max_talk_time=None, max_work_time=None,
                 occupancy_rate=None, one_transfer_calls=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, total_break_time=None, total_calls=None, total_logged_in_time=None, total_ready_time=None,
                 total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.first_log_in_time = first_log_in_time  # type: str
        self.last_log_out_time = last_log_out_time  # type: str
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.one_transfer_calls = one_transfer_calls  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.first_log_in_time is not None:
            result['FirstLogInTime'] = self.first_log_in_time
        if self.last_log_out_time is not None:
            result['LastLogOutTime'] = self.last_log_out_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.one_transfer_calls is not None:
            result['OneTransferCalls'] = self.one_transfer_calls
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('FirstLogInTime') is not None:
            self.first_log_in_time = m.get('FirstLogInTime')
        if m.get('LastLogOutTime') is not None:
            self.last_log_out_time = m.get('LastLogOutTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('OneTransferCalls') is not None:
            self.one_transfer_calls = m.get('OneTransferCalls')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, inbound=None, instance_id=None, login_name=None,
                 outbound=None, overall=None, skill_group_ids=None, skill_group_names=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.inbound = inbound  # type: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.outbound = outbound  # type: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound
        self.overall = overall  # type: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall
        self.skill_group_ids = skill_group_ids  # type: str
        self.skill_group_names = skill_group_names  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('Inbound') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Outbound') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList(TeaModel):
    def __init__(self, agent_summary_report=None):
        self.agent_summary_report = agent_summary_report  # type: list[ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport]

    def validate(self):
        if self.agent_summary_report:
            for k in self.agent_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentSummaryReport'] = []
        if self.agent_summary_report is not None:
            for k in self.agent_summary_report:
                result['AgentSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_summary_report = []
        if m.get('AgentSummaryReport') is not None:
            for k in m.get('AgentSummaryReport'):
                temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport()
                self.agent_summary_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentSummaryReportsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, paged_agent_summary_report=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.paged_agent_summary_report = paged_agent_summary_report  # type: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.paged_agent_summary_report:
            self.paged_agent_summary_report.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.paged_agent_summary_report is not None:
            result['PagedAgentSummaryReport'] = self.paged_agent_summary_report.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PagedAgentSummaryReport') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport()
            self.paged_agent_summary_report = temp_model.from_map(m['PagedAgentSummaryReport'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentSummaryReportsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListAgentSummaryReportsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentSummaryReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentSummaryReportsByIntervalRequest(TeaModel):
    def __init__(self, agent_ids=None, end_time=None, instance_id=None, interval=None, page_number=None,
                 page_size=None, skill_group_id=None, start_time=None):
        self.agent_ids = agent_ids  # type: str
        self.end_time = end_time  # type: str
        self.instance_id = instance_id  # type: str
        self.interval = interval  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_id = skill_group_id  # type: str
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound(TeaModel):
    def __init__(self, average_ring_time=None, average_talk_time=None, average_work_time=None, calls_handled=None,
                 calls_offered=None, handle_rate=None, max_ring_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 service_level_20=None, total_ring_time=None, total_talk_time=None, total_work_time=None):
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 first_log_in_time=None, last_log_out_time=None, max_ready_time=None, max_talk_time=None, max_work_time=None,
                 occupancy_rate=None, one_transfer_calls=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, total_break_time=None, total_calls=None, total_logged_in_time=None, total_ready_time=None,
                 total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.first_log_in_time = first_log_in_time  # type: str
        self.last_log_out_time = last_log_out_time  # type: str
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.one_transfer_calls = one_transfer_calls  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.first_log_in_time is not None:
            result['FirstLogInTime'] = self.first_log_in_time
        if self.last_log_out_time is not None:
            result['LastLogOutTime'] = self.last_log_out_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.one_transfer_calls is not None:
            result['OneTransferCalls'] = self.one_transfer_calls
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('FirstLogInTime') is not None:
            self.first_log_in_time = m.get('FirstLogInTime')
        if m.get('LastLogOutTime') is not None:
            self.last_log_out_time = m.get('LastLogOutTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('OneTransferCalls') is not None:
            self.one_transfer_calls = m.get('OneTransferCalls')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, inbound=None, instance_id=None, login_name=None,
                 outbound=None, overall=None, skill_group_ids=None, skill_group_names=None, timestamp=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.inbound = inbound  # type: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.outbound = outbound  # type: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound
        self.overall = overall  # type: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall
        self.skill_group_ids = skill_group_ids  # type: str
        self.skill_group_names = skill_group_names  # type: str
        self.timestamp = timestamp  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('Inbound') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Outbound') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList(TeaModel):
    def __init__(self, agent_summary_report=None):
        self.agent_summary_report = agent_summary_report  # type: list[ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport]

    def validate(self):
        if self.agent_summary_report:
            for k in self.agent_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentSummaryReport'] = []
        if self.agent_summary_report is not None:
            for k in self.agent_summary_report:
                result['AgentSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_summary_report = []
        if m.get('AgentSummaryReport') is not None:
            for k in m.get('AgentSummaryReport'):
                temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport()
                self.agent_summary_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport(TeaModel):
    def __init__(self, agent_id=None, interval_list=None):
        self.agent_id = agent_id  # type: str
        self.interval_list = interval_list  # type: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList

    def validate(self):
        if self.interval_list:
            self.interval_list.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.interval_list is not None:
            result['IntervalList'] = self.interval_list.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('IntervalList') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList()
            self.interval_list = temp_model.from_map(m['IntervalList'])
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList(TeaModel):
    def __init__(self, agent_time_interval_report=None):
        self.agent_time_interval_report = agent_time_interval_report  # type: list[ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport]

    def validate(self):
        if self.agent_time_interval_report:
            for k in self.agent_time_interval_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentTimeIntervalReport'] = []
        if self.agent_time_interval_report is not None:
            for k in self.agent_time_interval_report:
                result['AgentTimeIntervalReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_time_interval_report = []
        if m.get('AgentTimeIntervalReport') is not None:
            for k in m.get('AgentTimeIntervalReport'):
                temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport()
                self.agent_time_interval_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentSummaryReportsByIntervalResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, paged_agent_summary_report=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.paged_agent_summary_report = paged_agent_summary_report  # type: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.paged_agent_summary_report:
            self.paged_agent_summary_report.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.paged_agent_summary_report is not None:
            result['PagedAgentSummaryReport'] = self.paged_agent_summary_report.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PagedAgentSummaryReport') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport()
            self.paged_agent_summary_report = temp_model.from_map(m['PagedAgentSummaryReport'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentSummaryReportsByIntervalResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListAgentSummaryReportsByIntervalResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsByIntervalResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentSummaryReportsSinceMidnightRequest(TeaModel):
    def __init__(self, agent_ids=None, instance_id=None, page_number=None, page_size=None, skill_group_id=None):
        self.agent_ids = agent_ids  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound(TeaModel):
    def __init__(self, average_ring_time=None, average_talk_time=None, average_work_time=None, calls_handled=None,
                 calls_offered=None, handle_rate=None, max_ring_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 service_level_20=None, total_ring_time=None, total_talk_time=None, total_work_time=None):
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.handle_rate = handle_rate  # type: float
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: str
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 max_ready_time=None, max_talk_time=None, max_work_time=None, occupancy_rate=None, one_transfer_calls=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_break_time=None, total_calls=None, total_logged_in_time=None, total_ready_time=None, total_talk_time=None,
                 total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.one_transfer_calls = one_transfer_calls  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.one_transfer_calls is not None:
            result['OneTransferCalls'] = self.one_transfer_calls
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('OneTransferCalls') is not None:
            self.one_transfer_calls = m.get('OneTransferCalls')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, inbound=None, instance_id=None, login_name=None,
                 outbound=None, overall=None, skill_group_ids=None, skill_group_names=None, timestamp=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.inbound = inbound  # type: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.login_name = login_name  # type: str
        self.outbound = outbound  # type: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound
        self.overall = overall  # type: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall
        self.skill_group_ids = skill_group_ids  # type: str
        self.skill_group_names = skill_group_names  # type: str
        self.timestamp = timestamp  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('Inbound') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Outbound') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList(TeaModel):
    def __init__(self, agent_summary_report=None):
        self.agent_summary_report = agent_summary_report  # type: list[ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport]

    def validate(self):
        if self.agent_summary_report:
            for k in self.agent_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentSummaryReport'] = []
        if self.agent_summary_report is not None:
            for k in self.agent_summary_report:
                result['AgentSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.agent_summary_report = []
        if m.get('AgentSummaryReport') is not None:
            for k in m.get('AgentSummaryReport'):
                temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport()
                self.agent_summary_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, paged_agent_summary_report=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.paged_agent_summary_report = paged_agent_summary_report  # type: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.paged_agent_summary_report:
            self.paged_agent_summary_report.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.paged_agent_summary_report is not None:
            result['PagedAgentSummaryReport'] = self.paged_agent_summary_report.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PagedAgentSummaryReport') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport()
            self.paged_agent_summary_report = temp_model.from_map(m['PagedAgentSummaryReport'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentSummaryReportsSinceMidnightResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListAgentSummaryReportsSinceMidnightResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAgentSummaryReportsSinceMidnightResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListBasicStatisticsReportSubItemsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, page_number=None, page_size=None, title=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListBasicStatisticsReportSubItemsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class ListBasicStatisticsReportSubItemsResponseBodySubItemsListRow(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListBasicStatisticsReportSubItemsResponseBodySubItemsListRow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListBasicStatisticsReportSubItemsResponseBodySubItemsList(TeaModel):
    def __init__(self, basic_statistics_report_sub_item_name=None, count=None, percentage=None, row=None,
                 value=None):
        self.basic_statistics_report_sub_item_name = basic_statistics_report_sub_item_name  # type: str
        self.count = count  # type: int
        self.percentage = percentage  # type: int
        self.row = row  # type: list[ListBasicStatisticsReportSubItemsResponseBodySubItemsListRow]
        self.value = value  # type: str

    def validate(self):
        if self.row:
            for k in self.row:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListBasicStatisticsReportSubItemsResponseBodySubItemsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.basic_statistics_report_sub_item_name is not None:
            result['BasicStatisticsReportSubItemName'] = self.basic_statistics_report_sub_item_name
        if self.count is not None:
            result['Count'] = self.count
        if self.percentage is not None:
            result['Percentage'] = self.percentage
        result['Row'] = []
        if self.row is not None:
            for k in self.row:
                result['Row'].append(k.to_map() if k else None)
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BasicStatisticsReportSubItemName') is not None:
            self.basic_statistics_report_sub_item_name = m.get('BasicStatisticsReportSubItemName')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Percentage') is not None:
            self.percentage = m.get('Percentage')
        self.row = []
        if m.get('Row') is not None:
            for k in m.get('Row'):
                temp_model = ListBasicStatisticsReportSubItemsResponseBodySubItemsListRow()
                self.row.append(temp_model.from_map(k))
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListBasicStatisticsReportSubItemsResponseBodySubItems(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListBasicStatisticsReportSubItemsResponseBodySubItemsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListBasicStatisticsReportSubItemsResponseBodySubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListBasicStatisticsReportSubItemsResponseBodySubItemsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListBasicStatisticsReportSubItemsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, sub_items=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.sub_items = sub_items  # type: ListBasicStatisticsReportSubItemsResponseBodySubItems
        self.success = success  # type: bool

    def validate(self):
        if self.sub_items:
            self.sub_items.validate()

    def to_map(self):
        _map = super(ListBasicStatisticsReportSubItemsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.sub_items is not None:
            result['SubItems'] = self.sub_items.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SubItems') is not None:
            temp_model = ListBasicStatisticsReportSubItemsResponseBodySubItems()
            self.sub_items = temp_model.from_map(m['SubItems'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListBasicStatisticsReportSubItemsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListBasicStatisticsReportSubItemsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListBasicStatisticsReportSubItemsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListBasicStatisticsReportSubItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCallDetailRecordsRequest(TeaModel):
    def __init__(self, contact_disposition=None, contact_id=None, contact_type=None, criteria=None,
                 instance_id=None, order_by=None, page_number=None, page_size=None, phone_number=None, start_time=None,
                 stop_time=None, with_recording=None):
        self.contact_disposition = contact_disposition  # type: str
        self.contact_id = contact_id  # type: str
        self.contact_type = contact_type  # type: str
        self.criteria = criteria  # type: str
        self.instance_id = instance_id  # type: str
        self.order_by = order_by  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.phone_number = phone_number  # type: str
        self.start_time = start_time  # type: long
        self.stop_time = stop_time  # type: long
        self.with_recording = with_recording  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCallDetailRecordsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_disposition is not None:
            result['ContactDisposition'] = self.contact_disposition
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.with_recording is not None:
            result['WithRecording'] = self.with_recording
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactDisposition') is not None:
            self.contact_disposition = m.get('ContactDisposition')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('WithRecording') is not None:
            self.with_recording = m.get('WithRecording')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent(TeaModel):
    def __init__(self, agent_id=None, feedback=None, satisfaction=None):
        self.agent_id = agent_id  # type: str
        self.feedback = feedback  # type: str
        self.satisfaction = satisfaction  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents(TeaModel):
    def __init__(self, call_detail_agent=None):
        self.call_detail_agent = call_detail_agent  # type: list[ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent]

    def validate(self):
        if self.call_detail_agent:
            for k in self.call_detail_agent:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallDetailAgent'] = []
        if self.call_detail_agent is not None:
            for k in self.call_detail_agent:
                result['CallDetailAgent'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_detail_agent = []
        if m.get('CallDetailAgent') is not None:
            for k in m.get('CallDetailAgent'):
                temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent()
                self.call_detail_agent.append(temp_model.from_map(k))
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, contact_id=None, duration=None, file_description=None,
                 file_name=None, quality_check_task_id=None, quality_check_tid=None, start_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.contact_id = contact_id  # type: str
        self.duration = duration  # type: int
        self.file_description = file_description  # type: str
        self.file_name = file_name  # type: str
        self.quality_check_task_id = quality_check_task_id  # type: str
        self.quality_check_tid = quality_check_tid  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.quality_check_task_id is not None:
            result['QualityCheckTaskId'] = self.quality_check_task_id
        if self.quality_check_tid is not None:
            result['QualityCheckTid'] = self.quality_check_tid
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('QualityCheckTaskId') is not None:
            self.quality_check_task_id = m.get('QualityCheckTaskId')
        if m.get('QualityCheckTid') is not None:
            self.quality_check_tid = m.get('QualityCheckTid')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings(TeaModel):
    def __init__(self, recording=None):
        self.recording = recording  # type: list[ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording]

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord(TeaModel):
    def __init__(self, agent_names=None, agents=None, called_number=None, calling_number=None,
                 contact_disposition=None, contact_id=None, contact_type=None, duration=None, feedback=None, instance_id=None,
                 recordings=None, satisfaction=None, satisfaction_desc=None, skill_group_id_list=None, skill_group_names=None,
                 start_time=None):
        self.agent_names = agent_names  # type: str
        self.agents = agents  # type: ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.contact_disposition = contact_disposition  # type: str
        self.contact_id = contact_id  # type: str
        self.contact_type = contact_type  # type: str
        self.duration = duration  # type: int
        self.feedback = feedback  # type: str
        self.instance_id = instance_id  # type: str
        self.recordings = recordings  # type: ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings
        self.satisfaction = satisfaction  # type: int
        self.satisfaction_desc = satisfaction_desc  # type: str
        self.skill_group_id_list = skill_group_id_list  # type: str
        self.skill_group_names = skill_group_names  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        if self.agents:
            self.agents.validate()
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_names is not None:
            result['AgentNames'] = self.agent_names
        if self.agents is not None:
            result['Agents'] = self.agents.to_map()
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.contact_disposition is not None:
            result['ContactDisposition'] = self.contact_disposition
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        if self.satisfaction_desc is not None:
            result['SatisfactionDesc'] = self.satisfaction_desc
        if self.skill_group_id_list is not None:
            result['SkillGroupIdList'] = self.skill_group_id_list
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentNames') is not None:
            self.agent_names = m.get('AgentNames')
        if m.get('Agents') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents()
            self.agents = temp_model.from_map(m['Agents'])
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ContactDisposition') is not None:
            self.contact_disposition = m.get('ContactDisposition')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Recordings') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        if m.get('SatisfactionDesc') is not None:
            self.satisfaction_desc = m.get('SatisfactionDesc')
        if m.get('SkillGroupIdList') is not None:
            self.skill_group_id_list = m.get('SkillGroupIdList')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsList(TeaModel):
    def __init__(self, call_detail_record=None):
        self.call_detail_record = call_detail_record  # type: list[ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord]

    def validate(self):
        if self.call_detail_record:
            for k in self.call_detail_record:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBodyCallDetailRecordsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallDetailRecord'] = []
        if self.call_detail_record is not None:
            for k in self.call_detail_record:
                result['CallDetailRecord'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_detail_record = []
        if m.get('CallDetailRecord') is not None:
            for k in m.get('CallDetailRecord'):
                temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord()
                self.call_detail_record.append(temp_model.from_map(k))
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecords(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListCallDetailRecordsResponseBodyCallDetailRecordsList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBodyCallDetailRecords, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListCallDetailRecordsResponseBody(TeaModel):
    def __init__(self, call_detail_records=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.call_detail_records = call_detail_records  # type: ListCallDetailRecordsResponseBodyCallDetailRecords
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.call_detail_records:
            self.call_detail_records.validate()

    def to_map(self):
        _map = super(ListCallDetailRecordsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_detail_records is not None:
            result['CallDetailRecords'] = self.call_detail_records.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallDetailRecords') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecords()
            self.call_detail_records = temp_model.from_map(m['CallDetailRecords'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListCallDetailRecordsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListCallDetailRecordsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListCallDetailRecordsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListCallDetailRecordsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCallEventDetailByContactIdRequest(TeaModel):
    def __init__(self, contact_id=None, instance_id=None):
        self.contact_id = contact_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCallEventDetailByContactIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData(TeaModel):
    def __init__(self, event_type=None, hang_uper=None, helper=None, satisfactional_research=None, skill_group=None):
        self.event_type = event_type  # type: str
        self.hang_uper = hang_uper  # type: str
        self.helper = helper  # type: str
        self.satisfactional_research = satisfactional_research  # type: str
        self.skill_group = skill_group  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.hang_uper is not None:
            result['HangUper'] = self.hang_uper
        if self.helper is not None:
            result['Helper'] = self.helper
        if self.satisfactional_research is not None:
            result['SatisfactionalResearch'] = self.satisfactional_research
        if self.skill_group is not None:
            result['SkillGroup'] = self.skill_group
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('HangUper') is not None:
            self.hang_uper = m.get('HangUper')
        if m.get('Helper') is not None:
            self.helper = m.get('Helper')
        if m.get('SatisfactionalResearch') is not None:
            self.satisfactional_research = m.get('SatisfactionalResearch')
        if m.get('SkillGroup') is not None:
            self.skill_group = m.get('SkillGroup')
        return self


class ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail(TeaModel):
    def __init__(self, agent_name=None, call_mode=None, detail_data=None, duration=None, event=None, status=None,
                 time_stamp=None):
        self.agent_name = agent_name  # type: str
        self.call_mode = call_mode  # type: str
        self.detail_data = detail_data  # type: ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData
        self.duration = duration  # type: int
        self.event = event  # type: str
        self.status = status  # type: str
        self.time_stamp = time_stamp  # type: str

    def validate(self):
        if self.detail_data:
            self.detail_data.validate()

    def to_map(self):
        _map = super(ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.call_mode is not None:
            result['CallMode'] = self.call_mode
        if self.detail_data is not None:
            result['DetailData'] = self.detail_data.to_map()
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.event is not None:
            result['Event'] = self.event
        if self.status is not None:
            result['Status'] = self.status
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('CallMode') is not None:
            self.call_mode = m.get('CallMode')
        if m.get('DetailData') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData()
            self.detail_data = temp_model.from_map(m['DetailData'])
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Event') is not None:
            self.event = m.get('Event')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        return self


class ListCallEventDetailByContactIdResponseBodyDataEvents(TeaModel):
    def __init__(self, call_event_detail=None):
        self.call_event_detail = call_event_detail  # type: list[ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail]

    def validate(self):
        if self.call_event_detail:
            for k in self.call_event_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListCallEventDetailByContactIdResponseBodyDataEvents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallEventDetail'] = []
        if self.call_event_detail is not None:
            for k in self.call_event_detail:
                result['CallEventDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_event_detail = []
        if m.get('CallEventDetail') is not None:
            for k in m.get('CallEventDetail'):
                temp_model = ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail()
                self.call_event_detail.append(temp_model.from_map(k))
        return self


class ListCallEventDetailByContactIdResponseBodyData(TeaModel):
    def __init__(self, call_type=None, callee=None, caller=None, events=None, privacy_number=None,
                 release_agent=None, release_reason=None, start_time=None):
        self.call_type = call_type  # type: str
        self.callee = callee  # type: str
        self.caller = caller  # type: str
        self.events = events  # type: ListCallEventDetailByContactIdResponseBodyDataEvents
        self.privacy_number = privacy_number  # type: str
        self.release_agent = release_agent  # type: str
        self.release_reason = release_reason  # type: str
        self.start_time = start_time  # type: str

    def validate(self):
        if self.events:
            self.events.validate()

    def to_map(self):
        _map = super(ListCallEventDetailByContactIdResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_type is not None:
            result['CallType'] = self.call_type
        if self.callee is not None:
            result['Callee'] = self.callee
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.events is not None:
            result['Events'] = self.events.to_map()
        if self.privacy_number is not None:
            result['PrivacyNumber'] = self.privacy_number
        if self.release_agent is not None:
            result['ReleaseAgent'] = self.release_agent
        if self.release_reason is not None:
            result['ReleaseReason'] = self.release_reason
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallType') is not None:
            self.call_type = m.get('CallType')
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('Events') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBodyDataEvents()
            self.events = temp_model.from_map(m['Events'])
        if m.get('PrivacyNumber') is not None:
            self.privacy_number = m.get('PrivacyNumber')
        if m.get('ReleaseAgent') is not None:
            self.release_agent = m.get('ReleaseAgent')
        if m.get('ReleaseReason') is not None:
            self.release_reason = m.get('ReleaseReason')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListCallEventDetailByContactIdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: ListCallEventDetailByContactIdResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(ListCallEventDetailByContactIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListCallEventDetailByContactIdResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListCallEventDetailByContactIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListCallEventDetailByContactIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCallMeasureSummaryReportsRequest(TeaModel):
    def __init__(self, interval_type=None):
        self.interval_type = interval_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCallMeasureSummaryReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.interval_type is not None:
            result['IntervalType'] = self.interval_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntervalType') is not None:
            self.interval_type = m.get('IntervalType')
        return self


class ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport(TeaModel):
    def __init__(self, day=None, inbound_count=None, inbound_duration_by_minute=None, month=None,
                 outbound_count=None, outbound_duration_by_minute=None, year=None):
        self.day = day  # type: str
        self.inbound_count = inbound_count  # type: long
        self.inbound_duration_by_minute = inbound_duration_by_minute  # type: long
        self.month = month  # type: str
        self.outbound_count = outbound_count  # type: long
        self.outbound_duration_by_minute = outbound_duration_by_minute  # type: long
        self.year = year  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day is not None:
            result['Day'] = self.day
        if self.inbound_count is not None:
            result['InboundCount'] = self.inbound_count
        if self.inbound_duration_by_minute is not None:
            result['InboundDurationByMinute'] = self.inbound_duration_by_minute
        if self.month is not None:
            result['Month'] = self.month
        if self.outbound_count is not None:
            result['OutboundCount'] = self.outbound_count
        if self.outbound_duration_by_minute is not None:
            result['OutboundDurationByMinute'] = self.outbound_duration_by_minute
        if self.year is not None:
            result['Year'] = self.year
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('InboundCount') is not None:
            self.inbound_count = m.get('InboundCount')
        if m.get('InboundDurationByMinute') is not None:
            self.inbound_duration_by_minute = m.get('InboundDurationByMinute')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        if m.get('OutboundCount') is not None:
            self.outbound_count = m.get('OutboundCount')
        if m.get('OutboundDurationByMinute') is not None:
            self.outbound_duration_by_minute = m.get('OutboundDurationByMinute')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        return self


class ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList(TeaModel):
    def __init__(self, call_measure_summary_report=None):
        self.call_measure_summary_report = call_measure_summary_report  # type: list[ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport]

    def validate(self):
        if self.call_measure_summary_report:
            for k in self.call_measure_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallMeasureSummaryReport'] = []
        if self.call_measure_summary_report is not None:
            for k in self.call_measure_summary_report:
                result['CallMeasureSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_measure_summary_report = []
        if m.get('CallMeasureSummaryReport') is not None:
            for k in m.get('CallMeasureSummaryReport'):
                temp_model = ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport()
                self.call_measure_summary_report.append(temp_model.from_map(k))
        return self


class ListCallMeasureSummaryReportsResponseBody(TeaModel):
    def __init__(self, call_measure_summary_report_list=None, code=None, http_status_code=None, message=None,
                 request_id=None, success=None):
        self.call_measure_summary_report_list = call_measure_summary_report_list  # type: ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.call_measure_summary_report_list:
            self.call_measure_summary_report_list.validate()

    def to_map(self):
        _map = super(ListCallMeasureSummaryReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_measure_summary_report_list is not None:
            result['CallMeasureSummaryReportList'] = self.call_measure_summary_report_list.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallMeasureSummaryReportList') is not None:
            temp_model = ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList()
            self.call_measure_summary_report_list = temp_model.from_map(m['CallMeasureSummaryReportList'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListCallMeasureSummaryReportsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListCallMeasureSummaryReportsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListCallMeasureSummaryReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListCallMeasureSummaryReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListConfigRequest(TeaModel):
    def __init__(self, config_item=None, instance_id=None):
        self.config_item = config_item  # type: list[str]
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_item is not None:
            result['ConfigItem'] = self.config_item
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigItem') is not None:
            self.config_item = m.get('ConfigItem')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListConfigResponseBodyConfigItemsConfigItem(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfigResponseBodyConfigItemsConfigItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListConfigResponseBodyConfigItems(TeaModel):
    def __init__(self, config_item=None):
        self.config_item = config_item  # type: list[ListConfigResponseBodyConfigItemsConfigItem]

    def validate(self):
        if self.config_item:
            for k in self.config_item:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListConfigResponseBodyConfigItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ConfigItem'] = []
        if self.config_item is not None:
            for k in self.config_item:
                result['ConfigItem'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.config_item = []
        if m.get('ConfigItem') is not None:
            for k in m.get('ConfigItem'):
                temp_model = ListConfigResponseBodyConfigItemsConfigItem()
                self.config_item.append(temp_model.from_map(k))
        return self


class ListConfigResponseBody(TeaModel):
    def __init__(self, code=None, config_items=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.config_items = config_items  # type: ListConfigResponseBodyConfigItems
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.config_items:
            self.config_items.validate()

    def to_map(self):
        _map = super(ListConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.config_items is not None:
            result['ConfigItems'] = self.config_items.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConfigItems') is not None:
            temp_model = ListConfigResponseBodyConfigItems()
            self.config_items = temp_model.from_map(m['ConfigItems'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListConfigResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListContactFlowsRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListContactFlowsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion(TeaModel):
    def __init__(self, contact_flow_version_description=None, contact_flow_version_id=None, last_modified=None,
                 last_modified_by=None, locked_by=None, status=None, version=None):
        self.contact_flow_version_description = contact_flow_version_description  # type: str
        self.contact_flow_version_id = contact_flow_version_id  # type: str
        self.last_modified = last_modified  # type: str
        self.last_modified_by = last_modified_by  # type: str
        self.locked_by = locked_by  # type: str
        self.status = status  # type: str
        self.version = version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        if self.locked_by is not None:
            result['LockedBy'] = self.locked_by
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        if m.get('LockedBy') is not None:
            self.locked_by = m.get('LockedBy')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowVersions(TeaModel):
    def __init__(self, contact_flow_version=None):
        self.contact_flow_version = contact_flow_version  # type: list[ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion]

    def validate(self):
        if self.contact_flow_version:
            for k in self.contact_flow_version:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListContactFlowsResponseBodyContactFlowsContactFlowVersions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ContactFlowVersion'] = []
        if self.contact_flow_version is not None:
            for k in self.contact_flow_version:
                result['ContactFlowVersion'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contact_flow_version = []
        if m.get('ContactFlowVersion') is not None:
            for k in m.get('ContactFlowVersion'):
                temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion()
                self.contact_flow_version.append(temp_model.from_map(k))
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlow(TeaModel):
    def __init__(self, applied_version=None, contact_flow_description=None, contact_flow_id=None,
                 contact_flow_name=None, instance_id=None, phone_numbers=None, type=None, versions=None):
        self.applied_version = applied_version  # type: str
        self.contact_flow_description = contact_flow_description  # type: str
        self.contact_flow_id = contact_flow_id  # type: str
        self.contact_flow_name = contact_flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.phone_numbers = phone_numbers  # type: ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers
        self.type = type  # type: str
        self.versions = versions  # type: ListContactFlowsResponseBodyContactFlowsContactFlowVersions

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.versions:
            self.versions.validate()

    def to_map(self):
        _map = super(ListContactFlowsResponseBodyContactFlowsContactFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.type is not None:
            result['Type'] = self.type
        if self.versions is not None:
            result['Versions'] = self.versions.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Versions') is not None:
            temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowVersions()
            self.versions = temp_model.from_map(m['Versions'])
        return self


class ListContactFlowsResponseBodyContactFlows(TeaModel):
    def __init__(self, contact_flow=None):
        self.contact_flow = contact_flow  # type: list[ListContactFlowsResponseBodyContactFlowsContactFlow]

    def validate(self):
        if self.contact_flow:
            for k in self.contact_flow:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListContactFlowsResponseBodyContactFlows, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ContactFlow'] = []
        if self.contact_flow is not None:
            for k in self.contact_flow:
                result['ContactFlow'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contact_flow = []
        if m.get('ContactFlow') is not None:
            for k in m.get('ContactFlow'):
                temp_model = ListContactFlowsResponseBodyContactFlowsContactFlow()
                self.contact_flow.append(temp_model.from_map(k))
        return self


class ListContactFlowsResponseBody(TeaModel):
    def __init__(self, code=None, contact_flows=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.contact_flows = contact_flows  # type: ListContactFlowsResponseBodyContactFlows
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.contact_flows:
            self.contact_flows.validate()

    def to_map(self):
        _map = super(ListContactFlowsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_flows is not None:
            result['ContactFlows'] = self.contact_flows.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactFlows') is not None:
            temp_model = ListContactFlowsResponseBodyContactFlows()
            self.contact_flows = temp_model.from_map(m['ContactFlows'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListContactFlowsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListContactFlowsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListContactFlowsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListContactFlowsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, ram_id=None, user_id=None):
        self.detail = detail  # type: ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin(TeaModel):
    def __init__(self, user=None):
        self.user = user  # type: list[ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser]

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstance(TeaModel):
    def __init__(self, admin=None, console_url=None, created_time=None, directory_id=None, domain_name=None,
                 instance_description=None, instance_id=None, instance_name=None, max_online_agents=None, owner=None, phone_numbers=None,
                 status=None, storage_bucket=None, storage_max_days=None, storage_max_size=None, tenant_id=None):
        self.admin = admin  # type: ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin
        self.console_url = console_url  # type: str
        self.created_time = created_time  # type: long
        self.directory_id = directory_id  # type: str
        self.domain_name = domain_name  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_online_agents = max_online_agents  # type: int
        self.owner = owner  # type: str
        self.phone_numbers = phone_numbers  # type: ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers
        self.status = status  # type: str
        self.storage_bucket = storage_bucket  # type: str
        self.storage_max_days = storage_max_days  # type: int
        self.storage_max_size = storage_max_size  # type: int
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        if self.admin:
            self.admin.validate()
        if self.phone_numbers:
            self.phone_numbers.validate()

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBodyInstancesCallCenterInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.admin is not None:
            result['Admin'] = self.admin.to_map()
        if self.console_url is not None:
            result['ConsoleUrl'] = self.console_url
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_online_agents is not None:
            result['MaxOnlineAgents'] = self.max_online_agents
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.storage_bucket is not None:
            result['StorageBucket'] = self.storage_bucket
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Admin') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin()
            self.admin = temp_model.from_map(m['Admin'])
        if m.get('ConsoleUrl') is not None:
            self.console_url = m.get('ConsoleUrl')
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxOnlineAgents') is not None:
            self.max_online_agents = m.get('MaxOnlineAgents')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StorageBucket') is not None:
            self.storage_bucket = m.get('StorageBucket')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class ListInstancesOfUserResponseBodyInstances(TeaModel):
    def __init__(self, call_center_instance=None):
        self.call_center_instance = call_center_instance  # type: list[ListInstancesOfUserResponseBodyInstancesCallCenterInstance]

    def validate(self):
        if self.call_center_instance:
            for k in self.call_center_instance:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBodyInstances, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallCenterInstance'] = []
        if self.call_center_instance is not None:
            for k in self.call_center_instance:
                result['CallCenterInstance'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_center_instance = []
        if m.get('CallCenterInstance') is not None:
            for k in m.get('CallCenterInstance'):
                temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstance()
                self.call_center_instance.append(temp_model.from_map(k))
        return self


class ListInstancesOfUserResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instances=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instances = instances  # type: ListInstancesOfUserResponseBodyInstances
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instances:
            self.instances.validate()

    def to_map(self):
        _map = super(ListInstancesOfUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instances is not None:
            result['Instances'] = self.instances.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instances') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstances()
            self.instances = temp_model.from_map(m['Instances'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListInstancesOfUserResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListInstancesOfUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListInstancesOfUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListInstancesOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListIvrTrackingDetailRequest(TeaModel):
    def __init__(self, called_number=None, calling_number=None, contact_id=None, instance_id=None, page_number=None,
                 page_size=None, start_time=None, stop_time=None):
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.contact_id = contact_id  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long
        self.stop_time = stop_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIvrTrackingDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        return self


class ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail(TeaModel):
    def __init__(self, called_number=None, calling_number=None, contact_id=None, description=None, device_id=None,
                 flow_name=None, input_data=None, node_name=None, node_type=None, output_data=None, start_time=None,
                 status=None, stop_time=None, tenant_id=None):
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.contact_id = contact_id  # type: str
        self.description = description  # type: str
        self.device_id = device_id  # type: str
        self.flow_name = flow_name  # type: str
        self.input_data = input_data  # type: str
        self.node_name = node_name  # type: str
        self.node_type = node_type  # type: str
        self.output_data = output_data  # type: str
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.stop_time = stop_time  # type: long
        self.tenant_id = tenant_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id is not None:
            result['DeviceID'] = self.device_id
        if self.flow_name is not None:
            result['FlowName'] = self.flow_name
        if self.input_data is not None:
            result['InputData'] = self.input_data
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.node_type is not None:
            result['NodeType'] = self.node_type
        if self.output_data is not None:
            result['OutputData'] = self.output_data
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceID') is not None:
            self.device_id = m.get('DeviceID')
        if m.get('FlowName') is not None:
            self.flow_name = m.get('FlowName')
        if m.get('InputData') is not None:
            self.input_data = m.get('InputData')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('NodeType') is not None:
            self.node_type = m.get('NodeType')
        if m.get('OutputData') is not None:
            self.output_data = m.get('OutputData')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList(TeaModel):
    def __init__(self, ivr_tracking_detail=None):
        self.ivr_tracking_detail = ivr_tracking_detail  # type: list[ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail]

    def validate(self):
        if self.ivr_tracking_detail:
            for k in self.ivr_tracking_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['IvrTrackingDetail'] = []
        if self.ivr_tracking_detail is not None:
            for k in self.ivr_tracking_detail:
                result['IvrTrackingDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.ivr_tracking_detail = []
        if m.get('IvrTrackingDetail') is not None:
            for k in m.get('IvrTrackingDetail'):
                temp_model = ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail()
                self.ivr_tracking_detail.append(temp_model.from_map(k))
        return self


class ListIvrTrackingDetailResponseBodyIvrTrackingDetails(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListIvrTrackingDetailResponseBodyIvrTrackingDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListIvrTrackingDetailResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, ivr_tracking_details=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.ivr_tracking_details = ivr_tracking_details  # type: ListIvrTrackingDetailResponseBodyIvrTrackingDetails
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.ivr_tracking_details:
            self.ivr_tracking_details.validate()

    def to_map(self):
        _map = super(ListIvrTrackingDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.ivr_tracking_details is not None:
            result['IvrTrackingDetails'] = self.ivr_tracking_details.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IvrTrackingDetails') is not None:
            temp_model = ListIvrTrackingDetailResponseBodyIvrTrackingDetails()
            self.ivr_tracking_details = temp_model.from_map(m['IvrTrackingDetails'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListIvrTrackingDetailResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListIvrTrackingDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListIvrTrackingDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListIvrTrackingDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobGroupsRequest(TeaModel):
    def __init__(self, end_time=None, instance_id=None, page_number=None, page_size=None, start_time=None):
        self.end_time = end_time  # type: long
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListJobGroupsResponseBodyJobGroupsListProgressCategories(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsListProgressCategories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobGroupsResponseBodyJobGroupsListProgress(TeaModel):
    def __init__(self, categories=None, duration=None, start_time=None, status=None, total_completed=None,
                 total_jobs=None, total_not_answered=None):
        self.categories = categories  # type: list[ListJobGroupsResponseBodyJobGroupsListProgressCategories]
        self.duration = duration  # type: int
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.total_completed = total_completed  # type: int
        self.total_jobs = total_jobs  # type: int
        self.total_not_answered = total_not_answered  # type: int

    def validate(self):
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsListProgress, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = ListJobGroupsResponseBodyJobGroupsListProgressCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class ListJobGroupsResponseBodyJobGroupsListStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsListStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class ListJobGroupsResponseBodyJobGroupsListStrategy(TeaModel):
    def __init__(self, customized=None, description=None, end_time=None, follow_up_strategy=None, id=None,
                 is_template=None, max_attempts_per_day=None, min_attempt_interval=None, name=None, repeat_by=None,
                 repeat_days=None, routing_strategy=None, start_time=None, type=None, working_time=None):
        self.customized = customized  # type: str
        self.description = description  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.id = id  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.name = name  # type: str
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.type = type  # type: str
        self.working_time = working_time  # type: list[ListJobGroupsResponseBodyJobGroupsListStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsListStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.name is not None:
            result['Name'] = self.name
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ListJobGroupsResponseBodyJobGroupsListStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class ListJobGroupsResponseBodyJobGroupsList(TeaModel):
    def __init__(self, calling_numbers=None, creation_time=None, description=None, id=None, job_file_path=None,
                 name=None, progress=None, scenario_id=None, strategy=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.creation_time = creation_time  # type: long
        self.description = description  # type: str
        self.id = id  # type: str
        self.job_file_path = job_file_path  # type: str
        self.name = name  # type: str
        self.progress = progress  # type: ListJobGroupsResponseBodyJobGroupsListProgress
        self.scenario_id = scenario_id  # type: str
        self.strategy = strategy  # type: ListJobGroupsResponseBodyJobGroupsListStrategy

    def validate(self):
        if self.progress:
            self.progress.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroupsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.name is not None:
            result['Name'] = self.name
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Progress') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class ListJobGroupsResponseBodyJobGroups(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListJobGroupsResponseBodyJobGroupsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBodyJobGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobGroupsResponseBodyJobGroupsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobGroupsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, job_groups=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.job_groups = job_groups  # type: ListJobGroupsResponseBodyJobGroups
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.job_groups:
            self.job_groups.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_groups is not None:
            result['JobGroups'] = self.job_groups.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroups') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroups()
            self.job_groups = temp_model.from_map(m['JobGroups'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobGroupsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListJobGroupsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListJobGroupsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListJobGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobStatusRequest(TeaModel):
    def __init__(self, contact_name=None, end_time=None, group_id=None, instance_id=None, page_number=None,
                 page_size=None, phone_number=None, scenario_id=None, start_time=None, time_alignment=None):
        self.contact_name = contact_name  # type: str
        self.end_time = end_time  # type: long
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.phone_number = phone_number  # type: str
        self.scenario_id = scenario_id  # type: str
        self.start_time = start_time  # type: long
        self.time_alignment = time_alignment  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.time_alignment is not None:
            result['TimeAlignment'] = self.time_alignment
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TimeAlignment') is not None:
            self.time_alignment = m.get('TimeAlignment')
        return self


class ListJobStatusResponseBodyJobsListContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobStatusResponseBodyJobsListContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobStatusResponseBodyJobsListExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobStatusResponseBodyJobsListExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobStatusResponseBodyJobsListSummary(TeaModel):
    def __init__(self, category=None, content=None, conversation_detail_id=None, group_id=None, job_id=None,
                 summary_id=None, summary_name=None, task_id=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.conversation_detail_id = conversation_detail_id  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.summary_id = summary_id  # type: str
        self.summary_name = summary_name  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobStatusResponseBodyJobsListSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobStatusResponseBodyJobsListTasksContact(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobStatusResponseBodyJobsListTasksContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobStatusResponseBodyJobsListTasks(TeaModel):
    def __init__(self, actual_time=None, brief=None, call_id=None, called_number=None, calling_number=None,
                 chatbot_id=None, contact=None, duration=None, job_id=None, planed_time=None, scenario_id=None, status=None,
                 task_id=None):
        self.actual_time = actual_time  # type: long
        self.brief = brief  # type: str
        self.call_id = call_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.chatbot_id = chatbot_id  # type: str
        self.contact = contact  # type: ListJobStatusResponseBodyJobsListTasksContact
        self.duration = duration  # type: int
        self.job_id = job_id  # type: str
        self.planed_time = planed_time  # type: long
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.contact:
            self.contact.validate()

    def to_map(self):
        _map = super(ListJobStatusResponseBodyJobsListTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = ListJobStatusResponseBodyJobsListTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobStatusResponseBodyJobsList(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, tasks=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[ListJobStatusResponseBodyJobsListContacts]
        self.extras = extras  # type: list[ListJobStatusResponseBodyJobsListExtras]
        self.failure_reason = failure_reason  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[ListJobStatusResponseBodyJobsListSummary]
        self.tasks = tasks  # type: list[ListJobStatusResponseBodyJobsListTasks]

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobStatusResponseBodyJobsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobStatusResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobStatusResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobStatusResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = ListJobStatusResponseBodyJobsListTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class ListJobStatusResponseBodyJobs(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListJobStatusResponseBodyJobsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobStatusResponseBodyJobs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobStatusResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobStatusResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, jobs=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.jobs = jobs  # type: ListJobStatusResponseBodyJobs
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super(ListJobStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = ListJobStatusResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobStatusResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListJobStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListJobStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListJobStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobsByGroupRequest(TeaModel):
    def __init__(self, instance_id=None, job_failure_reason=None, job_group_id=None, job_status=None,
                 page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.job_failure_reason = job_failure_reason  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_status = job_status  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_failure_reason is not None:
            result['JobFailureReason'] = self.job_failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_status is not None:
            result['JobStatus'] = self.job_status
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFailureReason') is not None:
            self.job_failure_reason = m.get('JobFailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobStatus') is not None:
            self.job_status = m.get('JobStatus')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListJobsByGroupResponseBodyJobsListContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, honorific=None, job_id=None, phone_number=None,
                 reference_id=None, role=None, state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.honorific = honorific  # type: str
        self.job_id = job_id  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsListContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobsByGroupResponseBodyJobsListExtras(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsListExtras, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobsByGroupResponseBodyJobsListSummary(TeaModel):
    def __init__(self, category=None, content=None, conversation_detail_id=None, group_id=None, job_id=None,
                 summary_id=None, summary_name=None, task_id=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.conversation_detail_id = conversation_detail_id  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.summary_id = summary_id  # type: str
        self.summary_name = summary_name  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsListSummary, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobsByGroupResponseBodyJobsList(TeaModel):
    def __init__(self, calling_numbers=None, contacts=None, extras=None, failure_reason=None, group_id=None,
                 job_id=None, priority=None, reference_id=None, scenario_id=None, status=None, strategy_id=None,
                 summary=None, system_priority=None):
        self.calling_numbers = calling_numbers  # type: list[str]
        self.contacts = contacts  # type: list[ListJobsByGroupResponseBodyJobsListContacts]
        self.extras = extras  # type: list[ListJobsByGroupResponseBodyJobsListExtras]
        self.failure_reason = failure_reason  # type: str
        self.group_id = group_id  # type: str
        self.job_id = job_id  # type: str
        self.priority = priority  # type: int
        self.reference_id = reference_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.status = status  # type: str
        self.strategy_id = strategy_id  # type: str
        self.summary = summary  # type: list[ListJobsByGroupResponseBodyJobsListSummary]
        self.system_priority = system_priority  # type: int

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobsByGroupResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobsByGroupResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsByGroupResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        return self


class ListJobsByGroupResponseBodyJobs(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListJobsByGroupResponseBodyJobsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponseBodyJobs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobsByGroupResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobsByGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, jobs=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.jobs = jobs  # type: ListJobsByGroupResponseBodyJobs
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = ListJobsByGroupResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobsByGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListJobsByGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListJobsByGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListJobsByGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMediasRequest(TeaModel):
    def __init__(self, instance_id=None, name_prefix=None, page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.name_prefix = name_prefix  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMediasRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name_prefix is not None:
            result['NamePrefix'] = self.name_prefix
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NamePrefix') is not None:
            self.name_prefix = m.get('NamePrefix')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListMediasResponseBodyMediasListMedia(TeaModel):
    def __init__(self, content=None, description=None, file_name=None, file_path=None, instance=None, name=None,
                 oss_file_name=None, status=None, type=None):
        self.content = content  # type: str
        self.description = description  # type: str
        self.file_name = file_name  # type: str
        self.file_path = file_path  # type: str
        self.instance = instance  # type: str
        self.name = name  # type: str
        self.oss_file_name = oss_file_name  # type: str
        self.status = status  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMediasResponseBodyMediasListMedia, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.description is not None:
            result['Description'] = self.description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.name is not None:
            result['Name'] = self.name
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListMediasResponseBodyMediasList(TeaModel):
    def __init__(self, media=None):
        self.media = media  # type: list[ListMediasResponseBodyMediasListMedia]

    def validate(self):
        if self.media:
            for k in self.media:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMediasResponseBodyMediasList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Media'] = []
        if self.media is not None:
            for k in self.media:
                result['Media'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.media = []
        if m.get('Media') is not None:
            for k in m.get('Media'):
                temp_model = ListMediasResponseBodyMediasListMedia()
                self.media.append(temp_model.from_map(k))
        return self


class ListMediasResponseBodyMedias(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListMediasResponseBodyMediasList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListMediasResponseBodyMedias, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListMediasResponseBodyMediasList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListMediasResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, medias=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.medias = medias  # type: ListMediasResponseBodyMedias
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.medias:
            self.medias.validate()

    def to_map(self):
        _map = super(ListMediasResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.medias is not None:
            result['Medias'] = self.medias.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Medias') is not None:
            temp_model = ListMediasResponseBodyMedias()
            self.medias = temp_model.from_map(m['Medias'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListMediasResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListMediasResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMediasResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListMediasResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListOutboundPhoneNumberOfUserRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, user_id=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListOutboundPhoneNumberOfUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyNumberList(TeaModel):
    def __init__(self, number=None):
        self.number = number  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListOutboundPhoneNumberOfUserResponseBodyNumberList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber(TeaModel):
    def __init__(self, biz_id=None, extra=None, phone_number=None, pool_id=None, pool_name=None,
                 region_name_city=None, sub_id=None, tel_x=None, type=None):
        self.biz_id = biz_id  # type: str
        self.extra = extra  # type: str
        self.phone_number = phone_number  # type: str
        self.pool_id = pool_id  # type: str
        self.pool_name = pool_name  # type: str
        self.region_name_city = region_name_city  # type: str
        self.sub_id = sub_id  # type: str
        self.tel_x = tel_x  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.pool_id is not None:
            result['PoolId'] = self.pool_id
        if self.pool_name is not None:
            result['PoolName'] = self.pool_name
        if self.region_name_city is not None:
            result['RegionNameCity'] = self.region_name_city
        if self.sub_id is not None:
            result['SubId'] = self.sub_id
        if self.tel_x is not None:
            result['TelX'] = self.tel_x
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PoolId') is not None:
            self.pool_id = m.get('PoolId')
        if m.get('PoolName') is not None:
            self.pool_name = m.get('PoolName')
        if m.get('RegionNameCity') is not None:
            self.region_name_city = m.get('RegionNameCity')
        if m.get('SubId') is not None:
            self.sub_id = m.get('SubId')
        if m.get('TelX') is not None:
            self.tel_x = m.get('TelX')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, city=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, privacy_number=None, private_flag=None, province=None, remaining_time=None, sip_tel_x=None,
                 test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.city = city  # type: str
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.privacy_number = privacy_number  # type: ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber
        self.private_flag = private_flag  # type: bool
        self.province = province  # type: str
        self.remaining_time = remaining_time  # type: int
        self.sip_tel_x = sip_tel_x  # type: str
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        if self.privacy_number:
            self.privacy_number.validate()

    def to_map(self):
        _map = super(ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.city is not None:
            result['City'] = self.city
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.privacy_number is not None:
            result['PrivacyNumber'] = self.privacy_number.to_map()
        if self.private_flag is not None:
            result['PrivateFlag'] = self.private_flag
        if self.province is not None:
            result['Province'] = self.province
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.sip_tel_x is not None:
            result['SipTelX'] = self.sip_tel_x
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('PrivacyNumber') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber()
            self.privacy_number = temp_model.from_map(m['PrivacyNumber'])
        if m.get('PrivateFlag') is not None:
            self.private_flag = m.get('PrivateFlag')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('SipTelX') is not None:
            self.sip_tel_x = m.get('SipTelX')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListOutboundPhoneNumberOfUserResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, number_list=None,
                 outbound_phone_numbers=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.number_list = number_list  # type: ListOutboundPhoneNumberOfUserResponseBodyNumberList
        self.outbound_phone_numbers = outbound_phone_numbers  # type: ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.number_list:
            self.number_list.validate()
        if self.outbound_phone_numbers:
            self.outbound_phone_numbers.validate()

    def to_map(self):
        _map = super(ListOutboundPhoneNumberOfUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.number_list is not None:
            result['NumberList'] = self.number_list.to_map()
        if self.outbound_phone_numbers is not None:
            result['OutboundPhoneNumbers'] = self.outbound_phone_numbers.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NumberList') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBodyNumberList()
            self.number_list = temp_model.from_map(m['NumberList'])
        if m.get('OutboundPhoneNumbers') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers()
            self.outbound_phone_numbers = temp_model.from_map(m['OutboundPhoneNumbers'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListOutboundPhoneNumberOfUserResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListOutboundPhoneNumberOfUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListOutboundPhoneNumberOfUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPhoneNumbersRequest(TeaModel):
    def __init__(self, instance_id=None, outbound_only=None):
        self.instance_id = instance_id  # type: str
        self.outbound_only = outbound_only  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhoneNumbersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_only is not None:
            result['OutboundOnly'] = self.outbound_only
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundOnly') is not None:
            self.outbound_only = m.get('OutboundOnly')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow(TeaModel):
    def __init__(self, contact_flow_description=None, contact_flow_id=None, contact_flow_name=None,
                 instance_id=None, type=None):
        self.contact_flow_description = contact_flow_description  # type: str
        self.contact_flow_id = contact_flow_id  # type: str
        self.contact_flow_name = contact_flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber(TeaModel):
    def __init__(self, biz_id=None, extra=None, phone_number=None, pool_id=None, pool_name=None,
                 region_name_city=None, sub_id=None, tel_x=None, type=None):
        self.biz_id = biz_id  # type: str
        self.extra = extra  # type: str
        self.phone_number = phone_number  # type: str
        self.pool_id = pool_id  # type: str
        self.pool_name = pool_name  # type: str
        self.region_name_city = region_name_city  # type: str
        self.sub_id = sub_id  # type: str
        self.tel_x = tel_x  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.pool_id is not None:
            result['PoolId'] = self.pool_id
        if self.pool_name is not None:
            result['PoolName'] = self.pool_name
        if self.region_name_city is not None:
            result['RegionNameCity'] = self.region_name_city
        if self.sub_id is not None:
            result['SubId'] = self.sub_id
        if self.tel_x is not None:
            result['TelX'] = self.tel_x
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PoolId') is not None:
            self.pool_id = m.get('PoolId')
        if m.get('PoolName') is not None:
            self.pool_name = m.get('PoolName')
        if m.get('RegionNameCity') is not None:
            self.region_name_city = m.get('RegionNameCity')
        if m.get('SubId') is not None:
            self.sub_id = m.get('SubId')
        if m.get('TelX') is not None:
            self.tel_x = m.get('TelX')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup(TeaModel):
    def __init__(self, skill_group_id=None, skill_group_name=None):
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups(TeaModel):
    def __init__(self, skill_group=None):
        self.skill_group = skill_group  # type: list[ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup]

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, assignee=None, city=None, contact_flow=None, instance_id=None,
                 number=None, number_commodity_status=None, phone_number_description=None, phone_number_id=None,
                 privacy_number=None, province=None, remaining_time=None, sip_tel_x=None, skill_groups=None, test_only=None,
                 trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.assignee = assignee  # type: str
        self.city = city  # type: str
        self.contact_flow = contact_flow  # type: ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.number_commodity_status = number_commodity_status  # type: int
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.privacy_number = privacy_number  # type: ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber
        self.province = province  # type: str
        self.remaining_time = remaining_time  # type: int
        self.sip_tel_x = sip_tel_x  # type: str
        self.skill_groups = skill_groups  # type: ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()
        if self.privacy_number:
            self.privacy_number.validate()
        if self.skill_groups:
            self.skill_groups.validate()

    def to_map(self):
        _map = super(ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.assignee is not None:
            result['Assignee'] = self.assignee
        if self.city is not None:
            result['City'] = self.city
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.number_commodity_status is not None:
            result['NumberCommodityStatus'] = self.number_commodity_status
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.privacy_number is not None:
            result['PrivacyNumber'] = self.privacy_number.to_map()
        if self.province is not None:
            result['Province'] = self.province
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.sip_tel_x is not None:
            result['SipTelX'] = self.sip_tel_x
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('Assignee') is not None:
            self.assignee = m.get('Assignee')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('ContactFlow') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberCommodityStatus') is not None:
            self.number_commodity_status = m.get('NumberCommodityStatus')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('PrivacyNumber') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber()
            self.privacy_number = temp_model.from_map(m['PrivacyNumber'])
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('SipTelX') is not None:
            self.sip_tel_x = m.get('SipTelX')
        if m.get('SkillGroups') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListPhoneNumbersResponseBodyPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListPhoneNumbersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, phone_numbers=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.phone_numbers = phone_numbers  # type: ListPhoneNumbersResponseBodyPhoneNumbers
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()

    def to_map(self):
        _map = super(ListPhoneNumbersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListPhoneNumbersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListPhoneNumbersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListPhoneNumbersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListPhoneNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPhoneTagsRequest(TeaModel):
    def __init__(self, current_page=None, instance_id=None, number=None, number_group_ids=None, outbound_only=None,
                 page_size=None):
        self.current_page = current_page  # type: int
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.number_group_ids = number_group_ids  # type: list[str]
        self.outbound_only = outbound_only  # type: bool
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhoneTagsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.number_group_ids is not None:
            result['NumberGroupIds'] = self.number_group_ids
        if self.outbound_only is not None:
            result['OutboundOnly'] = self.outbound_only
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberGroupIds') is not None:
            self.number_group_ids = m.get('NumberGroupIds')
        if m.get('OutboundOnly') is not None:
            self.outbound_only = m.get('OutboundOnly')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListPhoneTagsResponseBodyPhoneNumbersList(TeaModel):
    def __init__(self, city=None, concurrency=None, contact_flow_id=None, create_time=None, instance_id=None,
                 number=None, phone_number_description=None, phone_number_id=None, provider=None, province=None,
                 service_tag=None, skill_group_id_list=None, type=None, usage=None):
        self.city = city  # type: str
        self.concurrency = concurrency  # type: int
        self.contact_flow_id = contact_flow_id  # type: str
        self.create_time = create_time  # type: long
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.provider = provider  # type: str
        self.province = province  # type: str
        self.service_tag = service_tag  # type: str
        self.skill_group_id_list = skill_group_id_list  # type: list[str]
        self.type = type  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhoneTagsResponseBodyPhoneNumbersList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.concurrency is not None:
            result['Concurrency'] = self.concurrency
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.provider is not None:
            result['Provider'] = self.provider
        if self.province is not None:
            result['Province'] = self.province
        if self.service_tag is not None:
            result['ServiceTag'] = self.service_tag
        if self.skill_group_id_list is not None:
            result['SkillGroupIdList'] = self.skill_group_id_list
        if self.type is not None:
            result['Type'] = self.type
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Concurrency') is not None:
            self.concurrency = m.get('Concurrency')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('Provider') is not None:
            self.provider = m.get('Provider')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('ServiceTag') is not None:
            self.service_tag = m.get('ServiceTag')
        if m.get('SkillGroupIdList') is not None:
            self.skill_group_id_list = m.get('SkillGroupIdList')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ListPhoneTagsResponseBodyPhoneNumbers(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListPhoneTagsResponseBodyPhoneNumbersList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListPhoneTagsResponseBodyPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListPhoneTagsResponseBodyPhoneNumbersList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListPhoneTagsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, phone_numbers=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.phone_numbers = phone_numbers  # type: ListPhoneTagsResponseBodyPhoneNumbers
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()

    def to_map(self):
        _map = super(ListPhoneTagsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListPhoneTagsResponseBodyPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListPhoneTagsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListPhoneTagsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListPhoneTagsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListPhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRealTimeAgentRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRealTimeAgentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(self, instance_id=None, skill_group_description=None, skill_group_id=None, skill_group_name=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel(TeaModel):
    def __init__(self, level=None, skill=None, skill_level_id=None):
        self.level = level  # type: int
        self.skill = skill  # type: ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill
        self.skill_level_id = skill_level_id  # type: str

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        _map = super(ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Skill') is not None:
            temp_model = ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        return self


class ListRealTimeAgentResponseBodyDataUserSkillLevels(TeaModel):
    def __init__(self, skill_level=None):
        self.skill_level = skill_level  # type: list[ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel]

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRealTimeAgentResponseBodyDataUserSkillLevels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListRealTimeAgentResponseBodyDataUser(TeaModel):
    def __init__(self, display_name=None, dn=None, phone=None, ram_id=None, skill_levels=None, state=None,
                 state_desc=None):
        self.display_name = display_name  # type: str
        self.dn = dn  # type: str
        self.phone = phone  # type: str
        self.ram_id = ram_id  # type: str
        self.skill_levels = skill_levels  # type: ListRealTimeAgentResponseBodyDataUserSkillLevels
        self.state = state  # type: str
        self.state_desc = state_desc  # type: str

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        _map = super(ListRealTimeAgentResponseBodyDataUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.dn is not None:
            result['Dn'] = self.dn
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.state is not None:
            result['State'] = self.state
        if self.state_desc is not None:
            result['StateDesc'] = self.state_desc
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Dn') is not None:
            self.dn = m.get('Dn')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('SkillLevels') is not None:
            temp_model = ListRealTimeAgentResponseBodyDataUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('StateDesc') is not None:
            self.state_desc = m.get('StateDesc')
        return self


class ListRealTimeAgentResponseBodyData(TeaModel):
    def __init__(self, user=None):
        self.user = user  # type: list[ListRealTimeAgentResponseBodyDataUser]

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRealTimeAgentResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListRealTimeAgentResponseBodyDataUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListRealTimeAgentResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: ListRealTimeAgentResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(ListRealTimeAgentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListRealTimeAgentResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRealTimeAgentResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListRealTimeAgentResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRealTimeAgentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRealTimeAgentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecentCallRecordsRequest(TeaModel):
    def __init__(self, criteria=None, instance_id=None, page_number=None, page_size=None, start_time=None,
                 stop_time=None):
        self.criteria = criteria  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long
        self.stop_time = stop_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecentCallRecordsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, contact_id=None, feedback=None, hold_time=None,
                 queue_time=None, ring_time=None, satisfaction=None, skill_group_name=None, start_time=None, talk_time=None,
                 work_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.contact_id = contact_id  # type: str
        self.feedback = feedback  # type: str
        self.hold_time = hold_time  # type: int
        self.queue_time = queue_time  # type: int
        self.ring_time = ring_time  # type: int
        self.satisfaction = satisfaction  # type: str
        self.skill_group_name = skill_group_name  # type: str
        self.start_time = start_time  # type: long
        self.talk_time = talk_time  # type: int
        self.work_time = work_time  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        if self.hold_time is not None:
            result['HoldTime'] = self.hold_time
        if self.queue_time is not None:
            result['QueueTime'] = self.queue_time
        if self.ring_time is not None:
            result['RingTime'] = self.ring_time
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.talk_time is not None:
            result['TalkTime'] = self.talk_time
        if self.work_time is not None:
            result['WorkTime'] = self.work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        if m.get('HoldTime') is not None:
            self.hold_time = m.get('HoldTime')
        if m.get('QueueTime') is not None:
            self.queue_time = m.get('QueueTime')
        if m.get('RingTime') is not None:
            self.ring_time = m.get('RingTime')
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TalkTime') is not None:
            self.talk_time = m.get('TalkTime')
        if m.get('WorkTime') is not None:
            self.work_time = m.get('WorkTime')
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents(TeaModel):
    def __init__(self, call_detail_agent=None):
        self.call_detail_agent = call_detail_agent  # type: list[ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent]

    def validate(self):
        if self.call_detail_agent:
            for k in self.call_detail_agent:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallDetailAgent'] = []
        if self.call_detail_agent is not None:
            for k in self.call_detail_agent:
                result['CallDetailAgent'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_detail_agent = []
        if m.get('CallDetailAgent') is not None:
            for k in m.get('CallDetailAgent'):
                temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent()
                self.call_detail_agent.append(temp_model.from_map(k))
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, called_number=None, calling_number=None, channel=None,
                 contact_id=None, contact_type=None, duration=None, file_description=None, file_name=None, file_path=None,
                 instance_id=None, start_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.channel = channel  # type: str
        self.contact_id = contact_id  # type: str
        self.contact_type = contact_type  # type: str
        self.duration = duration  # type: int
        self.file_description = file_description  # type: str
        self.file_name = file_name  # type: str
        self.file_path = file_path  # type: str
        self.instance_id = instance_id  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings(TeaModel):
    def __init__(self, recording=None):
        self.recording = recording  # type: list[ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording]

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord(TeaModel):
    def __init__(self, agent_names=None, agents=None, called_number=None, calling_number=None,
                 contact_disposition=None, contact_id=None, contact_type=None, duration=None, extra_attr=None, feedback=None,
                 instance_id=None, recordings=None, satisfaction=None, satisfaction_desc=None, skill_group_names=None,
                 start_time=None):
        self.agent_names = agent_names  # type: str
        self.agents = agents  # type: ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.contact_disposition = contact_disposition  # type: str
        self.contact_id = contact_id  # type: str
        self.contact_type = contact_type  # type: str
        self.duration = duration  # type: int
        self.extra_attr = extra_attr  # type: str
        self.feedback = feedback  # type: str
        self.instance_id = instance_id  # type: str
        self.recordings = recordings  # type: ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings
        self.satisfaction = satisfaction  # type: int
        self.satisfaction_desc = satisfaction_desc  # type: str
        self.skill_group_names = skill_group_names  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        if self.agents:
            self.agents.validate()
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_names is not None:
            result['AgentNames'] = self.agent_names
        if self.agents is not None:
            result['Agents'] = self.agents.to_map()
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.contact_disposition is not None:
            result['ContactDisposition'] = self.contact_disposition
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.extra_attr is not None:
            result['ExtraAttr'] = self.extra_attr
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        if self.satisfaction_desc is not None:
            result['SatisfactionDesc'] = self.satisfaction_desc
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentNames') is not None:
            self.agent_names = m.get('AgentNames')
        if m.get('Agents') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents()
            self.agents = temp_model.from_map(m['Agents'])
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ContactDisposition') is not None:
            self.contact_disposition = m.get('ContactDisposition')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('ExtraAttr') is not None:
            self.extra_attr = m.get('ExtraAttr')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Recordings') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        if m.get('SatisfactionDesc') is not None:
            self.satisfaction_desc = m.get('SatisfactionDesc')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsList(TeaModel):
    def __init__(self, call_detail_record=None):
        self.call_detail_record = call_detail_record  # type: list[ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord]

    def validate(self):
        if self.call_detail_record:
            for k in self.call_detail_record:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBodyCallDetailRecordsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallDetailRecord'] = []
        if self.call_detail_record is not None:
            for k in self.call_detail_record:
                result['CallDetailRecord'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.call_detail_record = []
        if m.get('CallDetailRecord') is not None:
            for k in m.get('CallDetailRecord'):
                temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord()
                self.call_detail_record.append(temp_model.from_map(k))
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecords(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListRecentCallRecordsResponseBodyCallDetailRecordsList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBodyCallDetailRecords, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListRecentCallRecordsResponseBody(TeaModel):
    def __init__(self, call_detail_records=None, code=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.call_detail_records = call_detail_records  # type: ListRecentCallRecordsResponseBodyCallDetailRecords
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.call_detail_records:
            self.call_detail_records.validate()

    def to_map(self):
        _map = super(ListRecentCallRecordsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_detail_records is not None:
            result['CallDetailRecords'] = self.call_detail_records.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallDetailRecords') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecords()
            self.call_detail_records = temp_model.from_map(m['CallDetailRecords'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRecentCallRecordsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListRecentCallRecordsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRecentCallRecordsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecentCallRecordsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecordingOfDualTrackRequest(TeaModel):
    def __init__(self, agent_id=None, called_number=None, calling_number=None, connect_id=None, instance_id=None,
                 page_number=None, page_size=None, start_time=None, stop_time=None):
        self.agent_id = agent_id  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.connect_id = connect_id  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long
        self.stop_time = stop_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecordingOfDualTrackRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.connect_id is not None:
            result['ConnectId'] = self.connect_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ConnectId') is not None:
            self.connect_id = m.get('ConnectId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        return self


class ListRecordingOfDualTrackResponseBodyRecordingsListRecording(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, called_number=None, calling_number=None, channel=None,
                 contact_id=None, contact_type=None, duration=None, file_description=None, file_name=None, file_path=None,
                 instance_id=None, start_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.channel = channel  # type: str
        self.contact_id = contact_id  # type: str
        self.contact_type = contact_type  # type: str
        self.duration = duration  # type: int
        self.file_description = file_description  # type: str
        self.file_name = file_name  # type: str
        self.file_path = file_path  # type: str
        self.instance_id = instance_id  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecordingOfDualTrackResponseBodyRecordingsListRecording, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListRecordingOfDualTrackResponseBodyRecordingsList(TeaModel):
    def __init__(self, recording=None):
        self.recording = recording  # type: list[ListRecordingOfDualTrackResponseBodyRecordingsListRecording]

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRecordingOfDualTrackResponseBodyRecordingsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecordingOfDualTrackResponseBodyRecordingsListRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecordingOfDualTrackResponseBodyRecordings(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListRecordingOfDualTrackResponseBodyRecordingsList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListRecordingOfDualTrackResponseBodyRecordings, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListRecordingOfDualTrackResponseBodyRecordingsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListRecordingOfDualTrackResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, recordings=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.recordings = recordings  # type: ListRecordingOfDualTrackResponseBodyRecordings
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        _map = super(ListRecordingOfDualTrackResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Recordings') is not None:
            temp_model = ListRecordingOfDualTrackResponseBodyRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRecordingOfDualTrackResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListRecordingOfDualTrackResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRecordingOfDualTrackResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecordingOfDualTrackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecordingsRequest(TeaModel):
    def __init__(self, agent_id=None, criteria=None, instance_id=None, page_number=None, page_size=None,
                 phone_number=None, start_time=None, stop_time=None):
        self.agent_id = agent_id  # type: str
        self.criteria = criteria  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.phone_number = phone_number  # type: str
        self.start_time = start_time  # type: long
        self.stop_time = stop_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecordingsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        return self


class ListRecordingsResponseBodyRecordingsListRecording(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, called_number=None, calling_number=None, channel=None,
                 contact_id=None, contact_type=None, duration=None, file_description=None, file_name=None, file_path=None,
                 instance_id=None, start_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.channel = channel  # type: str
        self.contact_id = contact_id  # type: str
        self.contact_type = contact_type  # type: str
        self.duration = duration  # type: int
        self.file_description = file_description  # type: str
        self.file_name = file_name  # type: str
        self.file_path = file_path  # type: str
        self.instance_id = instance_id  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecordingsResponseBodyRecordingsListRecording, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListRecordingsResponseBodyRecordingsList(TeaModel):
    def __init__(self, recording=None):
        self.recording = recording  # type: list[ListRecordingsResponseBodyRecordingsListRecording]

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRecordingsResponseBodyRecordingsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecordingsResponseBodyRecordingsListRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecordingsResponseBodyRecordings(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListRecordingsResponseBodyRecordingsList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListRecordingsResponseBodyRecordings, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListRecordingsResponseBodyRecordingsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListRecordingsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, recordings=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.recordings = recordings  # type: ListRecordingsResponseBodyRecordings
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        _map = super(ListRecordingsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Recordings') is not None:
            temp_model = ListRecordingsResponseBodyRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRecordingsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListRecordingsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRecordingsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecordingsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecordingsByContactIdRequest(TeaModel):
    def __init__(self, contact_id=None, instance_id=None):
        self.contact_id = contact_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecordingsByContactIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListRecordingsByContactIdResponseBodyRecordingsRecording(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, called_number=None, calling_number=None, channel=None,
                 contact_id=None, contact_type=None, duration=None, file_description=None, file_name=None, file_path=None,
                 instance_id=None, quality_check_task_id=None, quality_check_tid=None, start_time=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.called_number = called_number  # type: str
        self.calling_number = calling_number  # type: str
        self.channel = channel  # type: str
        self.contact_id = contact_id  # type: str
        self.contact_type = contact_type  # type: str
        self.duration = duration  # type: int
        self.file_description = file_description  # type: str
        self.file_name = file_name  # type: str
        self.file_path = file_path  # type: str
        self.instance_id = instance_id  # type: str
        self.quality_check_task_id = quality_check_task_id  # type: str
        self.quality_check_tid = quality_check_tid  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRecordingsByContactIdResponseBodyRecordingsRecording, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.quality_check_task_id is not None:
            result['QualityCheckTaskId'] = self.quality_check_task_id
        if self.quality_check_tid is not None:
            result['QualityCheckTid'] = self.quality_check_tid
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('QualityCheckTaskId') is not None:
            self.quality_check_task_id = m.get('QualityCheckTaskId')
        if m.get('QualityCheckTid') is not None:
            self.quality_check_tid = m.get('QualityCheckTid')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListRecordingsByContactIdResponseBodyRecordings(TeaModel):
    def __init__(self, recording=None):
        self.recording = recording  # type: list[ListRecordingsByContactIdResponseBodyRecordingsRecording]

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRecordingsByContactIdResponseBodyRecordings, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecordingsByContactIdResponseBodyRecordingsRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecordingsByContactIdResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, recordings=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.recordings = recordings  # type: ListRecordingsByContactIdResponseBodyRecordings
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        _map = super(ListRecordingsByContactIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Recordings') is not None:
            temp_model = ListRecordingsByContactIdResponseBodyRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRecordingsByContactIdResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListRecordingsByContactIdResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRecordingsByContactIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecordingsByContactIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRolesRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRolesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListRolesResponseBodyRolesRole(TeaModel):
    def __init__(self, instance_id=None, role_description=None, role_id=None, role_name=None):
        self.instance_id = instance_id  # type: str
        self.role_description = role_description  # type: str
        self.role_id = role_id  # type: str
        self.role_name = role_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRolesResponseBodyRolesRole, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        return self


class ListRolesResponseBodyRoles(TeaModel):
    def __init__(self, role=None):
        self.role = role  # type: list[ListRolesResponseBodyRolesRole]

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListRolesResponseBodyRoles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = ListRolesResponseBodyRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class ListRolesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, roles=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.roles = roles  # type: ListRolesResponseBodyRoles
        self.success = success  # type: bool

    def validate(self):
        if self.roles:
            self.roles.validate()

    def to_map(self):
        _map = super(ListRolesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Roles') is not None:
            temp_model = ListRolesResponseBodyRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRolesResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListRolesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRolesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRolesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysFlow(TeaModel):
    def __init__(self, flow_id=None, flow_json=None, is_published=None):
        self.flow_id = flow_id  # type: str
        self.flow_json = flow_json  # type: str
        self.is_published = is_published  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysIntents(TeaModel):
    def __init__(self, intent_id=None, node_id=None):
        self.intent_id = intent_id  # type: str
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesSurveys(TeaModel):
    def __init__(self, beebot_id=None, description=None, flow=None, global_questions=None, id=None, intents=None,
                 name=None, role=None, round=None):
        self.beebot_id = beebot_id  # type: str
        self.description = description  # type: str
        self.flow = flow  # type: ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysFlow
        self.global_questions = global_questions  # type: str
        self.id = id  # type: str
        self.intents = intents  # type: list[ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysIntents]
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int

    def validate(self):
        if self.flow:
            self.flow.validate()
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScenarioTemplatesResponseBodyScenarioTemplatesSurveys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        if self.description is not None:
            result['Description'] = self.description
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.id is not None:
            result['Id'] = self.id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Flow') is not None:
            temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesVariables(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScenarioTemplatesResponseBodyScenarioTemplatesVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplates(TeaModel):
    def __init__(self, description=None, id=None, is_template=None, name=None, surveys=None, type=None,
                 variables=None):
        self.description = description  # type: str
        self.id = id  # type: str
        self.is_template = is_template  # type: bool
        self.name = name  # type: str
        self.surveys = surveys  # type: list[ListScenarioTemplatesResponseBodyScenarioTemplatesSurveys]
        self.type = type  # type: str
        self.variables = variables  # type: list[ListScenarioTemplatesResponseBodyScenarioTemplatesVariables]

    def validate(self):
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScenarioTemplatesResponseBodyScenarioTemplates, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesSurveys()
                self.surveys.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class ListScenarioTemplatesResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scenario_templates=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scenario_templates = scenario_templates  # type: list[ListScenarioTemplatesResponseBodyScenarioTemplates]
        self.success = success  # type: bool

    def validate(self):
        if self.scenario_templates:
            for k in self.scenario_templates:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScenarioTemplatesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ScenarioTemplates'] = []
        if self.scenario_templates is not None:
            for k in self.scenario_templates:
                result['ScenarioTemplates'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.scenario_templates = []
        if m.get('ScenarioTemplates') is not None:
            for k in m.get('ScenarioTemplates'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplates()
                self.scenario_templates.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScenarioTemplatesResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListScenarioTemplatesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListScenarioTemplatesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListScenarioTemplatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScenariosRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScenariosRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListScenariosResponseBodyScenariosStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScenariosResponseBodyScenariosStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class ListScenariosResponseBodyScenariosStrategy(TeaModel):
    def __init__(self, customized=None, description=None, end_time=None, follow_up_strategy=None, id=None,
                 is_template=None, max_attempts_per_day=None, min_attempt_interval=None, name=None, repeat_by=None,
                 repeat_days=None, routing_strategy=None, start_time=None, type=None, working_time=None):
        self.customized = customized  # type: str
        self.description = description  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.id = id  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.name = name  # type: str
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.type = type  # type: str
        self.working_time = working_time  # type: list[ListScenariosResponseBodyScenariosStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScenariosResponseBodyScenariosStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.description is not None:
            result['Description'] = self.description
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.name is not None:
            result['Name'] = self.name
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ListScenariosResponseBodyScenariosStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class ListScenariosResponseBodyScenariosSurveysIntents(TeaModel):
    def __init__(self, intent_id=None, node_id=None):
        self.intent_id = intent_id  # type: str
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScenariosResponseBodyScenariosSurveysIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class ListScenariosResponseBodyScenariosSurveys(TeaModel):
    def __init__(self, beebot_id=None, description=None, id=None, intents=None, name=None, role=None, round=None):
        self.beebot_id = beebot_id  # type: str
        self.description = description  # type: str
        self.id = id  # type: str
        self.intents = intents  # type: list[ListScenariosResponseBodyScenariosSurveysIntents]
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScenariosResponseBodyScenariosSurveys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = ListScenariosResponseBodyScenariosSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        return self


class ListScenariosResponseBodyScenariosVariables(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListScenariosResponseBodyScenariosVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListScenariosResponseBodyScenarios(TeaModel):
    def __init__(self, description=None, id=None, is_template=None, name=None, strategy=None, surveys=None, type=None,
                 variables=None):
        self.description = description  # type: str
        self.id = id  # type: str
        self.is_template = is_template  # type: bool
        self.name = name  # type: str
        self.strategy = strategy  # type: ListScenariosResponseBodyScenariosStrategy
        self.surveys = surveys  # type: list[ListScenariosResponseBodyScenariosSurveys]
        self.type = type  # type: str
        self.variables = variables  # type: list[ListScenariosResponseBodyScenariosVariables]

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScenariosResponseBodyScenarios, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Strategy') is not None:
            temp_model = ListScenariosResponseBodyScenariosStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ListScenariosResponseBodyScenariosSurveys()
                self.surveys.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = ListScenariosResponseBodyScenariosVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class ListScenariosResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scenarios=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scenarios = scenarios  # type: list[ListScenariosResponseBodyScenarios]
        self.success = success  # type: bool

    def validate(self):
        if self.scenarios:
            for k in self.scenarios:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListScenariosResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Scenarios'] = []
        if self.scenarios is not None:
            for k in self.scenarios:
                result['Scenarios'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.scenarios = []
        if m.get('Scenarios') is not None:
            for k in m.get('Scenarios'):
                temp_model = ListScenariosResponseBodyScenarios()
                self.scenarios.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScenariosResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListScenariosResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListScenariosResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListScenariosResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupStatesRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, skill_group_ids=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_ids = skill_group_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupStatesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        return self


class ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState(TeaModel):
    def __init__(self, breaking_agents=None, instance_id=None, logged_in_agents=None, longest_call=None,
                 ready_agents=None, skill_group_id=None, skill_group_name=None, talking_agents=None, waiting_calls=None,
                 working_agents=None):
        self.breaking_agents = breaking_agents  # type: long
        self.instance_id = instance_id  # type: str
        self.logged_in_agents = logged_in_agents  # type: long
        self.longest_call = longest_call  # type: long
        self.ready_agents = ready_agents  # type: long
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str
        self.talking_agents = talking_agents  # type: long
        self.waiting_calls = waiting_calls  # type: long
        self.working_agents = working_agents  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.breaking_agents is not None:
            result['BreakingAgents'] = self.breaking_agents
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.logged_in_agents is not None:
            result['LoggedInAgents'] = self.logged_in_agents
        if self.longest_call is not None:
            result['LongestCall'] = self.longest_call
        if self.ready_agents is not None:
            result['ReadyAgents'] = self.ready_agents
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.talking_agents is not None:
            result['TalkingAgents'] = self.talking_agents
        if self.waiting_calls is not None:
            result['WaitingCalls'] = self.waiting_calls
        if self.working_agents is not None:
            result['WorkingAgents'] = self.working_agents
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BreakingAgents') is not None:
            self.breaking_agents = m.get('BreakingAgents')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoggedInAgents') is not None:
            self.logged_in_agents = m.get('LoggedInAgents')
        if m.get('LongestCall') is not None:
            self.longest_call = m.get('LongestCall')
        if m.get('ReadyAgents') is not None:
            self.ready_agents = m.get('ReadyAgents')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('TalkingAgents') is not None:
            self.talking_agents = m.get('TalkingAgents')
        if m.get('WaitingCalls') is not None:
            self.waiting_calls = m.get('WaitingCalls')
        if m.get('WorkingAgents') is not None:
            self.working_agents = m.get('WorkingAgents')
        return self


class ListSkillGroupStatesResponseBodyDataList(TeaModel):
    def __init__(self, real_time_skill_group_state=None):
        self.real_time_skill_group_state = real_time_skill_group_state  # type: list[ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState]

    def validate(self):
        if self.real_time_skill_group_state:
            for k in self.real_time_skill_group_state:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupStatesResponseBodyDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['RealTimeSkillGroupState'] = []
        if self.real_time_skill_group_state is not None:
            for k in self.real_time_skill_group_state:
                result['RealTimeSkillGroupState'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.real_time_skill_group_state = []
        if m.get('RealTimeSkillGroupState') is not None:
            for k in m.get('RealTimeSkillGroupState'):
                temp_model = ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState()
                self.real_time_skill_group_state.append(temp_model.from_map(k))
        return self


class ListSkillGroupStatesResponseBodyData(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListSkillGroupStatesResponseBodyDataList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListSkillGroupStatesResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupStatesResponseBodyDataList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupStatesResponseBody(TeaModel):
    def __init__(self, code=None, data=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: ListSkillGroupStatesResponseBodyData
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(ListSkillGroupStatesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListSkillGroupStatesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupStatesResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListSkillGroupStatesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSkillGroupStatesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupStatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupSummaryReportsRequest(TeaModel):
    def __init__(self, end_time=None, instance_id=None, page_number=None, page_size=None, skill_group_ids=None,
                 start_time=None):
        self.end_time = end_time  # type: str
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_ids = skill_group_ids  # type: str
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound(TeaModel):
    def __init__(self, abandoned_in_queue_of_queue_count=None, answered_by_agent_of_queue_count=None,
                 answered_by_agent_of_queue_max_wait_time_duration=None, answered_by_agent_of_queue_wait_time_duration=None, average_ring_time=None,
                 average_talk_time=None, average_work_time=None, calls_handled=None, calls_offered=None,
                 give_up_by_agent_of_queue_count=None, handle_rate=None, in_coming_queue_of_queue_count=None, max_ring_time=None,
                 max_talk_time=None, max_work_time=None, over_flow_in_queue_of_queue_count=None,
                 queue_max_wait_time_duration=None, queue_wait_time_duration=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, service_level_20=None, total_ring_time=None, total_talk_time=None, total_work_time=None):
        self.abandoned_in_queue_of_queue_count = abandoned_in_queue_of_queue_count  # type: long
        self.answered_by_agent_of_queue_count = answered_by_agent_of_queue_count  # type: long
        self.answered_by_agent_of_queue_max_wait_time_duration = answered_by_agent_of_queue_max_wait_time_duration  # type: long
        self.answered_by_agent_of_queue_wait_time_duration = answered_by_agent_of_queue_wait_time_duration  # type: long
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.give_up_by_agent_of_queue_count = give_up_by_agent_of_queue_count  # type: long
        self.handle_rate = handle_rate  # type: float
        self.in_coming_queue_of_queue_count = in_coming_queue_of_queue_count  # type: long
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: str
        self.max_work_time = max_work_time  # type: long
        self.over_flow_in_queue_of_queue_count = over_flow_in_queue_of_queue_count  # type: long
        self.queue_max_wait_time_duration = queue_max_wait_time_duration  # type: long
        self.queue_wait_time_duration = queue_wait_time_duration  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abandoned_in_queue_of_queue_count is not None:
            result['AbandonedInQueueOfQueueCount'] = self.abandoned_in_queue_of_queue_count
        if self.answered_by_agent_of_queue_count is not None:
            result['AnsweredByAgentOfQueueCount'] = self.answered_by_agent_of_queue_count
        if self.answered_by_agent_of_queue_max_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueMaxWaitTimeDuration'] = self.answered_by_agent_of_queue_max_wait_time_duration
        if self.answered_by_agent_of_queue_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueWaitTimeDuration'] = self.answered_by_agent_of_queue_wait_time_duration
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.give_up_by_agent_of_queue_count is not None:
            result['GiveUpByAgentOfQueueCount'] = self.give_up_by_agent_of_queue_count
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.in_coming_queue_of_queue_count is not None:
            result['InComingQueueOfQueueCount'] = self.in_coming_queue_of_queue_count
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.over_flow_in_queue_of_queue_count is not None:
            result['OverFlowInQueueOfQueueCount'] = self.over_flow_in_queue_of_queue_count
        if self.queue_max_wait_time_duration is not None:
            result['QueueMaxWaitTimeDuration'] = self.queue_max_wait_time_duration
        if self.queue_wait_time_duration is not None:
            result['QueueWaitTimeDuration'] = self.queue_wait_time_duration
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AbandonedInQueueOfQueueCount') is not None:
            self.abandoned_in_queue_of_queue_count = m.get('AbandonedInQueueOfQueueCount')
        if m.get('AnsweredByAgentOfQueueCount') is not None:
            self.answered_by_agent_of_queue_count = m.get('AnsweredByAgentOfQueueCount')
        if m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_max_wait_time_duration = m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration')
        if m.get('AnsweredByAgentOfQueueWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_wait_time_duration = m.get('AnsweredByAgentOfQueueWaitTimeDuration')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('GiveUpByAgentOfQueueCount') is not None:
            self.give_up_by_agent_of_queue_count = m.get('GiveUpByAgentOfQueueCount')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('InComingQueueOfQueueCount') is not None:
            self.in_coming_queue_of_queue_count = m.get('InComingQueueOfQueueCount')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OverFlowInQueueOfQueueCount') is not None:
            self.over_flow_in_queue_of_queue_count = m.get('OverFlowInQueueOfQueueCount')
        if m.get('QueueMaxWaitTimeDuration') is not None:
            self.queue_max_wait_time_duration = m.get('QueueMaxWaitTimeDuration')
        if m.get('QueueWaitTimeDuration') is not None:
            self.queue_wait_time_duration = m.get('QueueWaitTimeDuration')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 max_ready_time=None, max_talk_time=None, max_work_time=None, occupancy_rate=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_break_time=None, total_calls=None,
                 total_logged_in_time=None, total_ready_time=None, total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport(TeaModel):
    def __init__(self, inbound=None, instance_id=None, outbound=None, overall=None, skill_group_id=None,
                 skill_group_name=None):
        self.inbound = inbound  # type: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.outbound = outbound  # type: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound
        self.overall = overall  # type: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Inbound') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Outbound') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList(TeaModel):
    def __init__(self, skill_group_summary_report=None):
        self.skill_group_summary_report = skill_group_summary_report  # type: list[ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport]

    def validate(self):
        if self.skill_group_summary_report:
            for k in self.skill_group_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroupSummaryReport'] = []
        if self.skill_group_summary_report is not None:
            for k in self.skill_group_summary_report:
                result['SkillGroupSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group_summary_report = []
        if m.get('SkillGroupSummaryReport') is not None:
            for k in m.get('SkillGroupSummaryReport'):
                temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport()
                self.skill_group_summary_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupSummaryReportsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, paged_skill_group_summary_report=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.paged_skill_group_summary_report = paged_skill_group_summary_report  # type: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.paged_skill_group_summary_report:
            self.paged_skill_group_summary_report.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.paged_skill_group_summary_report is not None:
            result['PagedSkillGroupSummaryReport'] = self.paged_skill_group_summary_report.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PagedSkillGroupSummaryReport') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport()
            self.paged_skill_group_summary_report = temp_model.from_map(m['PagedSkillGroupSummaryReport'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupSummaryReportsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListSkillGroupSummaryReportsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupSummaryReportsByIntervalRequest(TeaModel):
    def __init__(self, end_time=None, instance_id=None, interval=None, page_number=None, page_size=None,
                 skill_group_ids=None, start_time=None):
        self.end_time = end_time  # type: str
        self.instance_id = instance_id  # type: str
        self.interval = interval  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_ids = skill_group_ids  # type: str
        self.start_time = start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound(TeaModel):
    def __init__(self, abandoned_in_queue_of_queue_count=None, answered_by_agent_of_queue_count=None,
                 answered_by_agent_of_queue_max_wait_time_duration=None, answered_by_agent_of_queue_wait_time_duration=None, average_ring_time=None,
                 average_talk_time=None, average_work_time=None, calls_handled=None, calls_offered=None,
                 give_up_by_agent_of_queue_count=None, handle_rate=None, in_coming_queue_of_queue_count=None, max_ring_time=None,
                 max_talk_time=None, max_work_time=None, over_flow_in_queue_of_queue_count=None,
                 queue_max_wait_time_duration=None, queue_wait_time_duration=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, service_level_20=None, total_ring_time=None, total_talk_time=None, total_work_time=None):
        self.abandoned_in_queue_of_queue_count = abandoned_in_queue_of_queue_count  # type: long
        self.answered_by_agent_of_queue_count = answered_by_agent_of_queue_count  # type: long
        self.answered_by_agent_of_queue_max_wait_time_duration = answered_by_agent_of_queue_max_wait_time_duration  # type: long
        self.answered_by_agent_of_queue_wait_time_duration = answered_by_agent_of_queue_wait_time_duration  # type: long
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.give_up_by_agent_of_queue_count = give_up_by_agent_of_queue_count  # type: long
        self.handle_rate = handle_rate  # type: float
        self.in_coming_queue_of_queue_count = in_coming_queue_of_queue_count  # type: long
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.over_flow_in_queue_of_queue_count = over_flow_in_queue_of_queue_count  # type: long
        self.queue_max_wait_time_duration = queue_max_wait_time_duration  # type: long
        self.queue_wait_time_duration = queue_wait_time_duration  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abandoned_in_queue_of_queue_count is not None:
            result['AbandonedInQueueOfQueueCount'] = self.abandoned_in_queue_of_queue_count
        if self.answered_by_agent_of_queue_count is not None:
            result['AnsweredByAgentOfQueueCount'] = self.answered_by_agent_of_queue_count
        if self.answered_by_agent_of_queue_max_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueMaxWaitTimeDuration'] = self.answered_by_agent_of_queue_max_wait_time_duration
        if self.answered_by_agent_of_queue_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueWaitTimeDuration'] = self.answered_by_agent_of_queue_wait_time_duration
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.give_up_by_agent_of_queue_count is not None:
            result['GiveUpByAgentOfQueueCount'] = self.give_up_by_agent_of_queue_count
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.in_coming_queue_of_queue_count is not None:
            result['InComingQueueOfQueueCount'] = self.in_coming_queue_of_queue_count
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.over_flow_in_queue_of_queue_count is not None:
            result['OverFlowInQueueOfQueueCount'] = self.over_flow_in_queue_of_queue_count
        if self.queue_max_wait_time_duration is not None:
            result['QueueMaxWaitTimeDuration'] = self.queue_max_wait_time_duration
        if self.queue_wait_time_duration is not None:
            result['QueueWaitTimeDuration'] = self.queue_wait_time_duration
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AbandonedInQueueOfQueueCount') is not None:
            self.abandoned_in_queue_of_queue_count = m.get('AbandonedInQueueOfQueueCount')
        if m.get('AnsweredByAgentOfQueueCount') is not None:
            self.answered_by_agent_of_queue_count = m.get('AnsweredByAgentOfQueueCount')
        if m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_max_wait_time_duration = m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration')
        if m.get('AnsweredByAgentOfQueueWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_wait_time_duration = m.get('AnsweredByAgentOfQueueWaitTimeDuration')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('GiveUpByAgentOfQueueCount') is not None:
            self.give_up_by_agent_of_queue_count = m.get('GiveUpByAgentOfQueueCount')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('InComingQueueOfQueueCount') is not None:
            self.in_coming_queue_of_queue_count = m.get('InComingQueueOfQueueCount')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OverFlowInQueueOfQueueCount') is not None:
            self.over_flow_in_queue_of_queue_count = m.get('OverFlowInQueueOfQueueCount')
        if m.get('QueueMaxWaitTimeDuration') is not None:
            self.queue_max_wait_time_duration = m.get('QueueMaxWaitTimeDuration')
        if m.get('QueueWaitTimeDuration') is not None:
            self.queue_wait_time_duration = m.get('QueueWaitTimeDuration')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 max_ready_time=None, max_talk_time=None, max_work_time=None, occupancy_rate=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_break_time=None, total_calls=None,
                 total_logged_in_time=None, total_ready_time=None, total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport(TeaModel):
    def __init__(self, inbound=None, instance_id=None, outbound=None, overall=None, skill_group_id=None,
                 skill_group_name=None, timestamp=None):
        self.inbound = inbound  # type: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.outbound = outbound  # type: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound
        self.overall = overall  # type: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str
        self.timestamp = timestamp  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Inbound') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Outbound') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList(TeaModel):
    def __init__(self, skill_group_summary_report=None):
        self.skill_group_summary_report = skill_group_summary_report  # type: list[ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport]

    def validate(self):
        if self.skill_group_summary_report:
            for k in self.skill_group_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroupSummaryReport'] = []
        if self.skill_group_summary_report is not None:
            for k in self.skill_group_summary_report:
                result['SkillGroupSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group_summary_report = []
        if m.get('SkillGroupSummaryReport') is not None:
            for k in m.get('SkillGroupSummaryReport'):
                temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport()
                self.skill_group_summary_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport(TeaModel):
    def __init__(self, interval_list=None, skill_group_id=None):
        self.interval_list = interval_list  # type: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        if self.interval_list:
            self.interval_list.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.interval_list is not None:
            result['IntervalList'] = self.interval_list.to_map()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntervalList') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList()
            self.interval_list = temp_model.from_map(m['IntervalList'])
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList(TeaModel):
    def __init__(self, skill_group_time_interval_report=None):
        self.skill_group_time_interval_report = skill_group_time_interval_report  # type: list[ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport]

    def validate(self):
        if self.skill_group_time_interval_report:
            for k in self.skill_group_time_interval_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroupTimeIntervalReport'] = []
        if self.skill_group_time_interval_report is not None:
            for k in self.skill_group_time_interval_report:
                result['SkillGroupTimeIntervalReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group_time_interval_report = []
        if m.get('SkillGroupTimeIntervalReport') is not None:
            for k in m.get('SkillGroupTimeIntervalReport'):
                temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport()
                self.skill_group_time_interval_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, paged_skill_group_summary_report=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.paged_skill_group_summary_report = paged_skill_group_summary_report  # type: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.paged_skill_group_summary_report:
            self.paged_skill_group_summary_report.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.paged_skill_group_summary_report is not None:
            result['PagedSkillGroupSummaryReport'] = self.paged_skill_group_summary_report.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PagedSkillGroupSummaryReport') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport()
            self.paged_skill_group_summary_report = temp_model.from_map(m['PagedSkillGroupSummaryReport'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupSummaryReportsByIntervalResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListSkillGroupSummaryReportsByIntervalResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsByIntervalResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupSummaryReportsSinceMidnightRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, skill_groups=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_groups = skill_groups  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroups') is not None:
            self.skill_groups = m.get('SkillGroups')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound(TeaModel):
    def __init__(self, abandoned_in_queue_of_queue_count=None, answered_by_agent_of_queue_count=None,
                 answered_by_agent_of_queue_max_wait_time_duration=None, answered_by_agent_of_queue_wait_time_duration=None, average_ring_time=None,
                 average_talk_time=None, average_work_time=None, calls_handled=None, calls_offered=None,
                 give_up_by_agent_of_queue_count=None, handle_rate=None, in_coming_queue_of_queue_count=None, max_ring_time=None,
                 max_talk_time=None, max_work_time=None, over_flow_in_queue_of_queue_count=None,
                 queue_max_wait_time_duration=None, queue_wait_time_duration=None, satisfaction_index=None, satisfaction_surveys_offered=None,
                 satisfaction_surveys_responded=None, service_level_20=None, total_ring_time=None, total_talk_time=None, total_work_time=None):
        self.abandoned_in_queue_of_queue_count = abandoned_in_queue_of_queue_count  # type: long
        self.answered_by_agent_of_queue_count = answered_by_agent_of_queue_count  # type: long
        self.answered_by_agent_of_queue_max_wait_time_duration = answered_by_agent_of_queue_max_wait_time_duration  # type: long
        self.answered_by_agent_of_queue_wait_time_duration = answered_by_agent_of_queue_wait_time_duration  # type: long
        self.average_ring_time = average_ring_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_handled = calls_handled  # type: long
        self.calls_offered = calls_offered  # type: long
        self.give_up_by_agent_of_queue_count = give_up_by_agent_of_queue_count  # type: long
        self.handle_rate = handle_rate  # type: float
        self.in_coming_queue_of_queue_count = in_coming_queue_of_queue_count  # type: long
        self.max_ring_time = max_ring_time  # type: long
        self.max_talk_time = max_talk_time  # type: str
        self.max_work_time = max_work_time  # type: long
        self.over_flow_in_queue_of_queue_count = over_flow_in_queue_of_queue_count  # type: long
        self.queue_max_wait_time_duration = queue_max_wait_time_duration  # type: long
        self.queue_wait_time_duration = queue_wait_time_duration  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.service_level_20 = service_level_20  # type: float
        self.total_ring_time = total_ring_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abandoned_in_queue_of_queue_count is not None:
            result['AbandonedInQueueOfQueueCount'] = self.abandoned_in_queue_of_queue_count
        if self.answered_by_agent_of_queue_count is not None:
            result['AnsweredByAgentOfQueueCount'] = self.answered_by_agent_of_queue_count
        if self.answered_by_agent_of_queue_max_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueMaxWaitTimeDuration'] = self.answered_by_agent_of_queue_max_wait_time_duration
        if self.answered_by_agent_of_queue_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueWaitTimeDuration'] = self.answered_by_agent_of_queue_wait_time_duration
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.give_up_by_agent_of_queue_count is not None:
            result['GiveUpByAgentOfQueueCount'] = self.give_up_by_agent_of_queue_count
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.in_coming_queue_of_queue_count is not None:
            result['InComingQueueOfQueueCount'] = self.in_coming_queue_of_queue_count
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.over_flow_in_queue_of_queue_count is not None:
            result['OverFlowInQueueOfQueueCount'] = self.over_flow_in_queue_of_queue_count
        if self.queue_max_wait_time_duration is not None:
            result['QueueMaxWaitTimeDuration'] = self.queue_max_wait_time_duration
        if self.queue_wait_time_duration is not None:
            result['QueueWaitTimeDuration'] = self.queue_wait_time_duration
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AbandonedInQueueOfQueueCount') is not None:
            self.abandoned_in_queue_of_queue_count = m.get('AbandonedInQueueOfQueueCount')
        if m.get('AnsweredByAgentOfQueueCount') is not None:
            self.answered_by_agent_of_queue_count = m.get('AnsweredByAgentOfQueueCount')
        if m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_max_wait_time_duration = m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration')
        if m.get('AnsweredByAgentOfQueueWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_wait_time_duration = m.get('AnsweredByAgentOfQueueWaitTimeDuration')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('GiveUpByAgentOfQueueCount') is not None:
            self.give_up_by_agent_of_queue_count = m.get('GiveUpByAgentOfQueueCount')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('InComingQueueOfQueueCount') is not None:
            self.in_coming_queue_of_queue_count = m.get('InComingQueueOfQueueCount')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OverFlowInQueueOfQueueCount') is not None:
            self.over_flow_in_queue_of_queue_count = m.get('OverFlowInQueueOfQueueCount')
        if m.get('QueueMaxWaitTimeDuration') is not None:
            self.queue_max_wait_time_duration = m.get('QueueMaxWaitTimeDuration')
        if m.get('QueueWaitTimeDuration') is not None:
            self.queue_wait_time_duration = m.get('QueueWaitTimeDuration')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound(TeaModel):
    def __init__(self, answer_rate=None, average_dialing_time=None, average_talk_time=None, average_work_time=None,
                 calls_answered=None, calls_dialed=None, max_dialing_time=None, max_talk_time=None, max_work_time=None,
                 satisfaction_index=None, satisfaction_surveys_offered=None, satisfaction_surveys_responded=None,
                 total_dialing_time=None, total_talk_time=None, total_work_time=None):
        self.answer_rate = answer_rate  # type: float
        self.average_dialing_time = average_dialing_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.calls_answered = calls_answered  # type: long
        self.calls_dialed = calls_dialed  # type: long
        self.max_dialing_time = max_dialing_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_dialing_time = total_dialing_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall(TeaModel):
    def __init__(self, average_ready_time=None, average_talk_time=None, average_work_time=None,
                 max_ready_time=None, max_talk_time=None, max_work_time=None, occupancy_rate=None, satisfaction_index=None,
                 satisfaction_surveys_offered=None, satisfaction_surveys_responded=None, total_break_time=None, total_calls=None,
                 total_logged_in_time=None, total_ready_time=None, total_talk_time=None, total_work_time=None):
        self.average_ready_time = average_ready_time  # type: long
        self.average_talk_time = average_talk_time  # type: long
        self.average_work_time = average_work_time  # type: long
        self.max_ready_time = max_ready_time  # type: long
        self.max_talk_time = max_talk_time  # type: long
        self.max_work_time = max_work_time  # type: long
        self.occupancy_rate = occupancy_rate  # type: float
        self.satisfaction_index = satisfaction_index  # type: float
        self.satisfaction_surveys_offered = satisfaction_surveys_offered  # type: long
        self.satisfaction_surveys_responded = satisfaction_surveys_responded  # type: long
        self.total_break_time = total_break_time  # type: long
        self.total_calls = total_calls  # type: long
        self.total_logged_in_time = total_logged_in_time  # type: long
        self.total_ready_time = total_ready_time  # type: long
        self.total_talk_time = total_talk_time  # type: long
        self.total_work_time = total_work_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport(TeaModel):
    def __init__(self, inbound=None, instance_id=None, outbound=None, overall=None, skill_group_id=None,
                 skill_group_name=None, timestamp=None):
        self.inbound = inbound  # type: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound
        self.instance_id = instance_id  # type: str
        self.outbound = outbound  # type: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound
        self.overall = overall  # type: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str
        self.timestamp = timestamp  # type: str

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Inbound') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Outbound') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList(TeaModel):
    def __init__(self, skill_group_summary_report=None):
        self.skill_group_summary_report = skill_group_summary_report  # type: list[ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport]

    def validate(self):
        if self.skill_group_summary_report:
            for k in self.skill_group_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroupSummaryReport'] = []
        if self.skill_group_summary_report is not None:
            for k in self.skill_group_summary_report:
                result['SkillGroupSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group_summary_report = []
        if m.get('SkillGroupSummaryReport') is not None:
            for k in m.get('SkillGroupSummaryReport'):
                temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport()
                self.skill_group_summary_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, paged_skill_group_summary_report=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.paged_skill_group_summary_report = paged_skill_group_summary_report  # type: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.paged_skill_group_summary_report:
            self.paged_skill_group_summary_report.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.paged_skill_group_summary_report is not None:
            result['PagedSkillGroupSummaryReport'] = self.paged_skill_group_summary_report.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PagedSkillGroupSummaryReport') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport()
            self.paged_skill_group_summary_report = temp_model.from_map(m['PagedSkillGroupSummaryReport'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListSkillGroupSummaryReportsSinceMidnightResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSkillGroupSummaryReportsSinceMidnightResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupsRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListSkillGroupsResponseBodySkillGroupsSkillGroup(TeaModel):
    def __init__(self, acc_queue_name=None, acc_skill_group_name=None, instance_id=None,
                 outbound_phone_numbers=None, routing_strategy=None, skill_group_description=None, skill_group_id=None,
                 skill_group_name=None, user_count=None):
        self.acc_queue_name = acc_queue_name  # type: str
        self.acc_skill_group_name = acc_skill_group_name  # type: str
        self.instance_id = instance_id  # type: str
        self.outbound_phone_numbers = outbound_phone_numbers  # type: ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers
        self.routing_strategy = routing_strategy  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str
        self.user_count = user_count  # type: int

    def validate(self):
        if self.outbound_phone_numbers:
            self.outbound_phone_numbers.validate()

    def to_map(self):
        _map = super(ListSkillGroupsResponseBodySkillGroupsSkillGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acc_queue_name is not None:
            result['AccQueueName'] = self.acc_queue_name
        if self.acc_skill_group_name is not None:
            result['AccSkillGroupName'] = self.acc_skill_group_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_phone_numbers is not None:
            result['OutboundPhoneNumbers'] = self.outbound_phone_numbers.to_map()
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccQueueName') is not None:
            self.acc_queue_name = m.get('AccQueueName')
        if m.get('AccSkillGroupName') is not None:
            self.acc_skill_group_name = m.get('AccSkillGroupName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundPhoneNumbers') is not None:
            temp_model = ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers()
            self.outbound_phone_numbers = temp_model.from_map(m['OutboundPhoneNumbers'])
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        return self


class ListSkillGroupsResponseBodySkillGroups(TeaModel):
    def __init__(self, skill_group=None):
        self.skill_group = skill_group  # type: list[ListSkillGroupsResponseBodySkillGroupsSkillGroup]

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupsResponseBodySkillGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ListSkillGroupsResponseBodySkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ListSkillGroupsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, skill_groups=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.skill_groups = skill_groups  # type: ListSkillGroupsResponseBodySkillGroups
        self.success = success  # type: bool

    def validate(self):
        if self.skill_groups:
            self.skill_groups.validate()

    def to_map(self):
        _map = super(ListSkillGroupsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SkillGroups') is not None:
            temp_model = ListSkillGroupsResponseBodySkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListSkillGroupsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSkillGroupsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupsOfUserRequest(TeaModel):
    def __init__(self, instance_id=None, user_id=None):
        self.instance_id = instance_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupsOfUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, city=None, instance_id=None, number=None, phone_number_description=None,
                 phone_number_id=None, province=None, remaining_time=None, test_only=None, trunks=None, usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.city = city  # type: str
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.province = province  # type: str
        self.remaining_time = remaining_time  # type: int
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.city is not None:
            result['City'] = self.city
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.province is not None:
            result['Province'] = self.province
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill(TeaModel):
    def __init__(self, instance_id=None, outbound_phone_numbers=None, routing_strategy=None,
                 skill_group_description=None, skill_group_id=None, skill_group_name=None):
        self.instance_id = instance_id  # type: str
        self.outbound_phone_numbers = outbound_phone_numbers  # type: ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers
        self.routing_strategy = routing_strategy  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        if self.outbound_phone_numbers:
            self.outbound_phone_numbers.validate()

    def to_map(self):
        _map = super(ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_phone_numbers is not None:
            result['OutboundPhoneNumbers'] = self.outbound_phone_numbers.to_map()
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundPhoneNumbers') is not None:
            temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers()
            self.outbound_phone_numbers = temp_model.from_map(m['OutboundPhoneNumbers'])
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel(TeaModel):
    def __init__(self, level=None, skill=None, skill_level_id=None):
        self.level = level  # type: int
        self.skill = skill  # type: ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill
        self.skill_level_id = skill_level_id  # type: str

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        _map = super(ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Skill') is not None:
            temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevels(TeaModel):
    def __init__(self, skill_level=None):
        self.skill_level = skill_level  # type: list[ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel]

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSkillGroupsOfUserResponseBodySkillLevels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListSkillGroupsOfUserResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, skill_levels=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.skill_levels = skill_levels  # type: ListSkillGroupsOfUserResponseBodySkillLevels
        self.success = success  # type: bool

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        _map = super(ListSkillGroupsOfUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SkillLevels') is not None:
            temp_model = ListSkillGroupsOfUserResponseBodySkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupsOfUserResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListSkillGroupsOfUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSkillGroupsOfUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupsOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSurveysRequest(TeaModel):
    def __init__(self, instance_id=None, scenario_id=None):
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSurveysRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class ListSurveysResponseBodySurveysAsrCustomModel(TeaModel):
    def __init__(self, corpora=None, custom_model_status=None):
        self.corpora = corpora  # type: str
        self.custom_model_status = custom_model_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSurveysResponseBodySurveysAsrCustomModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        return self


class ListSurveysResponseBodySurveysFlow(TeaModel):
    def __init__(self, flow_id=None, flow_json=None, is_published=None):
        self.flow_id = flow_id  # type: str
        self.flow_json = flow_json  # type: str
        self.is_published = is_published  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSurveysResponseBodySurveysFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        return self


class ListSurveysResponseBodySurveys(TeaModel):
    def __init__(self, asr_custom_model=None, description=None, flow=None, global_questions=None, hot_words=None,
                 id=None, name=None, role=None, round=None, scenario_uuid=None, speech_optimization_param=None):
        self.asr_custom_model = asr_custom_model  # type: ListSurveysResponseBodySurveysAsrCustomModel
        self.description = description  # type: str
        self.flow = flow  # type: ListSurveysResponseBodySurveysFlow
        self.global_questions = global_questions  # type: str
        self.hot_words = hot_words  # type: str
        self.id = id  # type: str
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int
        self.scenario_uuid = scenario_uuid  # type: str
        self.speech_optimization_param = speech_optimization_param  # type: str

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        _map = super(ListSurveysResponseBodySurveys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrCustomModel') is not None:
            temp_model = ListSurveysResponseBodySurveysAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Flow') is not None:
            temp_model = ListSurveysResponseBodySurveysFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        return self


class ListSurveysResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, surveys=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.surveys = surveys  # type: list[ListSurveysResponseBodySurveys]

    def validate(self):
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSurveysResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ListSurveysResponseBodySurveys()
                self.surveys.append(temp_model.from_map(k))
        return self


class ListSurveysResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListSurveysResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSurveysResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSurveysResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTransferableSkillGroupsRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTransferableSkillGroupsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListTransferableSkillGroupsResponseBodySkillGroups(TeaModel):
    def __init__(self, acc_queue_name=None, acc_skill_group_name=None, allow_private_outbound_number=None,
                 instance_id=None, routing_strategy=None, skill_group_description=None, skill_group_id=None,
                 skill_group_name=None, user_count=None):
        self.acc_queue_name = acc_queue_name  # type: str
        self.acc_skill_group_name = acc_skill_group_name  # type: str
        self.allow_private_outbound_number = allow_private_outbound_number  # type: bool
        self.instance_id = instance_id  # type: str
        self.routing_strategy = routing_strategy  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str
        self.user_count = user_count  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTransferableSkillGroupsResponseBodySkillGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acc_queue_name is not None:
            result['AccQueueName'] = self.acc_queue_name
        if self.acc_skill_group_name is not None:
            result['AccSkillGroupName'] = self.acc_skill_group_name
        if self.allow_private_outbound_number is not None:
            result['AllowPrivateOutboundNumber'] = self.allow_private_outbound_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccQueueName') is not None:
            self.acc_queue_name = m.get('AccQueueName')
        if m.get('AccSkillGroupName') is not None:
            self.acc_skill_group_name = m.get('AccSkillGroupName')
        if m.get('AllowPrivateOutboundNumber') is not None:
            self.allow_private_outbound_number = m.get('AllowPrivateOutboundNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        return self


class ListTransferableSkillGroupsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, skill_groups=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.skill_groups = skill_groups  # type: list[ListTransferableSkillGroupsResponseBodySkillGroups]
        self.success = success  # type: bool

    def validate(self):
        if self.skill_groups:
            for k in self.skill_groups:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTransferableSkillGroupsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SkillGroups'] = []
        if self.skill_groups is not None:
            for k in self.skill_groups:
                result['SkillGroups'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.skill_groups = []
        if m.get('SkillGroups') is not None:
            for k in m.get('SkillGroups'):
                temp_model = ListTransferableSkillGroupsResponseBodySkillGroups()
                self.skill_groups.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListTransferableSkillGroupsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListTransferableSkillGroupsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTransferableSkillGroupsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListTransferableSkillGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTrunkProvidersResponseBodyTrunkProviders(TeaModel):
    def __init__(self, provider_name=None, status=None):
        self.provider_name = provider_name  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTrunkProvidersResponseBodyTrunkProviders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListTrunkProvidersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 trunk_providers=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trunk_providers = trunk_providers  # type: list[ListTrunkProvidersResponseBodyTrunkProviders]

    def validate(self):
        if self.trunk_providers:
            for k in self.trunk_providers:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTrunkProvidersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TrunkProviders'] = []
        if self.trunk_providers is not None:
            for k in self.trunk_providers:
                result['TrunkProviders'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.trunk_providers = []
        if m.get('TrunkProviders') is not None:
            for k in m.get('TrunkProviders'):
                temp_model = ListTrunkProvidersResponseBodyTrunkProviders()
                self.trunk_providers.append(temp_model.from_map(k))
        return self


class ListTrunkProvidersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListTrunkProvidersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTrunkProvidersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListTrunkProvidersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTrunksOfSkillGroupRequest(TeaModel):
    def __init__(self, instance_id=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTrunksOfSkillGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ListTrunksOfSkillGroupResponseBodyTrunkConfigs(TeaModel):
    def __init__(self, primary=None, provider_name=None):
        self.primary = primary  # type: bool
        self.provider_name = provider_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTrunksOfSkillGroupResponseBodyTrunkConfigs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.primary is not None:
            result['Primary'] = self.primary
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Primary') is not None:
            self.primary = m.get('Primary')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        return self


class ListTrunksOfSkillGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 trunk_configs=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trunk_configs = trunk_configs  # type: list[ListTrunksOfSkillGroupResponseBodyTrunkConfigs]

    def validate(self):
        if self.trunk_configs:
            for k in self.trunk_configs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTrunksOfSkillGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TrunkConfigs'] = []
        if self.trunk_configs is not None:
            for k in self.trunk_configs:
                result['TrunkConfigs'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.trunk_configs = []
        if m.get('TrunkConfigs') is not None:
            for k in m.get('TrunkConfigs'):
                temp_model = ListTrunksOfSkillGroupResponseBodyTrunkConfigs()
                self.trunk_configs.append(temp_model.from_map(k))
        return self


class ListTrunksOfSkillGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListTrunksOfSkillGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTrunksOfSkillGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListTrunksOfSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUnreachableContactsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUnreachableContactsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListUnreachableContactsResponseBodyUnreachableContactsListContacts(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, phone_number=None, reference_id=None, role=None,
                 state=None):
        self.contact_id = contact_id  # type: str
        self.contact_name = contact_name  # type: str
        self.phone_number = phone_number  # type: str
        self.reference_id = reference_id  # type: str
        self.role = role  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUnreachableContactsResponseBodyUnreachableContactsListContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListUnreachableContactsResponseBodyUnreachableContactsList(TeaModel):
    def __init__(self, contacts=None, total_attempts=None):
        self.contacts = contacts  # type: list[ListUnreachableContactsResponseBodyUnreachableContactsListContacts]
        self.total_attempts = total_attempts  # type: int

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUnreachableContactsResponseBodyUnreachableContactsList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        if self.total_attempts is not None:
            result['TotalAttempts'] = self.total_attempts
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListUnreachableContactsResponseBodyUnreachableContactsListContacts()
                self.contacts.append(temp_model.from_map(k))
        if m.get('TotalAttempts') is not None:
            self.total_attempts = m.get('TotalAttempts')
        return self


class ListUnreachableContactsResponseBodyUnreachableContacts(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: list[ListUnreachableContactsResponseBodyUnreachableContactsList]
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUnreachableContactsResponseBodyUnreachableContacts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListUnreachableContactsResponseBodyUnreachableContactsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListUnreachableContactsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 unreachable_contacts=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.unreachable_contacts = unreachable_contacts  # type: ListUnreachableContactsResponseBodyUnreachableContacts

    def validate(self):
        if self.unreachable_contacts:
            self.unreachable_contacts.validate()

    def to_map(self):
        _map = super(ListUnreachableContactsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.unreachable_contacts is not None:
            result['UnreachableContacts'] = self.unreachable_contacts.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UnreachableContacts') is not None:
            temp_model = ListUnreachableContactsResponseBodyUnreachableContacts()
            self.unreachable_contacts = temp_model.from_map(m['UnreachableContacts'])
        return self


class ListUnreachableContactsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListUnreachableContactsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListUnreachableContactsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListUnreachableContactsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUsersRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListUsersResponseBodyUsersListUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersListUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListUsersResponseBodyUsersListUserRolesRole(TeaModel):
    def __init__(self, instance_id=None, role_description=None, role_id=None, role_name=None):
        self.instance_id = instance_id  # type: str
        self.role_description = role_description  # type: str
        self.role_id = role_id  # type: str
        self.role_name = role_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersListUserRolesRole, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        return self


class ListUsersResponseBodyUsersListUserRoles(TeaModel):
    def __init__(self, role=None):
        self.role = role  # type: list[ListUsersResponseBodyUsersListUserRolesRole]

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersListUserRoles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = ListUsersResponseBodyUsersListUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(self, instance_id=None, skill_group_description=None, skill_group_id=None, skill_group_name=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel(TeaModel):
    def __init__(self, level=None, skill=None, skill_level_id=None):
        self.level = level  # type: int
        self.skill = skill  # type: ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill
        self.skill_level_id = skill_level_id  # type: str

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Skill') is not None:
            temp_model = ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        return self


class ListUsersResponseBodyUsersListUserSkillLevels(TeaModel):
    def __init__(self, skill_level=None):
        self.skill_level = skill_level  # type: list[ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel]

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersListUserSkillLevels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListUsersResponseBodyUsersListUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, primary=None, private_outbound_number_id=None, ram_id=None,
                 roles=None, skill_levels=None, user_id=None):
        self.detail = detail  # type: ListUsersResponseBodyUsersListUserDetail
        self.instance_id = instance_id  # type: str
        self.primary = primary  # type: bool
        self.private_outbound_number_id = private_outbound_number_id  # type: str
        self.ram_id = ram_id  # type: str
        self.roles = roles  # type: ListUsersResponseBodyUsersListUserRoles
        self.skill_levels = skill_levels  # type: ListUsersResponseBodyUsersListUserSkillLevels
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()
        if self.roles:
            self.roles.validate()
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersListUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.primary is not None:
            result['Primary'] = self.primary
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = ListUsersResponseBodyUsersListUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Primary') is not None:
            self.primary = m.get('Primary')
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Roles') is not None:
            temp_model = ListUsersResponseBodyUsersListUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('SkillLevels') is not None:
            temp_model = ListUsersResponseBodyUsersListUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListUsersResponseBodyUsersList(TeaModel):
    def __init__(self, user=None):
        self.user = user  # type: list[ListUsersResponseBodyUsersListUser]

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUsersResponseBodyUsersList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListUsersResponseBodyUsersListUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListUsersResponseBodyUsers(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListUsersResponseBodyUsersList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListUsersResponseBodyUsers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListUsersResponseBodyUsersList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListUsersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, users=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.users = users  # type: ListUsersResponseBodyUsers

    def validate(self):
        if self.users:
            self.users.validate()

    def to_map(self):
        _map = super(ListUsersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.users is not None:
            result['Users'] = self.users.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Users') is not None:
            temp_model = ListUsersResponseBodyUsers()
            self.users = temp_model.from_map(m['Users'])
        return self


class ListUsersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListUsersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListUsersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUsersOfSkillGroupRequest(TeaModel):
    def __init__(self, instance_id=None, page_number=None, page_size=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersOfSkillGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserDetail(TeaModel):
    def __init__(self, department=None, display_name=None, email=None, login_name=None, phone=None):
        self.department = department  # type: str
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.login_name = login_name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.department is not None:
            result['Department'] = self.department
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege(TeaModel):
    def __init__(self, privilege_description=None, privilege_id=None, privilege_name=None):
        self.privilege_description = privilege_description  # type: str
        self.privilege_id = privilege_id  # type: str
        self.privilege_name = privilege_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.privilege_description is not None:
            result['PrivilegeDescription'] = self.privilege_description
        if self.privilege_id is not None:
            result['PrivilegeId'] = self.privilege_id
        if self.privilege_name is not None:
            result['PrivilegeName'] = self.privilege_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PrivilegeDescription') is not None:
            self.privilege_description = m.get('PrivilegeDescription')
        if m.get('PrivilegeId') is not None:
            self.privilege_id = m.get('PrivilegeId')
        if m.get('PrivilegeName') is not None:
            self.privilege_name = m.get('PrivilegeName')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges(TeaModel):
    def __init__(self, privilege=None):
        self.privilege = privilege  # type: list[ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege]

    def validate(self):
        if self.privilege:
            for k in self.privilege:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Privilege'] = []
        if self.privilege is not None:
            for k in self.privilege:
                result['Privilege'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.privilege = []
        if m.get('Privilege') is not None:
            for k in m.get('Privilege'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege()
                self.privilege.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole(TeaModel):
    def __init__(self, instance_id=None, privileges=None, role_description=None, role_id=None, role_name=None,
                 user_count=None):
        self.instance_id = instance_id  # type: str
        self.privileges = privileges  # type: ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges
        self.role_description = role_description  # type: str
        self.role_id = role_id  # type: str
        self.role_name = role_name  # type: str
        self.user_count = user_count  # type: int

    def validate(self):
        if self.privileges:
            self.privileges.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.privileges is not None:
            result['Privileges'] = self.privileges.to_map()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Privileges') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges()
            self.privileges = temp_model.from_map(m['Privileges'])
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRoles(TeaModel):
    def __init__(self, role=None):
        self.role = role  # type: list[ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole]

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserRoles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(self, instance_id=None, skill_group_description=None, skill_group_id=None, skill_group_name=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_description = skill_group_description  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel(TeaModel):
    def __init__(self, level=None, skill=None, skill_level_id=None):
        self.level = level  # type: int
        self.skill = skill  # type: ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill
        self.skill_level_id = skill_level_id  # type: str

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Skill') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels(TeaModel):
    def __init__(self, skill_level=None):
        self.skill_level = skill_level  # type: list[ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel]

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUser(TeaModel):
    def __init__(self, detail=None, instance_id=None, ram_id=None, roles=None, skill_levels=None, user_id=None):
        self.detail = detail  # type: ListUsersOfSkillGroupResponseBodyUsersListUserDetail
        self.instance_id = instance_id  # type: str
        self.ram_id = ram_id  # type: str
        self.roles = roles  # type: ListUsersOfSkillGroupResponseBodyUsersListUserRoles
        self.skill_levels = skill_levels  # type: ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels
        self.user_id = user_id  # type: str

    def validate(self):
        if self.detail:
            self.detail.validate()
        if self.roles:
            self.roles.validate()
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersListUser, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Roles') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('SkillLevels') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListUsersOfSkillGroupResponseBodyUsersList(TeaModel):
    def __init__(self, user=None):
        self.user = user  # type: list[ListUsersOfSkillGroupResponseBodyUsersListUser]

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsersList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsers(TeaModel):
    def __init__(self, list=None, page_number=None, page_size=None, total_count=None):
        self.list = list  # type: ListUsersOfSkillGroupResponseBodyUsersList
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBodyUsers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListUsersOfSkillGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, users=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.users = users  # type: ListUsersOfSkillGroupResponseBodyUsers

    def validate(self):
        if self.users:
            self.users.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.users is not None:
            result['Users'] = self.users.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Users') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsers()
            self.users = temp_model.from_map(m['Users'])
        return self


class ListUsersOfSkillGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListUsersOfSkillGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListUsersOfSkillGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListUsersOfSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListVoiceAppraiseRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListVoiceAppraiseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber(TeaModel):
    def __init__(self, instance_id=None, number=None, phone_number_description=None, phone_number_id=None,
                 remaining_time=None, trunks=None):
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.trunks = trunks  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        return self


class ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers(TeaModel):
    def __init__(self, phone_number=None):
        self.phone_number = phone_number  # type: list[ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber]

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion(TeaModel):
    def __init__(self, contact_flow_version_description=None, contact_flow_version_id=None, content=None,
                 last_modified=None, last_modified_by=None, status=None, version=None):
        self.contact_flow_version_description = contact_flow_version_description  # type: str
        self.contact_flow_version_id = contact_flow_version_id  # type: str
        self.content = content  # type: str
        self.last_modified = last_modified  # type: str
        self.last_modified_by = last_modified_by  # type: str
        self.status = status  # type: str
        self.version = version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.content is not None:
            result['Content'] = self.content
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class ListVoiceAppraiseResponseBodyContactFlowVersions(TeaModel):
    def __init__(self, contact_flow_version=None):
        self.contact_flow_version = contact_flow_version  # type: list[ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion]

    def validate(self):
        if self.contact_flow_version:
            for k in self.contact_flow_version:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListVoiceAppraiseResponseBodyContactFlowVersions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ContactFlowVersion'] = []
        if self.contact_flow_version is not None:
            for k in self.contact_flow_version:
                result['ContactFlowVersion'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.contact_flow_version = []
        if m.get('ContactFlowVersion') is not None:
            for k in m.get('ContactFlowVersion'):
                temp_model = ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion()
                self.contact_flow_version.append(temp_model.from_map(k))
        return self


class ListVoiceAppraiseResponseBodyContactFlow(TeaModel):
    def __init__(self, applied_version=None, contact_flow_description=None, contact_flow_id=None,
                 contact_flow_name=None, instance_id=None, phone_numbers=None, type=None, versions=None):
        self.applied_version = applied_version  # type: str
        self.contact_flow_description = contact_flow_description  # type: str
        self.contact_flow_id = contact_flow_id  # type: str
        self.contact_flow_name = contact_flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.phone_numbers = phone_numbers  # type: ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers
        self.type = type  # type: str
        self.versions = versions  # type: ListVoiceAppraiseResponseBodyContactFlowVersions

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.versions:
            self.versions.validate()

    def to_map(self):
        _map = super(ListVoiceAppraiseResponseBodyContactFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.type is not None:
            result['Type'] = self.type
        if self.versions is not None:
            result['Versions'] = self.versions.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Versions') is not None:
            temp_model = ListVoiceAppraiseResponseBodyContactFlowVersions()
            self.versions = temp_model.from_map(m['Versions'])
        return self


class ListVoiceAppraiseResponseBody(TeaModel):
    def __init__(self, code=None, contact_flow=None, http_status_code=None, message=None, notice=None,
                 request_id=None, success=None):
        self.code = code  # type: str
        self.contact_flow = contact_flow  # type: ListVoiceAppraiseResponseBodyContactFlow
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.notice = notice  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        _map = super(ListVoiceAppraiseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.notice is not None:
            result['Notice'] = self.notice
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactFlow') is not None:
            temp_model = ListVoiceAppraiseResponseBodyContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Notice') is not None:
            self.notice = m.get('Notice')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListVoiceAppraiseResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ListVoiceAppraiseResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListVoiceAppraiseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListVoiceAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyAgentDeviceRequest(TeaModel):
    def __init__(self, agent_device_id=None, instance_id=None, is_login=None):
        self.agent_device_id = agent_device_id  # type: long
        self.instance_id = instance_id  # type: str
        self.is_login = is_login  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyAgentDeviceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_device_id is not None:
            result['AgentDeviceId'] = self.agent_device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_login is not None:
            result['IsLogin'] = self.is_login
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentDeviceId') is not None:
            self.agent_device_id = m.get('AgentDeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsLogin') is not None:
            self.is_login = m.get('IsLogin')
        return self


class ModifyAgentDeviceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyAgentDeviceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyAgentDeviceResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyAgentDeviceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyAgentDeviceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyAgentDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyCabInstanceRequest(TeaModel):
    def __init__(self, call_center_instance_id=None, instance_description=None, instance_id=None,
                 instance_name=None, max_concurrent_conversation=None):
        self.call_center_instance_id = call_center_instance_id  # type: str
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyCabInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        return self


class ModifyCabInstanceResponseBodyInstance(TeaModel):
    def __init__(self, call_center_instance_id=None, creation_time=None, instance_description=None,
                 instance_id=None, instance_name=None, max_concurrent_conversation=None, owner=None):
        self.call_center_instance_id = call_center_instance_id  # type: str
        self.creation_time = creation_time  # type: long
        self.instance_description = instance_description  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.max_concurrent_conversation = max_concurrent_conversation  # type: int
        self.owner = owner  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyCabInstanceResponseBodyInstance, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner is not None:
            result['Owner'] = self.owner
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        return self


class ModifyCabInstanceResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, instance=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.instance = instance  # type: ModifyCabInstanceResponseBodyInstance
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super(ModifyCabInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = ModifyCabInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyCabInstanceResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyCabInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyCabInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyCabInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyCallRatioRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, ratio=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.ratio = ratio  # type: int
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyCallRatioRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.ratio is not None:
            result['Ratio'] = self.ratio
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Ratio') is not None:
            self.ratio = m.get('Ratio')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ModifyCallRatioResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyCallRatioResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyCallRatioResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyCallRatioResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyCallRatioResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyCallRatioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPhoneNumberRequest(TeaModel):
    def __init__(self, contact_flow_id=None, instance_id=None, phone_number_id=None, skill_group_id=None,
                 usage=None):
        self.contact_flow_id = contact_flow_id  # type: str
        self.instance_id = instance_id  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.skill_group_id = skill_group_id  # type: list[str]
        self.usage = usage  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPhoneNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ModifyPhoneNumberResponseBodyPhoneNumberContactFlow(TeaModel):
    def __init__(self, contact_flow_description=None, contact_flow_id=None, contact_flow_name=None,
                 instance_id=None, type=None):
        self.contact_flow_description = contact_flow_description  # type: str
        self.contact_flow_id = contact_flow_id  # type: str
        self.contact_flow_name = contact_flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPhoneNumberResponseBodyPhoneNumberContactFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup(TeaModel):
    def __init__(self, skill_group_id=None, skill_group_name=None):
        self.skill_group_id = skill_group_id  # type: str
        self.skill_group_name = skill_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        return self


class ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups(TeaModel):
    def __init__(self, skill_group=None):
        self.skill_group = skill_group  # type: list[ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup]

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ModifyPhoneNumberResponseBodyPhoneNumber(TeaModel):
    def __init__(self, allow_outbound=None, contact_flow=None, instance_id=None, number=None,
                 phone_number_description=None, phone_number_id=None, remaining_time=None, skill_groups=None, test_only=None, trunks=None,
                 usage=None):
        self.allow_outbound = allow_outbound  # type: bool
        self.contact_flow = contact_flow  # type: ModifyPhoneNumberResponseBodyPhoneNumberContactFlow
        self.instance_id = instance_id  # type: str
        self.number = number  # type: str
        self.phone_number_description = phone_number_description  # type: str
        self.phone_number_id = phone_number_id  # type: str
        self.remaining_time = remaining_time  # type: int
        self.skill_groups = skill_groups  # type: ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups
        self.test_only = test_only  # type: bool
        self.trunks = trunks  # type: int
        self.usage = usage  # type: str

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()
        if self.skill_groups:
            self.skill_groups.validate()

    def to_map(self):
        _map = super(ModifyPhoneNumberResponseBodyPhoneNumber, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('ContactFlow') is not None:
            temp_model = ModifyPhoneNumberResponseBodyPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('SkillGroups') is not None:
            temp_model = ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class ModifyPhoneNumberResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, phone_number=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.phone_number = phone_number  # type: ModifyPhoneNumberResponseBodyPhoneNumber
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.phone_number:
            self.phone_number.validate()

    def to_map(self):
        _map = super(ModifyPhoneNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PhoneNumber') is not None:
            temp_model = ModifyPhoneNumberResponseBodyPhoneNumber()
            self.phone_number = temp_model.from_map(m['PhoneNumber'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPhoneNumberResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyPhoneNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyPhoneNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPhoneNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPhoneTagsRequest(TeaModel):
    def __init__(self, instance_id=None, service_tag=None, skill_group_id_list=None):
        self.instance_id = instance_id  # type: str
        self.service_tag = service_tag  # type: str
        self.skill_group_id_list = skill_group_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPhoneTagsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.service_tag is not None:
            result['ServiceTag'] = self.service_tag
        if self.skill_group_id_list is not None:
            result['SkillGroupIdList'] = self.skill_group_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ServiceTag') is not None:
            self.service_tag = m.get('ServiceTag')
        if m.get('SkillGroupIdList') is not None:
            self.skill_group_id_list = m.get('SkillGroupIdList')
        return self


class ModifyPhoneTagsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPhoneTagsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPhoneTagsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyPhoneTagsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyPhoneTagsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPrimaryTrunksOfSkillGroupRequest(TeaModel):
    def __init__(self, instance_id=None, primary_provider_name=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.primary_provider_name = primary_provider_name  # type: list[str]
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPrimaryTrunksOfSkillGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.primary_provider_name is not None:
            result['PrimaryProviderName'] = self.primary_provider_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PrimaryProviderName') is not None:
            self.primary_provider_name = m.get('PrimaryProviderName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ModifyPrimaryTrunksOfSkillGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPrimaryTrunksOfSkillGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPrimaryTrunksOfSkillGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyPrimaryTrunksOfSkillGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyPrimaryTrunksOfSkillGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPrimaryTrunksOfSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPrivacyNumberCallDetailRequest(TeaModel):
    def __init__(self, call_id=None, contact_id=None, instance_id=None):
        self.call_id = call_id  # type: str
        self.contact_id = contact_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPrivacyNumberCallDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ModifyPrivacyNumberCallDetailResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyPrivacyNumberCallDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPrivacyNumberCallDetailResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyPrivacyNumberCallDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyPrivacyNumberCallDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPrivacyNumberCallDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyScenarioRequest(TeaModel):
    def __init__(self, description=None, instance_id=None, name=None, scenario_id=None, variables=None):
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.scenario_id = scenario_id  # type: str
        self.variables = variables  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScenarioRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.variables is not None:
            result['Variables'] = self.variables
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Variables') is not None:
            self.variables = m.get('Variables')
        return self


class ModifyScenarioResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(self, begin_time=None, end_time=None):
        self.begin_time = begin_time  # type: str
        self.end_time = end_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScenarioResponseBodyScenarioStrategyWorkingTime, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class ModifyScenarioResponseBodyScenarioStrategy(TeaModel):
    def __init__(self, customized=None, end_time=None, follow_up_strategy=None, is_template=None,
                 max_attempts_per_day=None, min_attempt_interval=None, repeat_by=None, repeat_days=None, routing_strategy=None,
                 start_time=None, strategy_description=None, strategy_id=None, strategy_name=None, type=None,
                 working_time=None):
        self.customized = customized  # type: str
        self.end_time = end_time  # type: long
        self.follow_up_strategy = follow_up_strategy  # type: str
        self.is_template = is_template  # type: bool
        self.max_attempts_per_day = max_attempts_per_day  # type: int
        self.min_attempt_interval = min_attempt_interval  # type: int
        self.repeat_by = repeat_by  # type: str
        self.repeat_days = repeat_days  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.start_time = start_time  # type: long
        self.strategy_description = strategy_description  # type: str
        self.strategy_id = strategy_id  # type: str
        self.strategy_name = strategy_name  # type: str
        self.type = type  # type: str
        self.working_time = working_time  # type: list[ModifyScenarioResponseBodyScenarioStrategyWorkingTime]

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyScenarioResponseBodyScenarioStrategy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ModifyScenarioResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class ModifyScenarioResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(self, intent_id=None, node_id=None):
        self.intent_id = intent_id  # type: str
        self.node_id = node_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScenarioResponseBodyScenarioSurveysIntents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class ModifyScenarioResponseBodyScenarioSurveys(TeaModel):
    def __init__(self, beebot_id=None, intents=None, role=None, round=None, survey_description=None, survey_id=None,
                 survey_name=None):
        self.beebot_id = beebot_id  # type: str
        self.intents = intents  # type: list[ModifyScenarioResponseBodyScenarioSurveysIntents]
        self.role = role  # type: str
        self.round = round  # type: int
        self.survey_description = survey_description  # type: str
        self.survey_id = survey_id  # type: str
        self.survey_name = survey_name  # type: str

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyScenarioResponseBodyScenarioSurveys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.survey_description is not None:
            result['SurveyDescription'] = self.survey_description
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        if self.survey_name is not None:
            result['SurveyName'] = self.survey_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = ModifyScenarioResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SurveyDescription') is not None:
            self.survey_description = m.get('SurveyDescription')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        if m.get('SurveyName') is not None:
            self.survey_name = m.get('SurveyName')
        return self


class ModifyScenarioResponseBodyScenarioVariables(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyScenarioResponseBodyScenarioVariables, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ModifyScenarioResponseBodyScenario(TeaModel):
    def __init__(self, is_template=None, scenario_description=None, scenario_id=None, scenario_name=None,
                 strategy=None, surveys=None, type=None, variables=None):
        self.is_template = is_template  # type: bool
        self.scenario_description = scenario_description  # type: str
        self.scenario_id = scenario_id  # type: str
        self.scenario_name = scenario_name  # type: str
        self.strategy = strategy  # type: ModifyScenarioResponseBodyScenarioStrategy
        self.surveys = surveys  # type: list[ModifyScenarioResponseBodyScenarioSurveys]
        self.type = type  # type: str
        self.variables = variables  # type: list[ModifyScenarioResponseBodyScenarioVariables]

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModifyScenarioResponseBodyScenario, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.scenario_description is not None:
            result['ScenarioDescription'] = self.scenario_description
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.scenario_name is not None:
            result['ScenarioName'] = self.scenario_name
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('ScenarioDescription') is not None:
            self.scenario_description = m.get('ScenarioDescription')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScenarioName') is not None:
            self.scenario_name = m.get('ScenarioName')
        if m.get('Strategy') is not None:
            temp_model = ModifyScenarioResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ModifyScenarioResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = ModifyScenarioResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class ModifyScenarioResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, scenario=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.scenario = scenario  # type: ModifyScenarioResponseBodyScenario
        self.success = success  # type: bool

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        _map = super(ModifyScenarioResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scenario') is not None:
            temp_model = ModifyScenarioResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyScenarioResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyScenarioResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyScenarioResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySkillGroupRequest(TeaModel):
    def __init__(self, allow_private_outbound_number=None, description=None, instance_id=None, name=None,
                 outbound_phone_number_id=None, routing_strategy=None, skill_group_id=None, skill_level=None, user_id=None):
        self.allow_private_outbound_number = allow_private_outbound_number  # type: bool
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.outbound_phone_number_id = outbound_phone_number_id  # type: list[str]
        self.routing_strategy = routing_strategy  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.skill_level = skill_level  # type: list[int]
        self.user_id = user_id  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySkillGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_private_outbound_number is not None:
            result['AllowPrivateOutboundNumber'] = self.allow_private_outbound_number
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.outbound_phone_number_id is not None:
            result['OutboundPhoneNumberId'] = self.outbound_phone_number_id
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AllowPrivateOutboundNumber') is not None:
            self.allow_private_outbound_number = m.get('AllowPrivateOutboundNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OutboundPhoneNumberId') is not None:
            self.outbound_phone_number_id = m.get('OutboundPhoneNumberId')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ModifySkillGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySkillGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySkillGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifySkillGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifySkillGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySkillGroupOfUserRequest(TeaModel):
    def __init__(self, instance_id=None, role_id=None, skill_group_id=None, skill_level=None, user_id=None):
        self.instance_id = instance_id  # type: str
        self.role_id = role_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: list[str]
        self.skill_level = skill_level  # type: list[int]
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySkillGroupOfUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ModifySkillGroupOfUserResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySkillGroupOfUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySkillGroupOfUserResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifySkillGroupOfUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifySkillGroupOfUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySkillGroupOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySkillGroupOutboundNumbersRequest(TeaModel):
    def __init__(self, instance_id=None, operation_type=None, outbound_phone_number_id=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.operation_type = operation_type  # type: int
        self.outbound_phone_number_id = outbound_phone_number_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySkillGroupOutboundNumbersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.outbound_phone_number_id is not None:
            result['OutboundPhoneNumberId'] = self.outbound_phone_number_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('OutboundPhoneNumberId') is not None:
            self.outbound_phone_number_id = m.get('OutboundPhoneNumberId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ModifySkillGroupOutboundNumbersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySkillGroupOutboundNumbersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySkillGroupOutboundNumbersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifySkillGroupOutboundNumbersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifySkillGroupOutboundNumbersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySkillGroupOutboundNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySurveyRequest(TeaModel):
    def __init__(self, corpora=None, description=None, flow_id=None, flow_json=None, global_questions=None,
                 instance_id=None, name=None, role=None, round=None, scenario_id=None, speech_optimization_param=None,
                 survey_id=None):
        self.corpora = corpora  # type: str
        self.description = description  # type: str
        self.flow_id = flow_id  # type: str
        self.flow_json = flow_json  # type: str
        self.global_questions = global_questions  # type: str
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int
        self.scenario_id = scenario_id  # type: str
        self.speech_optimization_param = speech_optimization_param  # type: str
        self.survey_id = survey_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySurveyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.description is not None:
            result['Description'] = self.description
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class ModifySurveyResponseBodySurveyAsrCustomModel(TeaModel):
    def __init__(self, corpora=None, custom_model_status=None):
        self.corpora = corpora  # type: str
        self.custom_model_status = custom_model_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySurveyResponseBodySurveyAsrCustomModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        return self


class ModifySurveyResponseBodySurveyFlow(TeaModel):
    def __init__(self, flow_id=None, flow_json=None, is_published=None):
        self.flow_id = flow_id  # type: str
        self.flow_json = flow_json  # type: str
        self.is_published = is_published  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifySurveyResponseBodySurveyFlow, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        return self


class ModifySurveyResponseBodySurvey(TeaModel):
    def __init__(self, asr_custom_model=None, description=None, flow=None, global_questions=None, hot_words=None,
                 id=None, name=None, role=None, round=None, scenario_uuid=None, speech_optimization_param=None):
        self.asr_custom_model = asr_custom_model  # type: ModifySurveyResponseBodySurveyAsrCustomModel
        self.description = description  # type: str
        self.flow = flow  # type: ModifySurveyResponseBodySurveyFlow
        self.global_questions = global_questions  # type: str
        self.hot_words = hot_words  # type: str
        self.id = id  # type: str
        self.name = name  # type: str
        self.role = role  # type: str
        self.round = round  # type: int
        self.scenario_uuid = scenario_uuid  # type: str
        self.speech_optimization_param = speech_optimization_param  # type: str

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        _map = super(ModifySurveyResponseBodySurvey, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AsrCustomModel') is not None:
            temp_model = ModifySurveyResponseBodySurveyAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Flow') is not None:
            temp_model = ModifySurveyResponseBodySurveyFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        return self


class ModifySurveyResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, survey=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.survey = survey  # type: ModifySurveyResponseBodySurvey

    def validate(self):
        if self.survey:
            self.survey.validate()

    def to_map(self):
        _map = super(ModifySurveyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.survey is not None:
            result['Survey'] = self.survey.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Survey') is not None:
            temp_model = ModifySurveyResponseBodySurvey()
            self.survey = temp_model.from_map(m['Survey'])
        return self


class ModifySurveyResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifySurveyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifySurveyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyUserRequest(TeaModel):
    def __init__(self, display_name=None, email=None, instance_id=None, phone=None, private_outbound_number_id=None,
                 role_id=None, skill_group_id=None, skill_level=None, user_id=None):
        self.display_name = display_name  # type: str
        self.email = email  # type: str
        self.instance_id = instance_id  # type: str
        self.phone = phone  # type: str
        self.private_outbound_number_id = private_outbound_number_id  # type: str
        self.role_id = role_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: list[str]
        self.skill_level = skill_level  # type: list[int]
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ModifyUserResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModifyUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyUserResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ModifyUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ModifyUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PickGlobalOutboundNumbersRequest(TeaModel):
    def __init__(self, callee_number=None, count=None, instance_id=None, is_virtual=None, skill_group_id=None):
        self.callee_number = callee_number  # type: str
        self.count = count  # type: int
        self.instance_id = instance_id  # type: str
        self.is_virtual = is_virtual  # type: bool
        self.skill_group_id = skill_group_id  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickGlobalOutboundNumbersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.count is not None:
            result['Count'] = self.count
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_virtual is not None:
            result['IsVirtual'] = self.is_virtual
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsVirtual') is not None:
            self.is_virtual = m.get('IsVirtual')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee(TeaModel):
    def __init__(self, city=None, number=None, province=None):
        self.city = city  # type: str
        self.number = number  # type: str
        self.province = province  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.number is not None:
            result['Number'] = self.number
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller(TeaModel):
    def __init__(self, city=None, number=None, province=None):
        self.city = city  # type: str
        self.number = number  # type: str
        self.province = province  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.number is not None:
            result['Number'] = self.number
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair(TeaModel):
    def __init__(self, callee=None, caller=None):
        self.callee = callee  # type: PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee
        self.caller = caller  # type: PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller

    def validate(self):
        if self.callee:
            self.callee.validate()
        if self.caller:
            self.caller.validate()

    def to_map(self):
        _map = super(PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee is not None:
            result['Callee'] = self.callee.to_map()
        if self.caller is not None:
            result['Caller'] = self.caller.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Callee') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee()
            self.callee = temp_model.from_map(m['Callee'])
        if m.get('Caller') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller()
            self.caller = temp_model.from_map(m['Caller'])
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairs(TeaModel):
    def __init__(self, dial_number_pair=None):
        self.dial_number_pair = dial_number_pair  # type: list[PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair]

    def validate(self):
        if self.dial_number_pair:
            for k in self.dial_number_pair:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PickGlobalOutboundNumbersResponseBodyDialNumberPairs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DialNumberPair'] = []
        if self.dial_number_pair is not None:
            for k in self.dial_number_pair:
                result['DialNumberPair'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.dial_number_pair = []
        if m.get('DialNumberPair') is not None:
            for k in m.get('DialNumberPair'):
                temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair()
                self.dial_number_pair.append(temp_model.from_map(k))
        return self


class PickGlobalOutboundNumbersResponseBody(TeaModel):
    def __init__(self, code=None, dial_number_pairs=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.dial_number_pairs = dial_number_pairs  # type: PickGlobalOutboundNumbersResponseBodyDialNumberPairs
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.dial_number_pairs:
            self.dial_number_pairs.validate()

    def to_map(self):
        _map = super(PickGlobalOutboundNumbersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dial_number_pairs is not None:
            result['DialNumberPairs'] = self.dial_number_pairs.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialNumberPairs') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairs()
            self.dial_number_pairs = temp_model.from_map(m['DialNumberPairs'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PickGlobalOutboundNumbersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: PickGlobalOutboundNumbersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PickGlobalOutboundNumbersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PickLocalNumberRequest(TeaModel):
    def __init__(self, callee_number=None, candidate_number=None, instance_id=None):
        self.callee_number = callee_number  # type: str
        self.candidate_number = candidate_number  # type: list[str]
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickLocalNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.candidate_number is not None:
            result['CandidateNumber'] = self.candidate_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('CandidateNumber') is not None:
            self.candidate_number = m.get('CandidateNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class PickLocalNumberResponseBodyDataCallee(TeaModel):
    def __init__(self, city=None, number=None, province=None):
        self.city = city  # type: str
        self.number = number  # type: str
        self.province = province  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickLocalNumberResponseBodyDataCallee, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.number is not None:
            result['Number'] = self.number
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickLocalNumberResponseBodyDataCaller(TeaModel):
    def __init__(self, city=None, number=None, province=None):
        self.city = city  # type: str
        self.number = number  # type: str
        self.province = province  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickLocalNumberResponseBodyDataCaller, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.number is not None:
            result['Number'] = self.number
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickLocalNumberResponseBodyData(TeaModel):
    def __init__(self, callee=None, caller=None):
        self.callee = callee  # type: PickLocalNumberResponseBodyDataCallee
        self.caller = caller  # type: PickLocalNumberResponseBodyDataCaller

    def validate(self):
        if self.callee:
            self.callee.validate()
        if self.caller:
            self.caller.validate()

    def to_map(self):
        _map = super(PickLocalNumberResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee is not None:
            result['Callee'] = self.callee.to_map()
        if self.caller is not None:
            result['Caller'] = self.caller.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Callee') is not None:
            temp_model = PickLocalNumberResponseBodyDataCallee()
            self.callee = temp_model.from_map(m['Callee'])
        if m.get('Caller') is not None:
            temp_model = PickLocalNumberResponseBodyDataCaller()
            self.caller = temp_model.from_map(m['Caller'])
        return self


class PickLocalNumberResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: PickLocalNumberResponseBodyData
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(PickLocalNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = PickLocalNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PickLocalNumberResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: PickLocalNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PickLocalNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PickLocalNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PickOutboundNumbersRequest(TeaModel):
    def __init__(self, callee_number=None, candidate_number=None, count=None, instance_id=None):
        self.callee_number = callee_number  # type: str
        self.candidate_number = candidate_number  # type: list[str]
        self.count = count  # type: int
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickOutboundNumbersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.candidate_number is not None:
            result['CandidateNumber'] = self.candidate_number
        if self.count is not None:
            result['Count'] = self.count
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('CandidateNumber') is not None:
            self.candidate_number = m.get('CandidateNumber')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee(TeaModel):
    def __init__(self, city=None, number=None, province=None):
        self.city = city  # type: str
        self.number = number  # type: str
        self.province = province  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.number is not None:
            result['Number'] = self.number
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller(TeaModel):
    def __init__(self, city=None, number=None, province=None):
        self.city = city  # type: str
        self.number = number  # type: str
        self.province = province  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.number is not None:
            result['Number'] = self.number
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair(TeaModel):
    def __init__(self, callee=None, caller=None):
        self.callee = callee  # type: PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee
        self.caller = caller  # type: PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller

    def validate(self):
        if self.callee:
            self.callee.validate()
        if self.caller:
            self.caller.validate()

    def to_map(self):
        _map = super(PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.callee is not None:
            result['Callee'] = self.callee.to_map()
        if self.caller is not None:
            result['Caller'] = self.caller.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Callee') is not None:
            temp_model = PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee()
            self.callee = temp_model.from_map(m['Callee'])
        if m.get('Caller') is not None:
            temp_model = PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller()
            self.caller = temp_model.from_map(m['Caller'])
        return self


class PickOutboundNumbersResponseBodyDialNumberPairs(TeaModel):
    def __init__(self, dial_number_pair=None):
        self.dial_number_pair = dial_number_pair  # type: list[PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair]

    def validate(self):
        if self.dial_number_pair:
            for k in self.dial_number_pair:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PickOutboundNumbersResponseBodyDialNumberPairs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DialNumberPair'] = []
        if self.dial_number_pair is not None:
            for k in self.dial_number_pair:
                result['DialNumberPair'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.dial_number_pair = []
        if m.get('DialNumberPair') is not None:
            for k in m.get('DialNumberPair'):
                temp_model = PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair()
                self.dial_number_pair.append(temp_model.from_map(k))
        return self


class PickOutboundNumbersResponseBody(TeaModel):
    def __init__(self, code=None, dial_number_pairs=None, http_status_code=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.dial_number_pairs = dial_number_pairs  # type: PickOutboundNumbersResponseBodyDialNumberPairs
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.dial_number_pairs:
            self.dial_number_pairs.validate()

    def to_map(self):
        _map = super(PickOutboundNumbersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dial_number_pairs is not None:
            result['DialNumberPairs'] = self.dial_number_pairs.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialNumberPairs') is not None:
            temp_model = PickOutboundNumbersResponseBodyDialNumberPairs()
            self.dial_number_pairs = temp_model.from_map(m['DialNumberPairs'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PickOutboundNumbersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: PickOutboundNumbersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PickOutboundNumbersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PickOutboundNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishContactFlowVersionRequest(TeaModel):
    def __init__(self, contact_flow_version_id=None, instance_id=None, use_tian_gong=None):
        self.contact_flow_version_id = contact_flow_version_id  # type: str
        self.instance_id = instance_id  # type: str
        self.use_tian_gong = use_tian_gong  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishContactFlowVersionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.use_tian_gong is not None:
            result['UseTianGong'] = self.use_tian_gong
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UseTianGong') is not None:
            self.use_tian_gong = m.get('UseTianGong')
        return self


class PublishContactFlowVersionResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishContactFlowVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishContactFlowVersionResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: PublishContactFlowVersionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PublishContactFlowVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishContactFlowVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishPredictiveJobGroupRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None, skill_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishPredictiveJobGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class PublishPredictiveJobGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishPredictiveJobGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishPredictiveJobGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: PublishPredictiveJobGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PublishPredictiveJobGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishPredictiveJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishSurveyRequest(TeaModel):
    def __init__(self, instance_id=None, scenario_id=None, survey_id=None):
        self.instance_id = instance_id  # type: str
        self.scenario_id = scenario_id  # type: str
        self.survey_id = survey_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishSurveyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class PublishSurveyResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(PublishSurveyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishSurveyResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: PublishSurveyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PublishSurveyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RefreshTokenRequest(TeaModel):
    def __init__(self, instance_id=None):
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RefreshTokenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class RefreshTokenResponseBodyToken(TeaModel):
    def __init__(self, sign_data=None, signature=None):
        self.sign_data = sign_data  # type: str
        self.signature = signature  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RefreshTokenResponseBodyToken, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sign_data is not None:
            result['SignData'] = self.sign_data
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SignData') is not None:
            self.sign_data = m.get('SignData')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class RefreshTokenResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, token=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.token = token  # type: RefreshTokenResponseBodyToken

    def validate(self):
        if self.token:
            self.token.validate()

    def to_map(self):
        _map = super(RefreshTokenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.token is not None:
            result['Token'] = self.token.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Token') is not None:
            temp_model = RefreshTokenResponseBodyToken()
            self.token = temp_model.from_map(m['Token'])
        return self


class RefreshTokenResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: RefreshTokenResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RefreshTokenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RefreshTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemovePhoneNumberRequest(TeaModel):
    def __init__(self, instance_id=None, phone_number_id=None):
        self.instance_id = instance_id  # type: str
        self.phone_number_id = phone_number_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemovePhoneNumberRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class RemovePhoneNumberResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemovePhoneNumberResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemovePhoneNumberResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: RemovePhoneNumberResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemovePhoneNumberResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RemovePhoneNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveUsersRequest(TeaModel):
    def __init__(self, instance_id=None, user_id=None):
        self.instance_id = instance_id  # type: str
        self.user_id = user_id  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveUsersRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class RemoveUsersResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveUsersResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemoveUsersResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: RemoveUsersResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemoveUsersResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RemoveUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveUsersFromSkillGroupRequest(TeaModel):
    def __init__(self, instance_id=None, skill_group_id=None, user_id=None):
        self.instance_id = instance_id  # type: str
        self.skill_group_id = skill_group_id  # type: str
        self.user_id = user_id  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveUsersFromSkillGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class RemoveUsersFromSkillGroupResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RemoveUsersFromSkillGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemoveUsersFromSkillGroupResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: RemoveUsersFromSkillGroupResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RemoveUsersFromSkillGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RemoveUsersFromSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RequestLoginInfoRequest(TeaModel):
    def __init__(self, instance_id=None, user_id=None):
        self.instance_id = instance_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RequestLoginInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class RequestLoginInfoResponseBodyLoginInfoRolesRole(TeaModel):
    def __init__(self, instance_id=None, role_description=None, role_id=None, role_name=None):
        self.instance_id = instance_id  # type: str
        self.role_description = role_description  # type: str
        self.role_id = role_id  # type: str
        self.role_name = role_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RequestLoginInfoResponseBodyLoginInfoRolesRole, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        return self


class RequestLoginInfoResponseBodyLoginInfoRoles(TeaModel):
    def __init__(self, role=None):
        self.role = role  # type: list[RequestLoginInfoResponseBodyLoginInfoRolesRole]

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(RequestLoginInfoResponseBodyLoginInfoRoles, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = RequestLoginInfoResponseBodyLoginInfoRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class RequestLoginInfoResponseBodyLoginInfo(TeaModel):
    def __init__(self, agent_server_url=None, display_name=None, extension=None, phone_number=None, region=None,
                 roles=None, sign_data=None, signature=None, tenant_id=None, user_name=None, web_rtc_url=None):
        self.agent_server_url = agent_server_url  # type: str
        self.display_name = display_name  # type: str
        self.extension = extension  # type: str
        self.phone_number = phone_number  # type: str
        self.region = region  # type: str
        self.roles = roles  # type: RequestLoginInfoResponseBodyLoginInfoRoles
        self.sign_data = sign_data  # type: str
        self.signature = signature  # type: str
        self.tenant_id = tenant_id  # type: str
        self.user_name = user_name  # type: str
        self.web_rtc_url = web_rtc_url  # type: str

    def validate(self):
        if self.roles:
            self.roles.validate()

    def to_map(self):
        _map = super(RequestLoginInfoResponseBodyLoginInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_server_url is not None:
            result['AgentServerUrl'] = self.agent_server_url
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.region is not None:
            result['Region'] = self.region
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.sign_data is not None:
            result['SignData'] = self.sign_data
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.web_rtc_url is not None:
            result['WebRtcUrl'] = self.web_rtc_url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentServerUrl') is not None:
            self.agent_server_url = m.get('AgentServerUrl')
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('Roles') is not None:
            temp_model = RequestLoginInfoResponseBodyLoginInfoRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('SignData') is not None:
            self.sign_data = m.get('SignData')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('WebRtcUrl') is not None:
            self.web_rtc_url = m.get('WebRtcUrl')
        return self


class RequestLoginInfoResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, login_info=None, message=None, request_id=None,
                 success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.login_info = login_info  # type: RequestLoginInfoResponseBodyLoginInfo
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        if self.login_info:
            self.login_info.validate()

    def to_map(self):
        _map = super(RequestLoginInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.login_info is not None:
            result['LoginInfo'] = self.login_info.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('LoginInfo') is not None:
            temp_model = RequestLoginInfoResponseBodyLoginInfo()
            self.login_info = temp_model.from_map(m['LoginInfo'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RequestLoginInfoResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: RequestLoginInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RequestLoginInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RequestLoginInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetUserStatusRequest(TeaModel):
    def __init__(self, instance_id=None, ram_id_list=None):
        self.instance_id = instance_id  # type: str
        self.ram_id_list = ram_id_list  # type: list[long]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResetUserStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id_list is not None:
            result['RamIdList'] = self.ram_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamIdList') is not None:
            self.ram_id_list = m.get('RamIdList')
        return self


class ResetUserStatusResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResetUserStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResetUserStatusResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ResetUserStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ResetUserStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ResetUserStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResumeJobsRequest(TeaModel):
    def __init__(self, all=None, group_id=None, instance_id=None, job_id=None, job_reference_id=None,
                 scenario_id=None):
        self.all = all  # type: bool
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.job_reference_id = job_reference_id  # type: list[str]
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResumeJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class ResumeJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResumeJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResumeJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ResumeJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ResumeJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ResumeJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResumePredictiveJobsRequest(TeaModel):
    def __init__(self, all=None, instance_id=None, job_group_id=None, job_id=None, skill_group_id=None):
        self.all = all  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResumePredictiveJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ResumePredictiveJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResumePredictiveJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResumePredictiveJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: ResumePredictiveJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ResumePredictiveJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ResumePredictiveJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveStatsRequest(TeaModel):
    def __init__(self, call_id=None, call_start_time=None, callee_number=None, caller_number=None, instance_id=None,
                 record_time=None, stats=None, tenant_id=None, uid=None):
        self.call_id = call_id  # type: str
        self.call_start_time = call_start_time  # type: long
        self.callee_number = callee_number  # type: str
        self.caller_number = caller_number  # type: str
        self.instance_id = instance_id  # type: str
        self.record_time = record_time  # type: long
        self.stats = stats  # type: str
        self.tenant_id = tenant_id  # type: str
        self.uid = uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveStatsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.call_start_time is not None:
            result['CallStartTime'] = self.call_start_time
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.caller_number is not None:
            result['CallerNumber'] = self.caller_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.record_time is not None:
            result['RecordTime'] = self.record_time
        if self.stats is not None:
            result['Stats'] = self.stats
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallStartTime') is not None:
            self.call_start_time = m.get('CallStartTime')
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('CallerNumber') is not None:
            self.caller_number = m.get('CallerNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordTime') is not None:
            self.record_time = m.get('RecordTime')
        if m.get('Stats') is not None:
            self.stats = m.get('Stats')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class SaveStatsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, row_count=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.row_count = row_count  # type: long
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveStatsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveStatsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SaveStatsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveStatsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SaveStatsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveTerminalLogRequest(TeaModel):
    def __init__(self, app_name=None, call_id=None, content=None, data_type=None, instance_id=None, job_id=None,
                 method_name=None, status=None, unique_request_id=None):
        self.app_name = app_name  # type: str
        self.call_id = call_id  # type: str
        self.content = content  # type: str
        self.data_type = data_type  # type: int
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: str
        self.method_name = method_name  # type: str
        self.status = status  # type: str
        self.unique_request_id = unique_request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveTerminalLogRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.content is not None:
            result['Content'] = self.content
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.method_name is not None:
            result['MethodName'] = self.method_name
        if self.status is not None:
            result['Status'] = self.status
        if self.unique_request_id is not None:
            result['UniqueRequestId'] = self.unique_request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MethodName') is not None:
            self.method_name = m.get('MethodName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UniqueRequestId') is not None:
            self.unique_request_id = m.get('UniqueRequestId')
        return self


class SaveTerminalLogResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None,
                 time_stamp=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: long
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.time_stamp = time_stamp  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveTerminalLogResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        return self


class SaveTerminalLogResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SaveTerminalLogResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveTerminalLogResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SaveTerminalLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveWebRTCStatsRequest(TeaModel):
    def __init__(self, call_id=None, call_start_time=None, callee_number=None, caller_number=None, instance_id=None,
                 record_time=None, stats=None, tenant_id=None, uid=None):
        self.call_id = call_id  # type: str
        self.call_start_time = call_start_time  # type: long
        self.callee_number = callee_number  # type: str
        self.caller_number = caller_number  # type: str
        self.instance_id = instance_id  # type: str
        self.record_time = record_time  # type: long
        self.stats = stats  # type: str
        self.tenant_id = tenant_id  # type: str
        self.uid = uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveWebRTCStatsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.call_start_time is not None:
            result['CallStartTime'] = self.call_start_time
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.caller_number is not None:
            result['CallerNumber'] = self.caller_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.record_time is not None:
            result['RecordTime'] = self.record_time
        if self.stats is not None:
            result['Stats'] = self.stats
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallStartTime') is not None:
            self.call_start_time = m.get('CallStartTime')
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('CallerNumber') is not None:
            self.caller_number = m.get('CallerNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordTime') is not None:
            self.record_time = m.get('RecordTime')
        if m.get('Stats') is not None:
            self.stats = m.get('Stats')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class SaveWebRTCStatsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, row_count=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.row_count = row_count  # type: long
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SaveWebRTCStatsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveWebRTCStatsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SaveWebRTCStatsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SaveWebRTCStatsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SaveWebRTCStatsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendPredefinedShortMessageRequest(TeaModel):
    def __init__(self, config_id=None, instance_id=None, phone_numbers=None, template_param=None):
        self.config_id = config_id  # type: long
        self.instance_id = instance_id  # type: str
        self.phone_numbers = phone_numbers  # type: str
        self.template_param = template_param  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendPredefinedShortMessageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_id is not None:
            result['ConfigId'] = self.config_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.template_param is not None:
            result['TemplateParam'] = self.template_param
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigId') is not None:
            self.config_id = m.get('ConfigId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('TemplateParam') is not None:
            self.template_param = m.get('TemplateParam')
        return self


class SendPredefinedShortMessageResponseBody(TeaModel):
    def __init__(self, biz_id=None, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.biz_id = biz_id  # type: str
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SendPredefinedShortMessageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SendPredefinedShortMessageResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SendPredefinedShortMessageResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SendPredefinedShortMessageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SendPredefinedShortMessageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartBack2BackCallRequest(TeaModel):
    def __init__(self, call_center_number=None, callee=None, caller=None, instance_id=None, workflow_id=None):
        self.call_center_number = call_center_number  # type: str
        self.callee = callee  # type: str
        self.caller = caller  # type: str
        self.instance_id = instance_id  # type: str
        self.workflow_id = workflow_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartBack2BackCallRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_center_number is not None:
            result['CallCenterNumber'] = self.call_center_number
        if self.callee is not None:
            result['Callee'] = self.callee
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.workflow_id is not None:
            result['WorkflowId'] = self.workflow_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallCenterNumber') is not None:
            self.call_center_number = m.get('CallCenterNumber')
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('WorkflowId') is not None:
            self.workflow_id = m.get('WorkflowId')
        return self


class StartBack2BackCallResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, status_code=None,
                 status_desc=None, success=None, task_id=None, time_stamp=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status_code = status_code  # type: str
        self.status_desc = status_desc  # type: str
        self.success = success  # type: bool
        self.task_id = task_id  # type: str
        self.time_stamp = time_stamp  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartBack2BackCallResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.status_desc is not None:
            result['StatusDesc'] = self.status_desc
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('StatusDesc') is not None:
            self.status_desc = m.get('StatusDesc')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        return self


class StartBack2BackCallResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: StartBack2BackCallResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartBack2BackCallResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = StartBack2BackCallResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartJobRequest(TeaModel):
    def __init__(self, calling_number=None, group_id=None, instance_id=None, job_json=None, scenario_id=None,
                 self_hosted_call_center=None):
        self.calling_number = calling_number  # type: list[str]
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str
        self.job_json = job_json  # type: str
        self.scenario_id = scenario_id  # type: str
        self.self_hosted_call_center = self_hosted_call_center  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartJobRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_json is not None:
            result['JobJson'] = self.job_json
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.self_hosted_call_center is not None:
            result['SelfHostedCallCenter'] = self.self_hosted_call_center
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobJson') is not None:
            self.job_json = m.get('JobJson')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SelfHostedCallCenter') is not None:
            self.self_hosted_call_center = m.get('SelfHostedCallCenter')
        return self


class StartJobResponseBodyTaskIds(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(StartJobResponseBodyTaskIds, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class StartJobResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, task_ids=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.task_ids = task_ids  # type: list[StartJobResponseBodyTaskIds]

    def validate(self):
        if self.task_ids:
            for k in self.task_ids:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(StartJobResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TaskIds'] = []
        if self.task_ids is not None:
            for k in self.task_ids:
                result['TaskIds'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.task_ids = []
        if m.get('TaskIds') is not None:
            for k in m.get('TaskIds'):
                temp_model = StartJobResponseBodyTaskIds()
                self.task_ids.append(temp_model.from_map(k))
        return self


class StartJobResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: StartJobResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(StartJobResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = StartJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitBatchJobsRequest(TeaModel):
    def __init__(self, instance_id=None, job_group_id=None):
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitBatchJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class SubmitBatchJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitBatchJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitBatchJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SubmitBatchJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SubmitBatchJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SubmitBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitCabRecordingRequest(TeaModel):
    def __init__(self, early_media_recording=None, instance_id=None, instance_owner_id=None, merged_recording=None,
                 resource_recording=None, task_id=None):
        self.early_media_recording = early_media_recording  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_owner_id = instance_owner_id  # type: long
        self.merged_recording = merged_recording  # type: str
        self.resource_recording = resource_recording  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitCabRecordingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.early_media_recording is not None:
            result['EarlyMediaRecording'] = self.early_media_recording
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.merged_recording is not None:
            result['MergedRecording'] = self.merged_recording
        if self.resource_recording is not None:
            result['ResourceRecording'] = self.resource_recording
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EarlyMediaRecording') is not None:
            self.early_media_recording = m.get('EarlyMediaRecording')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('MergedRecording') is not None:
            self.merged_recording = m.get('MergedRecording')
        if m.get('ResourceRecording') is not None:
            self.resource_recording = m.get('ResourceRecording')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class SubmitCabRecordingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubmitCabRecordingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitCabRecordingResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SubmitCabRecordingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SubmitCabRecordingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SubmitCabRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendJobsRequest(TeaModel):
    def __init__(self, all=None, group_id=None, instance_id=None, job_id=None, job_reference_id=None,
                 scenario_id=None):
        self.all = all  # type: bool
        self.group_id = group_id  # type: str
        self.instance_id = instance_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.job_reference_id = job_reference_id  # type: list[str]
        self.scenario_id = scenario_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class SuspendJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SuspendJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SuspendJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SuspendJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendPredictiveJobsRequest(TeaModel):
    def __init__(self, all=None, instance_id=None, job_group_id=None, job_id=None, skill_group_id=None):
        self.all = all  # type: bool
        self.instance_id = instance_id  # type: str
        self.job_group_id = job_group_id  # type: str
        self.job_id = job_id  # type: list[str]
        self.skill_group_id = skill_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendPredictiveJobsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class SuspendPredictiveJobsResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(SuspendPredictiveJobsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendPredictiveJobsResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: SuspendPredictiveJobsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SuspendPredictiveJobsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SuspendPredictiveJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TaskPreparingRequest(TeaModel):
    def __init__(self, instance_id=None, instance_owner_id=None, job_id=None):
        self.instance_id = instance_id  # type: str
        self.instance_owner_id = instance_owner_id  # type: long
        self.job_id = job_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TaskPreparingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class TaskPreparingResponseBody(TeaModel):
    def __init__(self, code=None, http_status_code=None, message=None, request_id=None, success=None, task_id=None):
        self.code = code  # type: str
        self.http_status_code = http_status_code  # type: int
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TaskPreparingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class TaskPreparingResponse(TeaModel):
    def __init__(self, headers=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.body = body  # type: TaskPreparingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TaskPreparingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = TaskPreparingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


