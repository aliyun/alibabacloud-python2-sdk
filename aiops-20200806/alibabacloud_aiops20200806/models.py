# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class AddAlgorithmRequest(TeaModel):
    def __init__(self, algorithm_id=None, algorithm_type=None, business_group_id=None, end_time=None,
                 expand_information=None, index_id=None, instance_id=None, opera_uid=None, product_type=None, start_time=None):
        self.algorithm_id = algorithm_id  # type: str
        self.algorithm_type = algorithm_type  # type: int
        self.business_group_id = business_group_id  # type: str
        self.end_time = end_time  # type: long
        self.expand_information = expand_information  # type: str
        self.index_id = index_id  # type: str
        self.instance_id = instance_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_type = product_type  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAlgorithmRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_id is not None:
            result['AlgorithmId'] = self.algorithm_id
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.expand_information is not None:
            result['ExpandInformation'] = self.expand_information
        if self.index_id is not None:
            result['IndexId'] = self.index_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlgorithmId') is not None:
            self.algorithm_id = m.get('AlgorithmId')
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ExpandInformation') is not None:
            self.expand_information = m.get('ExpandInformation')
        if m.get('IndexId') is not None:
            self.index_id = m.get('IndexId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class AddAlgorithmResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddAlgorithmResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AddAlgorithmResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddAlgorithmResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddAlgorithmResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAlgorithmResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddBusinessGroupRequest(TeaModel):
    def __init__(self, ali_uid=None, business_group_desc=None, business_group_name=None, create_user=None,
                 instance_list=None, opera_uid=None, resource_type=None, update_user=None):
        self.ali_uid = ali_uid  # type: str
        self.business_group_desc = business_group_desc  # type: str
        self.business_group_name = business_group_name  # type: str
        self.create_user = create_user  # type: str
        self.instance_list = instance_list  # type: list[str]
        self.opera_uid = opera_uid  # type: str
        self.resource_type = resource_type  # type: int
        self.update_user = update_user  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBusinessGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.business_group_desc is not None:
            result['BusinessGroupDesc'] = self.business_group_desc
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.create_user is not None:
            result['CreateUser'] = self.create_user
        if self.instance_list is not None:
            result['InstanceList'] = self.instance_list
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.update_user is not None:
            result['UpdateUser'] = self.update_user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('BusinessGroupDesc') is not None:
            self.business_group_desc = m.get('BusinessGroupDesc')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('CreateUser') is not None:
            self.create_user = m.get('CreateUser')
        if m.get('InstanceList') is not None:
            self.instance_list = m.get('InstanceList')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('UpdateUser') is not None:
            self.update_user = m.get('UpdateUser')
        return self


class AddBusinessGroupShrinkRequest(TeaModel):
    def __init__(self, ali_uid=None, business_group_desc=None, business_group_name=None, create_user=None,
                 instance_list_shrink=None, opera_uid=None, resource_type=None, update_user=None):
        self.ali_uid = ali_uid  # type: str
        self.business_group_desc = business_group_desc  # type: str
        self.business_group_name = business_group_name  # type: str
        self.create_user = create_user  # type: str
        self.instance_list_shrink = instance_list_shrink  # type: str
        self.opera_uid = opera_uid  # type: str
        self.resource_type = resource_type  # type: int
        self.update_user = update_user  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBusinessGroupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.business_group_desc is not None:
            result['BusinessGroupDesc'] = self.business_group_desc
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.create_user is not None:
            result['CreateUser'] = self.create_user
        if self.instance_list_shrink is not None:
            result['InstanceList'] = self.instance_list_shrink
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.update_user is not None:
            result['UpdateUser'] = self.update_user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('BusinessGroupDesc') is not None:
            self.business_group_desc = m.get('BusinessGroupDesc')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('CreateUser') is not None:
            self.create_user = m.get('CreateUser')
        if m.get('InstanceList') is not None:
            self.instance_list_shrink = m.get('InstanceList')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('UpdateUser') is not None:
            self.update_user = m.get('UpdateUser')
        return self


class AddBusinessGroupResponseBody(TeaModel):
    def __init__(self, code=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBusinessGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AddBusinessGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddBusinessGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddBusinessGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddBusinessGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddBusinessGroupOneRequest(TeaModel):
    def __init__(self, business_group_desc=None, business_group_name=None, opera_uid=None):
        self.business_group_desc = business_group_desc  # type: str
        self.business_group_name = business_group_name  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBusinessGroupOneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_desc is not None:
            result['BusinessGroupDesc'] = self.business_group_desc
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupDesc') is not None:
            self.business_group_desc = m.get('BusinessGroupDesc')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class AddBusinessGroupOneResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddBusinessGroupOneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AddBusinessGroupOneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddBusinessGroupOneResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddBusinessGroupOneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddBusinessGroupOneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddScenarioRequest(TeaModel):
    def __init__(self, alert_setting_id=None, level=None, name=None, opera_uid=None):
        self.alert_setting_id = alert_setting_id  # type: long
        self.level = level  # type: long
        self.name = name  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScenarioRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        if self.level is not None:
            result['Level'] = self.level
        if self.name is not None:
            result['Name'] = self.name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class AddScenarioResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScenarioResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AddScenarioResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddScenarioResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddScenarioResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddSceneListRequest(TeaModel):
    def __init__(self, opera_uid=None, scene_describe=None, scene_name=None, scene_person_liable=None,
                 scene_type=None, scene_vo_json=None, webhook=None):
        self.opera_uid = opera_uid  # type: str
        self.scene_describe = scene_describe  # type: str
        self.scene_name = scene_name  # type: str
        self.scene_person_liable = scene_person_liable  # type: str
        self.scene_type = scene_type  # type: str
        self.scene_vo_json = scene_vo_json  # type: str
        self.webhook = webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddSceneListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_describe is not None:
            result['SceneDescribe'] = self.scene_describe
        if self.scene_name is not None:
            result['SceneName'] = self.scene_name
        if self.scene_person_liable is not None:
            result['ScenePersonLiable'] = self.scene_person_liable
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.scene_vo_json is not None:
            result['SceneVoJson'] = self.scene_vo_json
        if self.webhook is not None:
            result['Webhook'] = self.webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneDescribe') is not None:
            self.scene_describe = m.get('SceneDescribe')
        if m.get('SceneName') is not None:
            self.scene_name = m.get('SceneName')
        if m.get('ScenePersonLiable') is not None:
            self.scene_person_liable = m.get('ScenePersonLiable')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('SceneVoJson') is not None:
            self.scene_vo_json = m.get('SceneVoJson')
        if m.get('Webhook') is not None:
            self.webhook = m.get('Webhook')
        return self


class AddSceneListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddSceneListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AddSceneListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddSceneListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddSceneListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddSceneListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddScriptRequest(TeaModel):
    def __init__(self, handle_suggest_desc=None, metric_name=None, opera_uid=None, product_code=None,
                 root_cause_desc=None, root_causes_log=None, scene_id=None, script=None, script_desc=None, script_language=None,
                 script_name=None, script_version=None, status=None, type=None):
        self.handle_suggest_desc = handle_suggest_desc  # type: str
        self.metric_name = metric_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str
        self.root_cause_desc = root_cause_desc  # type: str
        self.root_causes_log = root_causes_log  # type: str
        self.scene_id = scene_id  # type: str
        self.script = script  # type: str
        self.script_desc = script_desc  # type: str
        self.script_language = script_language  # type: str
        self.script_name = script_name  # type: str
        self.script_version = script_version  # type: str
        self.status = status  # type: int
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.handle_suggest_desc is not None:
            result['HandleSuggestDesc'] = self.handle_suggest_desc
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.root_cause_desc is not None:
            result['RootCauseDesc'] = self.root_cause_desc
        if self.root_causes_log is not None:
            result['RootCausesLog'] = self.root_causes_log
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        if self.script is not None:
            result['Script'] = self.script
        if self.script_desc is not None:
            result['ScriptDesc'] = self.script_desc
        if self.script_language is not None:
            result['ScriptLanguage'] = self.script_language
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HandleSuggestDesc') is not None:
            self.handle_suggest_desc = m.get('HandleSuggestDesc')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('RootCauseDesc') is not None:
            self.root_cause_desc = m.get('RootCauseDesc')
        if m.get('RootCausesLog') is not None:
            self.root_causes_log = m.get('RootCausesLog')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('ScriptDesc') is not None:
            self.script_desc = m.get('ScriptDesc')
        if m.get('ScriptLanguage') is not None:
            self.script_language = m.get('ScriptLanguage')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AddScriptResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AddScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddScriptResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddTagInfoRequest(TeaModel):
    def __init__(self, opera_uid=None, product_id=None, tag_name=None):
        self.opera_uid = opera_uid  # type: str
        self.product_id = product_id  # type: long
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddTagInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class AddTagInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddTagInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AddTagInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddTagInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddTagInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddTagInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AgainSubmitApplyPermissionRequest(TeaModel):
    def __init__(self, switch_front_opera_uid=None, type=None, uid=None):
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.type = type  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(AgainSubmitApplyPermissionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.type is not None:
            result['Type'] = self.type
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class AgainSubmitApplyPermissionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AgainSubmitApplyPermissionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AgainSubmitApplyPermissionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AgainSubmitApplyPermissionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AgainSubmitApplyPermissionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AgainSubmitApplyPermissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyAuthorizationRequest(TeaModel):
    def __init__(self, switch_front_opera_uid=None, uid=None):
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAuthorizationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class ApplyAuthorizationResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAuthorizationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ApplyAuthorizationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyAuthorizationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyAuthorizationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckDataSourceLinkConnectionRequest(TeaModel):
    def __init__(self, data_source_params=None, data_source_type=None, opera_uid=None):
        self.data_source_params = data_source_params  # type: str
        self.data_source_type = data_source_type  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckDataSourceLinkConnectionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_params is not None:
            result['DataSourceParams'] = self.data_source_params
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataSourceParams') is not None:
            self.data_source_params = m.get('DataSourceParams')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class CheckDataSourceLinkConnectionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckDataSourceLinkConnectionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CheckDataSourceLinkConnectionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CheckDataSourceLinkConnectionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckDataSourceLinkConnectionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckDataSourceLinkConnectionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckLogRequest(TeaModel):
    def __init__(self, data_source_id=None, opera_uid=None):
        self.data_source_id = data_source_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckLogRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class CheckLogResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CheckLogResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CheckLogResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CheckLogResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CheckLogResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CloseEventRequest(TeaModel):
    def __init__(self, close_desc=None, id=None):
        self.close_desc = close_desc  # type: str
        self.id = id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CloseEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.close_desc is not None:
            result['CloseDesc'] = self.close_desc
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CloseDesc') is not None:
            self.close_desc = m.get('CloseDesc')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CloseEventResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: str
        self.data = data  # type: bool
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CloseEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CloseEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CloseEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CloseEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CloseEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfirmAuthorizationRequest(TeaModel):
    def __init__(self, permission_type=None, switch_front_opera_uid=None, type=None, uid=None):
        self.permission_type = permission_type  # type: int
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.type = type  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConfirmAuthorizationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.permission_type is not None:
            result['PermissionType'] = self.permission_type
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.type is not None:
            result['Type'] = self.type
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PermissionType') is not None:
            self.permission_type = m.get('PermissionType')
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class ConfirmAuthorizationResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConfirmAuthorizationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ConfirmAuthorizationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ConfirmAuthorizationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ConfirmAuthorizationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfirmAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CountLatestReportsRequest(TeaModel):
    def __init__(self, log_store=None, product_code=None, uid=None):
        self.log_store = log_store  # type: str
        self.product_code = product_code  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CountLatestReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.log_store is not None:
            result['LogStore'] = self.log_store
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('LogStore') is not None:
            self.log_store = m.get('LogStore')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class CountLatestReportsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CountLatestReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CountLatestReportsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CountLatestReportsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CountLatestReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CountLatestReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAlertContactRequest(TeaModel):
    def __init__(self, email=None, name=None, opera_uid=None, phone=None, webhook=None):
        self.email = email  # type: str
        self.name = name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.phone = phone  # type: str
        self.webhook = webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAlertContactRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.webhook is not None:
            result['Webhook'] = self.webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Webhook') is not None:
            self.webhook = m.get('Webhook')
        return self


class CreateAlertContactResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAlertContactResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateAlertContactResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateAlertContactResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateAlertContactResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAlertContactResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAlertContactGroupRequest(TeaModel):
    def __init__(self, alert_contact_group_json=None, contact_ids_json=None, opera_uid=None):
        self.alert_contact_group_json = alert_contact_group_json  # type: str
        self.contact_ids_json = contact_ids_json  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAlertContactGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_contact_group_json is not None:
            result['AlertContactGroupJson'] = self.alert_contact_group_json
        if self.contact_ids_json is not None:
            result['ContactIdsJson'] = self.contact_ids_json
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertContactGroupJson') is not None:
            self.alert_contact_group_json = m.get('AlertContactGroupJson')
        if m.get('ContactIdsJson') is not None:
            self.contact_ids_json = m.get('ContactIdsJson')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class CreateAlertContactGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateAlertContactGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateAlertContactGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateAlertContactGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateAlertContactGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAlertContactGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCommandRequest(TeaModel):
    def __init__(self, command_content=None, description=None, name=None, region_id=None, type=None,
                 working_dir=None, timeout=None):
        self.command_content = command_content  # type: str
        self.description = description  # type: str
        self.name = name  # type: str
        self.region_id = region_id  # type: str
        self.type = type  # type: str
        self.working_dir = working_dir  # type: str
        self.timeout = timeout  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateCommandRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.command_content is not None:
            result['CommandContent'] = self.command_content
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.type is not None:
            result['Type'] = self.type
        if self.working_dir is not None:
            result['WorkingDir'] = self.working_dir
        if self.timeout is not None:
            result['timeout'] = self.timeout
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CommandContent') is not None:
            self.command_content = m.get('CommandContent')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WorkingDir') is not None:
            self.working_dir = m.get('WorkingDir')
        if m.get('timeout') is not None:
            self.timeout = m.get('timeout')
        return self


class CreateCommandResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateCommandResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateCommandResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateCommandResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateCommandResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCommandResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDumpRequest(TeaModel):
    def __init__(self, event_id=None, instance_id=None):
        self.event_id = event_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDumpRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CreateDumpResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDumpResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateDumpResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDumpResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDumpResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDumpResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateInspectionRecordRequest(TeaModel):
    def __init__(self, opera_uid=None, product_code=None, resource_id=None):
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str
        self.resource_id = resource_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInspectionRecordRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class CreateInspectionRecordResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateInspectionRecordResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateInspectionRecordResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateInspectionRecordResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateInspectionRecordResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateInspectionRecordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMessageRequest(TeaModel):
    def __init__(self, event_id=None, instance_id=None):
        self.event_id = event_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMessageRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CreateMessageResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMessageResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateMessageResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMessageResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMessageResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMessageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSceneRequest(TeaModel):
    def __init__(self, flow_name=None, metric_list_json=None, node_list_json=None, opera_uid=None, scene_desc=None,
                 scene_name=None, scene_owner=None, scene_webhook=None):
        self.flow_name = flow_name  # type: str
        self.metric_list_json = metric_list_json  # type: str
        self.node_list_json = node_list_json  # type: str
        self.opera_uid = opera_uid  # type: str
        self.scene_desc = scene_desc  # type: str
        self.scene_name = scene_name  # type: str
        self.scene_owner = scene_owner  # type: str
        self.scene_webhook = scene_webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_name is not None:
            result['FlowName'] = self.flow_name
        if self.metric_list_json is not None:
            result['MetricListJson'] = self.metric_list_json
        if self.node_list_json is not None:
            result['NodeListJson'] = self.node_list_json
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_desc is not None:
            result['SceneDesc'] = self.scene_desc
        if self.scene_name is not None:
            result['SceneName'] = self.scene_name
        if self.scene_owner is not None:
            result['SceneOwner'] = self.scene_owner
        if self.scene_webhook is not None:
            result['SceneWebhook'] = self.scene_webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowName') is not None:
            self.flow_name = m.get('FlowName')
        if m.get('MetricListJson') is not None:
            self.metric_list_json = m.get('MetricListJson')
        if m.get('NodeListJson') is not None:
            self.node_list_json = m.get('NodeListJson')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneDesc') is not None:
            self.scene_desc = m.get('SceneDesc')
        if m.get('SceneName') is not None:
            self.scene_name = m.get('SceneName')
        if m.get('SceneOwner') is not None:
            self.scene_owner = m.get('SceneOwner')
        if m.get('SceneWebhook') is not None:
            self.scene_webhook = m.get('SceneWebhook')
        return self


class CreateSceneResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSceneResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSceneModelRequest(TeaModel):
    def __init__(self, fc_function_name=None, fc_handler=None, fc_initializer=None, fc_region_no=None,
                 fc_service_name=None, model_desc=None, model_language=None, model_memo=None, model_name=None, model_type=None,
                 opera_uid=None, root_cause_desc=None, root_cause_solution=None):
        self.fc_function_name = fc_function_name  # type: str
        self.fc_handler = fc_handler  # type: str
        self.fc_initializer = fc_initializer  # type: str
        self.fc_region_no = fc_region_no  # type: str
        self.fc_service_name = fc_service_name  # type: str
        self.model_desc = model_desc  # type: str
        self.model_language = model_language  # type: int
        self.model_memo = model_memo  # type: str
        self.model_name = model_name  # type: str
        self.model_type = model_type  # type: int
        self.opera_uid = opera_uid  # type: str
        self.root_cause_desc = root_cause_desc  # type: str
        self.root_cause_solution = root_cause_solution  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSceneModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fc_function_name is not None:
            result['FcFunctionName'] = self.fc_function_name
        if self.fc_handler is not None:
            result['FcHandler'] = self.fc_handler
        if self.fc_initializer is not None:
            result['FcInitializer'] = self.fc_initializer
        if self.fc_region_no is not None:
            result['FcRegionNo'] = self.fc_region_no
        if self.fc_service_name is not None:
            result['FcServiceName'] = self.fc_service_name
        if self.model_desc is not None:
            result['ModelDesc'] = self.model_desc
        if self.model_language is not None:
            result['ModelLanguage'] = self.model_language
        if self.model_memo is not None:
            result['ModelMemo'] = self.model_memo
        if self.model_name is not None:
            result['ModelName'] = self.model_name
        if self.model_type is not None:
            result['ModelType'] = self.model_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.root_cause_desc is not None:
            result['RootCauseDesc'] = self.root_cause_desc
        if self.root_cause_solution is not None:
            result['RootCauseSolution'] = self.root_cause_solution
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FcFunctionName') is not None:
            self.fc_function_name = m.get('FcFunctionName')
        if m.get('FcHandler') is not None:
            self.fc_handler = m.get('FcHandler')
        if m.get('FcInitializer') is not None:
            self.fc_initializer = m.get('FcInitializer')
        if m.get('FcRegionNo') is not None:
            self.fc_region_no = m.get('FcRegionNo')
        if m.get('FcServiceName') is not None:
            self.fc_service_name = m.get('FcServiceName')
        if m.get('ModelDesc') is not None:
            self.model_desc = m.get('ModelDesc')
        if m.get('ModelLanguage') is not None:
            self.model_language = m.get('ModelLanguage')
        if m.get('ModelMemo') is not None:
            self.model_memo = m.get('ModelMemo')
        if m.get('ModelName') is not None:
            self.model_name = m.get('ModelName')
        if m.get('ModelType') is not None:
            self.model_type = m.get('ModelType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RootCauseDesc') is not None:
            self.root_cause_desc = m.get('RootCauseDesc')
        if m.get('RootCauseSolution') is not None:
            self.root_cause_solution = m.get('RootCauseSolution')
        return self


class CreateSceneModelResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSceneModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateSceneModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSceneModelResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSceneModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSceneModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSceneModelApplyRequest(TeaModel):
    def __init__(self, model_id=None, opera_uid=None):
        self.model_id = model_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSceneModelApplyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class CreateSceneModelApplyResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSceneModelApplyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateSceneModelApplyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSceneModelApplyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSceneModelApplyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSceneModelApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DelBusinessGroupRequest(TeaModel):
    def __init__(self, business_group_id=None):
        self.business_group_id = business_group_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DelBusinessGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        return self


class DelBusinessGroupResponseBody(TeaModel):
    def __init__(self, code=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DelBusinessGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DelBusinessGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DelBusinessGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DelBusinessGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DelBusinessGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAlertContactRequest(TeaModel):
    def __init__(self, contact_id_list_json=None, group_id=None, opera_uid=None):
        self.contact_id_list_json = contact_id_list_json  # type: str
        self.group_id = group_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertContactRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id_list_json is not None:
            result['ContactIdListJson'] = self.contact_id_list_json
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactIdListJson') is not None:
            self.contact_id_list_json = m.get('ContactIdListJson')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteAlertContactResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertContactResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteAlertContactResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAlertContactResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAlertContactResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAlertContactResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAlertContactFromGroupRequest(TeaModel):
    def __init__(self, contact_id_list_json=None, group_id=None, opera_uid=None):
        self.contact_id_list_json = contact_id_list_json  # type: str
        self.group_id = group_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertContactFromGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id_list_json is not None:
            result['ContactIdListJson'] = self.contact_id_list_json
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactIdListJson') is not None:
            self.contact_id_list_json = m.get('ContactIdListJson')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteAlertContactFromGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertContactFromGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteAlertContactFromGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAlertContactFromGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAlertContactFromGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAlertContactFromGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAlertContactGroupRequest(TeaModel):
    def __init__(self, group_id=None, opera_uid=None):
        self.group_id = group_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertContactGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteAlertContactGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertContactGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteAlertContactGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAlertContactGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAlertContactGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAlertContactGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAlertSettingRequest(TeaModel):
    def __init__(self, alert_setting_id=None, opera_uid=None):
        self.alert_setting_id = alert_setting_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertSettingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteAlertSettingResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertSettingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteAlertSettingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAlertSettingResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAlertSettingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAlertSettingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAlertSettingListRequest(TeaModel):
    def __init__(self, customer_ids_json=None, opera_uid=None):
        self.customer_ids_json = customer_ids_json  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertSettingListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customer_ids_json is not None:
            result['CustomerIdsJson'] = self.customer_ids_json
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CustomerIdsJson') is not None:
            self.customer_ids_json = m.get('CustomerIdsJson')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteAlertSettingListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlertSettingListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteAlertSettingListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAlertSettingListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAlertSettingListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAlertSettingListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAlgorithmInfoRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlgorithmInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteAlgorithmInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteAlgorithmInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteAlgorithmInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteAlgorithmInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteAlgorithmInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAlgorithmInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteBusinessGroupRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteBusinessGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteBusinessGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteBusinessGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteBusinessGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteBusinessGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteBusinessGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteBusinessGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteBusinessResourceTagRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None, product_id=None, resources=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_id = product_id  # type: str
        self.resources = resources  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteBusinessResourceTagRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.resources is not None:
            result['Resources'] = self.resources
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('Resources') is not None:
            self.resources = m.get('Resources')
        return self


class DeleteBusinessResourceTagResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteBusinessResourceTagResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteBusinessResourceTagResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteBusinessResourceTagResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteBusinessResourceTagResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteBusinessResourceTagResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDataSourceConfigRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDataSourceConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteDataSourceConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDataSourceConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteDataSourceConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDataSourceConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDataSourceConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDataSourceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteGroupTopologyTagLogRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteGroupTopologyTagLogRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteGroupTopologyTagLogResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteGroupTopologyTagLogResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteGroupTopologyTagLogResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteGroupTopologyTagLogResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteGroupTopologyTagLogResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteGroupTopologyTagLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteRealSceneInfoRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRealSceneInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteRealSceneInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteRealSceneInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteRealSceneInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteRealSceneInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteRealSceneInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteRealSceneInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteReportEmailConfigRequest(TeaModel):
    def __init__(self, mail_config_id=None, opera_uid=None):
        self.mail_config_id = mail_config_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteReportEmailConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mail_config_id is not None:
            result['MailConfigId'] = self.mail_config_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MailConfigId') is not None:
            self.mail_config_id = m.get('MailConfigId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteReportEmailConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteReportEmailConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteReportEmailConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteReportEmailConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteReportEmailConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteReportEmailConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteResourceWhitelistRequest(TeaModel):
    def __init__(self, inspection_whitelist_id=None, opera_uid=None):
        self.inspection_whitelist_id = inspection_whitelist_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteResourceWhitelistRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inspection_whitelist_id is not None:
            result['InspectionWhitelistId'] = self.inspection_whitelist_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InspectionWhitelistId') is not None:
            self.inspection_whitelist_id = m.get('InspectionWhitelistId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteResourceWhitelistResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteResourceWhitelistResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteResourceWhitelistResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteResourceWhitelistResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteResourceWhitelistResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteResourceWhitelistResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScenarioRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScenarioRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteScenarioResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteScenarioResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteScenarioResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteScenarioResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteScenarioResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSceneRequest(TeaModel):
    def __init__(self, opera_uid=None, scene_id=None):
        self.opera_uid = opera_uid  # type: str
        self.scene_id = scene_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        return self


class DeleteSceneResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSceneResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSceneListRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSceneListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DeleteSceneListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSceneListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteSceneListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSceneListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSceneListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSceneListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSceneModelRequest(TeaModel):
    def __init__(self, model_id=None, opera_uid=None, sure_delete=None):
        self.model_id = model_id  # type: long
        self.opera_uid = opera_uid  # type: str
        self.sure_delete = sure_delete  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSceneModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.sure_delete is not None:
            result['SureDelete'] = self.sure_delete
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SureDelete') is not None:
            self.sure_delete = m.get('SureDelete')
        return self


class DeleteSceneModelResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSceneModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteSceneModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSceneModelResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSceneModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSceneModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteTagInfoRequest(TeaModel):
    def __init__(self, opera_uid=None, tag_id=None):
        self.opera_uid = opera_uid  # type: str
        self.tag_id = tag_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTagInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        return self


class DeleteTagInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteTagInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteTagInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteTagInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteTagInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteTagInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAccountAlertEventRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAccountAlertEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAccountAlertEventResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAccountAlertEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAccountAlertEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAccountAlertEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAccountAlertEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAccountAlertEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAdvisorInspectionProductsRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAdvisorInspectionProductsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAdvisorInspectionProductsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAdvisorInspectionProductsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAdvisorInspectionProductsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAdvisorInspectionProductsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAdvisorInspectionProductsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAdvisorInspectionProductsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertBusinessGroupWithAlertSettingIdRequest(TeaModel):
    def __init__(self, alert_setting_id=None):
        self.alert_setting_id = alert_setting_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertBusinessGroupWithAlertSettingIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        return self


class DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData(TeaModel):
    def __init__(self, business_group_id=None, business_group_name=None):
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        return self


class DescribeAlertBusinessGroupWithAlertSettingIdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAlertBusinessGroupWithAlertSettingIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertBusinessGroupWithAlertSettingIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertBusinessGroupWithAlertSettingIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertBusinessGroupWithAlertSettingIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertBusinessGroupWithAlertSettingIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertContactRequest(TeaModel):
    def __init__(self, current_page=None, opera_uid=None, page_size=None, search_by=None, search_like=None):
        self.current_page = current_page  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.search_by = search_by  # type: str
        self.search_like = search_like  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_by is not None:
            result['SearchBy'] = self.search_by
        if self.search_like is not None:
            result['SearchLike'] = self.search_like
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchBy') is not None:
            self.search_by = m.get('SearchBy')
        if m.get('SearchLike') is not None:
            self.search_like = m.get('SearchLike')
        return self


class DescribeAlertContactResponseBodyData(TeaModel):
    def __init__(self, email=None, gmt_create=None, gmt_modified=None, group_names=None, id=None, name=None,
                 phone=None, uid=None, webhook=None):
        self.email = email  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.group_names = group_names  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.phone = phone  # type: str
        self.uid = uid  # type: long
        self.webhook = webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['email'] = self.email
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.group_names is not None:
            result['groupNames'] = self.group_names
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.uid is not None:
            result['uid'] = self.uid
        if self.webhook is not None:
            result['webhook'] = self.webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('groupNames') is not None:
            self.group_names = m.get('groupNames')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        if m.get('webhook') is not None:
            self.webhook = m.get('webhook')
        return self


class DescribeAlertContactResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAlertContactResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: long

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAlertContactResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAlertContactResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeAlertContactResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertContactResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertContactResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertContactResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertContactGroupRequest(TeaModel):
    def __init__(self, current_page=None, opera_uid=None, page_size=None, search_like=None):
        self.current_page = current_page  # type: long
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: long
        self.search_like = search_like  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_like is not None:
            result['SearchLike'] = self.search_like
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchLike') is not None:
            self.search_like = m.get('SearchLike')
        return self


class DescribeAlertContactGroupResponseBodyData(TeaModel):
    def __init__(self, create_time=None, description=None, gmt_create=None, gmt_modified=None, group_name=None,
                 id=None, uid=None, update_time=None):
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.group_name = group_name  # type: str
        self.id = id  # type: long
        self.uid = uid  # type: long
        self.update_time = update_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactGroupResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['createTime'] = self.create_time
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.id is not None:
            result['id'] = self.id
        if self.uid is not None:
            result['uid'] = self.uid
        if self.update_time is not None:
            result['updateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('createTime') is not None:
            self.create_time = m.get('createTime')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        if m.get('updateTime') is not None:
            self.update_time = m.get('updateTime')
        return self


class DescribeAlertContactGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAlertContactGroupResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAlertContactGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAlertContactGroupResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeAlertContactGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertContactGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertContactGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertContactGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertContactWithAlertSettingIdRequest(TeaModel):
    def __init__(self, alert_setting_id=None, contact_type=None):
        self.alert_setting_id = alert_setting_id  # type: long
        self.contact_type = contact_type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactWithAlertSettingIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        return self


class DescribeAlertContactWithAlertSettingIdResponseBodyData(TeaModel):
    def __init__(self, contact_id=None, contact_name=None, contact_type=None):
        self.contact_id = contact_id  # type: long
        self.contact_name = contact_name  # type: str
        self.contact_type = contact_type  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactWithAlertSettingIdResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['contactId'] = self.contact_id
        if self.contact_name is not None:
            result['contactName'] = self.contact_name
        if self.contact_type is not None:
            result['contactType'] = self.contact_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contactId') is not None:
            self.contact_id = m.get('contactId')
        if m.get('contactName') is not None:
            self.contact_name = m.get('contactName')
        if m.get('contactType') is not None:
            self.contact_type = m.get('contactType')
        return self


class DescribeAlertContactWithAlertSettingIdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAlertContactWithAlertSettingIdResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAlertContactWithAlertSettingIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAlertContactWithAlertSettingIdResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertContactWithAlertSettingIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertContactWithAlertSettingIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertContactWithAlertSettingIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertContactWithAlertSettingIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertContactWithGroupIdRequest(TeaModel):
    def __init__(self, group_id=None):
        self.group_id = group_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactWithGroupIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        return self


class DescribeAlertContactWithGroupIdResponseBodyData(TeaModel):
    def __init__(self, email=None, gmt_create=None, gmt_modified=None, id=None, name=None, phone=None, uid=None,
                 webhook=None):
        self.email = email  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.name = name  # type: str
        self.phone = phone  # type: str
        self.uid = uid  # type: long
        self.webhook = webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertContactWithGroupIdResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['email'] = self.email
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.uid is not None:
            result['uid'] = self.uid
        if self.webhook is not None:
            result['webhook'] = self.webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        if m.get('webhook') is not None:
            self.webhook = m.get('webhook')
        return self


class DescribeAlertContactWithGroupIdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAlertContactWithGroupIdResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAlertContactWithGroupIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAlertContactWithGroupIdResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertContactWithGroupIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertContactWithGroupIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertContactWithGroupIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertContactWithGroupIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertDetailDataRequest(TeaModel):
    def __init__(self, alert_id=None, opera_uid=None):
        self.alert_id = alert_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertDetailDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_id is not None:
            result['AlertId'] = self.alert_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertId') is not None:
            self.alert_id = m.get('AlertId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAlertDetailDataResponseBodyData(TeaModel):
    def __init__(self, alert_name=None, algorithm=None, begin_time=None, category=None, count_convergence=None,
                 end_time=None, instance_id=None, instance_name=None, instance_region_name=None, metric_extend=None,
                 mttr=None, service_type=None, metric_name=None, metric_unit=None, product_code_key=None):
        self.alert_name = alert_name  # type: str
        self.algorithm = algorithm  # type: str
        self.begin_time = begin_time  # type: str
        self.category = category  # type: str
        self.count_convergence = count_convergence  # type: int
        self.end_time = end_time  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.instance_region_name = instance_region_name  # type: str
        self.metric_extend = metric_extend  # type: str
        self.mttr = mttr  # type: str
        self.service_type = service_type  # type: str
        self.metric_name = metric_name  # type: str
        self.metric_unit = metric_unit  # type: str
        self.product_code_key = product_code_key  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertDetailDataResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_name is not None:
            result['AlertName'] = self.alert_name
        if self.algorithm is not None:
            result['Algorithm'] = self.algorithm
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.category is not None:
            result['Category'] = self.category
        if self.count_convergence is not None:
            result['CountConvergence'] = self.count_convergence
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_region_name is not None:
            result['InstanceRegionName'] = self.instance_region_name
        if self.metric_extend is not None:
            result['MetricExtend'] = self.metric_extend
        if self.mttr is not None:
            result['Mttr'] = self.mttr
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.metric_name is not None:
            result['metricName'] = self.metric_name
        if self.metric_unit is not None:
            result['metricUnit'] = self.metric_unit
        if self.product_code_key is not None:
            result['productCodeKey'] = self.product_code_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertName') is not None:
            self.alert_name = m.get('AlertName')
        if m.get('Algorithm') is not None:
            self.algorithm = m.get('Algorithm')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CountConvergence') is not None:
            self.count_convergence = m.get('CountConvergence')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceRegionName') is not None:
            self.instance_region_name = m.get('InstanceRegionName')
        if m.get('MetricExtend') is not None:
            self.metric_extend = m.get('MetricExtend')
        if m.get('Mttr') is not None:
            self.mttr = m.get('Mttr')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('metricName') is not None:
            self.metric_name = m.get('metricName')
        if m.get('metricUnit') is not None:
            self.metric_unit = m.get('metricUnit')
        if m.get('productCodeKey') is not None:
            self.product_code_key = m.get('productCodeKey')
        return self


class DescribeAlertDetailDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: DescribeAlertDetailDataResponseBodyData
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(DescribeAlertDetailDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeAlertDetailDataResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertDetailDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertDetailDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertDetailDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertDetailDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertDetailTrendDataRequest(TeaModel):
    def __init__(self, alert_id=None, begin_time=None, end_time=None, opera_uid=None):
        self.alert_id = alert_id  # type: long
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertDetailTrendDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_id is not None:
            result['AlertId'] = self.alert_id
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertId') is not None:
            self.alert_id = m.get('AlertId')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAlertDetailTrendDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertDetailTrendDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertDetailTrendDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertDetailTrendDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertDetailTrendDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertDetailTrendDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertEventRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAlertEventResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertFinalDataListRequest(TeaModel):
    def __init__(self, current_page=None, end_time=None, instance_id=None, metric_name=None, page_size=None,
                 product_code=None, start_time=None, uid=None):
        self.current_page = current_page  # type: int
        self.end_time = end_time  # type: long
        self.instance_id = instance_id  # type: str
        self.metric_name = metric_name  # type: str
        self.page_size = page_size  # type: int
        self.product_code = product_code  # type: str
        self.start_time = start_time  # type: long
        self.uid = uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertFinalDataListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class DescribeAlertFinalDataListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertFinalDataListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertFinalDataListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertFinalDataListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertFinalDataListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertFinalDataListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertResourceRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAlertResourceResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertResourceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertSettingRequest(TeaModel):
    def __init__(self, current_page=None, customer_name=None, opera_uid=None, page_size=None, search_keyword=None,
                 setting_status=None, uid=None):
        self.current_page = current_page  # type: long
        self.customer_name = customer_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: long
        self.search_keyword = search_keyword  # type: str
        self.setting_status = setting_status  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertSettingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.customer_name is not None:
            result['CustomerName'] = self.customer_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_keyword is not None:
            result['SearchKeyword'] = self.search_keyword
        if self.setting_status is not None:
            result['SettingStatus'] = self.setting_status
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('CustomerName') is not None:
            self.customer_name = m.get('CustomerName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchKeyword') is not None:
            self.search_keyword = m.get('SearchKeyword')
        if m.get('SettingStatus') is not None:
            self.setting_status = m.get('SettingStatus')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class DescribeAlertSettingResponseBodyData(TeaModel):
    def __init__(self, alarm_level=None, alert_name=None, alert_setting_id=None, business_group_ids=None,
                 business_group_names=None, contact_ids=None, contact_names=None, send_dingtalk_notice=None, send_email_notice=None,
                 send_sms_notice=None, setting_status=None, stop_duration=None, total_business_resource_number=None):
        self.alarm_level = alarm_level  # type: str
        self.alert_name = alert_name  # type: str
        self.alert_setting_id = alert_setting_id  # type: long
        self.business_group_ids = business_group_ids  # type: str
        self.business_group_names = business_group_names  # type: str
        self.contact_ids = contact_ids  # type: str
        self.contact_names = contact_names  # type: str
        self.send_dingtalk_notice = send_dingtalk_notice  # type: bool
        self.send_email_notice = send_email_notice  # type: bool
        self.send_sms_notice = send_sms_notice  # type: bool
        self.setting_status = setting_status  # type: long
        self.stop_duration = stop_duration  # type: long
        self.total_business_resource_number = total_business_resource_number  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertSettingResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_level is not None:
            result['AlarmLevel'] = self.alarm_level
        if self.alert_name is not None:
            result['AlertName'] = self.alert_name
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        if self.business_group_ids is not None:
            result['BusinessGroupIds'] = self.business_group_ids
        if self.business_group_names is not None:
            result['BusinessGroupNames'] = self.business_group_names
        if self.contact_ids is not None:
            result['ContactIds'] = self.contact_ids
        if self.contact_names is not None:
            result['ContactNames'] = self.contact_names
        if self.send_dingtalk_notice is not None:
            result['SendDingtalkNotice'] = self.send_dingtalk_notice
        if self.send_email_notice is not None:
            result['SendEmailNotice'] = self.send_email_notice
        if self.send_sms_notice is not None:
            result['SendSmsNotice'] = self.send_sms_notice
        if self.setting_status is not None:
            result['SettingStatus'] = self.setting_status
        if self.stop_duration is not None:
            result['StopDuration'] = self.stop_duration
        if self.total_business_resource_number is not None:
            result['TotalBusinessResourceNumber'] = self.total_business_resource_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmLevel') is not None:
            self.alarm_level = m.get('AlarmLevel')
        if m.get('AlertName') is not None:
            self.alert_name = m.get('AlertName')
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        if m.get('BusinessGroupIds') is not None:
            self.business_group_ids = m.get('BusinessGroupIds')
        if m.get('BusinessGroupNames') is not None:
            self.business_group_names = m.get('BusinessGroupNames')
        if m.get('ContactIds') is not None:
            self.contact_ids = m.get('ContactIds')
        if m.get('ContactNames') is not None:
            self.contact_names = m.get('ContactNames')
        if m.get('SendDingtalkNotice') is not None:
            self.send_dingtalk_notice = m.get('SendDingtalkNotice')
        if m.get('SendEmailNotice') is not None:
            self.send_email_notice = m.get('SendEmailNotice')
        if m.get('SendSmsNotice') is not None:
            self.send_sms_notice = m.get('SendSmsNotice')
        if m.get('SettingStatus') is not None:
            self.setting_status = m.get('SettingStatus')
        if m.get('StopDuration') is not None:
            self.stop_duration = m.get('StopDuration')
        if m.get('TotalBusinessResourceNumber') is not None:
            self.total_business_resource_number = m.get('TotalBusinessResourceNumber')
        return self


class DescribeAlertSettingResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAlertSettingResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: int

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAlertSettingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAlertSettingResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeAlertSettingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertSettingResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertSettingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertSettingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAlertSettingByIdRequest(TeaModel):
    def __init__(self, alert_setting_id=None):
        self.alert_setting_id = alert_setting_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertSettingByIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        return self


class DescribeAlertSettingByIdResponseBodyData(TeaModel):
    def __init__(self, alarm_level=None, alert_business_setting_id=None, alert_name=None, data_create_time=None,
                 data_create_user=None, data_modify_time=None, data_modify_user=None, send_dingtalk_notice=None,
                 send_email_notice=None, send_sms_notice=None, setting_status=None, stop_duration=None, uid=None):
        self.alarm_level = alarm_level  # type: str
        self.alert_business_setting_id = alert_business_setting_id  # type: long
        self.alert_name = alert_name  # type: str
        self.data_create_time = data_create_time  # type: str
        self.data_create_user = data_create_user  # type: str
        self.data_modify_time = data_modify_time  # type: str
        self.data_modify_user = data_modify_user  # type: str
        self.send_dingtalk_notice = send_dingtalk_notice  # type: bool
        self.send_email_notice = send_email_notice  # type: bool
        self.send_sms_notice = send_sms_notice  # type: bool
        self.setting_status = setting_status  # type: long
        self.stop_duration = stop_duration  # type: long
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAlertSettingByIdResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_level is not None:
            result['AlarmLevel'] = self.alarm_level
        if self.alert_business_setting_id is not None:
            result['AlertBusinessSettingId'] = self.alert_business_setting_id
        if self.alert_name is not None:
            result['AlertName'] = self.alert_name
        if self.data_create_time is not None:
            result['DataCreateTime'] = self.data_create_time
        if self.data_create_user is not None:
            result['DataCreateUser'] = self.data_create_user
        if self.data_modify_time is not None:
            result['DataModifyTime'] = self.data_modify_time
        if self.data_modify_user is not None:
            result['DataModifyUser'] = self.data_modify_user
        if self.send_dingtalk_notice is not None:
            result['SendDingtalkNotice'] = self.send_dingtalk_notice
        if self.send_email_notice is not None:
            result['SendEmailNotice'] = self.send_email_notice
        if self.send_sms_notice is not None:
            result['SendSmsNotice'] = self.send_sms_notice
        if self.setting_status is not None:
            result['SettingStatus'] = self.setting_status
        if self.stop_duration is not None:
            result['StopDuration'] = self.stop_duration
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmLevel') is not None:
            self.alarm_level = m.get('AlarmLevel')
        if m.get('AlertBusinessSettingId') is not None:
            self.alert_business_setting_id = m.get('AlertBusinessSettingId')
        if m.get('AlertName') is not None:
            self.alert_name = m.get('AlertName')
        if m.get('DataCreateTime') is not None:
            self.data_create_time = m.get('DataCreateTime')
        if m.get('DataCreateUser') is not None:
            self.data_create_user = m.get('DataCreateUser')
        if m.get('DataModifyTime') is not None:
            self.data_modify_time = m.get('DataModifyTime')
        if m.get('DataModifyUser') is not None:
            self.data_modify_user = m.get('DataModifyUser')
        if m.get('SendDingtalkNotice') is not None:
            self.send_dingtalk_notice = m.get('SendDingtalkNotice')
        if m.get('SendEmailNotice') is not None:
            self.send_email_notice = m.get('SendEmailNotice')
        if m.get('SendSmsNotice') is not None:
            self.send_sms_notice = m.get('SendSmsNotice')
        if m.get('SettingStatus') is not None:
            self.setting_status = m.get('SettingStatus')
        if m.get('StopDuration') is not None:
            self.stop_duration = m.get('StopDuration')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class DescribeAlertSettingByIdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: DescribeAlertSettingByIdResponseBodyData
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(DescribeAlertSettingByIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeAlertSettingByIdResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAlertSettingByIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAlertSettingByIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAlertSettingByIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAlertSettingByIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAllAlertContactRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllAlertContactRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAllAlertContactResponseBodyData(TeaModel):
    def __init__(self, email=None, gmt_create=None, gmt_modified=None, group_names=None, id=None, name=None,
                 phone=None, uid=None, webhook=None):
        self.email = email  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.group_names = group_names  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.phone = phone  # type: str
        self.uid = uid  # type: long
        self.webhook = webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllAlertContactResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['email'] = self.email
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.group_names is not None:
            result['groupNames'] = self.group_names
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.uid is not None:
            result['uid'] = self.uid
        if self.webhook is not None:
            result['webhook'] = self.webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('groupNames') is not None:
            self.group_names = m.get('groupNames')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        if m.get('webhook') is not None:
            self.webhook = m.get('webhook')
        return self


class DescribeAllAlertContactResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAllAlertContactResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAllAlertContactResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAllAlertContactResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAllAlertContactResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAllAlertContactResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAllAlertContactResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAllAlertContactResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAllAlertContactGroupRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllAlertContactGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAllAlertContactGroupResponseBodyData(TeaModel):
    def __init__(self, description=None, gmt_create=None, gmt_modified=None, group_name=None, id=None, uid=None):
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.group_name = group_name  # type: str
        self.id = id  # type: long
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllAlertContactGroupResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['description'] = self.description
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.group_name is not None:
            result['groupName'] = self.group_name
        if self.id is not None:
            result['id'] = self.id
        if self.uid is not None:
            result['uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('groupName') is not None:
            self.group_name = m.get('groupName')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        return self


class DescribeAllAlertContactGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAllAlertContactGroupResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAllAlertContactGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAllAlertContactGroupResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAllAlertContactGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAllAlertContactGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAllAlertContactGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAllAlertContactGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAllBusinessGroupInfoRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllBusinessGroupInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAllBusinessGroupInfoResponseBodyData(TeaModel):
    def __init__(self, business_group_id=None, business_group_name=None):
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllBusinessGroupInfoResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        return self


class DescribeAllBusinessGroupInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[DescribeAllBusinessGroupInfoResponseBodyData]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DescribeAllBusinessGroupInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = DescribeAllBusinessGroupInfoResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAllBusinessGroupInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAllBusinessGroupInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAllBusinessGroupInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAllBusinessGroupInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAllSceneModelRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllSceneModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeAllSceneModelResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAllSceneModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAllSceneModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAllSceneModelResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAllSceneModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAllSceneModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAnalysisDataListRequest(TeaModel):
    def __init__(self, end_time=None, instance_id=None, metric_extend=None, metric_name=None, product_code=None,
                 start_time=None):
        self.end_time = end_time  # type: long
        self.instance_id = instance_id  # type: str
        self.metric_extend = metric_extend  # type: str
        self.metric_name = metric_name  # type: str
        self.product_code = product_code  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisDataListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.metric_extend is not None:
            result['MetricExtend'] = self.metric_extend
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MetricExtend') is not None:
            self.metric_extend = m.get('MetricExtend')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class DescribeAnalysisDataListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeAnalysisDataListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAnalysisDataListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeAnalysisDataListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeAnalysisDataListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAnalysisDataListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBusinessAnalysisDataListRequest(TeaModel):
    def __init__(self, api_path=None, end_time=None, resource=None, start_time=None):
        self.api_path = api_path  # type: str
        self.end_time = end_time  # type: long
        self.resource = resource  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeBusinessAnalysisDataListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_path is not None:
            result['ApiPath'] = self.api_path
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.resource is not None:
            result['Resource'] = self.resource
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApiPath') is not None:
            self.api_path = m.get('ApiPath')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Resource') is not None:
            self.resource = m.get('Resource')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class DescribeBusinessAnalysisDataListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeBusinessAnalysisDataListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeBusinessAnalysisDataListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeBusinessAnalysisDataListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeBusinessAnalysisDataListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBusinessAnalysisDataListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDiagnoseRequest(TeaModel):
    def __init__(self, product=None):
        self.product = product  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDiagnoseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.product is not None:
            result['Product'] = self.product
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Product') is not None:
            self.product = m.get('Product')
        return self


class DescribeDiagnoseResponseBody(TeaModel):
    def __init__(self, code=None, diagnose_result=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.diagnose_result = diagnose_result  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDiagnoseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.diagnose_result is not None:
            result['DiagnoseResult'] = self.diagnose_result
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DiagnoseResult') is not None:
            self.diagnose_result = m.get('DiagnoseResult')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDiagnoseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDiagnoseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDiagnoseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDiagnoseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDiagnoseResultRequest(TeaModel):
    def __init__(self, check_id=None):
        self.check_id = check_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDiagnoseResultRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_id is not None:
            result['CheckId'] = self.check_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CheckId') is not None:
            self.check_id = m.get('CheckId')
        return self


class DescribeDiagnoseResultResponseBody(TeaModel):
    def __init__(self, code=None, diagnose_result=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.diagnose_result = diagnose_result  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeDiagnoseResultResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.diagnose_result is not None:
            result['DiagnoseResult'] = self.diagnose_result
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DiagnoseResult') is not None:
            self.diagnose_result = m.get('DiagnoseResult')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDiagnoseResultResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeDiagnoseResultResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeDiagnoseResultResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDiagnoseResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventTopologyRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTopologyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeEventTopologyResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTopologyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeEventTopologyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventTopologyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventTopologyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventTopologyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEventTopologyDetailRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None, tag_id=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.tag_id = tag_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTopologyDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        return self


class DescribeEventTopologyDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeEventTopologyDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeEventTopologyDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeEventTopologyDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeEventTopologyDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEventTopologyDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFcFunctionRequest(TeaModel):
    def __init__(self, limit=None, next_token=None, opera_uid=None, prefix=None, region_code=None, service_name=None):
        self.limit = limit  # type: int
        self.next_token = next_token  # type: str
        self.opera_uid = opera_uid  # type: str
        self.prefix = prefix  # type: str
        self.region_code = region_code  # type: str
        self.service_name = service_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFcFunctionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.prefix is not None:
            result['Prefix'] = self.prefix
        if self.region_code is not None:
            result['RegionCode'] = self.region_code
        if self.service_name is not None:
            result['ServiceName'] = self.service_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Prefix') is not None:
            self.prefix = m.get('Prefix')
        if m.get('RegionCode') is not None:
            self.region_code = m.get('RegionCode')
        if m.get('ServiceName') is not None:
            self.service_name = m.get('ServiceName')
        return self


class DescribeFcFunctionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, next_token=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.next_token = next_token  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFcFunctionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeFcFunctionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeFcFunctionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeFcFunctionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFcFunctionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFcRegionRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFcRegionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeFcRegionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFcRegionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeFcRegionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeFcRegionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeFcRegionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFcRegionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFcServiceRequest(TeaModel):
    def __init__(self, limit=None, next_token=None, opera_uid=None, prefix=None, region_code=None):
        self.limit = limit  # type: int
        self.next_token = next_token  # type: str
        self.opera_uid = opera_uid  # type: str
        self.prefix = prefix  # type: str
        self.region_code = region_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFcServiceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.prefix is not None:
            result['Prefix'] = self.prefix
        if self.region_code is not None:
            result['RegionCode'] = self.region_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Prefix') is not None:
            self.prefix = m.get('Prefix')
        if m.get('RegionCode') is not None:
            self.region_code = m.get('RegionCode')
        return self


class DescribeFcServiceResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, next_token=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.next_token = next_token  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeFcServiceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeFcServiceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeFcServiceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeFcServiceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFcServiceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeHistoryRiskRequest(TeaModel):
    def __init__(self, current_page=None, last_find_time_end=None, last_find_time_start=None, opera_uid=None,
                 page_size=None, product_code=None, severity=None):
        self.current_page = current_page  # type: int
        self.last_find_time_end = last_find_time_end  # type: str
        self.last_find_time_start = last_find_time_start  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.product_code = product_code  # type: str
        self.severity = severity  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHistoryRiskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.last_find_time_end is not None:
            result['LastFindTimeEnd'] = self.last_find_time_end
        if self.last_find_time_start is not None:
            result['LastFindTimeStart'] = self.last_find_time_start
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.severity is not None:
            result['Severity'] = self.severity
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('LastFindTimeEnd') is not None:
            self.last_find_time_end = m.get('LastFindTimeEnd')
        if m.get('LastFindTimeStart') is not None:
            self.last_find_time_start = m.get('LastFindTimeStart')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('Severity') is not None:
            self.severity = m.get('Severity')
        return self


class DescribeHistoryRiskResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeHistoryRiskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeHistoryRiskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeHistoryRiskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeHistoryRiskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeHistoryRiskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInspectionProgressRequest(TeaModel):
    def __init__(self, inspection_record_id=None, opera_uid=None):
        self.inspection_record_id = inspection_record_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionProgressRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inspection_record_id is not None:
            result['InspectionRecordId'] = self.inspection_record_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InspectionRecordId') is not None:
            self.inspection_record_id = m.get('InspectionRecordId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeInspectionProgressResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionProgressResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInspectionProgressResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInspectionProgressResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInspectionProgressResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInspectionProgressResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInspectionResourcesRequest(TeaModel):
    def __init__(self, keyword=None, opera_uid=None, product_code=None):
        self.keyword = keyword  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        return self


class DescribeInspectionResourcesResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInspectionResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInspectionResourcesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInspectionResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInspectionResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInspectionResultRequest(TeaModel):
    def __init__(self, continuous_days=None, current_page=None, opera_uid=None, page_size=None, risk_code=None,
                 severity=None):
        self.continuous_days = continuous_days  # type: int
        self.current_page = current_page  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.risk_code = risk_code  # type: str
        self.severity = severity  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionResultRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.continuous_days is not None:
            result['ContinuousDays'] = self.continuous_days
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.risk_code is not None:
            result['RiskCode'] = self.risk_code
        if self.severity is not None:
            result['Severity'] = self.severity
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContinuousDays') is not None:
            self.continuous_days = m.get('ContinuousDays')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RiskCode') is not None:
            self.risk_code = m.get('RiskCode')
        if m.get('Severity') is not None:
            self.severity = m.get('Severity')
        return self


class DescribeInspectionResultResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionResultResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeInspectionResultResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInspectionResultResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInspectionResultResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInspectionResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInspectionSettingsRequest(TeaModel):
    def __init__(self, opera_uid=None, product_code=None, product_type=None, risk_desc=None,
                 risk_enable_status=None, risk_name=None, risk_type=None):
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str
        self.product_type = product_type  # type: int
        self.risk_desc = risk_desc  # type: str
        self.risk_enable_status = risk_enable_status  # type: int
        self.risk_name = risk_name  # type: str
        self.risk_type = risk_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionSettingsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.risk_desc is not None:
            result['RiskDesc'] = self.risk_desc
        if self.risk_enable_status is not None:
            result['RiskEnableStatus'] = self.risk_enable_status
        if self.risk_name is not None:
            result['RiskName'] = self.risk_name
        if self.risk_type is not None:
            result['RiskType'] = self.risk_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('RiskDesc') is not None:
            self.risk_desc = m.get('RiskDesc')
        if m.get('RiskEnableStatus') is not None:
            self.risk_enable_status = m.get('RiskEnableStatus')
        if m.get('RiskName') is not None:
            self.risk_name = m.get('RiskName')
        if m.get('RiskType') is not None:
            self.risk_type = m.get('RiskType')
        return self


class DescribeInspectionSettingsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionSettingsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInspectionSettingsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInspectionSettingsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInspectionSettingsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInspectionSettingsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInspectionThresholdRequest(TeaModel):
    def __init__(self, opera_uid=None, risk_code=None):
        self.opera_uid = opera_uid  # type: str
        self.risk_code = risk_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionThresholdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.risk_code is not None:
            result['RiskCode'] = self.risk_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RiskCode') is not None:
            self.risk_code = m.get('RiskCode')
        return self


class DescribeInspectionThresholdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionThresholdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInspectionThresholdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInspectionThresholdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInspectionThresholdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInspectionThresholdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInspectionWhitelistsRequest(TeaModel):
    def __init__(self, opera_uid=None, product_code=None):
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionWhitelistsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        return self


class DescribeInspectionWhitelistsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInspectionWhitelistsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInspectionWhitelistsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInspectionWhitelistsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInspectionWhitelistsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInspectionWhitelistsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInvocationResultsRequest(TeaModel):
    def __init__(self, command_id=None, instance_id=None, invoke_id=None, region_id=None):
        self.command_id = command_id  # type: str
        self.instance_id = instance_id  # type: str
        self.invoke_id = invoke_id  # type: str
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInvocationResultsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.command_id is not None:
            result['CommandId'] = self.command_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.invoke_id is not None:
            result['InvokeId'] = self.invoke_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CommandId') is not None:
            self.command_id = m.get('CommandId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InvokeId') is not None:
            self.invoke_id = m.get('InvokeId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class DescribeInvocationResultsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeInvocationResultsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInvocationResultsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeInvocationResultsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeInvocationResultsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInvocationResultsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeLastInspectionSummaryRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeLastInspectionSummaryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeLastInspectionSummaryResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeLastInspectionSummaryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeLastInspectionSummaryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeLastInspectionSummaryResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeLastInspectionSummaryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeLastInspectionSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeModelRelationScenesRequest(TeaModel):
    def __init__(self, model_id=None, opera_uid=None):
        self.model_id = model_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeModelRelationScenesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeModelRelationScenesResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeModelRelationScenesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeModelRelationScenesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeModelRelationScenesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeModelRelationScenesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeModelRelationScenesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeProductRiskPieRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeProductRiskPieRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeProductRiskPieResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeProductRiskPieResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeProductRiskPieResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeProductRiskPieResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeProductRiskPieResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeProductRiskPieResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeReportDataResponseBodyData(TeaModel):
    def __init__(self, heath_score=None, heath_score_trend_list=None, pre_update_time=None, risk_count=None,
                 risk_count_trend_list=None):
        self.heath_score = heath_score  # type: long
        self.heath_score_trend_list = heath_score_trend_list  # type: list[long]
        self.pre_update_time = pre_update_time  # type: str
        self.risk_count = risk_count  # type: long
        self.risk_count_trend_list = risk_count_trend_list  # type: list[long]

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeReportDataResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.heath_score is not None:
            result['HeathScore'] = self.heath_score
        if self.heath_score_trend_list is not None:
            result['HeathScoreTrendList'] = self.heath_score_trend_list
        if self.pre_update_time is not None:
            result['PreUpdateTime'] = self.pre_update_time
        if self.risk_count is not None:
            result['RiskCount'] = self.risk_count
        if self.risk_count_trend_list is not None:
            result['RiskCountTrendList'] = self.risk_count_trend_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HeathScore') is not None:
            self.heath_score = m.get('HeathScore')
        if m.get('HeathScoreTrendList') is not None:
            self.heath_score_trend_list = m.get('HeathScoreTrendList')
        if m.get('PreUpdateTime') is not None:
            self.pre_update_time = m.get('PreUpdateTime')
        if m.get('RiskCount') is not None:
            self.risk_count = m.get('RiskCount')
        if m.get('RiskCountTrendList') is not None:
            self.risk_count_trend_list = m.get('RiskCountTrendList')
        return self


class DescribeReportDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: DescribeReportDataResponseBodyData
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super(DescribeReportDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeReportDataResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeReportDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeReportDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeReportDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeReportDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeReportEmailConfigsRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeReportEmailConfigsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeReportEmailConfigsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeReportEmailConfigsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeReportEmailConfigsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeReportEmailConfigsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeReportEmailConfigsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeReportEmailConfigsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeReportSubscriptionsRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeReportSubscriptionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeReportSubscriptionsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeReportSubscriptionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeReportSubscriptionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeReportSubscriptionsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeReportSubscriptionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeReportSubscriptionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeResourceMetricRequest(TeaModel):
    def __init__(self, event_id=None, first_load=None, instance_id=None, opera_uid=None, product_code=None):
        self.event_id = event_id  # type: str
        self.first_load = first_load  # type: int
        self.instance_id = instance_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeResourceMetricRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.first_load is not None:
            result['FirstLoad'] = self.first_load
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('FirstLoad') is not None:
            self.first_load = m.get('FirstLoad')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        return self


class DescribeResourceMetricResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeResourceMetricResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeResourceMetricResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeResourceMetricResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeResourceMetricResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeResourceMetricResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskRequest(TeaModel):
    def __init__(self, end_time=None, start_time=None, types=None, uid=None):
        self.end_time = end_time  # type: long
        self.start_time = start_time  # type: long
        self.types = types  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.types is not None:
            result['Types'] = self.types
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Types') is not None:
            self.types = m.get('Types')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class DescribeRiskResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, risk_assessment=None, status=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.risk_assessment = risk_assessment  # type: dict[str, any]
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.risk_assessment is not None:
            result['RiskAssessment'] = self.risk_assessment
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RiskAssessment') is not None:
            self.risk_assessment = m.get('RiskAssessment')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeRiskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskConfigRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeRiskConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeRiskConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskEventDetailsRequest(TeaModel):
    def __init__(self, page_number=None, page_size=None):
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskEventDetailsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeRiskEventDetailsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskEventDetailsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeRiskEventDetailsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskEventDetailsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskEventDetailsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskEventDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskEventListRequest(TeaModel):
    def __init__(self, page_number=None, page_size=None):
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskEventListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeRiskEventListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskEventListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeRiskEventListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskEventListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskEventListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskEventListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskEventTopologyRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskEventTopologyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeRiskEventTopologyResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskEventTopologyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeRiskEventTopologyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskEventTopologyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskEventTopologyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskEventTopologyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskResultSeveritySummaryRequest(TeaModel):
    def __init__(self, continuous_days=None, opera_uid=None, product_code=None):
        self.continuous_days = continuous_days  # type: int
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskResultSeveritySummaryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.continuous_days is not None:
            result['ContinuousDays'] = self.continuous_days
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContinuousDays') is not None:
            self.continuous_days = m.get('ContinuousDays')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        return self


class DescribeRiskResultSeveritySummaryResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskResultSeveritySummaryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeRiskResultSeveritySummaryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskResultSeveritySummaryResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskResultSeveritySummaryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskResultSeveritySummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRiskResultStatisticalRequest(TeaModel):
    def __init__(self, continuous_days=None, opera_uid=None, product_code=None):
        self.continuous_days = continuous_days  # type: int
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskResultStatisticalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.continuous_days is not None:
            result['ContinuousDays'] = self.continuous_days
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContinuousDays') is not None:
            self.continuous_days = m.get('ContinuousDays')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        return self


class DescribeRiskResultStatisticalResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeRiskResultStatisticalResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeRiskResultStatisticalResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeRiskResultStatisticalResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeRiskResultStatisticalResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRiskResultStatisticalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneDetailRequest(TeaModel):
    def __init__(self, opera_uid=None, scene_id=None):
        self.opera_uid = opera_uid  # type: str
        self.scene_id = scene_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        return self


class DescribeSceneDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSceneDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneModelByTypeRequest(TeaModel):
    def __init__(self, model_type=None, opera_uid=None):
        self.model_type = model_type  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelByTypeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_type is not None:
            result['ModelType'] = self.model_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ModelType') is not None:
            self.model_type = m.get('ModelType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeSceneModelByTypeResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelByTypeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSceneModelByTypeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneModelByTypeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneModelByTypeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneModelByTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneModelDetailRequest(TeaModel):
    def __init__(self, model_id=None, opera_uid=None):
        self.model_id = model_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeSceneModelDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSceneModelDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneModelDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneModelDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneModelDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneModelVersionHistoryRequest(TeaModel):
    def __init__(self, model_id=None, opera_uid=None):
        self.model_id = model_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelVersionHistoryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeSceneModelVersionHistoryResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelVersionHistoryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSceneModelVersionHistoryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneModelVersionHistoryResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneModelVersionHistoryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneModelVersionHistoryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneModelsRequest(TeaModel):
    def __init__(self, apply_status=None, current_page=None, model_name=None, model_type=None, opera_uid=None,
                 page_size=None):
        self.apply_status = apply_status  # type: int
        self.current_page = current_page  # type: int
        self.model_name = model_name  # type: str
        self.model_type = model_type  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_status is not None:
            result['ApplyStatus'] = self.apply_status
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.model_name is not None:
            result['ModelName'] = self.model_name
        if self.model_type is not None:
            result['ModelType'] = self.model_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplyStatus') is not None:
            self.apply_status = m.get('ApplyStatus')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('ModelName') is not None:
            self.model_name = m.get('ModelName')
        if m.get('ModelType') is not None:
            self.model_type = m.get('ModelType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeSceneModelsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneModelsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeSceneModelsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneModelsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneModelsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneModelsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSceneSystemModelRequest(TeaModel):
    def __init__(self, current_page=None, model_name=None, model_status=None, model_type=None, opera_uid=None,
                 page_size=None, type_id=None):
        self.current_page = current_page  # type: int
        self.model_name = model_name  # type: str
        self.model_status = model_status  # type: int
        self.model_type = model_type  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.type_id = type_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneSystemModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.model_name is not None:
            result['ModelName'] = self.model_name
        if self.model_status is not None:
            result['ModelStatus'] = self.model_status
        if self.model_type is not None:
            result['ModelType'] = self.model_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('ModelName') is not None:
            self.model_name = m.get('ModelName')
        if m.get('ModelStatus') is not None:
            self.model_status = m.get('ModelStatus')
        if m.get('ModelType') is not None:
            self.model_type = m.get('ModelType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DescribeSceneSystemModelResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeSceneSystemModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeSceneSystemModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeSceneSystemModelResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeSceneSystemModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSceneSystemModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScenesRequest(TeaModel):
    def __init__(self, current_page=None, flow_name=None, model_id=None, opera_uid=None, page_size=None,
                 scene_name=None, scene_status=None):
        self.current_page = current_page  # type: int
        self.flow_name = flow_name  # type: str
        self.model_id = model_id  # type: long
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.scene_name = scene_name  # type: str
        self.scene_status = scene_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScenesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.flow_name is not None:
            result['FlowName'] = self.flow_name
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.scene_name is not None:
            result['SceneName'] = self.scene_name
        if self.scene_status is not None:
            result['SceneStatus'] = self.scene_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('FlowName') is not None:
            self.flow_name = m.get('FlowName')
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SceneName') is not None:
            self.scene_name = m.get('SceneName')
        if m.get('SceneStatus') is not None:
            self.scene_status = m.get('SceneStatus')
        return self


class DescribeScenesResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None, total=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str
        self.total = total  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeScenesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeScenesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeScenesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeScenesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScenesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeStatisticalDataByProductRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeStatisticalDataByProductRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeStatisticalDataByProductResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeStatisticalDataByProductResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeStatisticalDataByProductResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeStatisticalDataByProductResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeStatisticalDataByProductResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeStatisticalDataByProductResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeStatisticalDataByRiskCodeRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeStatisticalDataByRiskCodeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class DescribeStatisticalDataByRiskCodeResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeStatisticalDataByRiskCodeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeStatisticalDataByRiskCodeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeStatisticalDataByRiskCodeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeStatisticalDataByRiskCodeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeStatisticalDataByRiskCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeWhitelistResourcesRequest(TeaModel):
    def __init__(self, keyword=None, opera_uid=None, product_code=None):
        self.keyword = keyword  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeWhitelistResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        return self


class DescribeWhitelistResourcesResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DescribeWhitelistResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeWhitelistResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DescribeWhitelistResourcesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DescribeWhitelistResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeWhitelistResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EndScriptListRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EndScriptListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class EndScriptListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EndScriptListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class EndScriptListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: EndScriptListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(EndScriptListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EndScriptListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FeedbackAlertAlgorithmRequest(TeaModel):
    def __init__(self, alert_id=None, algorithm_accurate_describe=None, algorithm_accurate_state=None,
                 feedback_type=None, opera_uid=None):
        self.alert_id = alert_id  # type: long
        self.algorithm_accurate_describe = algorithm_accurate_describe  # type: str
        self.algorithm_accurate_state = algorithm_accurate_state  # type: int
        self.feedback_type = feedback_type  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FeedbackAlertAlgorithmRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_id is not None:
            result['AlertId'] = self.alert_id
        if self.algorithm_accurate_describe is not None:
            result['AlgorithmAccurateDescribe'] = self.algorithm_accurate_describe
        if self.algorithm_accurate_state is not None:
            result['AlgorithmAccurateState'] = self.algorithm_accurate_state
        if self.feedback_type is not None:
            result['FeedbackType'] = self.feedback_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertId') is not None:
            self.alert_id = m.get('AlertId')
        if m.get('AlgorithmAccurateDescribe') is not None:
            self.algorithm_accurate_describe = m.get('AlgorithmAccurateDescribe')
        if m.get('AlgorithmAccurateState') is not None:
            self.algorithm_accurate_state = m.get('AlgorithmAccurateState')
        if m.get('FeedbackType') is not None:
            self.feedback_type = m.get('FeedbackType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class FeedbackAlertAlgorithmResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FeedbackAlertAlgorithmResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class FeedbackAlertAlgorithmResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FeedbackAlertAlgorithmResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FeedbackAlertAlgorithmResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FeedbackAlertAlgorithmResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAiopsEventListRequest(TeaModel):
    def __init__(self, business_group_id=None, business_group_name=None, current_page=None, event_type=None,
                 event_unique_id=None, feedback_status=None, name=None, opera_uid=None, page_size=None, prediction_state=None,
                 severity=None, status=None, uid=None):
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str
        self.current_page = current_page  # type: int
        self.event_type = event_type  # type: int
        self.event_unique_id = event_unique_id  # type: str
        self.feedback_status = feedback_status  # type: int
        self.name = name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.prediction_state = prediction_state  # type: int
        self.severity = severity  # type: int
        self.status = status  # type: int
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAiopsEventListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.event_unique_id is not None:
            result['EventUniqueId'] = self.event_unique_id
        if self.feedback_status is not None:
            result['FeedbackStatus'] = self.feedback_status
        if self.name is not None:
            result['Name'] = self.name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prediction_state is not None:
            result['PredictionState'] = self.prediction_state
        if self.severity is not None:
            result['Severity'] = self.severity
        if self.status is not None:
            result['Status'] = self.status
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('EventUniqueId') is not None:
            self.event_unique_id = m.get('EventUniqueId')
        if m.get('FeedbackStatus') is not None:
            self.feedback_status = m.get('FeedbackStatus')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PredictionState') is not None:
            self.prediction_state = m.get('PredictionState')
        if m.get('Severity') is not None:
            self.severity = m.get('Severity')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetAiopsEventListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAiopsEventListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAiopsEventListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAiopsEventListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAiopsEventListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAiopsEventListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAiopsEventNewListRequest(TeaModel):
    def __init__(self, current_page=None, opera_uid=None, page_size=None, uid=None):
        self.current_page = current_page  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAiopsEventNewListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetAiopsEventNewListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAiopsEventNewListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAiopsEventNewListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAiopsEventNewListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAiopsEventNewListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAiopsEventNewListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlertDetailTrendDataRequest(TeaModel):
    def __init__(self, abnormal_id=None, alert_id=None, begin_time=None, end_time=None, opera_uid=None):
        self.abnormal_id = abnormal_id  # type: long
        self.alert_id = alert_id  # type: long
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlertDetailTrendDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_id is not None:
            result['AbnormalId'] = self.abnormal_id
        if self.alert_id is not None:
            result['AlertId'] = self.alert_id
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AbnormalId') is not None:
            self.abnormal_id = m.get('AbnormalId')
        if m.get('AlertId') is not None:
            self.alert_id = m.get('AlertId')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetAlertDetailTrendDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlertDetailTrendDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlertDetailTrendDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlertDetailTrendDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlertDetailTrendDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlertDetailTrendDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlertListRequest(TeaModel):
    def __init__(self, ali_uid=None, event_id=None, opera_uid=None):
        self.ali_uid = ali_uid  # type: str
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlertListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetAlertListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlertListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlertListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlertListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlertListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlertListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlertTrentRequest(TeaModel):
    def __init__(self, ali_uid=None, event_id=None, opera_uid=None):
        self.ali_uid = ali_uid  # type: str
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlertTrentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetAlertTrentResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlertTrentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlertTrentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlertTrentResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlertTrentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlertTrentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlgorithmRequest(TeaModel):
    def __init__(self, expand_information=None, instance_id=None, metric_name=None, opera_uid=None, page_num=None,
                 page_size=None):
        self.expand_information = expand_information  # type: str
        self.instance_id = instance_id  # type: str
        self.metric_name = metric_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expand_information is not None:
            result['ExpandInformation'] = self.expand_information
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExpandInformation') is not None:
            self.expand_information = m.get('ExpandInformation')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetAlgorithmResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlgorithmResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlgorithmResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlgorithmResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlgorithmResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlgorithmConfigRequest(TeaModel):
    def __init__(self, algorithm_type_code=None, opera_uid=None):
        self.algorithm_type_code = algorithm_type_code  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type_code is not None:
            result['AlgorithmTypeCode'] = self.algorithm_type_code
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlgorithmTypeCode') is not None:
            self.algorithm_type_code = m.get('AlgorithmTypeCode')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetAlgorithmConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlgorithmConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlgorithmConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlgorithmConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlgorithmConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlgorithmDataRequest(TeaModel):
    def __init__(self, end_time=None, id=None, opera_uid=None, start_time=None):
        self.end_time = end_time  # type: long
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetAlgorithmDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlgorithmDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlgorithmDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlgorithmDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlgorithmDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlgorithmDetailsRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None, page_num=None, page_size=None):
        self.id = id  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmDetailsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetAlgorithmDetailsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmDetailsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlgorithmDetailsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlgorithmDetailsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlgorithmDetailsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlgorithmDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlgorithmForecastDataRequest(TeaModel):
    def __init__(self, ali_uid=None, end_time=None, id=None, opera_uid=None, start_time=None):
        self.ali_uid = ali_uid  # type: str
        self.end_time = end_time  # type: long
        self.id = id  # type: int
        self.opera_uid = opera_uid  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmForecastDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetAlgorithmForecastDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmForecastDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlgorithmForecastDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlgorithmForecastDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlgorithmForecastDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlgorithmForecastDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlgorithmForecastDetailsRequest(TeaModel):
    def __init__(self, ali_uid=None, id=None, opera_uid=None):
        self.ali_uid = ali_uid  # type: str
        self.id = id  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmForecastDetailsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetAlgorithmForecastDetailsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmForecastDetailsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlgorithmForecastDetailsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlgorithmForecastDetailsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlgorithmForecastDetailsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlgorithmForecastDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlgorithmListRequest(TeaModel):
    def __init__(self, algorithm_type=None, expand_information=None, instance_id=None, metric_name=None,
                 opera_uid=None, page_num=None, page_size=None):
        self.algorithm_type = algorithm_type  # type: int
        self.expand_information = expand_information  # type: str
        self.instance_id = instance_id  # type: str
        self.metric_name = metric_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm_type is not None:
            result['AlgorithmType'] = self.algorithm_type
        if self.expand_information is not None:
            result['ExpandInformation'] = self.expand_information
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlgorithmType') is not None:
            self.algorithm_type = m.get('AlgorithmType')
        if m.get('ExpandInformation') is not None:
            self.expand_information = m.get('ExpandInformation')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetAlgorithmListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlgorithmListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAlgorithmListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlgorithmListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlgorithmListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlgorithmListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAllAlgorithmConfigRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllAlgorithmConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetAllAlgorithmConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllAlgorithmConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAllAlgorithmConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAllAlgorithmConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAllAlgorithmConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAllAlgorithmConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAllTagResourceNumListRequest(TeaModel):
    def __init__(self, current_page=None, opera_uid=None, page_size=None, product_id=None, tag_name=None):
        self.current_page = current_page  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.product_id = product_id  # type: long
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllTagResourceNumListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class GetAllTagResourceNumListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAllTagResourceNumListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAllTagResourceNumListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAllTagResourceNumListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAllTagResourceNumListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAllTagResourceNumListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAnalysisProcessRequest(TeaModel):
    def __init__(self, event_id=None, lang=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.lang = lang  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAnalysisProcessRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetAnalysisProcessResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAnalysisProcessResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAnalysisProcessResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAnalysisProcessResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAnalysisProcessResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAnalysisProcessResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAuthorizationRequest(TeaModel):
    def __init__(self, user_id=None):
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAuthorizationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetAuthorizationResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: str
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAuthorizationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAuthorizationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAuthorizationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAuthorizationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAvgRepairTimeRequest(TeaModel):
    def __init__(self, opera_uid=None, uid=None):
        self.opera_uid = opera_uid  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAvgRepairTimeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetAvgRepairTimeResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAvgRepairTimeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAvgRepairTimeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAvgRepairTimeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAvgRepairTimeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAvgRepairTimeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBackScriptListRequest(TeaModel):
    def __init__(self, opera_uid=None, scene_id=None):
        self.opera_uid = opera_uid  # type: str
        self.scene_id = scene_id  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBackScriptListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        return self


class GetBackScriptListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBackScriptListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBackScriptListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBackScriptListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBackScriptListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBackScriptListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessGroupRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessGroupAllRequest(TeaModel):
    def __init__(self, business_group_name=None, current_page=None, opera_uid=None, page_size=None, status=None):
        self.business_group_name = business_group_name  # type: str
        self.current_page = current_page  # type: long
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: long
        self.status = status  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupAllRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessGroupAllResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupAllResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessGroupAllResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessGroupAllResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessGroupAllResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessGroupAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessGroupIndexRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None, product_id=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_id = product_id  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupIndexRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        return self


class GetBusinessGroupIndexResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupIndexResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessGroupIndexResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessGroupIndexResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessGroupIndexResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessGroupIndexResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessGroupInfoRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessGroupInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessGroupInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessGroupInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessGroupInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessGroupInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessGroupOverviewListRequest(TeaModel):
    def __init__(self, ali_uid=None, current_page=None, opera_uid=None, page_size=None):
        self.ali_uid = ali_uid  # type: str
        self.current_page = current_page  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupOverviewListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetBusinessGroupOverviewListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessGroupOverviewListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessGroupOverviewListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessGroupOverviewListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessGroupOverviewListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessGroupOverviewListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessLogAlertDetailRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessLogAlertDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessLogAlertDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessLogAlertDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessLogAlertDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessLogAlertDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessLogAlertDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessLogAlertDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessLogAlertListRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessLogAlertListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessLogAlertListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessLogAlertListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessLogAlertListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessLogAlertListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessLogAlertListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessLogAlertListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessLogAlertTopNRequest(TeaModel):
    def __init__(self, alert_type=None, event_id=None, opera_uid=None, top_num=None):
        self.alert_type = alert_type  # type: str
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.top_num = top_num  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessLogAlertTopNRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_type is not None:
            result['AlertType'] = self.alert_type
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.top_num is not None:
            result['TopNum'] = self.top_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertType') is not None:
            self.alert_type = m.get('AlertType')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('TopNum') is not None:
            self.top_num = m.get('TopNum')
        return self


class GetBusinessLogAlertTopNResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessLogAlertTopNResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessLogAlertTopNResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessLogAlertTopNResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessLogAlertTopNResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessLogAlertTopNResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessMetricAlertDetailListRequest(TeaModel):
    def __init__(self, event_id=None, id=None, metric_name=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.id = id  # type: long
        self.metric_name = metric_name  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAlertDetailListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.id is not None:
            result['Id'] = self.id
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessMetricAlertDetailListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAlertDetailListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessMetricAlertDetailListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessMetricAlertDetailListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessMetricAlertDetailListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessMetricAlertDetailListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessMetricAlertListRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAlertListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessMetricAlertListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAlertListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessMetricAlertListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessMetricAlertListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessMetricAlertListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessMetricAlertListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessMetricAlertTopNRequest(TeaModel):
    def __init__(self, alert_type=None, event_id=None, opera_uid=None, top_num=None):
        self.alert_type = alert_type  # type: str
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.top_num = top_num  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAlertTopNRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_type is not None:
            result['AlertType'] = self.alert_type
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.top_num is not None:
            result['TopNum'] = self.top_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertType') is not None:
            self.alert_type = m.get('AlertType')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('TopNum') is not None:
            self.top_num = m.get('TopNum')
        return self


class GetBusinessMetricAlertTopNResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAlertTopNResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessMetricAlertTopNResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessMetricAlertTopNResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessMetricAlertTopNResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessMetricAlertTopNResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessMetricAllListRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAllListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessMetricAllListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricAllListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessMetricAllListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessMetricAllListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessMetricAllListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessMetricAllListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessMetricForecastListRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricForecastListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessMetricForecastListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricForecastListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessMetricForecastListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessMetricForecastListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessMetricForecastListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessMetricForecastListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessMetricResourceByMetricIdRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricResourceByMetricIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessMetricResourceByMetricIdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricResourceByMetricIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessMetricResourceByMetricIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessMetricResourceByMetricIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessMetricResourceByMetricIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessMetricResourceByMetricIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBusinessMetricSceneListRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricSceneListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetBusinessMetricSceneListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetBusinessMetricSceneListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBusinessMetricSceneListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetBusinessMetricSceneListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetBusinessMetricSceneListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBusinessMetricSceneListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCidInfoRequest(TeaModel):
    def __init__(self, uid=None):
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCidInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetCidInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCidInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetCidInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetCidInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetCidInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCidInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCloudAllResourceListRequest(TeaModel):
    def __init__(self, opera_uid=None, uid=None):
        self.opera_uid = opera_uid  # type: str
        self.uid = uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCloudAllResourceListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetCloudAllResourceListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCloudAllResourceListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetCloudAllResourceListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetCloudAllResourceListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetCloudAllResourceListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCloudAllResourceListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCloudResourceRequest(TeaModel):
    def __init__(self, cloud_type_name=None, current_page=None, opera_uid=None, page_size=None, status=None):
        self.cloud_type_name = cloud_type_name  # type: str
        self.current_page = current_page  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCloudResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cloud_type_name is not None:
            result['CloudTypeName'] = self.cloud_type_name
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CloudTypeName') is not None:
            self.cloud_type_name = m.get('CloudTypeName')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetCloudResourceResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCloudResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetCloudResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetCloudResourceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetCloudResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCloudResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCloudResourceListRequest(TeaModel):
    def __init__(self, business_group_id=None, cloud_region_id=None, current_page=None, id=None, instance_id=None,
                 instance_name=None, is_optional=None, opera_uid=None, page_size=None, private_ip=None, release_status=None,
                 tag_name=None, uid=None):
        self.business_group_id = business_group_id  # type: str
        self.cloud_region_id = cloud_region_id  # type: str
        self.current_page = current_page  # type: int
        self.id = id  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.is_optional = is_optional  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.private_ip = private_ip  # type: str
        self.release_status = release_status  # type: int
        self.tag_name = tag_name  # type: str
        self.uid = uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCloudResourceListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.cloud_region_id is not None:
            result['CloudRegionId'] = self.cloud_region_id
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.is_optional is not None:
            result['IsOptional'] = self.is_optional
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.private_ip is not None:
            result['PrivateIp'] = self.private_ip
        if self.release_status is not None:
            result['ReleaseStatus'] = self.release_status
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('CloudRegionId') is not None:
            self.cloud_region_id = m.get('CloudRegionId')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('IsOptional') is not None:
            self.is_optional = m.get('IsOptional')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PrivateIp') is not None:
            self.private_ip = m.get('PrivateIp')
        if m.get('ReleaseStatus') is not None:
            self.release_status = m.get('ReleaseStatus')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetCloudResourceListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetCloudResourceListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetCloudResourceListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetCloudResourceListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetCloudResourceListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCloudResourceListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConnectInstancesRequest(TeaModel):
    def __init__(self, uid=None):
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConnectInstancesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetConnectInstancesResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: long
        self.data = data  # type: list[dict[str, any]]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConnectInstancesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetConnectInstancesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetConnectInstancesResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetConnectInstancesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetConnectInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDataSourceDetailRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataSourceDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetDataSourceDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataSourceDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetDataSourceDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDataSourceDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDataSourceDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDataSourceDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDataSourceListRequest(TeaModel):
    def __init__(self, current_page=None, data_source_name=None, data_source_type=None, opera_uid=None,
                 page_size=None):
        self.current_page = current_page  # type: int
        self.data_source_name = data_source_name  # type: str
        self.data_source_type = data_source_type  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataSourceListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.data_source_name is not None:
            result['DataSourceName'] = self.data_source_name
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('DataSourceName') is not None:
            self.data_source_name = m.get('DataSourceName')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetDataSourceListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataSourceListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetDataSourceListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDataSourceListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDataSourceListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDataSourceListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDataSourceTargetParamListRequest(TeaModel):
    def __init__(self, data_source_type=None, opera_uid=None):
        self.data_source_type = data_source_type  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataSourceTargetParamListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetDataSourceTargetParamListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataSourceTargetParamListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetDataSourceTargetParamListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDataSourceTargetParamListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDataSourceTargetParamListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDataSourceTargetParamListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDataVolumeRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataVolumeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetDataVolumeResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDataVolumeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetDataVolumeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDataVolumeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDataVolumeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDataVolumeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDiagInfoRequest(TeaModel):
    def __init__(self, current_page=None, diagnostic_id=None, end_time=None, page_size=None, start_time=None,
                 status=None, uid=None):
        self.current_page = current_page  # type: int
        self.diagnostic_id = diagnostic_id  # type: str
        self.end_time = end_time  # type: long
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: long
        self.status = status  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDiagInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.diagnostic_id is not None:
            result['DiagnosticId'] = self.diagnostic_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('DiagnosticId') is not None:
            self.diagnostic_id = m.get('DiagnosticId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetDiagInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDiagInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetDiagInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDiagInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDiagInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDiagInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDomainConfigRequest(TeaModel):
    def __init__(self, business_group_id=None, event_id=None, opera_uid=None, product_id=None):
        self.business_group_id = business_group_id  # type: str
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_id = product_id  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDomainConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        return self


class GetDomainConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDomainConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetDomainConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDomainConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDomainConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDomainConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventAbNormalDetailRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventAbNormalDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetEventAbNormalDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventAbNormalDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventAbNormalDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventAbNormalDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventAbNormalDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventAbNormalDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventAbNormalDetailTrendDataRequest(TeaModel):
    def __init__(self, begin_time=None, end_time=None, id=None, opera_uid=None):
        self.begin_time = begin_time  # type: long
        self.end_time = end_time  # type: long
        self.id = id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventAbNormalDetailTrendDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetEventAbNormalDetailTrendDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventAbNormalDetailTrendDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventAbNormalDetailTrendDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventAbNormalDetailTrendDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventAbNormalDetailTrendDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventAbNormalDetailTrendDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventAbNormalListRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventAbNormalListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetEventAbNormalListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventAbNormalListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventAbNormalListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventAbNormalListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventAbNormalListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventAbNormalListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventBusinessMetricListRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventBusinessMetricListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetEventBusinessMetricListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventBusinessMetricListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventBusinessMetricListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventBusinessMetricListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventBusinessMetricListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventBusinessMetricListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventDetailRequest(TeaModel):
    def __init__(self, event_id=None, id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetEventDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventRootCauseRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventRootCauseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetEventRootCauseResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventRootCauseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventRootCauseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventRootCauseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventRootCauseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventRootCauseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventSequentialTrentRequest(TeaModel):
    def __init__(self, ali_uid=None, event_id=None, opera_uid=None):
        self.ali_uid = ali_uid  # type: str
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventSequentialTrentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetEventSequentialTrentResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventSequentialTrentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventSequentialTrentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventSequentialTrentResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventSequentialTrentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventSequentialTrentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventStatisticsRequest(TeaModel):
    def __init__(self, end_time=None, opera_uid=None, start_time=None, uid=None):
        self.end_time = end_time  # type: str
        self.opera_uid = opera_uid  # type: str
        self.start_time = start_time  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventStatisticsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetEventStatisticsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventStatisticsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventStatisticsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventStatisticsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventStatisticsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventTrentRequest(TeaModel):
    def __init__(self, end_time=None, granularity_type=None, opera_uid=None, start_time=None, time_type=None,
                 uid=None):
        self.end_time = end_time  # type: str
        self.granularity_type = granularity_type  # type: str
        self.opera_uid = opera_uid  # type: str
        self.start_time = start_time  # type: str
        self.time_type = time_type  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventTrentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.granularity_type is not None:
            result['GranularityType'] = self.granularity_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.time_type is not None:
            result['TimeType'] = self.time_type
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('GranularityType') is not None:
            self.granularity_type = m.get('GranularityType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TimeType') is not None:
            self.time_type = m.get('TimeType')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetEventTrentResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventTrentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventTrentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventTrentResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventTrentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventTrentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEventTypeRequest(TeaModel):
    def __init__(self, business_group_id=None, id=None, opera_uid=None, product_id=None):
        self.business_group_id = business_group_id  # type: str
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str
        self.product_id = product_id  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventTypeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        return self


class GetEventTypeResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetEventTypeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEventTypeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetEventTypeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetEventTypeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEventTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetExceptionsRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetExceptionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetExceptionsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetExceptionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetExceptionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetExceptionsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetExceptionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetExceptionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetExtendRequest(TeaModel):
    def __init__(self, instance_id=None, metric_id=None, opera_uid=None):
        self.instance_id = instance_id  # type: str
        self.metric_id = metric_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetExtendRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.metric_id is not None:
            result['MetricId'] = self.metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MetricId') is not None:
            self.metric_id = m.get('MetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetExtendResponse(TeaModel):
    def __init__(self, headers=None, status_code=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetExtendResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        return self


class GetForecastBusinessMetricRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetForecastBusinessMetricRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetForecastBusinessMetricResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetForecastBusinessMetricResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetForecastBusinessMetricResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetForecastBusinessMetricResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetForecastBusinessMetricResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetForecastBusinessMetricResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetFunctionValidInfoRequest(TeaModel):
    def __init__(self, function_name=None, opera_uid=None, region_code=None, service_name=None):
        self.function_name = function_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.region_code = region_code  # type: str
        self.service_name = service_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFunctionValidInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.function_name is not None:
            result['FunctionName'] = self.function_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.region_code is not None:
            result['RegionCode'] = self.region_code
        if self.service_name is not None:
            result['ServiceName'] = self.service_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FunctionName') is not None:
            self.function_name = m.get('FunctionName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RegionCode') is not None:
            self.region_code = m.get('RegionCode')
        if m.get('ServiceName') is not None:
            self.service_name = m.get('ServiceName')
        return self


class GetFunctionValidInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetFunctionValidInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetFunctionValidInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetFunctionValidInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetFunctionValidInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetFunctionValidInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetGroupByDimensionDataRequest(TeaModel):
    def __init__(self, end=None, flag=None, group_by=None, metric_id=None, opera_uid=None, start=None):
        self.end = end  # type: long
        self.flag = flag  # type: str
        self.group_by = group_by  # type: str
        self.metric_id = metric_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.start = start  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetGroupByDimensionDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end is not None:
            result['End'] = self.end
        if self.flag is not None:
            result['Flag'] = self.flag
        if self.group_by is not None:
            result['GroupBy'] = self.group_by
        if self.metric_id is not None:
            result['MetricId'] = self.metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('Flag') is not None:
            self.flag = m.get('Flag')
        if m.get('GroupBy') is not None:
            self.group_by = m.get('GroupBy')
        if m.get('MetricId') is not None:
            self.metric_id = m.get('MetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class GetGroupByDimensionDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetGroupByDimensionDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetGroupByDimensionDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetGroupByDimensionDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetGroupByDimensionDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetGroupByDimensionDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetGroupResourceNumRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetGroupResourceNumRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetGroupResourceNumResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetGroupResourceNumResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetGroupResourceNumResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetGroupResourceNumResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetGroupResourceNumResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetGroupResourceNumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetGroupTopologyTagRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetGroupTopologyTagRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetGroupTopologyTagResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetGroupTopologyTagResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetGroupTopologyTagResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetGroupTopologyTagResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetGroupTopologyTagResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetGroupTopologyTagResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetIncidentAllRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIncidentAllRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetIncidentAllResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIncidentAllResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetIncidentAllResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetIncidentAllResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetIncidentAllResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetIncidentAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetIndexDialysisArrayRequest(TeaModel):
    def __init__(self, business_group_id=None, cloud_resource_id=None, cloud_type_name=None, current_page=None,
                 index_code=None, opera_uid=None, page_size=None):
        self.business_group_id = business_group_id  # type: str
        self.cloud_resource_id = cloud_resource_id  # type: str
        self.cloud_type_name = cloud_type_name  # type: str
        self.current_page = current_page  # type: int
        self.index_code = index_code  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIndexDialysisArrayRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.cloud_resource_id is not None:
            result['CloudResourceId'] = self.cloud_resource_id
        if self.cloud_type_name is not None:
            result['CloudTypeName'] = self.cloud_type_name
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.index_code is not None:
            result['IndexCode'] = self.index_code
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('CloudResourceId') is not None:
            self.cloud_resource_id = m.get('CloudResourceId')
        if m.get('CloudTypeName') is not None:
            self.cloud_type_name = m.get('CloudTypeName')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('IndexCode') is not None:
            self.index_code = m.get('IndexCode')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetIndexDialysisArrayResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIndexDialysisArrayResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetIndexDialysisArrayResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetIndexDialysisArrayResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetIndexDialysisArrayResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetIndexDialysisArrayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetIndexDialysisListRequest(TeaModel):
    def __init__(self, business_group_id=None, cloud_resource_id=None, cloud_type_name=None, current_page=None,
                 index_code=None, opera_uid=None, page_size=None):
        self.business_group_id = business_group_id  # type: str
        self.cloud_resource_id = cloud_resource_id  # type: str
        self.cloud_type_name = cloud_type_name  # type: str
        self.current_page = current_page  # type: int
        self.index_code = index_code  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIndexDialysisListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.cloud_resource_id is not None:
            result['CloudResourceId'] = self.cloud_resource_id
        if self.cloud_type_name is not None:
            result['CloudTypeName'] = self.cloud_type_name
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.index_code is not None:
            result['IndexCode'] = self.index_code
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('CloudResourceId') is not None:
            self.cloud_resource_id = m.get('CloudResourceId')
        if m.get('CloudTypeName') is not None:
            self.cloud_type_name = m.get('CloudTypeName')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('IndexCode') is not None:
            self.index_code = m.get('IndexCode')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetIndexDialysisListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIndexDialysisListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetIndexDialysisListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetIndexDialysisListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetIndexDialysisListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetIndexDialysisListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetIndexDialysisListLineRequest(TeaModel):
    def __init__(self, begin_time=None, cloud_resource_id=None, cloud_type_name=None, end_time=None,
                 index_code=None, metric_extend=None, opera_uid=None):
        self.begin_time = begin_time  # type: long
        self.cloud_resource_id = cloud_resource_id  # type: str
        self.cloud_type_name = cloud_type_name  # type: str
        self.end_time = end_time  # type: long
        self.index_code = index_code  # type: str
        self.metric_extend = metric_extend  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIndexDialysisListLineRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.cloud_resource_id is not None:
            result['CloudResourceId'] = self.cloud_resource_id
        if self.cloud_type_name is not None:
            result['CloudTypeName'] = self.cloud_type_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.index_code is not None:
            result['IndexCode'] = self.index_code
        if self.metric_extend is not None:
            result['MetricExtend'] = self.metric_extend
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('CloudResourceId') is not None:
            self.cloud_resource_id = m.get('CloudResourceId')
        if m.get('CloudTypeName') is not None:
            self.cloud_type_name = m.get('CloudTypeName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('IndexCode') is not None:
            self.index_code = m.get('IndexCode')
        if m.get('MetricExtend') is not None:
            self.metric_extend = m.get('MetricExtend')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetIndexDialysisListLineResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetIndexDialysisListLineResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetIndexDialysisListLineResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetIndexDialysisListLineResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetIndexDialysisListLineResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetIndexDialysisListLineResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInspectionReportDownloadUrlRequest(TeaModel):
    def __init__(self, download_report_list_json=None, opera_uid=None):
        self.download_report_list_json = download_report_list_json  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInspectionReportDownloadUrlRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_report_list_json is not None:
            result['DownloadReportListJson'] = self.download_report_list_json
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DownloadReportListJson') is not None:
            self.download_report_list_json = m.get('DownloadReportListJson')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetInspectionReportDownloadUrlResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInspectionReportDownloadUrlResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetInspectionReportDownloadUrlResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetInspectionReportDownloadUrlResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInspectionReportDownloadUrlResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInspectionReportDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstancesNumRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesNumRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetInstancesNumResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInstancesNumResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetInstancesNumResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetInstancesNumResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInstancesNumResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInstancesNumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetLogSampleRequest(TeaModel):
    def __init__(self, app_field=None, app_value=None, data_source_id=None, log_field=None, opera_uid=None):
        self.app_field = app_field  # type: str
        self.app_value = app_value  # type: str
        self.data_source_id = data_source_id  # type: long
        self.log_field = log_field  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetLogSampleRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_field is not None:
            result['AppField'] = self.app_field
        if self.app_value is not None:
            result['AppValue'] = self.app_value
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.log_field is not None:
            result['LogField'] = self.log_field
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppField') is not None:
            self.app_field = m.get('AppField')
        if m.get('AppValue') is not None:
            self.app_value = m.get('AppValue')
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('LogField') is not None:
            self.log_field = m.get('LogField')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetLogSampleResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetLogSampleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetLogSampleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetLogSampleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetLogSampleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetLogSampleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetLogSampleColumnRequest(TeaModel):
    def __init__(self, data_source_id=None, opera_uid=None):
        self.data_source_id = data_source_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetLogSampleColumnRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_id is not None:
            result['DataSourceId'] = self.data_source_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataSourceId') is not None:
            self.data_source_id = m.get('DataSourceId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetLogSampleColumnResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetLogSampleColumnResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetLogSampleColumnResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetLogSampleColumnResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetLogSampleColumnResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetLogSampleColumnResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMetricEventSequentialTrentRequest(TeaModel):
    def __init__(self, ali_uid=None, event_id=None, opera_uid=None):
        self.ali_uid = ali_uid  # type: str
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMetricEventSequentialTrentRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetMetricEventSequentialTrentResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMetricEventSequentialTrentResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetMetricEventSequentialTrentResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMetricEventSequentialTrentResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMetricEventSequentialTrentResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMetricEventSequentialTrentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNewOptimizationItemDataRequest(TeaModel):
    def __init__(self, lang=None, opera_uid=None):
        self.lang = lang  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNewOptimizationItemDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetNewOptimizationItemDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetNewOptimizationItemDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetNewOptimizationItemDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetNewOptimizationItemDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetNewOptimizationItemDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetNewOptimizationItemDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPatrolInspectionDetailListRequest(TeaModel):
    def __init__(self, current_page=None, instance_id=None, instance_name=None, opera_uid=None, page_size=None,
                 patrol_id=None, status=None):
        self.current_page = current_page  # type: int
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.patrol_id = patrol_id  # type: long
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionDetailListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetPatrolInspectionDetailListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionDetailListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetPatrolInspectionDetailListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetPatrolInspectionDetailListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPatrolInspectionDetailListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPatrolInspectionDetailListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPatrolInspectionDetailThrendDataRequest(TeaModel):
    def __init__(self, end_time=None, opera_uid=None, request_content=None, start_time=None):
        self.end_time = end_time  # type: long
        self.opera_uid = opera_uid  # type: str
        self.request_content = request_content  # type: str
        self.start_time = start_time  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionDetailThrendDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class GetPatrolInspectionDetailThrendDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionDetailThrendDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetPatrolInspectionDetailThrendDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetPatrolInspectionDetailThrendDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPatrolInspectionDetailThrendDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPatrolInspectionDetailThrendDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPatrolInspectionItemsListRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionItemsListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetPatrolInspectionItemsListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionItemsListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetPatrolInspectionItemsListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetPatrolInspectionItemsListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPatrolInspectionItemsListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPatrolInspectionItemsListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPatrolInspectionListRequest(TeaModel):
    def __init__(self, business_group_id=None, current_page=None, lang=None, opera_uid=None, page_size=None,
                 patrol_id=None, product_code=None, risk_level=None, risk_name=None, risk_patrol_item=None, risk_type=None,
                 severity_level=None, status=None):
        self.business_group_id = business_group_id  # type: str
        self.current_page = current_page  # type: int
        self.lang = lang  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.patrol_id = patrol_id  # type: long
        self.product_code = product_code  # type: str
        self.risk_level = risk_level  # type: int
        self.risk_name = risk_name  # type: str
        self.risk_patrol_item = risk_patrol_item  # type: str
        self.risk_type = risk_type  # type: int
        self.severity_level = severity_level  # type: int
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.risk_level is not None:
            result['RiskLevel'] = self.risk_level
        if self.risk_name is not None:
            result['RiskName'] = self.risk_name
        if self.risk_patrol_item is not None:
            result['RiskPatrolItem'] = self.risk_patrol_item
        if self.risk_type is not None:
            result['RiskType'] = self.risk_type
        if self.severity_level is not None:
            result['SeverityLevel'] = self.severity_level
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('RiskLevel') is not None:
            self.risk_level = m.get('RiskLevel')
        if m.get('RiskName') is not None:
            self.risk_name = m.get('RiskName')
        if m.get('RiskPatrolItem') is not None:
            self.risk_patrol_item = m.get('RiskPatrolItem')
        if m.get('RiskType') is not None:
            self.risk_type = m.get('RiskType')
        if m.get('SeverityLevel') is not None:
            self.severity_level = m.get('SeverityLevel')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetPatrolInspectionListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetPatrolInspectionListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetPatrolInspectionListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPatrolInspectionListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPatrolInspectionListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPatrolInspectionStatusRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetPatrolInspectionStatusResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPatrolInspectionStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetPatrolInspectionStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetPatrolInspectionStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPatrolInspectionStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPatrolInspectionStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetProductInstanceRequest(TeaModel):
    def __init__(self, instance_id=None, opera_uid=None, product_code=None):
        self.instance_id = instance_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProductInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        return self


class GetProductInstanceResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProductInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetProductInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetProductInstanceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetProductInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetProductInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetProductMetricListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetProductMetricListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetProductMetricListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetProductMetricListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetProductMetricListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetProductMetricListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRealDataRequest(TeaModel):
    def __init__(self, end_timestamp=None, flow_name=None, instance_id=None, start_timestamp=None, uid=None):
        self.end_timestamp = end_timestamp  # type: str
        self.flow_name = flow_name  # type: str
        self.instance_id = instance_id  # type: str
        self.start_timestamp = start_timestamp  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRealDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.flow_name is not None:
            result['FlowName'] = self.flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_timestamp is not None:
            result['StartTimestamp'] = self.start_timestamp
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('FlowName') is not None:
            self.flow_name = m.get('FlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTimestamp') is not None:
            self.start_timestamp = m.get('StartTimestamp')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetRealDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: long
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRealDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRealDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRealDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRealDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRealDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRegionListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRegionListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRegionListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRegionListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRegionListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRegionListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRepairScriptRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRepairScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetRepairScriptResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRepairScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRepairScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRepairScriptResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRepairScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRepairScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetResourceListRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetResourceListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetResourceListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetResourceListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetResourceListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetResourceListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetResourceListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetResourceListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetResourceTagDropListRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetResourceTagDropListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetResourceTagDropListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetResourceTagDropListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetResourceTagDropListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetResourceTagDropListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetResourceTagDropListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetResourceTagDropListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetResourceTypeListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetResourceTypeListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetResourceTypeListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetResourceTypeListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetResourceTypeListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetResourceTypeListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskInAllRequest(TeaModel):
    def __init__(self, opera_uid=None, screen=None):
        self.opera_uid = opera_uid  # type: str
        self.screen = screen  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskInAllRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.screen is not None:
            result['Screen'] = self.screen
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Screen') is not None:
            self.screen = m.get('Screen')
        return self


class GetRiskInAllResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskInAllResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskInAllResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskInAllResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskInAllResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskInAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskInspectStatisticsRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskInspectStatisticsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetRiskInspectStatisticsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskInspectStatisticsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskInspectStatisticsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskInspectStatisticsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskInspectStatisticsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskInspectStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskInspectionTypeListRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskInspectionTypeListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetRiskInspectionTypeListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskInspectionTypeListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskInspectionTypeListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskInspectionTypeListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskInspectionTypeListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskInspectionTypeListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskPatrolDetailListRequest(TeaModel):
    def __init__(self, current_page=None, instance_id=None, instance_name=None, opera_uid=None, page_size=None,
                 patrol_id=None, status=None):
        self.current_page = current_page  # type: int
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.patrol_id = patrol_id  # type: long
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolDetailListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskPatrolDetailListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolDetailListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskPatrolDetailListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskPatrolDetailListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskPatrolDetailListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskPatrolDetailListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskPatrolListRequest(TeaModel):
    def __init__(self, business_group_id=None, business_group_name=None, current_page=None, opera_uid=None,
                 page_size=None, patrol_id=None, risk_patrol_item=None, severity_level=None, status=None):
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str
        self.current_page = current_page  # type: int
        self.opera_uid = opera_uid  # type: str
        self.page_size = page_size  # type: int
        self.patrol_id = patrol_id  # type: long
        self.risk_patrol_item = risk_patrol_item  # type: str
        self.severity_level = severity_level  # type: int
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        if self.risk_patrol_item is not None:
            result['RiskPatrolItem'] = self.risk_patrol_item
        if self.severity_level is not None:
            result['SeverityLevel'] = self.severity_level
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        if m.get('RiskPatrolItem') is not None:
            self.risk_patrol_item = m.get('RiskPatrolItem')
        if m.get('SeverityLevel') is not None:
            self.severity_level = m.get('SeverityLevel')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskPatrolListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskPatrolListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskPatrolListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskPatrolListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskPatrolListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskPatrolStatisticalTrendsRequest(TeaModel):
    def __init__(self, event_id=None, lang=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.lang = lang  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolStatisticalTrendsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.lang is not None:
            result['Lang'] = self.lang
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('Lang') is not None:
            self.lang = m.get('Lang')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetRiskPatrolStatisticalTrendsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolStatisticalTrendsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskPatrolStatisticalTrendsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskPatrolStatisticalTrendsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskPatrolStatisticalTrendsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskPatrolStatisticalTrendsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskPatrolStatisticsRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolStatisticsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetRiskPatrolStatisticsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolStatisticsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskPatrolStatisticsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskPatrolStatisticsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskPatrolStatisticsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskPatrolStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRiskPatrolStatusRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetRiskPatrolStatusResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRiskPatrolStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRiskPatrolStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRiskPatrolStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRiskPatrolStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRiskPatrolStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRoleResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, staus=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.staus = staus  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRoleResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.staus is not None:
            result['Staus'] = self.staus
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Staus') is not None:
            self.staus = m.get('Staus')
        return self


class GetRoleResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRoleResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRoleResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRootCauseRequest(TeaModel):
    def __init__(self, event_id=None, instance_id=None, root_cause_id=None):
        self.event_id = event_id  # type: str
        self.instance_id = instance_id  # type: str
        self.root_cause_id = root_cause_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRootCauseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.root_cause_id is not None:
            result['RootCauseId'] = self.root_cause_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RootCauseId') is not None:
            self.root_cause_id = m.get('RootCauseId')
        return self


class GetRootCauseResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRootCauseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetRootCauseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRootCauseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRootCauseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRootCauseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScenarioDetailRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetScenarioDetailResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetScenarioDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetScenarioDetailResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetScenarioDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetScenarioDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScenarioListRequest(TeaModel):
    def __init__(self, opera_uid=None, page_no=None, page_size=None, scenario_name=None, scene_select_label=None):
        self.opera_uid = opera_uid  # type: str
        self.page_no = page_no  # type: long
        self.page_size = page_size  # type: long
        self.scenario_name = scenario_name  # type: str
        self.scene_select_label = scene_select_label  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.scenario_name is not None:
            result['ScenarioName'] = self.scenario_name
        if self.scene_select_label is not None:
            result['SceneSelectLabel'] = self.scene_select_label
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScenarioName') is not None:
            self.scenario_name = m.get('ScenarioName')
        if m.get('SceneSelectLabel') is not None:
            self.scene_select_label = m.get('SceneSelectLabel')
        return self


class GetScenarioListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetScenarioListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetScenarioListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetScenarioListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetScenarioListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScenarioStatisticsListRequest(TeaModel):
    def __init__(self, end_time=None, opera_uid=None, scenario_ids=None):
        self.end_time = end_time  # type: long
        self.opera_uid = opera_uid  # type: str
        self.scenario_ids = scenario_ids  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioStatisticsListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scenario_ids is not None:
            result['ScenarioIds'] = self.scenario_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ScenarioIds') is not None:
            self.scenario_ids = m.get('ScenarioIds')
        return self


class GetScenarioStatisticsListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScenarioStatisticsListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetScenarioStatisticsListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetScenarioStatisticsListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetScenarioStatisticsListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetScenarioStatisticsListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSceneByIdRequest(TeaModel):
    def __init__(self, id=None, metric_id=None, opera_uid=None):
        self.id = id  # type: int
        self.metric_id = metric_id  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneByIdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.metric_id is not None:
            result['MetricId'] = self.metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MetricId') is not None:
            self.metric_id = m.get('MetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetSceneByIdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, int]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneByIdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetSceneByIdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSceneByIdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSceneByIdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSceneByIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSceneDetailsListRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneDetailsListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetSceneDetailsListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, int]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneDetailsListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetSceneDetailsListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSceneDetailsListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSceneDetailsListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSceneDetailsListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSceneListRequest(TeaModel):
    def __init__(self, opera_uid=None, page_num=None, page_size=None, page_total=None, scene_type=None,
                 search_name=None, search_value=None, status=None):
        self.opera_uid = opera_uid  # type: str
        self.page_num = page_num  # type: int
        self.page_size = page_size  # type: int
        self.page_total = page_total  # type: int
        self.scene_type = scene_type  # type: str
        self.search_name = search_name  # type: str
        self.search_value = search_value  # type: str
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.search_name is not None:
            result['SearchName'] = self.search_name
        if self.search_value is not None:
            result['SearchValue'] = self.search_value
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('SearchName') is not None:
            self.search_name = m.get('SearchName')
        if m.get('SearchValue') is not None:
            self.search_value = m.get('SearchValue')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetSceneListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, int]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetSceneListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSceneListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSceneListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSceneListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSceneMetricTableRequest(TeaModel):
    def __init__(self, end=None, metric_id=None, opera_uid=None, start=None):
        self.end = end  # type: long
        self.metric_id = metric_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.start = start  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneMetricTableRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end is not None:
            result['End'] = self.end
        if self.metric_id is not None:
            result['MetricId'] = self.metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('MetricId') is not None:
            self.metric_id = m.get('MetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class GetSceneMetricTableResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSceneMetricTableResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetSceneMetricTableResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSceneMetricTableResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSceneMetricTableResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSceneMetricTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScriptEventRootCauseRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScriptEventRootCauseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetScriptEventRootCauseResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScriptEventRootCauseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetScriptEventRootCauseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetScriptEventRootCauseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetScriptEventRootCauseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetScriptEventRootCauseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSlsLogDataRequest(TeaModel):
    def __init__(self, code=None, domain=None, end_time=None, opera_uid=None, start_time=None, url=None):
        self.code = code  # type: str
        self.domain = domain  # type: str
        self.end_time = end_time  # type: long
        self.opera_uid = opera_uid  # type: str
        self.start_time = start_time  # type: long
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSlsLogDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class GetSlsLogDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSlsLogDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetSlsLogDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSlsLogDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSlsLogDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSlsLogDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSynCloudResourceListRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSynCloudResourceListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetSynCloudResourceListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: int
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSynCloudResourceListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetSynCloudResourceListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSynCloudResourceListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSynCloudResourceListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSynCloudResourceListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTagBusinessGroupListRequest(TeaModel):
    def __init__(self, opera_uid=None, tag_id=None):
        self.opera_uid = opera_uid  # type: str
        self.tag_id = tag_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTagBusinessGroupListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        return self


class GetTagBusinessGroupListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTagBusinessGroupListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetTagBusinessGroupListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetTagBusinessGroupListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTagBusinessGroupListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTagBusinessGroupListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTagDropListRequest(TeaModel):
    def __init__(self, opera_uid=None, product_id=None):
        self.opera_uid = opera_uid  # type: str
        self.product_id = product_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTagDropListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        return self


class GetTagDropListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTagDropListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetTagDropListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetTagDropListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTagDropListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTagDropListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTargetDimensionDataRequest(TeaModel):
    def __init__(self, end=None, flag=None, label=None, label_value=None, metric_id=None, opera_uid=None, start=None):
        self.end = end  # type: long
        self.flag = flag  # type: str
        self.label = label  # type: str
        self.label_value = label_value  # type: str
        self.metric_id = metric_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.start = start  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTargetDimensionDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end is not None:
            result['End'] = self.end
        if self.flag is not None:
            result['Flag'] = self.flag
        if self.label is not None:
            result['Label'] = self.label
        if self.label_value is not None:
            result['LabelValue'] = self.label_value
        if self.metric_id is not None:
            result['MetricId'] = self.metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('Flag') is not None:
            self.flag = m.get('Flag')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('LabelValue') is not None:
            self.label_value = m.get('LabelValue')
        if m.get('MetricId') is not None:
            self.metric_id = m.get('MetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class GetTargetDimensionDataResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTargetDimensionDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetTargetDimensionDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetTargetDimensionDataResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTargetDimensionDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTargetDimensionDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetThresholdListRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetThresholdListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetThresholdListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetThresholdListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetThresholdListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetThresholdListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetThresholdListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetThresholdListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetThroughPutRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetThroughPutRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetThroughPutResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetThroughPutResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetThroughPutResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetThroughPutResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetThroughPutResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetThroughPutResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTrendSlsReportsRequest(TeaModel):
    def __init__(self, instance_id=None, product_code=None, severity=None, uid=None):
        self.instance_id = instance_id  # type: str
        self.product_code = product_code  # type: str
        self.severity = severity  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTrendSlsReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.severity is not None:
            result['Severity'] = self.severity
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('Severity') is not None:
            self.severity = m.get('Severity')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class GetTrendSlsReportsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTrendSlsReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetTrendSlsReportsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetTrendSlsReportsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTrendSlsReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTrendSlsReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserInfoRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetUserInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetUserInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetUserInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserLoginInfoRequest(TeaModel):
    def __init__(self, account_name=None, account_principal_name=None, account_type=None, current_pk=None,
                 main_account_pk=None):
        self.account_name = account_name  # type: str
        self.account_principal_name = account_principal_name  # type: str
        self.account_type = account_type  # type: str
        self.current_pk = current_pk  # type: str
        self.main_account_pk = main_account_pk  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserLoginInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_name is not None:
            result['AccountName'] = self.account_name
        if self.account_principal_name is not None:
            result['AccountPrincipalName'] = self.account_principal_name
        if self.account_type is not None:
            result['AccountType'] = self.account_type
        if self.current_pk is not None:
            result['CurrentPk'] = self.current_pk
        if self.main_account_pk is not None:
            result['MainAccountPk'] = self.main_account_pk
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountName') is not None:
            self.account_name = m.get('AccountName')
        if m.get('AccountPrincipalName') is not None:
            self.account_principal_name = m.get('AccountPrincipalName')
        if m.get('AccountType') is not None:
            self.account_type = m.get('AccountType')
        if m.get('CurrentPk') is not None:
            self.current_pk = m.get('CurrentPk')
        if m.get('MainAccountPk') is not None:
            self.main_account_pk = m.get('MainAccountPk')
        return self


class GetUserLoginInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserLoginInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetUserLoginInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetUserLoginInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserLoginInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserLoginInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserOrderConfigRequest(TeaModel):
    def __init__(self, opera_uid=None):
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserOrderConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class GetUserOrderConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetUserOrderConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetUserOrderConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetUserOrderConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetUserOrderConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetUserOrderConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IgnoreAlarmsRequest(TeaModel):
    def __init__(self, alarm_id=None):
        self.alarm_id = alarm_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IgnoreAlarmsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_id is not None:
            result['AlarmId'] = self.alarm_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmId') is not None:
            self.alarm_id = m.get('AlarmId')
        return self


class IgnoreAlarmsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: str
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IgnoreAlarmsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class IgnoreAlarmsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: IgnoreAlarmsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(IgnoreAlarmsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IgnoreAlarmsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListApplyAuthorizationRequest(TeaModel):
    def __init__(self, current_page=None, page_size=None, permission_type=None, switch_front_opera_uid=None,
                 type=None, uid=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.permission_type = permission_type  # type: int
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.type = type  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListApplyAuthorizationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.permission_type is not None:
            result['PermissionType'] = self.permission_type
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.type is not None:
            result['Type'] = self.type
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PermissionType') is not None:
            self.permission_type = m.get('PermissionType')
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class ListApplyAuthorizationResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListApplyAuthorizationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListApplyAuthorizationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListApplyAuthorizationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListApplyAuthorizationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListApplyAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAuthRequest(TeaModel):
    def __init__(self, user_id=None):
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAuthRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListAuthResponseBody(TeaModel):
    def __init__(self, list=None, message=None, request_id=None):
        self.list = list  # type: list[str]
        self.message = message  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAuthResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('List') is not None:
            self.list = m.get('List')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListAuthResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListAuthResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAuthResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAuthResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAuthorizedUidResponseBody(TeaModel):
    def __init__(self, code=None, list=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.list = list  # type: list[long]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAuthorizedUidResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.list is not None:
            result['List'] = self.list
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('List') is not None:
            self.list = m.get('List')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListAuthorizedUidResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListAuthorizedUidResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAuthorizedUidResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAuthorizedUidResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCausePlanRequest(TeaModel):
    def __init__(self, event_id=None, instance_id=None, root_cause_id=None):
        self.event_id = event_id  # type: str
        self.instance_id = instance_id  # type: str
        self.root_cause_id = root_cause_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCausePlanRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.root_cause_id is not None:
            result['RootCauseId'] = self.root_cause_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RootCauseId') is not None:
            self.root_cause_id = m.get('RootCauseId')
        return self


class ListCausePlanResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListCausePlanResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListCausePlanResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListCausePlanResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListCausePlanResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListCausePlanResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListConfirmAuthorizationRequest(TeaModel):
    def __init__(self, current_page=None, page_size=None, permission_type=None, switch_front_opera_uid=None,
                 type=None, uid=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.permission_type = permission_type  # type: int
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.type = type  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfirmAuthorizationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.permission_type is not None:
            result['PermissionType'] = self.permission_type
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.type is not None:
            result['Type'] = self.type
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PermissionType') is not None:
            self.permission_type = m.get('PermissionType')
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class ListConfirmAuthorizationResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfirmAuthorizationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListConfirmAuthorizationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListConfirmAuthorizationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListConfirmAuthorizationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListConfirmAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventRequest(TeaModel):
    def __init__(self, current_page=None, page_size=None, uid=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class ListEventResponseBody(TeaModel):
    def __init__(self, code=None, list=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: long
        self.list = list  # type: list[dict[str, any]]
        self.message = message  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.list is not None:
            result['List'] = self.list
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('List') is not None:
            self.list = m.get('List')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListEventResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNotAuthorizedUidResponseBody(TeaModel):
    def __init__(self, code=None, list=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.list = list  # type: list[long]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNotAuthorizedUidResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.list is not None:
            result['List'] = self.list
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('List') is not None:
            self.list = m.get('List')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListNotAuthorizedUidResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListNotAuthorizedUidResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListNotAuthorizedUidResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNotAuthorizedUidResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListReportsRequest(TeaModel):
    def __init__(self, current_page=None, page_size=None, uid=None):
        self.current_page = current_page  # type: int
        self.page_size = page_size  # type: int
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class ListReportsResponseBodyData(TeaModel):
    def __init__(self, bid=None, cid=None, cost_count=None, cost_count_trend_json=None, critical_count=None,
                 critical_count_trend_json=None, customer_name=None, gc_level=None, gmt_create=None, gmt_modified=None, id=None,
                 normal_count=None, normal_count_trend_json=None, score=None, score_trend_json=None, trend_json=None, uid=None,
                 warning_count=None, warning_count_trend_json=None):
        self.bid = bid  # type: str
        self.cid = cid  # type: long
        self.cost_count = cost_count  # type: long
        self.cost_count_trend_json = cost_count_trend_json  # type: str
        self.critical_count = critical_count  # type: long
        self.critical_count_trend_json = critical_count_trend_json  # type: str
        self.customer_name = customer_name  # type: str
        self.gc_level = gc_level  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.normal_count = normal_count  # type: long
        self.normal_count_trend_json = normal_count_trend_json  # type: str
        self.score = score  # type: long
        self.score_trend_json = score_trend_json  # type: str
        self.trend_json = trend_json  # type: str
        self.uid = uid  # type: long
        self.warning_count = warning_count  # type: long
        self.warning_count_trend_json = warning_count_trend_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListReportsResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid is not None:
            result['bid'] = self.bid
        if self.cid is not None:
            result['cid'] = self.cid
        if self.cost_count is not None:
            result['costCount'] = self.cost_count
        if self.cost_count_trend_json is not None:
            result['costCountTrendJson'] = self.cost_count_trend_json
        if self.critical_count is not None:
            result['criticalCount'] = self.critical_count
        if self.critical_count_trend_json is not None:
            result['criticalCountTrendJson'] = self.critical_count_trend_json
        if self.customer_name is not None:
            result['customerName'] = self.customer_name
        if self.gc_level is not None:
            result['gcLevel'] = self.gc_level
        if self.gmt_create is not None:
            result['gmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmtModified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.normal_count is not None:
            result['normalCount'] = self.normal_count
        if self.normal_count_trend_json is not None:
            result['normalCountTrendJson'] = self.normal_count_trend_json
        if self.score is not None:
            result['score'] = self.score
        if self.score_trend_json is not None:
            result['scoreTrendJson'] = self.score_trend_json
        if self.trend_json is not None:
            result['trendJson'] = self.trend_json
        if self.uid is not None:
            result['uid'] = self.uid
        if self.warning_count is not None:
            result['warningCount'] = self.warning_count
        if self.warning_count_trend_json is not None:
            result['warningCountTrendJson'] = self.warning_count_trend_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bid') is not None:
            self.bid = m.get('bid')
        if m.get('cid') is not None:
            self.cid = m.get('cid')
        if m.get('costCount') is not None:
            self.cost_count = m.get('costCount')
        if m.get('costCountTrendJson') is not None:
            self.cost_count_trend_json = m.get('costCountTrendJson')
        if m.get('criticalCount') is not None:
            self.critical_count = m.get('criticalCount')
        if m.get('criticalCountTrendJson') is not None:
            self.critical_count_trend_json = m.get('criticalCountTrendJson')
        if m.get('customerName') is not None:
            self.customer_name = m.get('customerName')
        if m.get('gcLevel') is not None:
            self.gc_level = m.get('gcLevel')
        if m.get('gmtCreate') is not None:
            self.gmt_create = m.get('gmtCreate')
        if m.get('gmtModified') is not None:
            self.gmt_modified = m.get('gmtModified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('normalCount') is not None:
            self.normal_count = m.get('normalCount')
        if m.get('normalCountTrendJson') is not None:
            self.normal_count_trend_json = m.get('normalCountTrendJson')
        if m.get('score') is not None:
            self.score = m.get('score')
        if m.get('scoreTrendJson') is not None:
            self.score_trend_json = m.get('scoreTrendJson')
        if m.get('trendJson') is not None:
            self.trend_json = m.get('trendJson')
        if m.get('uid') is not None:
            self.uid = m.get('uid')
        if m.get('warningCount') is not None:
            self.warning_count = m.get('warningCount')
        if m.get('warningCountTrendJson') is not None:
            self.warning_count_trend_json = m.get('warningCountTrendJson')
        return self


class ListReportsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[ListReportsResponseBodyData]
        self.message = message  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListReportsResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListReportsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListReportsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRootCauseRequest(TeaModel):
    def __init__(self, event_id=None, instance_id=None, root_cause_id=None):
        self.event_id = event_id  # type: str
        self.instance_id = instance_id  # type: str
        self.root_cause_id = root_cause_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRootCauseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.root_cause_id is not None:
            result['RootCauseId'] = self.root_cause_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RootCauseId') is not None:
            self.root_cause_id = m.get('RootCauseId')
        return self


class ListRootCauseResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRootCauseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListRootCauseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListRootCauseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRootCauseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListRootCauseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSlsReportsRequest(TeaModel):
    def __init__(self, current_page=None, instance_id=None, log_store=None, page_size=None, product_code=None,
                 severity=None, uid=None):
        self.current_page = current_page  # type: int
        self.instance_id = instance_id  # type: str
        self.log_store = log_store  # type: str
        self.page_size = page_size  # type: int
        self.product_code = product_code  # type: str
        self.severity = severity  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSlsReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.log_store is not None:
            result['LogStore'] = self.log_store
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.severity is not None:
            result['Severity'] = self.severity
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LogStore') is not None:
            self.log_store = m.get('LogStore')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('Severity') is not None:
            self.severity = m.get('Severity')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class ListSlsReportsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: list[dict[str, any]]
        self.message = message  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSlsReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListSlsReportsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListSlsReportsResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSlsReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListSlsReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAlertContactRequest(TeaModel):
    def __init__(self, email=None, id=None, name=None, opera_uid=None, phone=None, webhook=None):
        self.email = email  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.phone = phone  # type: str
        self.webhook = webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertContactRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.webhook is not None:
            result['Webhook'] = self.webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Webhook') is not None:
            self.webhook = m.get('Webhook')
        return self


class PutAlertContactResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertContactResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutAlertContactResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAlertContactResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAlertContactResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAlertContactResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAlertContactGroupRequest(TeaModel):
    def __init__(self, alert_contact_group_json=None, contact_ids_json=None, opera_uid=None):
        self.alert_contact_group_json = alert_contact_group_json  # type: str
        self.contact_ids_json = contact_ids_json  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertContactGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_contact_group_json is not None:
            result['AlertContactGroupJson'] = self.alert_contact_group_json
        if self.contact_ids_json is not None:
            result['ContactIdsJson'] = self.contact_ids_json
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertContactGroupJson') is not None:
            self.alert_contact_group_json = m.get('AlertContactGroupJson')
        if m.get('ContactIdsJson') is not None:
            self.contact_ids_json = m.get('ContactIdsJson')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class PutAlertContactGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertContactGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutAlertContactGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAlertContactGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAlertContactGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAlertContactGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAlertContactToGroupRequest(TeaModel):
    def __init__(self, contact_id_list_json=None, group_id=None, group_id_list_json=None, opera_uid=None):
        self.contact_id_list_json = contact_id_list_json  # type: str
        self.group_id = group_id  # type: long
        self.group_id_list_json = group_id_list_json  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertContactToGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id_list_json is not None:
            result['ContactIdListJson'] = self.contact_id_list_json
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.group_id_list_json is not None:
            result['GroupIdListJson'] = self.group_id_list_json
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ContactIdListJson') is not None:
            self.contact_id_list_json = m.get('ContactIdListJson')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('GroupIdListJson') is not None:
            self.group_id_list_json = m.get('GroupIdListJson')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class PutAlertContactToGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertContactToGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutAlertContactToGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAlertContactToGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAlertContactToGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAlertContactToGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAlertIgnoreRequest(TeaModel):
    def __init__(self, alert_id=None, opera_uid=None):
        self.alert_id = alert_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertIgnoreRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_id is not None:
            result['AlertId'] = self.alert_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertId') is not None:
            self.alert_id = m.get('AlertId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class PutAlertIgnoreResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertIgnoreResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutAlertIgnoreResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAlertIgnoreResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAlertIgnoreResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAlertIgnoreResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAlertSettingRequest(TeaModel):
    def __init__(self, alarm_level=None, alert_name=None, alert_setting_id=None, alert_silence_config=None,
                 business_group_ids_json=None, contact_group_ids_json=None, contact_ids_json=None, customer_uid=None, opera_uid=None,
                 send_dingtalk_notice=None, send_email_notice=None, send_sms_notice=None, stop_duration=None):
        self.alarm_level = alarm_level  # type: str
        self.alert_name = alert_name  # type: str
        self.alert_setting_id = alert_setting_id  # type: long
        self.alert_silence_config = alert_silence_config  # type: str
        self.business_group_ids_json = business_group_ids_json  # type: str
        self.contact_group_ids_json = contact_group_ids_json  # type: str
        self.contact_ids_json = contact_ids_json  # type: str
        self.customer_uid = customer_uid  # type: long
        self.opera_uid = opera_uid  # type: str
        self.send_dingtalk_notice = send_dingtalk_notice  # type: bool
        self.send_email_notice = send_email_notice  # type: bool
        self.send_sms_notice = send_sms_notice  # type: bool
        self.stop_duration = stop_duration  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertSettingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_level is not None:
            result['AlarmLevel'] = self.alarm_level
        if self.alert_name is not None:
            result['AlertName'] = self.alert_name
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        if self.alert_silence_config is not None:
            result['AlertSilenceConfig'] = self.alert_silence_config
        if self.business_group_ids_json is not None:
            result['BusinessGroupIdsJson'] = self.business_group_ids_json
        if self.contact_group_ids_json is not None:
            result['ContactGroupIdsJson'] = self.contact_group_ids_json
        if self.contact_ids_json is not None:
            result['ContactIdsJson'] = self.contact_ids_json
        if self.customer_uid is not None:
            result['CustomerUid'] = self.customer_uid
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.send_dingtalk_notice is not None:
            result['SendDingtalkNotice'] = self.send_dingtalk_notice
        if self.send_email_notice is not None:
            result['SendEmailNotice'] = self.send_email_notice
        if self.send_sms_notice is not None:
            result['SendSmsNotice'] = self.send_sms_notice
        if self.stop_duration is not None:
            result['StopDuration'] = self.stop_duration
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmLevel') is not None:
            self.alarm_level = m.get('AlarmLevel')
        if m.get('AlertName') is not None:
            self.alert_name = m.get('AlertName')
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        if m.get('AlertSilenceConfig') is not None:
            self.alert_silence_config = m.get('AlertSilenceConfig')
        if m.get('BusinessGroupIdsJson') is not None:
            self.business_group_ids_json = m.get('BusinessGroupIdsJson')
        if m.get('ContactGroupIdsJson') is not None:
            self.contact_group_ids_json = m.get('ContactGroupIdsJson')
        if m.get('ContactIdsJson') is not None:
            self.contact_ids_json = m.get('ContactIdsJson')
        if m.get('CustomerUid') is not None:
            self.customer_uid = m.get('CustomerUid')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SendDingtalkNotice') is not None:
            self.send_dingtalk_notice = m.get('SendDingtalkNotice')
        if m.get('SendEmailNotice') is not None:
            self.send_email_notice = m.get('SendEmailNotice')
        if m.get('SendSmsNotice') is not None:
            self.send_sms_notice = m.get('SendSmsNotice')
        if m.get('StopDuration') is not None:
            self.stop_duration = m.get('StopDuration')
        return self


class PutAlertSettingResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertSettingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutAlertSettingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAlertSettingResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAlertSettingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAlertSettingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAlertSettingListRequest(TeaModel):
    def __init__(self, alert_setting_edit_request_list_json=None, contact_group_ids_json=None,
                 contact_ids_json=None):
        self.alert_setting_edit_request_list_json = alert_setting_edit_request_list_json  # type: str
        self.contact_group_ids_json = contact_group_ids_json  # type: str
        self.contact_ids_json = contact_ids_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertSettingListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_edit_request_list_json is not None:
            result['AlertSettingEditRequestListJson'] = self.alert_setting_edit_request_list_json
        if self.contact_group_ids_json is not None:
            result['ContactGroupIdsJson'] = self.contact_group_ids_json
        if self.contact_ids_json is not None:
            result['ContactIdsJson'] = self.contact_ids_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingEditRequestListJson') is not None:
            self.alert_setting_edit_request_list_json = m.get('AlertSettingEditRequestListJson')
        if m.get('ContactGroupIdsJson') is not None:
            self.contact_group_ids_json = m.get('ContactGroupIdsJson')
        if m.get('ContactIdsJson') is not None:
            self.contact_ids_json = m.get('ContactIdsJson')
        return self


class PutAlertSettingListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertSettingListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutAlertSettingListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAlertSettingListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAlertSettingListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAlertSettingListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutAlertSettingStatusRequest(TeaModel):
    def __init__(self, alert_setting_id=None, opera_uid=None, setting_status=None):
        self.alert_setting_id = alert_setting_id  # type: long
        self.opera_uid = opera_uid  # type: str
        self.setting_status = setting_status  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertSettingStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.setting_status is not None:
            result['SettingStatus'] = self.setting_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SettingStatus') is not None:
            self.setting_status = m.get('SettingStatus')
        return self


class PutAlertSettingStatusResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutAlertSettingStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutAlertSettingStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutAlertSettingStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutAlertSettingStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutAlertSettingStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutDataSourceConfigRequest(TeaModel):
    def __init__(self, data_source_describe=None, data_source_name=None, data_source_params=None,
                 data_source_params_mapping=None, data_source_type=None, opera_uid=None):
        self.data_source_describe = data_source_describe  # type: str
        self.data_source_name = data_source_name  # type: str
        self.data_source_params = data_source_params  # type: str
        self.data_source_params_mapping = data_source_params_mapping  # type: str
        self.data_source_type = data_source_type  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutDataSourceConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_describe is not None:
            result['DataSourceDescribe'] = self.data_source_describe
        if self.data_source_name is not None:
            result['DataSourceName'] = self.data_source_name
        if self.data_source_params is not None:
            result['DataSourceParams'] = self.data_source_params
        if self.data_source_params_mapping is not None:
            result['DataSourceParamsMapping'] = self.data_source_params_mapping
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataSourceDescribe') is not None:
            self.data_source_describe = m.get('DataSourceDescribe')
        if m.get('DataSourceName') is not None:
            self.data_source_name = m.get('DataSourceName')
        if m.get('DataSourceParams') is not None:
            self.data_source_params = m.get('DataSourceParams')
        if m.get('DataSourceParamsMapping') is not None:
            self.data_source_params_mapping = m.get('DataSourceParamsMapping')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class PutDataSourceConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutDataSourceConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutDataSourceConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutDataSourceConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutDataSourceConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutDataSourceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutGroupResourceTagRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None, product_id=None, resources=None, tag_id=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_id = product_id  # type: str
        self.resources = resources  # type: str
        self.tag_id = tag_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutGroupResourceTagRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.resources is not None:
            result['Resources'] = self.resources
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('Resources') is not None:
            self.resources = m.get('Resources')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        return self


class PutGroupResourceTagResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutGroupResourceTagResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutGroupResourceTagResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutGroupResourceTagResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutGroupResourceTagResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutGroupResourceTagResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutGroupTopologyTagLogRequest(TeaModel):
    def __init__(self, business_group_id=None, opera_uid=None, topology_tag=None, topology_tag_show=None):
        self.business_group_id = business_group_id  # type: str
        self.opera_uid = opera_uid  # type: str
        self.topology_tag = topology_tag  # type: str
        self.topology_tag_show = topology_tag_show  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutGroupTopologyTagLogRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.topology_tag is not None:
            result['TopologyTag'] = self.topology_tag
        if self.topology_tag_show is not None:
            result['TopologyTagShow'] = self.topology_tag_show
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('TopologyTag') is not None:
            self.topology_tag = m.get('TopologyTag')
        if m.get('TopologyTagShow') is not None:
            self.topology_tag_show = m.get('TopologyTagShow')
        return self


class PutGroupTopologyTagLogResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutGroupTopologyTagLogResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutGroupTopologyTagLogResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutGroupTopologyTagLogResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutGroupTopologyTagLogResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutGroupTopologyTagLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutReportEmailConfigRequest(TeaModel):
    def __init__(self, email=None, opera_uid=None):
        self.email = email  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutReportEmailConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class PutReportEmailConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutReportEmailConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutReportEmailConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutReportEmailConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutReportEmailConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutReportEmailConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PutResourceWhitelistRequest(TeaModel):
    def __init__(self, opera_uid=None, product_code=None, resource_id=None):
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str
        self.resource_id = resource_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutResourceWhitelistRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class PutResourceWhitelistResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PutResourceWhitelistResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class PutResourceWhitelistResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: PutResourceWhitelistResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(PutResourceWhitelistResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PutResourceWhitelistResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReplaceScriptListRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None, scene_id=None, type=None):
        self.id = id  # type: int
        self.opera_uid = opera_uid  # type: str
        self.scene_id = scene_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReplaceScriptListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ReplaceScriptListResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReplaceScriptListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ReplaceScriptListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ReplaceScriptListResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ReplaceScriptListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ReplaceScriptListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RevokeSubmitApplyPermissionRequest(TeaModel):
    def __init__(self, switch_front_opera_uid=None, type=None, uid=None):
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.type = type  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(RevokeSubmitApplyPermissionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.type is not None:
            result['Type'] = self.type
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class RevokeSubmitApplyPermissionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RevokeSubmitApplyPermissionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class RevokeSubmitApplyPermissionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RevokeSubmitApplyPermissionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RevokeSubmitApplyPermissionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RevokeSubmitApplyPermissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunAnalysisProcessRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunAnalysisProcessRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class RunAnalysisProcessResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunAnalysisProcessResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class RunAnalysisProcessResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunAnalysisProcessResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunAnalysisProcessResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunAnalysisProcessResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunCommandRequest(TeaModel):
    def __init__(self, command_content=None, instance_ids=None, name=None, region_id=None, type=None):
        self.command_content = command_content  # type: str
        self.instance_ids = instance_ids  # type: str
        self.name = name  # type: str
        self.region_id = region_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunCommandRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.command_content is not None:
            result['CommandContent'] = self.command_content
        if self.instance_ids is not None:
            result['InstanceIds'] = self.instance_ids
        if self.name is not None:
            result['Name'] = self.name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CommandContent') is not None:
            self.command_content = m.get('CommandContent')
        if m.get('InstanceIds') is not None:
            self.instance_ids = m.get('InstanceIds')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class RunCommandResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunCommandResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class RunCommandResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunCommandResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunCommandResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunCommandResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunForecastAnalyzeRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunForecastAnalyzeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class RunForecastAnalyzeResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunForecastAnalyzeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class RunForecastAnalyzeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunForecastAnalyzeResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunForecastAnalyzeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunForecastAnalyzeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunPatrolInspectionRequest(TeaModel):
    def __init__(self, opera_uid=None, product_codes=None, risk_code_list=None):
        self.opera_uid = opera_uid  # type: str
        self.product_codes = product_codes  # type: str
        self.risk_code_list = risk_code_list  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunPatrolInspectionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_codes is not None:
            result['ProductCodes'] = self.product_codes
        if self.risk_code_list is not None:
            result['RiskCodeList'] = self.risk_code_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCodes') is not None:
            self.product_codes = m.get('ProductCodes')
        if m.get('RiskCodeList') is not None:
            self.risk_code_list = m.get('RiskCodeList')
        return self


class RunPatrolInspectionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunPatrolInspectionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class RunPatrolInspectionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunPatrolInspectionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunPatrolInspectionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunPatrolInspectionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunRepairScriptRequest(TeaModel):
    def __init__(self, event_id=None, opera_uid=None):
        self.event_id = event_id  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunRepairScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class RunRepairScriptResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunRepairScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class RunRepairScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunRepairScriptResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunRepairScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunRepairScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RunRiskPatrolRequest(TeaModel):
    def __init__(self, opera_uid=None, risk_patrol_types=None):
        self.opera_uid = opera_uid  # type: str
        self.risk_patrol_types = risk_patrol_types  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunRiskPatrolRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.risk_patrol_types is not None:
            result['RiskPatrolTypes'] = self.risk_patrol_types
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RiskPatrolTypes') is not None:
            self.risk_patrol_types = m.get('RiskPatrolTypes')
        return self


class RunRiskPatrolResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RunRiskPatrolResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class RunRiskPatrolResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RunRiskPatrolResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RunRiskPatrolResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RunRiskPatrolResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchUserTopRequest(TeaModel):
    def __init__(self, switch_front_opera_uid=None, type=None, uid=None):
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.type = type  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchUserTopRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.type is not None:
            result['Type'] = self.type
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class SwitchUserTopResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SwitchUserTopResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class SwitchUserTopResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SwitchUserTopResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SwitchUserTopResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchUserTopResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdBusinessGroupRequest(TeaModel):
    def __init__(self, ali_uid=None, business_group_desc=None, business_group_id=None, business_group_name=None,
                 instance_list=None, resource_type=None, update_user=None):
        self.ali_uid = ali_uid  # type: str
        self.business_group_desc = business_group_desc  # type: str
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str
        self.instance_list = instance_list  # type: list[str]
        self.resource_type = resource_type  # type: int
        self.update_user = update_user  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdBusinessGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.business_group_desc is not None:
            result['BusinessGroupDesc'] = self.business_group_desc
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.instance_list is not None:
            result['InstanceList'] = self.instance_list
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.update_user is not None:
            result['UpdateUser'] = self.update_user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('BusinessGroupDesc') is not None:
            self.business_group_desc = m.get('BusinessGroupDesc')
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('InstanceList') is not None:
            self.instance_list = m.get('InstanceList')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('UpdateUser') is not None:
            self.update_user = m.get('UpdateUser')
        return self


class UpdBusinessGroupShrinkRequest(TeaModel):
    def __init__(self, ali_uid=None, business_group_desc=None, business_group_id=None, business_group_name=None,
                 instance_list_shrink=None, resource_type=None, update_user=None):
        self.ali_uid = ali_uid  # type: str
        self.business_group_desc = business_group_desc  # type: str
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str
        self.instance_list_shrink = instance_list_shrink  # type: str
        self.resource_type = resource_type  # type: int
        self.update_user = update_user  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdBusinessGroupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.business_group_desc is not None:
            result['BusinessGroupDesc'] = self.business_group_desc
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.instance_list_shrink is not None:
            result['InstanceList'] = self.instance_list_shrink
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.update_user is not None:
            result['UpdateUser'] = self.update_user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('BusinessGroupDesc') is not None:
            self.business_group_desc = m.get('BusinessGroupDesc')
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('InstanceList') is not None:
            self.instance_list_shrink = m.get('InstanceList')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('UpdateUser') is not None:
            self.update_user = m.get('UpdateUser')
        return self


class UpdBusinessGroupResponseBody(TeaModel):
    def __init__(self, code=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdBusinessGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdBusinessGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdBusinessGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdBusinessGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdBusinessGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAuthorizationRequest(TeaModel):
    def __init__(self, type=None, user_id=None):
        self.type = type  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAuthorizationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class UpdateAuthorizationResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateAuthorizationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateAuthorizationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateAuthorizationResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateAuthorizationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBindMetricRequest(TeaModel):
    def __init__(self, id=None, metric_id=None, opera_uid=None):
        self.id = id  # type: str
        self.metric_id = metric_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBindMetricRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.metric_id is not None:
            result['MetricId'] = self.metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MetricId') is not None:
            self.metric_id = m.get('MetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateBindMetricResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBindMetricResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateBindMetricResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateBindMetricResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateBindMetricResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateBindMetricResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBusinessGroupRequest(TeaModel):
    def __init__(self, ali_uid=None, business_group_desc=None, business_group_id=None, business_group_name=None,
                 cloud_resource_type_id=None, deal_type=None, instance_list=None, opera_uid=None, resource_type=None, update_user=None):
        self.ali_uid = ali_uid  # type: str
        self.business_group_desc = business_group_desc  # type: str
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str
        self.cloud_resource_type_id = cloud_resource_type_id  # type: str
        self.deal_type = deal_type  # type: int
        self.instance_list = instance_list  # type: list[str]
        self.opera_uid = opera_uid  # type: str
        self.resource_type = resource_type  # type: int
        self.update_user = update_user  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBusinessGroupRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.business_group_desc is not None:
            result['BusinessGroupDesc'] = self.business_group_desc
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.cloud_resource_type_id is not None:
            result['CloudResourceTypeId'] = self.cloud_resource_type_id
        if self.deal_type is not None:
            result['DealType'] = self.deal_type
        if self.instance_list is not None:
            result['InstanceList'] = self.instance_list
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.update_user is not None:
            result['UpdateUser'] = self.update_user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('BusinessGroupDesc') is not None:
            self.business_group_desc = m.get('BusinessGroupDesc')
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('CloudResourceTypeId') is not None:
            self.cloud_resource_type_id = m.get('CloudResourceTypeId')
        if m.get('DealType') is not None:
            self.deal_type = m.get('DealType')
        if m.get('InstanceList') is not None:
            self.instance_list = m.get('InstanceList')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('UpdateUser') is not None:
            self.update_user = m.get('UpdateUser')
        return self


class UpdateBusinessGroupShrinkRequest(TeaModel):
    def __init__(self, ali_uid=None, business_group_desc=None, business_group_id=None, business_group_name=None,
                 cloud_resource_type_id=None, deal_type=None, instance_list_shrink=None, opera_uid=None, resource_type=None,
                 update_user=None):
        self.ali_uid = ali_uid  # type: str
        self.business_group_desc = business_group_desc  # type: str
        self.business_group_id = business_group_id  # type: str
        self.business_group_name = business_group_name  # type: str
        self.cloud_resource_type_id = cloud_resource_type_id  # type: str
        self.deal_type = deal_type  # type: int
        self.instance_list_shrink = instance_list_shrink  # type: str
        self.opera_uid = opera_uid  # type: str
        self.resource_type = resource_type  # type: int
        self.update_user = update_user  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBusinessGroupShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.business_group_desc is not None:
            result['BusinessGroupDesc'] = self.business_group_desc
        if self.business_group_id is not None:
            result['BusinessGroupId'] = self.business_group_id
        if self.business_group_name is not None:
            result['BusinessGroupName'] = self.business_group_name
        if self.cloud_resource_type_id is not None:
            result['CloudResourceTypeId'] = self.cloud_resource_type_id
        if self.deal_type is not None:
            result['DealType'] = self.deal_type
        if self.instance_list_shrink is not None:
            result['InstanceList'] = self.instance_list_shrink
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.update_user is not None:
            result['UpdateUser'] = self.update_user
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('BusinessGroupDesc') is not None:
            self.business_group_desc = m.get('BusinessGroupDesc')
        if m.get('BusinessGroupId') is not None:
            self.business_group_id = m.get('BusinessGroupId')
        if m.get('BusinessGroupName') is not None:
            self.business_group_name = m.get('BusinessGroupName')
        if m.get('CloudResourceTypeId') is not None:
            self.cloud_resource_type_id = m.get('CloudResourceTypeId')
        if m.get('DealType') is not None:
            self.deal_type = m.get('DealType')
        if m.get('InstanceList') is not None:
            self.instance_list_shrink = m.get('InstanceList')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('UpdateUser') is not None:
            self.update_user = m.get('UpdateUser')
        return self


class UpdateBusinessGroupResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBusinessGroupResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateBusinessGroupResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateBusinessGroupResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateBusinessGroupResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateBusinessGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBusinessMetricAlertConfigRequest(TeaModel):
    def __init__(self, alert_config_id=None, configs=None, metric_id=None, opera_uid=None):
        self.alert_config_id = alert_config_id  # type: long
        self.configs = configs  # type: str
        self.metric_id = metric_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBusinessMetricAlertConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_config_id is not None:
            result['AlertConfigId'] = self.alert_config_id
        if self.configs is not None:
            result['Configs'] = self.configs
        if self.metric_id is not None:
            result['MetricId'] = self.metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertConfigId') is not None:
            self.alert_config_id = m.get('AlertConfigId')
        if m.get('Configs') is not None:
            self.configs = m.get('Configs')
        if m.get('MetricId') is not None:
            self.metric_id = m.get('MetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateBusinessMetricAlertConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBusinessMetricAlertConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateBusinessMetricAlertConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateBusinessMetricAlertConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateBusinessMetricAlertConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateBusinessMetricAlertConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBusinessMetricResourceRequest(TeaModel):
    def __init__(self, business_metric_id=None, opera_uid=None, resource_list=None):
        self.business_metric_id = business_metric_id  # type: long
        self.opera_uid = opera_uid  # type: str
        self.resource_list = resource_list  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBusinessMetricResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_metric_id is not None:
            result['BusinessMetricId'] = self.business_metric_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.resource_list is not None:
            result['ResourceList'] = self.resource_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessMetricId') is not None:
            self.business_metric_id = m.get('BusinessMetricId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ResourceList') is not None:
            self.resource_list = m.get('ResourceList')
        return self


class UpdateBusinessMetricResourceResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateBusinessMetricResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateBusinessMetricResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateBusinessMetricResourceResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateBusinessMetricResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateBusinessMetricResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDataSourceConfigRequest(TeaModel):
    def __init__(self, data_source_describe=None, data_source_name=None, data_source_params=None,
                 data_source_params_mapping=None, data_source_type=None, id=None, opera_uid=None):
        self.data_source_describe = data_source_describe  # type: str
        self.data_source_name = data_source_name  # type: str
        self.data_source_params = data_source_params  # type: str
        self.data_source_params_mapping = data_source_params_mapping  # type: str
        self.data_source_type = data_source_type  # type: int
        self.id = id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDataSourceConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_source_describe is not None:
            result['DataSourceDescribe'] = self.data_source_describe
        if self.data_source_name is not None:
            result['DataSourceName'] = self.data_source_name
        if self.data_source_params is not None:
            result['DataSourceParams'] = self.data_source_params
        if self.data_source_params_mapping is not None:
            result['DataSourceParamsMapping'] = self.data_source_params_mapping
        if self.data_source_type is not None:
            result['DataSourceType'] = self.data_source_type
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataSourceDescribe') is not None:
            self.data_source_describe = m.get('DataSourceDescribe')
        if m.get('DataSourceName') is not None:
            self.data_source_name = m.get('DataSourceName')
        if m.get('DataSourceParams') is not None:
            self.data_source_params = m.get('DataSourceParams')
        if m.get('DataSourceParamsMapping') is not None:
            self.data_source_params_mapping = m.get('DataSourceParamsMapping')
        if m.get('DataSourceType') is not None:
            self.data_source_type = m.get('DataSourceType')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateDataSourceConfigResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDataSourceConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateDataSourceConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDataSourceConfigResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDataSourceConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDataSourceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateHandleRiskRequest(TeaModel):
    def __init__(self, patrol_detail_ids=None, patrol_id=None, switch_front_opera_uid=None):
        self.patrol_detail_ids = patrol_detail_ids  # type: str
        self.patrol_id = patrol_id  # type: long
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateHandleRiskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.patrol_detail_ids is not None:
            result['PatrolDetailIds'] = self.patrol_detail_ids
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PatrolDetailIds') is not None:
            self.patrol_detail_ids = m.get('PatrolDetailIds')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        return self


class UpdateHandleRiskResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateHandleRiskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateHandleRiskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateHandleRiskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateHandleRiskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateHandleRiskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateHandleRiskBaseRequest(TeaModel):
    def __init__(self, handle_describe=None, opera_uid=None, patrol_detail_ids=None, patrol_id=None):
        self.handle_describe = handle_describe  # type: str
        self.opera_uid = opera_uid  # type: str
        self.patrol_detail_ids = patrol_detail_ids  # type: str
        self.patrol_id = patrol_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateHandleRiskBaseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.handle_describe is not None:
            result['HandleDescribe'] = self.handle_describe
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.patrol_detail_ids is not None:
            result['PatrolDetailIds'] = self.patrol_detail_ids
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HandleDescribe') is not None:
            self.handle_describe = m.get('HandleDescribe')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PatrolDetailIds') is not None:
            self.patrol_detail_ids = m.get('PatrolDetailIds')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        return self


class UpdateHandleRiskBaseResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateHandleRiskBaseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateHandleRiskBaseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateHandleRiskBaseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateHandleRiskBaseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateHandleRiskBaseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateIgnoreRiskRequest(TeaModel):
    def __init__(self, patrol_detail_ids=None, patrol_id=None, switch_front_opera_uid=None):
        self.patrol_detail_ids = patrol_detail_ids  # type: str
        self.patrol_id = patrol_id  # type: long
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateIgnoreRiskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.patrol_detail_ids is not None:
            result['PatrolDetailIds'] = self.patrol_detail_ids
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PatrolDetailIds') is not None:
            self.patrol_detail_ids = m.get('PatrolDetailIds')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        return self


class UpdateIgnoreRiskResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateIgnoreRiskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateIgnoreRiskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateIgnoreRiskResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateIgnoreRiskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateIgnoreRiskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateIgnoreRiskBaseRequest(TeaModel):
    def __init__(self, handle_describe=None, opera_uid=None, patrol_detail_ids=None, patrol_id=None):
        self.handle_describe = handle_describe  # type: str
        self.opera_uid = opera_uid  # type: str
        self.patrol_detail_ids = patrol_detail_ids  # type: str
        self.patrol_id = patrol_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateIgnoreRiskBaseRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.handle_describe is not None:
            result['HandleDescribe'] = self.handle_describe
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.patrol_detail_ids is not None:
            result['PatrolDetailIds'] = self.patrol_detail_ids
        if self.patrol_id is not None:
            result['PatrolId'] = self.patrol_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HandleDescribe') is not None:
            self.handle_describe = m.get('HandleDescribe')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('PatrolDetailIds') is not None:
            self.patrol_detail_ids = m.get('PatrolDetailIds')
        if m.get('PatrolId') is not None:
            self.patrol_id = m.get('PatrolId')
        return self


class UpdateIgnoreRiskBaseResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateIgnoreRiskBaseResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateIgnoreRiskBaseResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateIgnoreRiskBaseResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateIgnoreRiskBaseResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateIgnoreRiskBaseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateInspectionSettingStatusRequest(TeaModel):
    def __init__(self, opera_uid=None, risk_code=None, risk_enable_status=None):
        self.opera_uid = opera_uid  # type: str
        self.risk_code = risk_code  # type: str
        self.risk_enable_status = risk_enable_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInspectionSettingStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.risk_code is not None:
            result['RiskCode'] = self.risk_code
        if self.risk_enable_status is not None:
            result['RiskEnableStatus'] = self.risk_enable_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RiskCode') is not None:
            self.risk_code = m.get('RiskCode')
        if m.get('RiskEnableStatus') is not None:
            self.risk_enable_status = m.get('RiskEnableStatus')
        return self


class UpdateInspectionSettingStatusResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInspectionSettingStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateInspectionSettingStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateInspectionSettingStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateInspectionSettingStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateInspectionSettingStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateInspectionThresholdRequest(TeaModel):
    def __init__(self, opera_uid=None, risk_code=None, threshold_item_list_json=None):
        self.opera_uid = opera_uid  # type: str
        self.risk_code = risk_code  # type: str
        self.threshold_item_list_json = threshold_item_list_json  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInspectionThresholdRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.risk_code is not None:
            result['RiskCode'] = self.risk_code
        if self.threshold_item_list_json is not None:
            result['ThresholdItemListJson'] = self.threshold_item_list_json
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RiskCode') is not None:
            self.risk_code = m.get('RiskCode')
        if m.get('ThresholdItemListJson') is not None:
            self.threshold_item_list_json = m.get('ThresholdItemListJson')
        return self


class UpdateInspectionThresholdResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInspectionThresholdResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateInspectionThresholdResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateInspectionThresholdResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateInspectionThresholdResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateInspectionThresholdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateOperationPermissionRequest(TeaModel):
    def __init__(self, permission_type=None, switch_front_opera_uid=None, uid=None):
        self.permission_type = permission_type  # type: int
        self.switch_front_opera_uid = switch_front_opera_uid  # type: str
        self.uid = uid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateOperationPermissionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.permission_type is not None:
            result['PermissionType'] = self.permission_type
        if self.switch_front_opera_uid is not None:
            result['SwitchFrontOperaUid'] = self.switch_front_opera_uid
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PermissionType') is not None:
            self.permission_type = m.get('PermissionType')
        if m.get('SwitchFrontOperaUid') is not None:
            self.switch_front_opera_uid = m.get('SwitchFrontOperaUid')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class UpdateOperationPermissionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateOperationPermissionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateOperationPermissionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateOperationPermissionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateOperationPermissionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateOperationPermissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateReportEmailConfigStatusRequest(TeaModel):
    def __init__(self, config_status=None, mail_config_id=None, opera_uid=None):
        self.config_status = config_status  # type: int
        self.mail_config_id = mail_config_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateReportEmailConfigStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_status is not None:
            result['ConfigStatus'] = self.config_status
        if self.mail_config_id is not None:
            result['MailConfigId'] = self.mail_config_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigStatus') is not None:
            self.config_status = m.get('ConfigStatus')
        if m.get('MailConfigId') is not None:
            self.mail_config_id = m.get('MailConfigId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateReportEmailConfigStatusResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateReportEmailConfigStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateReportEmailConfigStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateReportEmailConfigStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateReportEmailConfigStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateReportEmailConfigStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateReportSubscriptionRequest(TeaModel):
    def __init__(self, day_of_week=None, hour_of_day=None, opera_uid=None, report_name=None, subscribe=None):
        self.day_of_week = day_of_week  # type: int
        self.hour_of_day = hour_of_day  # type: int
        self.opera_uid = opera_uid  # type: str
        self.report_name = report_name  # type: str
        self.subscribe = subscribe  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateReportSubscriptionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.day_of_week is not None:
            result['DayOfWeek'] = self.day_of_week
        if self.hour_of_day is not None:
            result['HourOfDay'] = self.hour_of_day
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.report_name is not None:
            result['ReportName'] = self.report_name
        if self.subscribe is not None:
            result['Subscribe'] = self.subscribe
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DayOfWeek') is not None:
            self.day_of_week = m.get('DayOfWeek')
        if m.get('HourOfDay') is not None:
            self.hour_of_day = m.get('HourOfDay')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ReportName') is not None:
            self.report_name = m.get('ReportName')
        if m.get('Subscribe') is not None:
            self.subscribe = m.get('Subscribe')
        return self


class UpdateReportSubscriptionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: bool
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateReportSubscriptionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateReportSubscriptionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateReportSubscriptionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateReportSubscriptionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateReportSubscriptionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateScenarioRequest(TeaModel):
    def __init__(self, alert_setting_id=None, id=None, level=None, name=None, opera_uid=None):
        self.alert_setting_id = alert_setting_id  # type: long
        self.id = id  # type: str
        self.level = level  # type: long
        self.name = name  # type: str
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScenarioRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alert_setting_id is not None:
            result['AlertSettingId'] = self.alert_setting_id
        if self.id is not None:
            result['Id'] = self.id
        if self.level is not None:
            result['Level'] = self.level
        if self.name is not None:
            result['Name'] = self.name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlertSettingId') is not None:
            self.alert_setting_id = m.get('AlertSettingId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateScenarioResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, page_total=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.page_total = page_total  # type: long
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScenarioResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.page_total is not None:
            result['PageTotal'] = self.page_total
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('PageTotal') is not None:
            self.page_total = m.get('PageTotal')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateScenarioResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateScenarioResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateScenarioResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSceneRequest(TeaModel):
    def __init__(self, flow_name=None, metric_list_json=None, node_list_json=None, opera_uid=None, scene_desc=None,
                 scene_id=None, scene_name=None, scene_owner=None, scene_webhook=None):
        self.flow_name = flow_name  # type: str
        self.metric_list_json = metric_list_json  # type: str
        self.node_list_json = node_list_json  # type: str
        self.opera_uid = opera_uid  # type: str
        self.scene_desc = scene_desc  # type: str
        self.scene_id = scene_id  # type: long
        self.scene_name = scene_name  # type: str
        self.scene_owner = scene_owner  # type: str
        self.scene_webhook = scene_webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow_name is not None:
            result['FlowName'] = self.flow_name
        if self.metric_list_json is not None:
            result['MetricListJson'] = self.metric_list_json
        if self.node_list_json is not None:
            result['NodeListJson'] = self.node_list_json
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_desc is not None:
            result['SceneDesc'] = self.scene_desc
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        if self.scene_name is not None:
            result['SceneName'] = self.scene_name
        if self.scene_owner is not None:
            result['SceneOwner'] = self.scene_owner
        if self.scene_webhook is not None:
            result['SceneWebhook'] = self.scene_webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FlowName') is not None:
            self.flow_name = m.get('FlowName')
        if m.get('MetricListJson') is not None:
            self.metric_list_json = m.get('MetricListJson')
        if m.get('NodeListJson') is not None:
            self.node_list_json = m.get('NodeListJson')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneDesc') is not None:
            self.scene_desc = m.get('SceneDesc')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        if m.get('SceneName') is not None:
            self.scene_name = m.get('SceneName')
        if m.get('SceneOwner') is not None:
            self.scene_owner = m.get('SceneOwner')
        if m.get('SceneWebhook') is not None:
            self.scene_webhook = m.get('SceneWebhook')
        return self


class UpdateSceneResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSceneResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSceneModelRequest(TeaModel):
    def __init__(self, fc_function_name=None, fc_handler=None, fc_initializer=None, fc_region_no=None,
                 fc_service_name=None, model_desc=None, model_id=None, model_language=None, model_memo=None, model_name=None,
                 model_type=None, opera_uid=None, root_cause_desc=None, root_cause_solution=None):
        self.fc_function_name = fc_function_name  # type: str
        self.fc_handler = fc_handler  # type: str
        self.fc_initializer = fc_initializer  # type: str
        self.fc_region_no = fc_region_no  # type: str
        self.fc_service_name = fc_service_name  # type: str
        self.model_desc = model_desc  # type: str
        self.model_id = model_id  # type: long
        self.model_language = model_language  # type: int
        self.model_memo = model_memo  # type: str
        self.model_name = model_name  # type: str
        self.model_type = model_type  # type: int
        self.opera_uid = opera_uid  # type: str
        self.root_cause_desc = root_cause_desc  # type: str
        self.root_cause_solution = root_cause_solution  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fc_function_name is not None:
            result['FcFunctionName'] = self.fc_function_name
        if self.fc_handler is not None:
            result['FcHandler'] = self.fc_handler
        if self.fc_initializer is not None:
            result['FcInitializer'] = self.fc_initializer
        if self.fc_region_no is not None:
            result['FcRegionNo'] = self.fc_region_no
        if self.fc_service_name is not None:
            result['FcServiceName'] = self.fc_service_name
        if self.model_desc is not None:
            result['ModelDesc'] = self.model_desc
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.model_language is not None:
            result['ModelLanguage'] = self.model_language
        if self.model_memo is not None:
            result['ModelMemo'] = self.model_memo
        if self.model_name is not None:
            result['ModelName'] = self.model_name
        if self.model_type is not None:
            result['ModelType'] = self.model_type
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.root_cause_desc is not None:
            result['RootCauseDesc'] = self.root_cause_desc
        if self.root_cause_solution is not None:
            result['RootCauseSolution'] = self.root_cause_solution
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FcFunctionName') is not None:
            self.fc_function_name = m.get('FcFunctionName')
        if m.get('FcHandler') is not None:
            self.fc_handler = m.get('FcHandler')
        if m.get('FcInitializer') is not None:
            self.fc_initializer = m.get('FcInitializer')
        if m.get('FcRegionNo') is not None:
            self.fc_region_no = m.get('FcRegionNo')
        if m.get('FcServiceName') is not None:
            self.fc_service_name = m.get('FcServiceName')
        if m.get('ModelDesc') is not None:
            self.model_desc = m.get('ModelDesc')
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('ModelLanguage') is not None:
            self.model_language = m.get('ModelLanguage')
        if m.get('ModelMemo') is not None:
            self.model_memo = m.get('ModelMemo')
        if m.get('ModelName') is not None:
            self.model_name = m.get('ModelName')
        if m.get('ModelType') is not None:
            self.model_type = m.get('ModelType')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('RootCauseDesc') is not None:
            self.root_cause_desc = m.get('RootCauseDesc')
        if m.get('RootCauseSolution') is not None:
            self.root_cause_solution = m.get('RootCauseSolution')
        return self


class UpdateSceneModelResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateSceneModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSceneModelResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSceneModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSceneModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSceneModelApplyRequest(TeaModel):
    def __init__(self, apply_content=None, apply_id=None, apply_status=None, opera_uid=None):
        self.apply_content = apply_content  # type: str
        self.apply_id = apply_id  # type: long
        self.apply_status = apply_status  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneModelApplyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_content is not None:
            result['ApplyContent'] = self.apply_content
        if self.apply_id is not None:
            result['ApplyId'] = self.apply_id
        if self.apply_status is not None:
            result['ApplyStatus'] = self.apply_status
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ApplyContent') is not None:
            self.apply_content = m.get('ApplyContent')
        if m.get('ApplyId') is not None:
            self.apply_id = m.get('ApplyId')
        if m.get('ApplyStatus') is not None:
            self.apply_status = m.get('ApplyStatus')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateSceneModelApplyResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneModelApplyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateSceneModelApplyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSceneModelApplyResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSceneModelApplyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSceneModelApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSceneModelCurVersionRequest(TeaModel):
    def __init__(self, ext_id=None, model_id=None, opera_uid=None):
        self.ext_id = ext_id  # type: long
        self.model_id = model_id  # type: long
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneModelCurVersionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_id is not None:
            result['ExtId'] = self.ext_id
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExtId') is not None:
            self.ext_id = m.get('ExtId')
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateSceneModelCurVersionResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneModelCurVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateSceneModelCurVersionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSceneModelCurVersionResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSceneModelCurVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSceneModelCurVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSceneSystemModelStatusRequest(TeaModel):
    def __init__(self, model_id=None, model_status=None, opera_uid=None):
        self.model_id = model_id  # type: long
        self.model_status = model_status  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneSystemModelStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model_id is not None:
            result['ModelId'] = self.model_id
        if self.model_status is not None:
            result['ModelStatus'] = self.model_status
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ModelId') is not None:
            self.model_id = m.get('ModelId')
        if m.get('ModelStatus') is not None:
            self.model_status = m.get('ModelStatus')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateSceneSystemModelStatusResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSceneSystemModelStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateSceneSystemModelStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSceneSystemModelStatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSceneSystemModelStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSceneSystemModelStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateScenestatusRequest(TeaModel):
    def __init__(self, id=None, opera_uid=None):
        self.id = id  # type: int
        self.opera_uid = opera_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScenestatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        return self


class UpdateScenestatusResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScenestatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateScenestatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateScenestatusResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateScenestatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateScenestatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateScriptRequest(TeaModel):
    def __init__(self, handle_suggest_desc=None, id=None, metric_name=None, opera_uid=None, product_code=None,
                 root_cause_desc=None, root_causes_log=None, scene_id=None, script=None, script_language=None, script_name=None,
                 status=None, type=None):
        self.handle_suggest_desc = handle_suggest_desc  # type: str
        self.id = id  # type: int
        self.metric_name = metric_name  # type: str
        self.opera_uid = opera_uid  # type: str
        self.product_code = product_code  # type: str
        self.root_cause_desc = root_cause_desc  # type: str
        self.root_causes_log = root_causes_log  # type: str
        self.scene_id = scene_id  # type: str
        self.script = script  # type: str
        self.script_language = script_language  # type: str
        self.script_name = script_name  # type: str
        self.status = status  # type: int
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScriptRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.handle_suggest_desc is not None:
            result['HandleSuggestDesc'] = self.handle_suggest_desc
        if self.id is not None:
            result['Id'] = self.id
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.root_cause_desc is not None:
            result['RootCauseDesc'] = self.root_cause_desc
        if self.root_causes_log is not None:
            result['RootCausesLog'] = self.root_causes_log
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        if self.script is not None:
            result['Script'] = self.script
        if self.script_language is not None:
            result['ScriptLanguage'] = self.script_language
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HandleSuggestDesc') is not None:
            self.handle_suggest_desc = m.get('HandleSuggestDesc')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('RootCauseDesc') is not None:
            self.root_cause_desc = m.get('RootCauseDesc')
        if m.get('RootCausesLog') is not None:
            self.root_causes_log = m.get('RootCausesLog')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('ScriptLanguage') is not None:
            self.script_language = m.get('ScriptLanguage')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateScriptResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateScriptResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateScriptResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateScriptResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateScriptResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateStatusOfSceneRequest(TeaModel):
    def __init__(self, opera_uid=None, scene_id=None, scene_status=None):
        self.opera_uid = opera_uid  # type: str
        self.scene_id = scene_id  # type: long
        self.scene_status = scene_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateStatusOfSceneRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.scene_id is not None:
            result['SceneId'] = self.scene_id
        if self.scene_status is not None:
            result['SceneStatus'] = self.scene_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('SceneId') is not None:
            self.scene_id = m.get('SceneId')
        if m.get('SceneStatus') is not None:
            self.scene_status = m.get('SceneStatus')
        return self


class UpdateStatusOfSceneResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateStatusOfSceneResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateStatusOfSceneResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateStatusOfSceneResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateStatusOfSceneResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateStatusOfSceneResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateTagInfoRequest(TeaModel):
    def __init__(self, opera_uid=None, tag_id=None, tag_name=None):
        self.opera_uid = opera_uid  # type: str
        self.tag_id = tag_id  # type: long
        self.tag_name = tag_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTagInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.opera_uid is not None:
            result['OperaUid'] = self.opera_uid
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OperaUid') is not None:
            self.opera_uid = m.get('OperaUid')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class UpdateTagInfoResponseBody(TeaModel):
    def __init__(self, code=None, data=None, msg=None, request_id=None, status=None):
        self.code = code  # type: int
        self.data = data  # type: dict[str, any]
        self.msg = msg  # type: str
        self.request_id = request_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateTagInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class UpdateTagInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateTagInfoResponseBody

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateTagInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateTagInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


